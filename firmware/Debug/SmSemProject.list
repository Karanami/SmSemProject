
SmSemProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6a8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800c7e8  0800c7e8  0001c7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c924  0800c924  0001c924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  0800c92c  0800c92c  0001c92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c938  0800c938  0001c938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000030  20000008  0800c93c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002444  20000038  0800c96c  00020038  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000247c  0800c96c  0002247c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003e9dc  00000000  00000000  000200ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000089ed  00000000  00000000  0005ea87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003098  00000000  00000000  00067478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000251f  00000000  00000000  0006a510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000313bd  00000000  00000000  0006ca2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003a978  00000000  00000000  0009ddec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00117268  00000000  00000000  000d8764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000ccf4  00000000  00000000  001ef9cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  001fc6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000038 	.word	0x20000038
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c7d0 	.word	0x0800c7d0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000003c 	.word	0x2000003c
 800017c:	0800c7d0 	.word	0x0800c7d0

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b970 	b.w	8000478 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	460d      	mov	r5, r1
 80001b8:	4604      	mov	r4, r0
 80001ba:	460f      	mov	r7, r1
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d14a      	bne.n	8000256 <__udivmoddi4+0xa6>
 80001c0:	428a      	cmp	r2, r1
 80001c2:	4694      	mov	ip, r2
 80001c4:	d965      	bls.n	8000292 <__udivmoddi4+0xe2>
 80001c6:	fab2 f382 	clz	r3, r2
 80001ca:	b143      	cbz	r3, 80001de <__udivmoddi4+0x2e>
 80001cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80001d0:	f1c3 0220 	rsb	r2, r3, #32
 80001d4:	409f      	lsls	r7, r3
 80001d6:	fa20 f202 	lsr.w	r2, r0, r2
 80001da:	4317      	orrs	r7, r2
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001e2:	fa1f f58c 	uxth.w	r5, ip
 80001e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80001ea:	0c22      	lsrs	r2, r4, #16
 80001ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80001f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001f4:	fb01 f005 	mul.w	r0, r1, r5
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x62>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 37ff 	add.w	r7, r1, #4294967295
 8000204:	f080 811c 	bcs.w	8000440 <__udivmoddi4+0x290>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8119 	bls.w	8000440 <__udivmoddi4+0x290>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	b2a4      	uxth	r4, r4
 8000216:	fbb2 f0fe 	udiv	r0, r2, lr
 800021a:	fb0e 2210 	mls	r2, lr, r0, r2
 800021e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000222:	fb00 f505 	mul.w	r5, r0, r5
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x90>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000232:	f080 8107 	bcs.w	8000444 <__udivmoddi4+0x294>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8104 	bls.w	8000444 <__udivmoddi4+0x294>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	1b64      	subs	r4, r4, r5
 8000246:	2100      	movs	r1, #0
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa2>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xbc>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ed 	beq.w	800043a <__udivmoddi4+0x28a>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d149      	bne.n	8000308 <__udivmoddi4+0x158>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xce>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2be>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4617      	mov	r7, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa2>
 800028c:	e9c6 4700 	strd	r4, r7, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa2>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xe6>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 8090 	bne.w	80003c0 <__udivmoddi4+0x210>
 80002a0:	1a8a      	subs	r2, r1, r2
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80002b0:	fb07 2015 	mls	r0, r7, r5, r2
 80002b4:	0c22      	lsrs	r2, r4, #16
 80002b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002ba:	fb0e f005 	mul.w	r0, lr, r5
 80002be:	4290      	cmp	r0, r2
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x124>
 80002c2:	eb1c 0202 	adds.w	r2, ip, r2
 80002c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x122>
 80002cc:	4290      	cmp	r0, r2
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2b8>
 80002d2:	4645      	mov	r5, r8
 80002d4:	1a12      	subs	r2, r2, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002dc:	fb07 2210 	mls	r2, r7, r0, r2
 80002e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x14e>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x14c>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2c2>
 80002fc:	4610      	mov	r0, r2
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000306:	e79f      	b.n	8000248 <__udivmoddi4+0x98>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa05 f401 	lsl.w	r4, r5, r1
 800031a:	fa20 f307 	lsr.w	r3, r0, r7
 800031e:	40fd      	lsrs	r5, r7
 8000320:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000324:	4323      	orrs	r3, r4
 8000326:	fbb5 f8f9 	udiv	r8, r5, r9
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	fb09 5518 	mls	r5, r9, r8, r5
 8000332:	0c1c      	lsrs	r4, r3, #16
 8000334:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000338:	fb08 f50e 	mul.w	r5, r8, lr
 800033c:	42a5      	cmp	r5, r4
 800033e:	fa02 f201 	lsl.w	r2, r2, r1
 8000342:	fa00 f001 	lsl.w	r0, r0, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b0>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2b4>
 8000354:	42a5      	cmp	r5, r4
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2b4>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4464      	add	r4, ip
 8000360:	1b64      	subs	r4, r4, r5
 8000362:	b29d      	uxth	r5, r3
 8000364:	fbb4 f3f9 	udiv	r3, r4, r9
 8000368:	fb09 4413 	mls	r4, r9, r3, r4
 800036c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000370:	fb03 fe0e 	mul.w	lr, r3, lr
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1da>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2ac>
 8000382:	45a6      	cmp	lr, r4
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2ac>
 8000386:	3b02      	subs	r3, #2
 8000388:	4464      	add	r4, ip
 800038a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800038e:	fba3 9502 	umull	r9, r5, r3, r2
 8000392:	eba4 040e 	sub.w	r4, r4, lr
 8000396:	42ac      	cmp	r4, r5
 8000398:	46c8      	mov	r8, r9
 800039a:	46ae      	mov	lr, r5
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x29c>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x298>
 80003a0:	b156      	cbz	r6, 80003b8 <__udivmoddi4+0x208>
 80003a2:	ebb0 0208 	subs.w	r2, r0, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	fa04 f707 	lsl.w	r7, r4, r7
 80003ae:	40ca      	lsrs	r2, r1
 80003b0:	40cc      	lsrs	r4, r1
 80003b2:	4317      	orrs	r7, r2
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	4618      	mov	r0, r3
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c3 0120 	rsb	r1, r3, #32
 80003c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c8:	fa20 f201 	lsr.w	r2, r0, r1
 80003cc:	fa25 f101 	lsr.w	r1, r5, r1
 80003d0:	409d      	lsls	r5, r3
 80003d2:	432a      	orrs	r2, r5
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e0:	fb07 1510 	mls	r5, r7, r0, r1
 80003e4:	0c11      	lsrs	r1, r2, #16
 80003e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003ea:	fb00 f50e 	mul.w	r5, r0, lr
 80003ee:	428d      	cmp	r5, r1
 80003f0:	fa04 f403 	lsl.w	r4, r4, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x258>
 80003f6:	eb1c 0101 	adds.w	r1, ip, r1
 80003fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b0>
 8000400:	428d      	cmp	r5, r1
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b0>
 8000404:	3802      	subs	r0, #2
 8000406:	4461      	add	r1, ip
 8000408:	1b49      	subs	r1, r1, r5
 800040a:	b292      	uxth	r2, r2
 800040c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000410:	fb07 1115 	mls	r1, r7, r5, r1
 8000414:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000418:	fb05 f10e 	mul.w	r1, r5, lr
 800041c:	4291      	cmp	r1, r2
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x282>
 8000420:	eb1c 0202 	adds.w	r2, ip, r2
 8000424:	f105 38ff 	add.w	r8, r5, #4294967295
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2a8>
 800042a:	4291      	cmp	r1, r2
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2a8>
 800042e:	3d02      	subs	r5, #2
 8000430:	4462      	add	r2, ip
 8000432:	1a52      	subs	r2, r2, r1
 8000434:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0xfc>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e708      	b.n	8000252 <__udivmoddi4+0xa2>
 8000440:	4639      	mov	r1, r7
 8000442:	e6e6      	b.n	8000212 <__udivmoddi4+0x62>
 8000444:	4610      	mov	r0, r2
 8000446:	e6fb      	b.n	8000240 <__udivmoddi4+0x90>
 8000448:	4548      	cmp	r0, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f0>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000454:	3b01      	subs	r3, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f0>
 8000458:	4645      	mov	r5, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x282>
 800045c:	462b      	mov	r3, r5
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1da>
 8000460:	4640      	mov	r0, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x258>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b0>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x124>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xd8>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x14e>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800048a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000498:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4013      	ands	r3, r2
 800049e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004a0:	68fb      	ldr	r3, [r7, #12]
}
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
	...

080004b0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004b6:	463b      	mov	r3, r7
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]
 80004c2:	611a      	str	r2, [r3, #16]
 80004c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004c6:	4b29      	ldr	r3, [pc, #164]	; (800056c <MX_ADC1_Init+0xbc>)
 80004c8:	4a29      	ldr	r2, [pc, #164]	; (8000570 <MX_ADC1_Init+0xc0>)
 80004ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004cc:	4b27      	ldr	r3, [pc, #156]	; (800056c <MX_ADC1_Init+0xbc>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004d2:	4b26      	ldr	r3, [pc, #152]	; (800056c <MX_ADC1_Init+0xbc>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004d8:	4b24      	ldr	r3, [pc, #144]	; (800056c <MX_ADC1_Init+0xbc>)
 80004da:	2200      	movs	r2, #0
 80004dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004de:	4b23      	ldr	r3, [pc, #140]	; (800056c <MX_ADC1_Init+0xbc>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004e4:	4b21      	ldr	r3, [pc, #132]	; (800056c <MX_ADC1_Init+0xbc>)
 80004e6:	2204      	movs	r2, #4
 80004e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004ea:	4b20      	ldr	r3, [pc, #128]	; (800056c <MX_ADC1_Init+0xbc>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004f0:	4b1e      	ldr	r3, [pc, #120]	; (800056c <MX_ADC1_Init+0xbc>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80004f6:	4b1d      	ldr	r3, [pc, #116]	; (800056c <MX_ADC1_Init+0xbc>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004fc:	4b1b      	ldr	r3, [pc, #108]	; (800056c <MX_ADC1_Init+0xbc>)
 80004fe:	2200      	movs	r2, #0
 8000500:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000504:	4b19      	ldr	r3, [pc, #100]	; (800056c <MX_ADC1_Init+0xbc>)
 8000506:	2200      	movs	r2, #0
 8000508:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800050a:	4b18      	ldr	r3, [pc, #96]	; (800056c <MX_ADC1_Init+0xbc>)
 800050c:	2200      	movs	r2, #0
 800050e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000510:	4b16      	ldr	r3, [pc, #88]	; (800056c <MX_ADC1_Init+0xbc>)
 8000512:	2200      	movs	r2, #0
 8000514:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000518:	4b14      	ldr	r3, [pc, #80]	; (800056c <MX_ADC1_Init+0xbc>)
 800051a:	2200      	movs	r2, #0
 800051c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800051e:	4b13      	ldr	r3, [pc, #76]	; (800056c <MX_ADC1_Init+0xbc>)
 8000520:	2200      	movs	r2, #0
 8000522:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000526:	4811      	ldr	r0, [pc, #68]	; (800056c <MX_ADC1_Init+0xbc>)
 8000528:	f002 fbb4 	bl	8002c94 <HAL_ADC_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000532:	f000 fe97 	bl	8001264 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000536:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <MX_ADC1_Init+0xc4>)
 8000538:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800053a:	2306      	movs	r3, #6
 800053c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800053e:	2300      	movs	r3, #0
 8000540:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000542:	237f      	movs	r3, #127	; 0x7f
 8000544:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000546:	2304      	movs	r3, #4
 8000548:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800054e:	463b      	mov	r3, r7
 8000550:	4619      	mov	r1, r3
 8000552:	4806      	ldr	r0, [pc, #24]	; (800056c <MX_ADC1_Init+0xbc>)
 8000554:	f002 fcea 	bl	8002f2c <HAL_ADC_ConfigChannel>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800055e:	f000 fe81 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000562:	bf00      	nop
 8000564:	3718      	adds	r7, #24
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000054 	.word	0x20000054
 8000570:	50040000 	.word	0x50040000
 8000574:	0c900008 	.word	0x0c900008

08000578 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0c      	ldr	r2, [pc, #48]	; (80005c8 <HAL_ADC_MspInit+0x50>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d112      	bne.n	80005c0 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800059a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800059e:	f7ff ff6d 	bl	800047c <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	2004      	movs	r0, #4
 80005a4:	f7ff ff6a 	bl	800047c <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005a8:	2304      	movs	r3, #4
 80005aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ac:	2303      	movs	r3, #3
 80005ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	4619      	mov	r1, r3
 80005ba:	4804      	ldr	r0, [pc, #16]	; (80005cc <HAL_ADC_MspInit+0x54>)
 80005bc:	f003 fbd0 	bl	8003d60 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005c0:	bf00      	nop
 80005c2:	3720      	adds	r7, #32
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	50040000 	.word	0x50040000
 80005cc:	48000800 	.word	0x48000800

080005d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(mainTaskEntry, NULL, &mainTask_attributes);
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <MX_FREERTOS_Init+0x18>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	4804      	ldr	r0, [pc, #16]	; (80005ec <MX_FREERTOS_Init+0x1c>)
 80005da:	f009 facb 	bl	8009b74 <osThreadNew>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a03      	ldr	r2, [pc, #12]	; (80005f0 <MX_FREERTOS_Init+0x20>)
 80005e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	0800c838 	.word	0x0800c838
 80005ec:	08001419 	.word	0x08001419
 80005f0:	200000b8 	.word	0x200000b8

080005f4 <LL_LPTIM_EnableResetAfterRead>:
  * @rmtoll CR           RSTARE        LL_LPTIM_EnableResetAfterRead
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableResetAfterRead(LPTIM_TypeDef *LPTIMx)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_RSTARE);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	691b      	ldr	r3, [r3, #16]
 8000600:	f043 0210 	orr.w	r2, r3, #16
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	611a      	str	r2, [r3, #16]
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <_ZN6GpioInC1EP12GPIO_TypeDeftb>:
//	┗┛┣┛┗┗┛┻┛┗
//	  ┛

GpioIn::GpioIn(GPIO_TypeDef *gpio, uint16_t pin) : gpio(gpio), pin(pin), inv(0) { }

GpioIn::GpioIn(GPIO_TypeDef *gpio, uint16_t pin, bool inv) : gpio(gpio), pin(pin), inv(inv ? pin : 0) { }
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	4611      	mov	r1, r2
 8000620:	461a      	mov	r2, r3
 8000622:	460b      	mov	r3, r1
 8000624:	80fb      	strh	r3, [r7, #6]
 8000626:	4613      	mov	r3, r2
 8000628:	717b      	strb	r3, [r7, #5]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	68ba      	ldr	r2, [r7, #8]
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	88fa      	ldrh	r2, [r7, #6]
 8000634:	809a      	strh	r2, [r3, #4]
 8000636:	797b      	ldrb	r3, [r7, #5]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <_ZN6GpioInC1EP12GPIO_TypeDeftb+0x2c>
 800063c:	88fa      	ldrh	r2, [r7, #6]
 800063e:	e000      	b.n	8000642 <_ZN6GpioInC1EP12GPIO_TypeDeftb+0x2e>
 8000640:	2200      	movs	r2, #0
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	80da      	strh	r2, [r3, #6]
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	4618      	mov	r0, r3
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <_ZN6GpioIn4readEv>:

bool GpioIn::read()
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	return bool((gpio->IDR & pin) ^ inv);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	691b      	ldr	r3, [r3, #16]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	8892      	ldrh	r2, [r2, #4]
 8000666:	4013      	ands	r3, r2
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	88d2      	ldrh	r2, [r2, #6]
 800066c:	4293      	cmp	r3, r2
 800066e:	bf14      	ite	ne
 8000670:	2301      	movne	r3, #1
 8000672:	2300      	moveq	r3, #0
 8000674:	b2db      	uxtb	r3, r3
}
 8000676:	4618      	mov	r0, r3
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <_ZN7GpioOutC1EP12GPIO_TypeDeftb>:
//	┗┛┣┛┗┗┛┗┛┗┻┗
//	  ┛         

GpioOut::GpioOut(GPIO_TypeDef *gpio, uint16_t pin) : gpio(gpio), pin(pin), inv(0) { }

GpioOut::GpioOut(GPIO_TypeDef *gpio, uint16_t pin, bool inv) : gpio(gpio), pin(pin), inv(inv ? pin : 0) { }
 8000682:	b480      	push	{r7}
 8000684:	b085      	sub	sp, #20
 8000686:	af00      	add	r7, sp, #0
 8000688:	60f8      	str	r0, [r7, #12]
 800068a:	60b9      	str	r1, [r7, #8]
 800068c:	4611      	mov	r1, r2
 800068e:	461a      	mov	r2, r3
 8000690:	460b      	mov	r3, r1
 8000692:	80fb      	strh	r3, [r7, #6]
 8000694:	4613      	mov	r3, r2
 8000696:	717b      	strb	r3, [r7, #5]
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	88fa      	ldrh	r2, [r7, #6]
 80006a2:	809a      	strh	r2, [r3, #4]
 80006a4:	797b      	ldrb	r3, [r7, #5]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <_ZN7GpioOutC1EP12GPIO_TypeDeftb+0x2c>
 80006aa:	88fa      	ldrh	r2, [r7, #6]
 80006ac:	e000      	b.n	80006b0 <_ZN7GpioOutC1EP12GPIO_TypeDeftb+0x2e>
 80006ae:	2200      	movs	r2, #0
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	80da      	strh	r2, [r3, #6]
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	4618      	mov	r0, r3
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr

080006c2 <_ZN7GpioOut2onEv>:

void GpioOut::on()
{
 80006c2:	b480      	push	{r7}
 80006c4:	b083      	sub	sp, #12
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
	gpio->ODR = (gpio->ODR & ~inv) | (pin ^ inv);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	88d2      	ldrh	r2, [r2, #6]
 80006d4:	43d2      	mvns	r2, r2
 80006d6:	401a      	ands	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	8899      	ldrh	r1, [r3, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	88db      	ldrh	r3, [r3, #6]
 80006e0:	404b      	eors	r3, r1
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	4619      	mov	r1, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	430a      	orrs	r2, r1
 80006ec:	615a      	str	r2, [r3, #20]
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <_ZN7GpioOut3offEv>:

void GpioOut::off()
{
 80006fa:	b480      	push	{r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
	gpio->ODR = (gpio->ODR & ~(pin ^ inv)) | inv;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	695b      	ldr	r3, [r3, #20]
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	8891      	ldrh	r1, [r2, #4]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	88d2      	ldrh	r2, [r2, #6]
 8000710:	404a      	eors	r2, r1
 8000712:	b292      	uxth	r2, r2
 8000714:	43d2      	mvns	r2, r2
 8000716:	401a      	ands	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	88db      	ldrh	r3, [r3, #6]
 800071c:	4619      	mov	r1, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	430a      	orrs	r2, r1
 8000724:	615a      	str	r2, [r3, #20]
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <_ZN7GpioOut6toggleEv>:

void GpioOut::toggle()
{
 8000732:	b480      	push	{r7}
 8000734:	b083      	sub	sp, #12
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
	gpio->ODR = gpio->ODR ^ pin;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	695a      	ldr	r2, [r3, #20]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	889b      	ldrh	r3, [r3, #4]
 8000744:	4619      	mov	r1, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	404a      	eors	r2, r1
 800074c:	615a      	str	r2, [r3, #20]
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <_ZN7EncoderC1EP19LPTIM_HandleTypeDeff>:
//	┏┓      ┓
//	┣ ┏┓┏┏┓┏┫┏┓┏┓
//	┗┛┛┗┗┗┛┗┻┗ ┛
//

Encoder::Encoder(LPTIM_HandleTypeDef *hlptim, float ratio) : hlptim(hlptim), ratio(ratio)
 800075a:	b580      	push	{r7, lr}
 800075c:	b084      	sub	sp, #16
 800075e:	af00      	add	r7, sp, #0
 8000760:	60f8      	str	r0, [r7, #12]
 8000762:	60b9      	str	r1, [r7, #8]
 8000764:	ed87 0a01 	vstr	s0, [r7, #4]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	605a      	str	r2, [r3, #4]
{
	LL_LPTIM_EnableResetAfterRead(hlptim->Instance);
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff3b 	bl	80005f4 <LL_LPTIM_EnableResetAfterRead>
}
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	4618      	mov	r0, r3
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <_ZN7Encoder4initEv>:
{
	LL_LPTIM_EnableResetAfterRead(hlptim->Instance);
}

void Encoder::init()
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	HAL_LPTIM_Counter_Start(hlptim, 0xffff);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000798:	4618      	mov	r0, r3
 800079a:	f003 fcf3 	bl	8004184 <HAL_LPTIM_Counter_Start>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <_ZN7Encoder13getAngleSpeedEf>:

float Encoder::getAngleSpeed(float dt)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	ed87 0a00 	vstr	s0, [r7]
	return float(HAL_LPTIM_ReadCounter(hlptim)) * 2.f * 3.1415927f * ratio / dt;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 fd27 	bl	800420c <HAL_LPTIM_ReadCounter>
 80007be:	ee07 0a90 	vmov	s15, r0
 80007c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80007ca:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80007f4 <_ZN7Encoder13getAngleSpeedEf+0x4c>
 80007ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80007d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007dc:	edd7 7a00 	vldr	s15, [r7]
 80007e0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80007e4:	eef0 7a66 	vmov.f32	s15, s13
}
 80007e8:	eeb0 0a67 	vmov.f32	s0, s15
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40490fdb 	.word	0x40490fdb

080007f8 <_ZN6PwmOutC1EP17TIM_HandleTypeDef8PwmOutCh>:
//	┏┓      ┏┓
//	┃┃┓┏┏┏┳┓┃┃┓┏╋
//	┣┛┗┻┛┛┗┗┗┛┗┻┗
//

PwmOut::PwmOut(TIM_HandleTypeDef *tim, PwmOutCh channel) : tim(tim)
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	605a      	str	r2, [r3, #4]
{
	switch (channel)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2b14      	cmp	r3, #20
 800080e:	d845      	bhi.n	800089c <_ZN6PwmOutC1EP17TIM_HandleTypeDef8PwmOutCh+0xa4>
 8000810:	a201      	add	r2, pc, #4	; (adr r2, 8000818 <_ZN6PwmOutC1EP17TIM_HandleTypeDef8PwmOutCh+0x20>)
 8000812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000816:	bf00      	nop
 8000818:	0800086d 	.word	0x0800086d
 800081c:	0800089d 	.word	0x0800089d
 8000820:	0800089d 	.word	0x0800089d
 8000824:	0800089d 	.word	0x0800089d
 8000828:	08000875 	.word	0x08000875
 800082c:	0800089d 	.word	0x0800089d
 8000830:	0800089d 	.word	0x0800089d
 8000834:	0800089d 	.word	0x0800089d
 8000838:	0800087d 	.word	0x0800087d
 800083c:	0800089d 	.word	0x0800089d
 8000840:	0800089d 	.word	0x0800089d
 8000844:	0800089d 	.word	0x0800089d
 8000848:	08000885 	.word	0x08000885
 800084c:	0800089d 	.word	0x0800089d
 8000850:	0800089d 	.word	0x0800089d
 8000854:	0800089d 	.word	0x0800089d
 8000858:	0800088d 	.word	0x0800088d
 800085c:	0800089d 	.word	0x0800089d
 8000860:	0800089d 	.word	0x0800089d
 8000864:	0800089d 	.word	0x0800089d
 8000868:	08000895 	.word	0x08000895
	{
	case PwmOutCh::_1:
		this->channel_cmp_reg = &TIM_TypeDef::CCR1;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	2234      	movs	r2, #52	; 0x34
 8000870:	60da      	str	r2, [r3, #12]
		break;
 8000872:	e013      	b.n	800089c <_ZN6PwmOutC1EP17TIM_HandleTypeDef8PwmOutCh+0xa4>
	case PwmOutCh::_2:
		this->channel_cmp_reg = &TIM_TypeDef::CCR2;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2238      	movs	r2, #56	; 0x38
 8000878:	60da      	str	r2, [r3, #12]
		break;
 800087a:	e00f      	b.n	800089c <_ZN6PwmOutC1EP17TIM_HandleTypeDef8PwmOutCh+0xa4>
	case PwmOutCh::_3:
		this->channel_cmp_reg = &TIM_TypeDef::CCR3;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	223c      	movs	r2, #60	; 0x3c
 8000880:	60da      	str	r2, [r3, #12]
		break;
 8000882:	e00b      	b.n	800089c <_ZN6PwmOutC1EP17TIM_HandleTypeDef8PwmOutCh+0xa4>
	case PwmOutCh::_4:
		this->channel_cmp_reg = &TIM_TypeDef::CCR4;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	2240      	movs	r2, #64	; 0x40
 8000888:	60da      	str	r2, [r3, #12]
		break;
 800088a:	e007      	b.n	800089c <_ZN6PwmOutC1EP17TIM_HandleTypeDef8PwmOutCh+0xa4>
	case PwmOutCh::_5:
		this->channel_cmp_reg = &TIM_TypeDef::CCR5;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	2258      	movs	r2, #88	; 0x58
 8000890:	60da      	str	r2, [r3, #12]
		break;
 8000892:	e003      	b.n	800089c <_ZN6PwmOutC1EP17TIM_HandleTypeDef8PwmOutCh+0xa4>
	case PwmOutCh::_6:
		this->channel_cmp_reg = &TIM_TypeDef::CCR6;
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	225c      	movs	r2, #92	; 0x5c
 8000898:	60da      	str	r2, [r3, #12]
		break;
 800089a:	bf00      	nop
	}
	this->channel = uint32_t(channel);
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	609a      	str	r2, [r3, #8]
	arr = 1000;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <_ZN6PwmOutC1EP17TIM_HandleTypeDef8PwmOutCh+0xc0>)
 80008a6:	601a      	str	r2, [r3, #0]
	//HAL_TIM_PWM_Start(tim, uint32_t(channel));
}
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	4618      	mov	r0, r3
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	447a0000 	.word	0x447a0000

080008bc <_ZN6PwmOut4initEv>:

void PwmOut::init()
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(tim, uint32_t(channel));
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	685a      	ldr	r2, [r3, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	4619      	mov	r1, r3
 80008ce:	4610      	mov	r0, r2
 80008d0:	f006 fe28 	bl	8007524 <HAL_TIM_PWM_Start>
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <LL_AHB1_GRP1_EnableClock>:
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80008e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80008ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80008f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4013      	ands	r3, r2
 80008fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000900:	68fb      	ldr	r3, [r7, #12]
}
 8000902:	bf00      	nop
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000912:	2004      	movs	r0, #4
 8000914:	f7ff ffe2 	bl	80008dc <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000918:	2001      	movs	r0, #1
 800091a:	f7ff ffdf 	bl	80008dc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2105      	movs	r1, #5
 8000922:	200b      	movs	r0, #11
 8000924:	f002 ff80 	bl	8003828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000928:	200b      	movs	r0, #11
 800092a:	f002 ff97 	bl	800385c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2105      	movs	r1, #5
 8000932:	200c      	movs	r0, #12
 8000934:	f002 ff78 	bl	8003828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000938:	200c      	movs	r0, #12
 800093a:	f002 ff8f 	bl	800385c <HAL_NVIC_EnableIRQ>

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}

08000942 <LL_AHB2_GRP1_EnableClock>:
{
 8000942:	b480      	push	{r7}
 8000944:	b085      	sub	sp, #20
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800094a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800094e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000950:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4313      	orrs	r3, r2
 8000958:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800095a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800095e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4013      	ands	r3, r2
 8000964:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000966:	68fb      	ldr	r3, [r7, #12]
}
 8000968:	bf00      	nop
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000974:	b480      	push	{r7}
 8000976:	b087      	sub	sp, #28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x03U], (Line >> 16U), (Port << ((POSITION_VAL((Line >> 16U))) & 0x0000000FUL)));
 800097e:	4a18      	ldr	r2, [pc, #96]	; (80009e0 <LL_SYSCFG_SetEXTISource+0x6c>)
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	f003 0303 	and.w	r3, r3, #3
 8000986:	3302      	adds	r3, #2
 8000988:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	0c1b      	lsrs	r3, r3, #16
 8000990:	43db      	mvns	r3, r3
 8000992:	ea02 0103 	and.w	r1, r2, r3
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	0c1b      	lsrs	r3, r3, #16
 800099a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	fa93 f3a3 	rbit	r3, r3
 80009a2:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d101      	bne.n	80009b2 <LL_SYSCFG_SetEXTISource+0x3e>
  {
    return 32U;
 80009ae:	2320      	movs	r3, #32
 80009b0:	e003      	b.n	80009ba <LL_SYSCFG_SetEXTISource+0x46>
  }
  return __builtin_clz(value);
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	fab3 f383 	clz	r3, r3
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	f003 030f 	and.w	r3, r3, #15
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	409a      	lsls	r2, r3
 80009c2:	4807      	ldr	r0, [pc, #28]	; (80009e0 <LL_SYSCFG_SetEXTISource+0x6c>)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	f003 0303 	and.w	r3, r3, #3
 80009ca:	430a      	orrs	r2, r1
 80009cc:	3302      	adds	r3, #2
 80009ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80009d2:	bf00      	nop
 80009d4:	371c      	adds	r7, #28
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40010000 	.word	0x40010000

080009e4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b08b      	sub	sp, #44	; 0x2c
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	fa93 f3a3 	rbit	r3, r3
 80009fe:	613b      	str	r3, [r7, #16]
  return result;
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d101      	bne.n	8000a0e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000a0a:	2320      	movs	r3, #32
 8000a0c:	e003      	b.n	8000a16 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	fab3 f383 	clz	r3, r3
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	2103      	movs	r1, #3
 8000a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1e:	43db      	mvns	r3, r3
 8000a20:	401a      	ands	r2, r3
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a26:	6a3b      	ldr	r3, [r7, #32]
 8000a28:	fa93 f3a3 	rbit	r3, r3
 8000a2c:	61fb      	str	r3, [r7, #28]
  return result;
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d101      	bne.n	8000a3c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000a38:	2320      	movs	r3, #32
 8000a3a:	e003      	b.n	8000a44 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3e:	fab3 f383 	clz	r3, r3
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4c:	431a      	orrs	r2, r3
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	601a      	str	r2, [r3, #0]
}
 8000a52:	bf00      	nop
 8000a54:	372c      	adds	r7, #44	; 0x2c
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b08b      	sub	sp, #44	; 0x2c
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	60f8      	str	r0, [r7, #12]
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	68da      	ldr	r2, [r3, #12]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	fa93 f3a3 	rbit	r3, r3
 8000a78:	613b      	str	r3, [r7, #16]
  return result;
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d101      	bne.n	8000a88 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000a84:	2320      	movs	r3, #32
 8000a86:	e003      	b.n	8000a90 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	fab3 f383 	clz	r3, r3
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	2103      	movs	r1, #3
 8000a94:	fa01 f303 	lsl.w	r3, r1, r3
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aa0:	6a3b      	ldr	r3, [r7, #32]
 8000aa2:	fa93 f3a3 	rbit	r3, r3
 8000aa6:	61fb      	str	r3, [r7, #28]
  return result;
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d101      	bne.n	8000ab6 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000ab2:	2320      	movs	r3, #32
 8000ab4:	e003      	b.n	8000abe <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab8:	fab3 f383 	clz	r3, r3
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	6879      	ldr	r1, [r7, #4]
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	60da      	str	r2, [r3, #12]
}
 8000acc:	bf00      	nop
 8000ace:	372c      	adds	r7, #44	; 0x2c
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	683a      	ldr	r2, [r7, #0]
 8000ae6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
 8000b14:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000b16:	2004      	movs	r0, #4
 8000b18:	f7ff ff13 	bl	8000942 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8000b1c:	2080      	movs	r0, #128	; 0x80
 8000b1e:	f7ff ff10 	bl	8000942 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000b22:	2002      	movs	r0, #2
 8000b24:	f7ff ff0d 	bl	8000942 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f7ff ff0a 	bl	8000942 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8000b2e:	2010      	movs	r0, #16
 8000b30:	f7ff ff07 	bl	8000942 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8000b34:	2008      	movs	r0, #8
 8000b36:	f7ff ff04 	bl	8000942 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LED1_Pin|LED2_Pin|M_LEFT_DIRECTION_Pin);
 8000b3a:	f240 2103 	movw	r1, #515	; 0x203
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b42:	f7ff ffc9 	bl	8000ad8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LED3_Pin|M_RIGHT_DIRECTION_Pin|SPI_EX_NCS1_Pin|SPI_EX_NCS2_Pin);
 8000b46:	f44f 6146 	mov.w	r1, #3168	; 0xc60
 8000b4a:	4894      	ldr	r0, [pc, #592]	; (8000d9c <MX_GPIO_Init+0x2a8>)
 8000b4c:	f7ff ffc4 	bl	8000ad8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LED4_Pin|NM_SLEEP_Pin|SPI_IMU_NCS_Pin);
 8000b50:	2185      	movs	r1, #133	; 0x85
 8000b52:	4893      	ldr	r0, [pc, #588]	; (8000da0 <MX_GPIO_Init+0x2ac>)
 8000b54:	f7ff ffc0 	bl	8000ad8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_1
 8000b58:	f24e 0312 	movw	r3, #57362	; 0xe012
 8000b5c:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	4619      	mov	r1, r3
 8000b6a:	488c      	ldr	r0, [pc, #560]	; (8000d9c <MX_GPIO_Init+0x2a8>)
 8000b6c:	f008 febb 	bl	80098e6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000b70:	2308      	movs	r3, #8
 8000b72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000b74:	2303      	movs	r3, #3
 8000b76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4888      	ldr	r0, [pc, #544]	; (8000da4 <MX_GPIO_Init+0x2b0>)
 8000b82:	f008 feb0 	bl	80098e6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000b86:	2303      	movs	r3, #3
 8000b88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000b92:	2301      	movs	r3, #1
 8000b94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba2:	f008 fea0 	bl	80098e6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_15;
 8000ba6:	f248 0330 	movw	r3, #32816	; 0x8030
 8000baa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000bac:	2303      	movs	r3, #3
 8000bae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbc:	f008 fe93 	bl	80098e6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = M_LEFT_DIRECTION_Pin;
 8000bc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bc4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(M_LEFT_DIRECTION_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bde:	f008 fe82 	bl	80098e6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED3_Pin;
 8000be2:	2320      	movs	r3, #32
 8000be4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000be6:	2301      	movs	r3, #1
 8000be8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4868      	ldr	r0, [pc, #416]	; (8000d9c <MX_GPIO_Init+0x2a8>)
 8000bfc:	f008 fe73 	bl	80098e6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED4_Pin;
 8000c00:	2304      	movs	r3, #4
 8000c02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c04:	2301      	movs	r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	4619      	mov	r1, r3
 8000c18:	4861      	ldr	r0, [pc, #388]	; (8000da0 <MX_GPIO_Init+0x2ac>)
 8000c1a:	f008 fe64 	bl	80098e6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = NM_SLEEP_Pin|SPI_IMU_NCS_Pin;
 8000c1e:	2381      	movs	r3, #129	; 0x81
 8000c20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c22:	2301      	movs	r3, #1
 8000c24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	4619      	mov	r1, r3
 8000c36:	485a      	ldr	r0, [pc, #360]	; (8000da0 <MX_GPIO_Init+0x2ac>)
 8000c38:	f008 fe55 	bl	80098e6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
 8000c3c:	f24f 0340 	movw	r3, #61504	; 0xf040
 8000c40:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_6;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000c42:	2303      	movs	r3, #3
 8000c44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4854      	ldr	r0, [pc, #336]	; (8000da0 <MX_GPIO_Init+0x2ac>)
 8000c50:	f008 fe49 	bl	80098e6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = M_RIGHT_DIRECTION_Pin|SPI_EX_NCS1_Pin|SPI_EX_NCS2_Pin;
 8000c54:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 8000c58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	484b      	ldr	r0, [pc, #300]	; (8000d9c <MX_GPIO_Init+0x2a8>)
 8000c70:	f008 fe39 	bl	80098e6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000c74:	2302      	movs	r3, #2
 8000c76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	4619      	mov	r1, r3
 8000c84:	4848      	ldr	r0, [pc, #288]	; (8000da8 <MX_GPIO_Init+0x2b4>)
 8000c86:	f008 fe2e 	bl	80098e6 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE3);
 8000c8a:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8000c8e:	2002      	movs	r0, #2
 8000c90:	f7ff fe70 	bl	8000974 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE4);
 8000c94:	4945      	ldr	r1, [pc, #276]	; (8000dac <MX_GPIO_Init+0x2b8>)
 8000c96:	2004      	movs	r0, #4
 8000c98:	f7ff fe6c 	bl	8000974 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE12);
 8000c9c:	4944      	ldr	r1, [pc, #272]	; (8000db0 <MX_GPIO_Init+0x2bc>)
 8000c9e:	2002      	movs	r0, #2
 8000ca0:	f7ff fe68 	bl	8000974 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE0);
 8000ca4:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f7ff fe63 	bl	8000974 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8000cae:	2308      	movs	r3, #8
 8000cb0:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f008 fbcf 	bl	8009470 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 8000cd2:	2310      	movs	r3, #16
 8000cd4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f008 fbbd 	bl	8009470 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 8000cf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfa:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000d00:	2301      	movs	r3, #1
 8000d02:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	4618      	mov	r0, r3
 8000d18:	f008 fbaa 	bl	8009470 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000d24:	2301      	movs	r3, #1
 8000d26:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000d30:	2301      	movs	r3, #1
 8000d32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000d36:	f107 031c 	add.w	r3, r7, #28
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f008 fb98 	bl	8009470 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(SPI_IMU_INT1_GPIO_Port, SPI_IMU_INT1_Pin, LL_GPIO_PULL_NO);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2108      	movs	r1, #8
 8000d44:	4815      	ldr	r0, [pc, #84]	; (8000d9c <MX_GPIO_Init+0x2a8>)
 8000d46:	f7ff fe8a 	bl	8000a5e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPI_IMU_INT2_GPIO_Port, SPI_IMU_INT2_Pin, LL_GPIO_PULL_NO);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2110      	movs	r1, #16
 8000d4e:	4819      	ldr	r0, [pc, #100]	; (8000db4 <MX_GPIO_Init+0x2c0>)
 8000d50:	f7ff fe85 	bl	8000a5e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPI_EX_INT1_GPIO_Port, SPI_EX_INT1_Pin, LL_GPIO_PULL_NO);
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d5a:	4810      	ldr	r0, [pc, #64]	; (8000d9c <MX_GPIO_Init+0x2a8>)
 8000d5c:	f7ff fe7f 	bl	8000a5e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPI_EX_INT2_GPIO_Port, SPI_EX_INT2_Pin, LL_GPIO_PULL_NO);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2101      	movs	r1, #1
 8000d64:	4810      	ldr	r0, [pc, #64]	; (8000da8 <MX_GPIO_Init+0x2b4>)
 8000d66:	f7ff fe7a 	bl	8000a5e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(SPI_IMU_INT1_GPIO_Port, SPI_IMU_INT1_Pin, LL_GPIO_MODE_INPUT);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2108      	movs	r1, #8
 8000d6e:	480b      	ldr	r0, [pc, #44]	; (8000d9c <MX_GPIO_Init+0x2a8>)
 8000d70:	f7ff fe38 	bl	80009e4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPI_IMU_INT2_GPIO_Port, SPI_IMU_INT2_Pin, LL_GPIO_MODE_INPUT);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2110      	movs	r1, #16
 8000d78:	480e      	ldr	r0, [pc, #56]	; (8000db4 <MX_GPIO_Init+0x2c0>)
 8000d7a:	f7ff fe33 	bl	80009e4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPI_EX_INT1_GPIO_Port, SPI_EX_INT1_Pin, LL_GPIO_MODE_INPUT);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d84:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_GPIO_Init+0x2a8>)
 8000d86:	f7ff fe2d 	bl	80009e4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPI_EX_INT2_GPIO_Port, SPI_EX_INT2_Pin, LL_GPIO_MODE_INPUT);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	4806      	ldr	r0, [pc, #24]	; (8000da8 <MX_GPIO_Init+0x2b4>)
 8000d90:	f7ff fe28 	bl	80009e4 <LL_GPIO_SetPinMode>

}
 8000d94:	bf00      	nop
 8000d96:	3728      	adds	r7, #40	; 0x28
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	48000800 	.word	0x48000800
 8000da0:	48000400 	.word	0x48000400
 8000da4:	48001c00 	.word	0x48001c00
 8000da8:	48000c00 	.word	0x48000c00
 8000dac:	000f0001 	.word	0x000f0001
 8000db0:	000f0003 	.word	0x000f0003
 8000db4:	48001000 	.word	0x48001000

08000db8 <LL_AHB2_GRP1_EnableClock>:
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
}
 8000dde:	bf00      	nop
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b085      	sub	sp, #20
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000df6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000df8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e06:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e40:	68fb      	ldr	r3, [r7, #12]
}
 8000e42:	bf00      	nop
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <MX_LPTIM1_Init>:
LPTIM_HandleTypeDef hlptim1;
LPTIM_HandleTypeDef hlptim2;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <MX_LPTIM1_Init+0x60>)
 8000e56:	4a17      	ldr	r2, [pc, #92]	; (8000eb4 <MX_LPTIM1_Init+0x64>)
 8000e58:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_ULPTIM;
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <MX_LPTIM1_Init+0x60>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000e60:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <MX_LPTIM1_Init+0x60>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8000e66:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <MX_LPTIM1_Init+0x60>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8000e6c:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <MX_LPTIM1_Init+0x60>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_LPTIM1_Init+0x60>)
 8000e74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e78:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <MX_LPTIM1_Init+0x60>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MX_LPTIM1_Init+0x60>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <MX_LPTIM1_Init+0x60>)
 8000e88:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e8c:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <MX_LPTIM1_Init+0x60>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_LPTIM1_Init+0x60>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_LPTIM1_Init+0x60>)
 8000e9c:	f003 f8d0 	bl	8004040 <HAL_LPTIM_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 8000ea6:	f000 f9dd 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000318 	.word	0x20000318
 8000eb4:	40007c00 	.word	0x40007c00

08000eb8 <MX_LPTIM2_Init>:
/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 8000ebc:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <MX_LPTIM2_Init+0x60>)
 8000ebe:	4a17      	ldr	r2, [pc, #92]	; (8000f1c <MX_LPTIM2_Init+0x64>)
 8000ec0:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_ULPTIM;
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <MX_LPTIM2_Init+0x60>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <MX_LPTIM2_Init+0x60>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  hlptim2.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <MX_LPTIM2_Init+0x60>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8000ed4:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <MX_LPTIM2_Init+0x60>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_LPTIM2_Init+0x60>)
 8000edc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ee0:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <MX_LPTIM2_Init+0x60>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <MX_LPTIM2_Init+0x60>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <MX_LPTIM2_Init+0x60>)
 8000ef0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <MX_LPTIM2_Init+0x60>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <MX_LPTIM2_Init+0x60>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_LPTIM2_Init+0x60>)
 8000f04:	f003 f89c 	bl	8004040 <HAL_LPTIM_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_LPTIM2_Init+0x5a>
  {
    Error_Handler();
 8000f0e:	f000 f9a9 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000350 	.word	0x20000350
 8000f1c:	40009400 	.word	0x40009400

08000f20 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b09c      	sub	sp, #112	; 0x70
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	2250      	movs	r2, #80	; 0x50
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f00b fc0b 	bl	800c75c <memset>
  if(lptimHandle->Instance==LPTIM1)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a2c      	ldr	r2, [pc, #176]	; (8000ffc <HAL_LPTIM_MspInit+0xdc>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d126      	bne.n	8000f9e <HAL_LPTIM_MspInit+0x7e>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8000f50:	2310      	movs	r3, #16
 8000f52:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 8000f54:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000f58:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f004 fee4 	bl	8005d2c <HAL_RCCEx_PeriphCLKConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 8000f6a:	f000 f97b 	bl	8001264 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000f6e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000f72:	f7ff ff3a 	bl	8000dea <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f76:	2004      	movs	r0, #4
 8000f78:	f7ff ff1e 	bl	8000db8 <LL_AHB2_GRP1_EnableClock>
    /**LPTIM1 GPIO Configuration
    PC0     ------> LPTIM1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f90:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f94:	4619      	mov	r1, r3
 8000f96:	481a      	ldr	r0, [pc, #104]	; (8001000 <HAL_LPTIM_MspInit+0xe0>)
 8000f98:	f002 fee2 	bl	8003d60 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }
}
 8000f9c:	e029      	b.n	8000ff2 <HAL_LPTIM_MspInit+0xd2>
  else if(lptimHandle->Instance==LPTIM2)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a18      	ldr	r2, [pc, #96]	; (8001004 <HAL_LPTIM_MspInit+0xe4>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d124      	bne.n	8000ff2 <HAL_LPTIM_MspInit+0xd2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 8000fa8:	2320      	movs	r3, #32
 8000faa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK;
 8000fac:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000fb0:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f004 feb8 	bl	8005d2c <HAL_RCCEx_PeriphCLKConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_LPTIM_MspInit+0xa6>
      Error_Handler();
 8000fc2:	f000 f94f 	bl	8001264 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8000fc6:	2020      	movs	r0, #32
 8000fc8:	f7ff ff28 	bl	8000e1c <LL_APB1_GRP2_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fcc:	2002      	movs	r0, #2
 8000fce:	f7ff fef3 	bl	8000db8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 8000fe2:	230e      	movs	r3, #14
 8000fe4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000fea:	4619      	mov	r1, r3
 8000fec:	4806      	ldr	r0, [pc, #24]	; (8001008 <HAL_LPTIM_MspInit+0xe8>)
 8000fee:	f002 feb7 	bl	8003d60 <HAL_GPIO_Init>
}
 8000ff2:	bf00      	nop
 8000ff4:	3770      	adds	r7, #112	; 0x70
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40007c00 	.word	0x40007c00
 8001000:	48000800 	.word	0x48000800
 8001004:	40009400 	.word	0x40009400
 8001008:	48000400 	.word	0x48000400

0800100c <_ZN7Lsm6dslC1EP19__SPI_HandleTypeDefP7GpioOutP6GpioInS5_>:
 */


#include <lsm6dsl.hpp>

Lsm6dsl::Lsm6dsl(SPI_HandleTypeDef *hspi, GpioOut *ncs, GpioIn *it1, GpioIn *it2) : hspi(hspi), ncs(ncs), it1(it1), it2(it2)
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	68ba      	ldr	r2, [r7, #8]
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	60da      	str	r2, [r3, #12]
{
	ncs->off();
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff fb61 	bl	80006fa <_ZN7GpioOut3offEv>
}
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001048:	f001 fc4c 	bl	80028e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104c:	f000 f844 	bl	80010d8 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001050:	f000 f8bc 	bl	80011cc <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001054:	f7ff fd4e 	bl	8000af4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001058:	f7ff fc59 	bl	800090e <MX_DMA_Init>
  MX_TIM1_Init();
 800105c:	f001 f9ac 	bl	80023b8 <MX_TIM1_Init>
  MX_USB_PCD_Init();
 8001060:	f001 fbae 	bl	80027c0 <MX_USB_PCD_Init>
  MX_LPTIM1_Init();
 8001064:	f7ff fef4 	bl	8000e50 <MX_LPTIM1_Init>
  MX_ADC1_Init();
 8001068:	f7ff fa22 	bl	80004b0 <MX_ADC1_Init>
  MX_LPTIM2_Init();
 800106c:	f7ff ff24 	bl	8000eb8 <MX_LPTIM2_Init>
  MX_QUADSPI_Init();
 8001070:	f000 fcf0 	bl	8001a54 <MX_QUADSPI_Init>
  MX_SPI1_Init();
 8001074:	f000 fe14 	bl	8001ca0 <MX_SPI1_Init>
  MX_LPUART1_UART_Init();
 8001078:	f001 fadc 	bl	8002634 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 800107c:	f000 fd88 	bl	8001b90 <MX_RTC_Init>
  MX_RF_Init();
 8001080:	f000 fd54 	bl	8001b2c <MX_RF_Init>
  /* USER CODE BEGIN 2 */
//  front_adc.init();
  right_speed_ctrl.init();
 8001084:	480d      	ldr	r0, [pc, #52]	; (80010bc <main+0x78>)
 8001086:	f7ff fc19 	bl	80008bc <_ZN6PwmOut4initEv>
  left_speed_ctrl.init();
 800108a:	480d      	ldr	r0, [pc, #52]	; (80010c0 <main+0x7c>)
 800108c:	f7ff fc16 	bl	80008bc <_ZN6PwmOut4initEv>
  nm_sleep.off();
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <main+0x80>)
 8001092:	f7ff fb32 	bl	80006fa <_ZN7GpioOut3offEv>
  led1.off();
 8001096:	480c      	ldr	r0, [pc, #48]	; (80010c8 <main+0x84>)
 8001098:	f7ff fb2f 	bl	80006fa <_ZN7GpioOut3offEv>
  led2.off();
 800109c:	480b      	ldr	r0, [pc, #44]	; (80010cc <main+0x88>)
 800109e:	f7ff fb2c 	bl	80006fa <_ZN7GpioOut3offEv>
  led3.off();
 80010a2:	480b      	ldr	r0, [pc, #44]	; (80010d0 <main+0x8c>)
 80010a4:	f7ff fb29 	bl	80006fa <_ZN7GpioOut3offEv>
  led4.off();
 80010a8:	480a      	ldr	r0, [pc, #40]	; (80010d4 <main+0x90>)
 80010aa:	f7ff fb26 	bl	80006fa <_ZN7GpioOut3offEv>

  //HAL_NVIC_SetPriorityGrouping( NVIC_PRIORITYGROUP_4 );
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010ae:	f008 fd17 	bl	8009ae0 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80010b2:	f7ff fa8d 	bl	80005d0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80010b6:	f008 fd37 	bl	8009b28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <main+0x76>
 80010bc:	20000018 	.word	0x20000018
 80010c0:	20000008 	.word	0x20000008
 80010c4:	200003a8 	.word	0x200003a8
 80010c8:	20000388 	.word	0x20000388
 80010cc:	20000390 	.word	0x20000390
 80010d0:	20000398 	.word	0x20000398
 80010d4:	200003a0 	.word	0x200003a0

080010d8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b09a      	sub	sp, #104	; 0x68
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	2248      	movs	r2, #72	; 0x48
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f00b fb38 	bl	800c75c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]
 80010fa:	615a      	str	r2, [r3, #20]
 80010fc:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010fe:	4b32      	ldr	r3, [pc, #200]	; (80011c8 <_Z18SystemClock_Configv+0xf0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001106:	4a30      	ldr	r2, [pc, #192]	; (80011c8 <_Z18SystemClock_Configv+0xf0>)
 8001108:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	4b2e      	ldr	r3, [pc, #184]	; (80011c8 <_Z18SystemClock_Configv+0xf0>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 800111a:	232f      	movs	r3, #47	; 0x2f
 800111c:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800111e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8001124:	2300      	movs	r3, #0
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800112e:	2301      	movs	r3, #1
 8001130:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001132:	2340      	movs	r3, #64	; 0x40
 8001134:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001136:	2300      	movs	r3, #0
 8001138:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800113a:	2360      	movs	r3, #96	; 0x60
 800113c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800113e:	2305      	movs	r3, #5
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001142:	2302      	movs	r3, #2
 8001144:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001146:	2301      	movs	r3, #1
 8001148:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 800114e:	2320      	movs	r3, #32
 8001150:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001152:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001156:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001158:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800115c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800115e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001162:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001164:	f107 0320 	add.w	r3, r7, #32
 8001168:	4618      	mov	r0, r3
 800116a:	f003 fded 	bl	8004d48 <HAL_RCC_OscConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	bf14      	ite	ne
 8001174:	2301      	movne	r3, #1
 8001176:	2300      	moveq	r3, #0
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 800117e:	f000 f871 	bl	8001264 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001182:	236f      	movs	r3, #111	; 0x6f
 8001184:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001186:	2303      	movs	r3, #3
 8001188:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2103      	movs	r1, #3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f004 f944 	bl	8005430 <HAL_RCC_ClockConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	bf14      	ite	ne
 80011ae:	2301      	movne	r3, #1
 80011b0:	2300      	moveq	r3, #0
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <_Z18SystemClock_Configv+0xe4>
  {
    Error_Handler();
 80011b8:	f000 f854 	bl	8001264 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80011bc:	f004 ff2c 	bl	8006018 <HAL_RCCEx_EnableMSIPLLMode>
}
 80011c0:	bf00      	nop
 80011c2:	3768      	adds	r7, #104	; 0x68
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	58000400 	.word	0x58000400

080011cc <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b094      	sub	sp, #80	; 0x50
 80011d0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d2:	463b      	mov	r3, r7
 80011d4:	2250      	movs	r2, #80	; 0x50
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f00b fabf 	bl	800c75c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80011de:	f44f 5354 	mov.w	r3, #13568	; 0x3500
 80011e2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80011e4:	2318      	movs	r3, #24
 80011e6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80011e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ec:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80011ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011f2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80011f4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80011f8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 80011fa:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 80011fe:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001200:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001204:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001206:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800120a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 800120c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001210:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001212:	2300      	movs	r3, #0
 8001214:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001216:	2310      	movs	r3, #16
 8001218:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800121a:	463b      	mov	r3, r7
 800121c:	4618      	mov	r0, r3
 800121e:	f004 fd85 	bl	8005d2c <HAL_RCCEx_PeriphCLKConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	bf14      	ite	ne
 8001228:	2301      	movne	r3, #1
 800122a:	2300      	moveq	r3, #0
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <_Z24PeriphCommonClock_Configv+0x6a>
  {
    Error_Handler();
 8001232:	f000 f817 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001236:	bf00      	nop
 8001238:	3750      	adds	r7, #80	; 0x50
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d101      	bne.n	8001256 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001252:	f001 fb67 	bl	8002924 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40014800 	.word	0x40014800

08001264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001268:	b672      	cpsid	i
}
 800126a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800126c:	e7fe      	b.n	800126c <Error_Handler+0x8>
	...

08001270 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af02      	add	r7, sp, #8
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b01      	cmp	r3, #1
 800127e:	f040 8084 	bne.w	800138a <_Z41__static_initialization_and_destruction_0ii+0x11a>
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001288:	4293      	cmp	r3, r2
 800128a:	d17e      	bne.n	800138a <_Z41__static_initialization_and_destruction_0ii+0x11a>
GpioOut led1 = GPIO_OUT(LED1, true);
 800128c:	2301      	movs	r3, #1
 800128e:	2201      	movs	r2, #1
 8001290:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001294:	483f      	ldr	r0, [pc, #252]	; (8001394 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8001296:	f7ff f9f4 	bl	8000682 <_ZN7GpioOutC1EP12GPIO_TypeDeftb>
GpioOut led2 = GPIO_OUT(LED2, true);
 800129a:	2301      	movs	r3, #1
 800129c:	2202      	movs	r2, #2
 800129e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80012a2:	483d      	ldr	r0, [pc, #244]	; (8001398 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 80012a4:	f7ff f9ed 	bl	8000682 <_ZN7GpioOutC1EP12GPIO_TypeDeftb>
GpioOut led3 = GPIO_OUT(LED3, true);
 80012a8:	2301      	movs	r3, #1
 80012aa:	2220      	movs	r2, #32
 80012ac:	493b      	ldr	r1, [pc, #236]	; (800139c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80012ae:	483c      	ldr	r0, [pc, #240]	; (80013a0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 80012b0:	f7ff f9e7 	bl	8000682 <_ZN7GpioOutC1EP12GPIO_TypeDeftb>
GpioOut led4 = GPIO_OUT(LED4, true);
 80012b4:	2301      	movs	r3, #1
 80012b6:	2204      	movs	r2, #4
 80012b8:	493a      	ldr	r1, [pc, #232]	; (80013a4 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80012ba:	483b      	ldr	r0, [pc, #236]	; (80013a8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80012bc:	f7ff f9e1 	bl	8000682 <_ZN7GpioOutC1EP12GPIO_TypeDeftb>
GpioOut nm_sleep 			= GPIO_OUT(NM_SLEEP, true);
 80012c0:	2301      	movs	r3, #1
 80012c2:	2201      	movs	r2, #1
 80012c4:	4937      	ldr	r1, [pc, #220]	; (80013a4 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80012c6:	4839      	ldr	r0, [pc, #228]	; (80013ac <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80012c8:	f7ff f9db 	bl	8000682 <_ZN7GpioOutC1EP12GPIO_TypeDeftb>
GpioOut m_right_direction 	= GPIO_OUT(M_RIGHT_DIRECTION, true);
 80012cc:	2301      	movs	r3, #1
 80012ce:	2240      	movs	r2, #64	; 0x40
 80012d0:	4932      	ldr	r1, [pc, #200]	; (800139c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80012d2:	4837      	ldr	r0, [pc, #220]	; (80013b0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80012d4:	f7ff f9d5 	bl	8000682 <_ZN7GpioOutC1EP12GPIO_TypeDeftb>
GpioOut m_left_direction 	= GPIO_OUT(M_LEFT_DIRECTION, true);
 80012d8:	2301      	movs	r3, #1
 80012da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012de:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80012e2:	4834      	ldr	r0, [pc, #208]	; (80013b4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80012e4:	f7ff f9cd 	bl	8000682 <_ZN7GpioOutC1EP12GPIO_TypeDeftb>
GpioOut spi_imu_ncs		= GPIO_OUT(SPI_IMU_NCS, true);
 80012e8:	2301      	movs	r3, #1
 80012ea:	2280      	movs	r2, #128	; 0x80
 80012ec:	492d      	ldr	r1, [pc, #180]	; (80013a4 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80012ee:	4832      	ldr	r0, [pc, #200]	; (80013b8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80012f0:	f7ff f9c7 	bl	8000682 <_ZN7GpioOutC1EP12GPIO_TypeDeftb>
GpioIn spi_imu_int1 	= GPIO_IN(SPI_IMU_INT1, true);
 80012f4:	2301      	movs	r3, #1
 80012f6:	2208      	movs	r2, #8
 80012f8:	4928      	ldr	r1, [pc, #160]	; (800139c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80012fa:	4830      	ldr	r0, [pc, #192]	; (80013bc <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 80012fc:	f7ff f98a 	bl	8000614 <_ZN6GpioInC1EP12GPIO_TypeDeftb>
GpioIn spi_imu_int2 	= GPIO_IN(SPI_IMU_INT2, true);
 8001300:	2301      	movs	r3, #1
 8001302:	2210      	movs	r2, #16
 8001304:	492e      	ldr	r1, [pc, #184]	; (80013c0 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8001306:	482f      	ldr	r0, [pc, #188]	; (80013c4 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8001308:	f7ff f984 	bl	8000614 <_ZN6GpioInC1EP12GPIO_TypeDeftb>
GpioOut spi_ex_ncs1 = GPIO_OUT(SPI_EX_NCS1, true);
 800130c:	2301      	movs	r3, #1
 800130e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001312:	4922      	ldr	r1, [pc, #136]	; (800139c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8001314:	482c      	ldr	r0, [pc, #176]	; (80013c8 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8001316:	f7ff f9b4 	bl	8000682 <_ZN7GpioOutC1EP12GPIO_TypeDeftb>
GpioOut spi_ex_ncs2 = GPIO_OUT(SPI_EX_NCS2, true);
 800131a:	2301      	movs	r3, #1
 800131c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001320:	491e      	ldr	r1, [pc, #120]	; (800139c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8001322:	482a      	ldr	r0, [pc, #168]	; (80013cc <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8001324:	f7ff f9ad 	bl	8000682 <_ZN7GpioOutC1EP12GPIO_TypeDeftb>
GpioIn spi_ex_int1 	= GPIO_IN(SPI_EX_INT1, true);
 8001328:	2301      	movs	r3, #1
 800132a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800132e:	491b      	ldr	r1, [pc, #108]	; (800139c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8001330:	4827      	ldr	r0, [pc, #156]	; (80013d0 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8001332:	f7ff f96f 	bl	8000614 <_ZN6GpioInC1EP12GPIO_TypeDeftb>
GpioIn spi_ex_int2 	= GPIO_IN(SPI_EX_INT2, true);
 8001336:	2301      	movs	r3, #1
 8001338:	2201      	movs	r2, #1
 800133a:	4926      	ldr	r1, [pc, #152]	; (80013d4 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 800133c:	4826      	ldr	r0, [pc, #152]	; (80013d8 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 800133e:	f7ff f969 	bl	8000614 <_ZN6GpioInC1EP12GPIO_TypeDeftb>
Encoder left_encoder(&hlptim1, encoder_ratio);
 8001342:	ed9f 0a26 	vldr	s0, [pc, #152]	; 80013dc <_Z41__static_initialization_and_destruction_0ii+0x16c>
 8001346:	4926      	ldr	r1, [pc, #152]	; (80013e0 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8001348:	4826      	ldr	r0, [pc, #152]	; (80013e4 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 800134a:	f7ff fa06 	bl	800075a <_ZN7EncoderC1EP19LPTIM_HandleTypeDeff>
Encoder right_encoder(&hlptim2, encoder_ratio);
 800134e:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80013dc <_Z41__static_initialization_and_destruction_0ii+0x16c>
 8001352:	4925      	ldr	r1, [pc, #148]	; (80013e8 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8001354:	4825      	ldr	r0, [pc, #148]	; (80013ec <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8001356:	f7ff fa00 	bl	800075a <_ZN7EncoderC1EP19LPTIM_HandleTypeDeff>
PwmOut left_speed_ctrl(&htim1, PwmOutCh::_1);
 800135a:	2200      	movs	r2, #0
 800135c:	4924      	ldr	r1, [pc, #144]	; (80013f0 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 800135e:	4825      	ldr	r0, [pc, #148]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8001360:	f7ff fa4a 	bl	80007f8 <_ZN6PwmOutC1EP17TIM_HandleTypeDef8PwmOutCh>
PwmOut right_speed_ctrl(&htim1, PwmOutCh::_3);
 8001364:	2208      	movs	r2, #8
 8001366:	4922      	ldr	r1, [pc, #136]	; (80013f0 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8001368:	4823      	ldr	r0, [pc, #140]	; (80013f8 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 800136a:	f7ff fa45 	bl	80007f8 <_ZN6PwmOutC1EP17TIM_HandleTypeDef8PwmOutCh>
Max11643 front_adc(&hspi1, &spi_ex_ncs1, &spi_ex_int1);
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8001370:	4a15      	ldr	r2, [pc, #84]	; (80013c8 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8001372:	4922      	ldr	r1, [pc, #136]	; (80013fc <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8001374:	4822      	ldr	r0, [pc, #136]	; (8001400 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8001376:	f000 f8f0 	bl	800155a <_ZN8Max11643C1EP19__SPI_HandleTypeDefP7GpioOutP6GpioIn>
Lsm6dsl imu(&hspi1, &spi_imu_ncs, &spi_imu_int1, &spi_imu_int2);
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8001380:	4a0d      	ldr	r2, [pc, #52]	; (80013b8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8001382:	491e      	ldr	r1, [pc, #120]	; (80013fc <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8001384:	481f      	ldr	r0, [pc, #124]	; (8001404 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8001386:	f7ff fe41 	bl	800100c <_ZN7Lsm6dslC1EP19__SPI_HandleTypeDefP7GpioOutP6GpioInS5_>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000388 	.word	0x20000388
 8001398:	20000390 	.word	0x20000390
 800139c:	48000800 	.word	0x48000800
 80013a0:	20000398 	.word	0x20000398
 80013a4:	48000400 	.word	0x48000400
 80013a8:	200003a0 	.word	0x200003a0
 80013ac:	200003a8 	.word	0x200003a8
 80013b0:	200003b0 	.word	0x200003b0
 80013b4:	200003b8 	.word	0x200003b8
 80013b8:	200003c0 	.word	0x200003c0
 80013bc:	200003c8 	.word	0x200003c8
 80013c0:	48001000 	.word	0x48001000
 80013c4:	200003d0 	.word	0x200003d0
 80013c8:	200003d8 	.word	0x200003d8
 80013cc:	200003e0 	.word	0x200003e0
 80013d0:	200003e8 	.word	0x200003e8
 80013d4:	48000c00 	.word	0x48000c00
 80013d8:	200003f0 	.word	0x200003f0
 80013dc:	3e2aaaab 	.word	0x3e2aaaab
 80013e0:	20000318 	.word	0x20000318
 80013e4:	200003f8 	.word	0x200003f8
 80013e8:	20000350 	.word	0x20000350
 80013ec:	20000400 	.word	0x20000400
 80013f0:	20000754 	.word	0x20000754
 80013f4:	20000008 	.word	0x20000008
 80013f8:	20000018 	.word	0x20000018
 80013fc:	200004ec 	.word	0x200004ec
 8001400:	20000408 	.word	0x20000408
 8001404:	2000046c 	.word	0x2000046c

08001408 <_GLOBAL__sub_I_led1>:
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
 800140c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001410:	2001      	movs	r0, #1
 8001412:	f7ff ff2d 	bl	8001270 <_Z41__static_initialization_and_destruction_0ii>
 8001416:	bd80      	pop	{r7, pc}

08001418 <mainTaskEntry>:
#include "extern_vars.hpp"
#include "app_freertos.h"
#include "main.h"

void mainTaskEntry(void *argument)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	front_adc.init();
 8001420:	4820      	ldr	r0, [pc, #128]	; (80014a4 <mainTaskEntry+0x8c>)
 8001422:	f000 f8f4 	bl	800160e <_ZN8Max116434initEv>
	right_encoder.init();
 8001426:	4820      	ldr	r0, [pc, #128]	; (80014a8 <mainTaskEntry+0x90>)
 8001428:	f7ff f9ae 	bl	8000788 <_ZN7Encoder4initEv>
	left_encoder.init();
 800142c:	481f      	ldr	r0, [pc, #124]	; (80014ac <mainTaskEntry+0x94>)
 800142e:	f7ff f9ab 	bl	8000788 <_ZN7Encoder4initEv>

	int i = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		anglspd1 = right_encoder.getAngleSpeed(0.1f);
 8001436:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80014b0 <mainTaskEntry+0x98>
 800143a:	481b      	ldr	r0, [pc, #108]	; (80014a8 <mainTaskEntry+0x90>)
 800143c:	f7ff f9b4 	bl	80007a8 <_ZN7Encoder13getAngleSpeedEf>
 8001440:	eef0 7a40 	vmov.f32	s15, s0
 8001444:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <mainTaskEntry+0x9c>)
 8001446:	edc3 7a00 	vstr	s15, [r3]
		anglspd2 = left_encoder.getAngleSpeed(0.1f);
 800144a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80014b0 <mainTaskEntry+0x98>
 800144e:	4817      	ldr	r0, [pc, #92]	; (80014ac <mainTaskEntry+0x94>)
 8001450:	f7ff f9aa 	bl	80007a8 <_ZN7Encoder13getAngleSpeedEf>
 8001454:	eef0 7a40 	vmov.f32	s15, s0
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <mainTaskEntry+0xa0>)
 800145a:	edc3 7a00 	vstr	s15, [r3]
		//left_speed_ctrl.setDuty((float)i);
		//right_speed_ctrl.setDuty((float)i);
		if(front_adc.canRequest())
 800145e:	4811      	ldr	r0, [pc, #68]	; (80014a4 <mainTaskEntry+0x8c>)
 8001460:	f000 f962 	bl	8001728 <_ZN8Max1164310canRequestEv>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d002      	beq.n	8001470 <mainTaskEntry+0x58>
			front_adc.requestData();
 800146a:	480e      	ldr	r0, [pc, #56]	; (80014a4 <mainTaskEntry+0x8c>)
 800146c:	f000 f934 	bl	80016d8 <_ZN8Max1164311requestDataEv>
		if(front_adc.canRead())
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <mainTaskEntry+0x8c>)
 8001472:	f000 f923 	bl	80016bc <_ZN8Max116437canReadEv>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d002      	beq.n	8001482 <mainTaskEntry+0x6a>
			front_adc.readData();
 800147c:	4809      	ldr	r0, [pc, #36]	; (80014a4 <mainTaskEntry+0x8c>)
 800147e:	f000 f8f7 	bl	8001670 <_ZN8Max116438readDataEv>
		led1.toggle();
 8001482:	480e      	ldr	r0, [pc, #56]	; (80014bc <mainTaskEntry+0xa4>)
 8001484:	f7ff f955 	bl	8000732 <_ZN7GpioOut6toggleEv>
		vTaskDelay(1000);
 8001488:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800148c:	f009 fc82 	bl	800ad94 <vTaskDelay>
		i++;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	3301      	adds	r3, #1
 8001494:	60fb      	str	r3, [r7, #12]
		if(i > 100) i = 0;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2b64      	cmp	r3, #100	; 0x64
 800149a:	ddcc      	ble.n	8001436 <mainTaskEntry+0x1e>
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
		anglspd1 = right_encoder.getAngleSpeed(0.1f);
 80014a0:	e7c9      	b.n	8001436 <mainTaskEntry+0x1e>
 80014a2:	bf00      	nop
 80014a4:	20000408 	.word	0x20000408
 80014a8:	20000400 	.word	0x20000400
 80014ac:	200003f8 	.word	0x200003f8
 80014b0:	3dcccccd 	.word	0x3dcccccd
 80014b4:	2000047c 	.word	0x2000047c
 80014b8:	20000480 	.word	0x20000480
 80014bc:	20000388 	.word	0x20000388

080014c0 <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
    return memory_order(int(__m) & int(__mod));
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4013      	ands	r3, r2
  }
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <_ZNSt13__atomic_baseIbEC1Eb>:
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	70fb      	strb	r3, [r7, #3]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	78fa      	ldrb	r2, [r7, #3]
 80014ec:	701a      	strb	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <_ZNSt6atomicIbEC1Eb>:
    ~atomic() noexcept = default;
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;

    constexpr atomic(bool __i) noexcept : _M_base(__i) { }
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	70fb      	strb	r3, [r7, #3]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	78fa      	ldrb	r2, [r7, #3]
 800150c:	4611      	mov	r1, r2
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff ffe4 	bl	80014dc <_ZNSt13__atomic_baseIbEC1Eb>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <_ZNKSt6atomicIbEcvbEv>:

    bool
    operator=(bool __i) volatile noexcept
    { return _M_base.operator=(__i); }

    operator bool() const noexcept
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
    { return _M_base.load(); }
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	2305      	movs	r3, #5
 800152c:	613b      	str	r3, [r7, #16]

      _GLIBCXX_ALWAYS_INLINE __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 800152e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001532:	6938      	ldr	r0, [r7, #16]
 8001534:	f7ff ffc4 	bl	80014c0 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 8001538:	60f8      	str	r0, [r7, #12]
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f3bf 8f5b 	dmb	ish
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	f3bf 8f5b 	dmb	ish
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	bf14      	ite	ne
 800154c:	2301      	movne	r3, #1
 800154e:	2300      	moveq	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <_ZN8Max11643C1EP19__SPI_HandleTypeDefP7GpioOutP6GpioIn>:

#include "max11643.hpp"
#include "spi_api.hpp"
#include "common.hpp"

Max11643::Max11643(SPI_HandleTypeDef *hspi, GpioOut *ncs, GpioIn *it) : hspi(hspi), ncs(ncs), it(it), pending_req(false)
 800155a:	b590      	push	{r4, r7, lr}
 800155c:	b08b      	sub	sp, #44	; 0x2c
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2200      	movs	r2, #0
 800157e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3360      	adds	r3, #96	; 0x60
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff ffb8 	bl	80014fc <_ZNSt6atomicIbEC1Eb>
{
	ncs->off();
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff f8b4 	bl	80006fa <_ZN7GpioOut3offEv>
	std::fill(tx_data_buff.begin(), tx_data_buff.end(), 0);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	334c      	adds	r3, #76	; 0x4c
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f8e7 	bl	800176a <_ZNSt5arrayIhLj16EE5beginEv>
 800159c:	4604      	mov	r4, r0
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	334c      	adds	r3, #76	; 0x4c
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f8ed 	bl	8001782 <_ZNSt5arrayIhLj16EE3endEv>
 80015a8:	4601      	mov	r1, r0
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	f107 0310 	add.w	r3, r7, #16
 80015b2:	461a      	mov	r2, r3
 80015b4:	4620      	mov	r0, r4
 80015b6:	f000 f8f1 	bl	800179c <_ZSt4fillIPhiEvT_S1_RKT0_>
	for(auto& it : rx_data_buffs)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	330c      	adds	r3, #12
 80015be:	623b      	str	r3, [r7, #32]
 80015c0:	6a38      	ldr	r0, [r7, #32]
 80015c2:	f000 f8fa 	bl	80017ba <_ZNSt5arrayIS_ItLj16EELj2EE5beginEv>
 80015c6:	6278      	str	r0, [r7, #36]	; 0x24
 80015c8:	6a38      	ldr	r0, [r7, #32]
 80015ca:	f000 f902 	bl	80017d2 <_ZNSt5arrayIS_ItLj16EELj2EE3endEv>
 80015ce:	61f8      	str	r0, [r7, #28]
 80015d0:	e014      	b.n	80015fc <_ZN8Max11643C1EP19__SPI_HandleTypeDefP7GpioOutP6GpioIn+0xa2>
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	61bb      	str	r3, [r7, #24]
		std::fill(it.begin(), it.end(), 0);
 80015d6:	69b8      	ldr	r0, [r7, #24]
 80015d8:	f000 f908 	bl	80017ec <_ZNSt5arrayItLj16EE5beginEv>
 80015dc:	4604      	mov	r4, r0
 80015de:	69b8      	ldr	r0, [r7, #24]
 80015e0:	f000 f910 	bl	8001804 <_ZNSt5arrayItLj16EE3endEv>
 80015e4:	4601      	mov	r1, r0
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	461a      	mov	r2, r3
 80015f0:	4620      	mov	r0, r4
 80015f2:	f000 f914 	bl	800181e <_ZSt4fillIPtiEvT_S1_RKT0_>
	for(auto& it : rx_data_buffs)
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	3320      	adds	r3, #32
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
 80015fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	429a      	cmp	r2, r3
 8001602:	d1e6      	bne.n	80015d2 <_ZN8Max11643C1EP19__SPI_HandleTypeDefP7GpioOutP6GpioIn+0x78>
};
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4618      	mov	r0, r3
 8001608:	372c      	adds	r7, #44	; 0x2c
 800160a:	46bd      	mov	sp, r7
 800160c:	bd90      	pop	{r4, r7, pc}

0800160e <_ZN8Max116434initEv>:

void Max11643::init()
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b08a      	sub	sp, #40	; 0x28
 8001612:	af02      	add	r7, sp, #8
 8001614:	6078      	str	r0, [r7, #4]
	// reset
	tx_data_buff[0] = 0b0001'0'000;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	334c      	adds	r3, #76	; 0x4c
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f000 f90d 	bl	800183c <_ZNSt5arrayIhLj16EEixEj>
 8001622:	4603      	mov	r3, r0
 8001624:	2210      	movs	r2, #16
 8001626:	701a      	strb	r2, [r3, #0]
//	SpiDmaRequest request1 { &tx_data_buff[0], nullptr, 1, cs, nullptr };

	// setup - internal, ref always on
	tx_data_buff[1] = 0b01'10'10'00;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	334c      	adds	r3, #76	; 0x4c
 800162c:	2101      	movs	r1, #1
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f904 	bl	800183c <_ZNSt5arrayIhLj16EEixEj>
 8001634:	4603      	mov	r3, r0
 8001636:	2268      	movs	r2, #104	; 0x68
 8001638:	701a      	strb	r2, [r3, #0]

//	request1.send();
//	request2.send();
//	request3.send();

	SpiDmaRequest request { tx_data_buff.begin(), nullptr, 2, ncs, &pending_req };
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	334c      	adds	r3, #76	; 0x4c
 800163e:	4618      	mov	r0, r3
 8001640:	f000 f893 	bl	800176a <_ZNSt5arrayIhLj16EE5beginEv>
 8001644:	4601      	mov	r1, r0
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	3260      	adds	r2, #96	; 0x60
 800164e:	f107 000c 	add.w	r0, r7, #12
 8001652:	9201      	str	r2, [sp, #4]
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	2302      	movs	r3, #2
 8001658:	2200      	movs	r2, #0
 800165a:	f000 fc49 	bl	8001ef0 <_ZN13SpiDmaRequestC1EPhS0_jP7GpioOutPSt6atomicIbE>
	request.send();
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	4618      	mov	r0, r3
 8001664:	f000 fc62 	bl	8001f2c <_ZN13SpiDmaRequest4sendEv>
}
 8001668:	bf00      	nop
 800166a:	3720      	adds	r7, #32
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <_ZN8Max116438readDataEv>:

void Max11643::readData()
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af02      	add	r7, sp, #8
 8001676:	6078      	str	r0, [r7, #4]
	// intentional uint16* to uint8*
	SpiDmaRequest request1 { nullptr, (uint8_t*)(rx_data_buffs[current_data_index].data()), 32, ncs, nullptr };
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f103 020c 	add.w	r2, r3, #12
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001682:	4619      	mov	r1, r3
 8001684:	4610      	mov	r0, r2
 8001686:	f000 f8e8 	bl	800185a <_ZNSt5arrayIS_ItLj16EELj2EEixEj>
 800168a:	4603      	mov	r3, r0
 800168c:	4618      	mov	r0, r3
 800168e:	f000 f8f3 	bl	8001878 <_ZNSt5arrayItLj16EE4dataEv>
 8001692:	4602      	mov	r2, r0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f107 000c 	add.w	r0, r7, #12
 800169c:	2100      	movs	r1, #0
 800169e:	9101      	str	r1, [sp, #4]
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2320      	movs	r3, #32
 80016a4:	2100      	movs	r1, #0
 80016a6:	f000 fc23 	bl	8001ef0 <_ZN13SpiDmaRequestC1EPhS0_jP7GpioOutPSt6atomicIbE>

//	// request scanning of channel 0 trough 15
//	tx_data_buff[0] = 0b1'1111'000;
//	SpiDmaRequest request2 { tx_data_buff.begin(), nullptr, 1, ncs, &pending_req };

	request1.send();
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 fc3c 	bl	8001f2c <_ZN13SpiDmaRequest4sendEv>
//	request2.send();
}
 80016b4:	bf00      	nop
 80016b6:	3720      	adds	r7, #32
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <_ZN8Max116437canReadEv>:

bool Max11643::canRead()
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	return it->read();
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ffc3 	bl	8000654 <_ZN6GpioIn4readEv>
 80016ce:	4603      	mov	r3, r0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_ZN8Max1164311requestDataEv>:

void Max11643::requestData()
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af02      	add	r7, sp, #8
 80016de:	6078      	str	r0, [r7, #4]
//	// intentional uint16* to uint8*
//	SpiDmaRequest request1 { nullptr, (uint8_t*)(rx_data_buffs[current_data_index].data()), 32, ncs, nullptr };

	// request scanning of channel 0 trough 15
	tx_data_buff[0] = 0b1'1111'000;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	334c      	adds	r3, #76	; 0x4c
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 f8a8 	bl	800183c <_ZNSt5arrayIhLj16EEixEj>
 80016ec:	4603      	mov	r3, r0
 80016ee:	22f8      	movs	r2, #248	; 0xf8
 80016f0:	701a      	strb	r2, [r3, #0]
	SpiDmaRequest request2 { tx_data_buff.begin(), nullptr, 1, ncs, &pending_req };
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	334c      	adds	r3, #76	; 0x4c
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 f837 	bl	800176a <_ZNSt5arrayIhLj16EE5beginEv>
 80016fc:	4601      	mov	r1, r0
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	3260      	adds	r2, #96	; 0x60
 8001706:	f107 000c 	add.w	r0, r7, #12
 800170a:	9201      	str	r2, [sp, #4]
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	2301      	movs	r3, #1
 8001710:	2200      	movs	r2, #0
 8001712:	f000 fbed 	bl	8001ef0 <_ZN13SpiDmaRequestC1EPhS0_jP7GpioOutPSt6atomicIbE>

//	request1.send();
	request2.send();
 8001716:	f107 030c 	add.w	r3, r7, #12
 800171a:	4618      	mov	r0, r3
 800171c:	f000 fc06 	bl	8001f2c <_ZN13SpiDmaRequest4sendEv>
}
 8001720:	bf00      	nop
 8001722:	3720      	adds	r7, #32
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <_ZN8Max1164310canRequestEv>:

bool Max11643::canRequest()
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	return !(pending_req || it->read());
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3360      	adds	r3, #96	; 0x60
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fef2 	bl	800151e <_ZNKSt6atomicIbEcvbEv>
 800173a:	4603      	mov	r3, r0
 800173c:	f083 0301 	eor.w	r3, r3, #1
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00c      	beq.n	8001760 <_ZN8Max1164310canRequestEv+0x38>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe ff82 	bl	8000654 <_ZN6GpioIn4readEv>
 8001750:	4603      	mov	r3, r0
 8001752:	f083 0301 	eor.w	r3, r3, #1
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <_ZN8Max1164310canRequestEv+0x38>
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <_ZN8Max1164310canRequestEv+0x3a>
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <_ZNSt5arrayIhLj16EE5beginEv>:
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f88d 	bl	8001892 <_ZNSt5arrayIhLj16EE4dataEv>
 8001778:	4603      	mov	r3, r0
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <_ZNSt5arrayIhLj16EE3endEv>:
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f881 	bl	8001892 <_ZNSt5arrayIhLj16EE4dataEv>
 8001790:	4603      	mov	r3, r0
 8001792:	3310      	adds	r3, #16
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <_ZSt4fillIPhiEvT_S1_RKT0_>:
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(__first, __last, __value);
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	68b9      	ldr	r1, [r7, #8]
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f000 f87d 	bl	80018ac <_ZSt8__fill_aIPhiEvT_S1_RKT0_>
    }
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <_ZNSt5arrayIS_ItLj16EELj2EE5beginEv>:
      begin() noexcept
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f881 	bl	80018ca <_ZNSt5arrayIS_ItLj16EELj2EE4dataEv>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <_ZNSt5arrayIS_ItLj16EELj2EE3endEv>:
      end() noexcept
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f875 	bl	80018ca <_ZNSt5arrayIS_ItLj16EELj2EE4dataEv>
 80017e0:	4603      	mov	r3, r0
 80017e2:	3340      	adds	r3, #64	; 0x40
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <_ZNSt5arrayItLj16EE5beginEv>:
      begin() noexcept
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 f83f 	bl	8001878 <_ZNSt5arrayItLj16EE4dataEv>
 80017fa:	4603      	mov	r3, r0
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <_ZNSt5arrayItLj16EE3endEv>:
      end() noexcept
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 f833 	bl	8001878 <_ZNSt5arrayItLj16EE4dataEv>
 8001812:	4603      	mov	r3, r0
 8001814:	3320      	adds	r3, #32
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <_ZSt4fillIPtiEvT_S1_RKT0_>:
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 800181e:	b580      	push	{r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
      std::__fill_a(__first, __last, __value);
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f000 f858 	bl	80018e4 <_ZSt8__fill_aIPtiEvT_S1_RKT0_>
    }
 8001834:	bf00      	nop
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <_ZNSt5arrayIhLj16EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return _AT_Type::_S_ref(_M_elems, __n);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6839      	ldr	r1, [r7, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f859 	bl	8001902 <_ZNSt14__array_traitsIhLj16EE6_S_refERA16_Khj>
 8001850:	4603      	mov	r3, r0
      }
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <_ZNSt5arrayIS_ItLj16EELj2EEixEj>:
      operator[](size_type __n) noexcept
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6839      	ldr	r1, [r7, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f000 f858 	bl	800191e <_ZNSt14__array_traitsISt5arrayItLj16EELj2EE6_S_refERA2_KS1_j>
 800186e:	4603      	mov	r3, r0
      }
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <_ZNSt5arrayItLj16EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4618      	mov	r0, r3
 8001884:	f000 f85a 	bl	800193c <_ZNSt14__array_traitsItLj16EE6_S_ptrERA16_Kt>
 8001888:	4603      	mov	r3, r0
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <_ZNSt5arrayIhLj16EE4dataEv>:
      data() noexcept
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4618      	mov	r0, r3
 800189e:	f000 f858 	bl	8001952 <_ZNSt14__array_traitsIhLj16EE6_S_ptrERA16_Kh>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_ZSt8__fill_aIPhiEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	68b9      	ldr	r1, [r7, #8]
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f000 f853 	bl	8001968 <_ZSt9__fill_a1IPhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <_ZNSt5arrayIS_ItLj16EELj2EE4dataEv>:
      data() noexcept
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 f863 	bl	80019a0 <_ZNSt14__array_traitsISt5arrayItLj16EELj2EE6_S_ptrERA2_KS1_>
 80018da:	4603      	mov	r3, r0
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_ZSt8__fill_aIPtiEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	68b9      	ldr	r1, [r7, #8]
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f000 f85e 	bl	80019b6 <_ZSt9__fill_a1IPtiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_ZNSt14__array_traitsIhLj16EE6_S_refERA16_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	4413      	add	r3, r2
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_ZNSt14__array_traitsISt5arrayItLj16EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	015b      	lsls	r3, r3, #5
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	4413      	add	r3, r2
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <_ZNSt14__array_traitsItLj16EE6_S_ptrERA16_Kt>:
      _S_ptr(const _Type& __t) noexcept
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <_ZNSt14__array_traitsIhLj16EE6_S_ptrERA16_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <_ZSt9__fill_a1IPhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8001968:	b480      	push	{r7}
 800196a:	b087      	sub	sp, #28
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 800197a:	e006      	b.n	800198a <_ZSt9__fill_a1IPhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x22>
	*__first = __tmp;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	b2da      	uxtb	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	701a      	strb	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	3301      	adds	r3, #1
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	429a      	cmp	r2, r3
 8001990:	d1f4      	bne.n	800197c <_ZSt9__fill_a1IPhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x14>
    }
 8001992:	bf00      	nop
 8001994:	bf00      	nop
 8001996:	371c      	adds	r7, #28
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <_ZNSt14__array_traitsISt5arrayItLj16EELj2EE6_S_ptrERA2_KS1_>:
      _S_ptr(const _Type& __t) noexcept
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <_ZSt9__fill_a1IPtiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 80019b6:	b480      	push	{r7}
 80019b8:	b087      	sub	sp, #28
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 80019c8:	e006      	b.n	80019d8 <_ZSt9__fill_a1IPtiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x22>
	*__first = __tmp;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	801a      	strh	r2, [r3, #0]
      for (; __first != __last; ++__first)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	3302      	adds	r3, #2
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d1f4      	bne.n	80019ca <_ZSt9__fill_a1IPtiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x14>
    }
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	371c      	adds	r7, #28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <LL_AHB2_GRP1_EnableClock>:
{
 80019ee:	b480      	push	{r7}
 80019f0:	b085      	sub	sp, #20
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a12:	68fb      	ldr	r3, [r7, #12]
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <LL_AHB3_GRP1_EnableClock>:
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4013      	ands	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a44:	68fb      	ldr	r3, [r7, #12]
}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <MX_QUADSPI_Init+0x44>)
 8001a5a:	4a10      	ldr	r2, [pc, #64]	; (8001a9c <MX_QUADSPI_Init+0x48>)
 8001a5c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <MX_QUADSPI_Init+0x44>)
 8001a60:	22ff      	movs	r2, #255	; 0xff
 8001a62:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <MX_QUADSPI_Init+0x44>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <MX_QUADSPI_Init+0x44>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001a70:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <MX_QUADSPI_Init+0x44>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <MX_QUADSPI_Init+0x44>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <MX_QUADSPI_Init+0x44>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001a82:	4805      	ldr	r0, [pc, #20]	; (8001a98 <MX_QUADSPI_Init+0x44>)
 8001a84:	f002 fd22 	bl	80044cc <HAL_QSPI_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001a8e:	f7ff fbe9 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000484 	.word	0x20000484
 8001a9c:	a0001000 	.word	0xa0001000

08001aa0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a19      	ldr	r2, [pc, #100]	; (8001b24 <HAL_QSPI_MspInit+0x84>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d12b      	bne.n	8001b1a <HAL_QSPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001ac2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ac6:	f7ff ffab 	bl	8001a20 <LL_AHB3_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aca:	2002      	movs	r0, #2
 8001acc:	f7ff ff8f 	bl	80019ee <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f7ff ff8c 	bl	80019ee <LL_AHB2_GRP1_EnableClock>
    PA2     ------> QUADSPI_BK1_NCS
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3
    PA7     ------> QUADSPI_BK1_IO2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ad6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ada:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001ae8:	230a      	movs	r3, #10
 8001aea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aec:	f107 030c 	add.w	r3, r7, #12
 8001af0:	4619      	mov	r1, r3
 8001af2:	480d      	ldr	r0, [pc, #52]	; (8001b28 <HAL_QSPI_MspInit+0x88>)
 8001af4:	f002 f934 	bl	8003d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 8001af8:	23cc      	movs	r3, #204	; 0xcc
 8001afa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b04:	2303      	movs	r3, #3
 8001b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b08:	230a      	movs	r3, #10
 8001b0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	4619      	mov	r1, r3
 8001b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b16:	f002 f923 	bl	8003d60 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	3720      	adds	r7, #32
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	a0001000 	.word	0xa0001000
 8001b28:	48000400 	.word	0x48000400

08001b2c <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_APB1_GRP1_EnableClock>:
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b80:	68fb      	ldr	r3, [r7, #12]
}
 8001b82:	bf00      	nop
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b94:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <MX_RTC_Init+0x48>)
 8001b96:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <MX_RTC_Init+0x4c>)
 8001b98:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <MX_RTC_Init+0x48>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ba0:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <MX_RTC_Init+0x48>)
 8001ba2:	227f      	movs	r2, #127	; 0x7f
 8001ba4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <MX_RTC_Init+0x48>)
 8001ba8:	22ff      	movs	r2, #255	; 0xff
 8001baa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <MX_RTC_Init+0x48>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <MX_RTC_Init+0x48>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bb8:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <MX_RTC_Init+0x48>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <MX_RTC_Init+0x48>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bc4:	4804      	ldr	r0, [pc, #16]	; (8001bd8 <MX_RTC_Init+0x48>)
 8001bc6:	f004 fb3f 	bl	8006248 <HAL_RTC_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001bd0:	f7ff fb48 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	200004c8 	.word	0x200004c8
 8001bdc:	40002800 	.word	0x40002800

08001be0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b096      	sub	sp, #88	; 0x58
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001be8:	f107 0308 	add.w	r3, r7, #8
 8001bec:	2250      	movs	r2, #80	; 0x50
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f00a fdb3 	bl	800c75c <memset>
  if(rtcHandle->Instance==RTC)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a0f      	ldr	r2, [pc, #60]	; (8001c38 <HAL_RTC_MspInit+0x58>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d117      	bne.n	8001c30 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8001c00:	f002 fc46 	bl	8004490 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c08:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c0e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c10:	f107 0308 	add.w	r3, r7, #8
 8001c14:	4618      	mov	r0, r3
 8001c16:	f004 f889 	bl	8005d2c <HAL_RCCEx_PeriphCLKConfig>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8001c20:	f7ff fb20 	bl	8001264 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c24:	f7ff ff89 	bl	8001b3a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001c28:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c2c:	f7ff ff96 	bl	8001b5c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001c30:	bf00      	nop
 8001c32:	3758      	adds	r7, #88	; 0x58
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40002800 	.word	0x40002800

08001c3c <LL_AHB2_GRP1_EnableClock>:
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c60:	68fb      	ldr	r3, [r7, #12]
}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b085      	sub	sp, #20
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c92:	68fb      	ldr	r3, [r7, #12]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001ca6:	4a1c      	ldr	r2, [pc, #112]	; (8001d18 <MX_SPI1_Init+0x78>)
 8001ca8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001cac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cb2:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cb8:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001cba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001cbe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cc0:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cc6:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001cd6:	2228      	movs	r2, #40	; 0x28
 8001cd8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cda:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001cee:	2207      	movs	r2, #7
 8001cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001cfa:	2208      	movs	r2, #8
 8001cfc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cfe:	4805      	ldr	r0, [pc, #20]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001d00:	f004 fba2 	bl	8006448 <HAL_SPI_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d0a:	f7ff faab 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200004ec 	.word	0x200004ec
 8001d18:	40013000 	.word	0x40013000

08001d1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 030c 	add.w	r3, r7, #12
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a37      	ldr	r2, [pc, #220]	; (8001e18 <HAL_SPI_MspInit+0xfc>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d168      	bne.n	8001e10 <HAL_SPI_MspInit+0xf4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d3e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d42:	f7ff ff94 	bl	8001c6e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d46:	2002      	movs	r0, #2
 8001d48:	f7ff ff78 	bl	8001c3c <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001d4c:	2338      	movs	r3, #56	; 0x38
 8001d4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d5c:	2305      	movs	r3, #5
 8001d5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	4619      	mov	r1, r3
 8001d66:	482d      	ldr	r0, [pc, #180]	; (8001e1c <HAL_SPI_MspInit+0x100>)
 8001d68:	f001 fffa 	bl	8003d60 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 8001d6c:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <HAL_SPI_MspInit+0x104>)
 8001d6e:	4a2d      	ldr	r2, [pc, #180]	; (8001e24 <HAL_SPI_MspInit+0x108>)
 8001d70:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001d72:	4b2b      	ldr	r3, [pc, #172]	; (8001e20 <HAL_SPI_MspInit+0x104>)
 8001d74:	2206      	movs	r2, #6
 8001d76:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d78:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <HAL_SPI_MspInit+0x104>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d7e:	4b28      	ldr	r3, [pc, #160]	; (8001e20 <HAL_SPI_MspInit+0x104>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d84:	4b26      	ldr	r3, [pc, #152]	; (8001e20 <HAL_SPI_MspInit+0x104>)
 8001d86:	2280      	movs	r2, #128	; 0x80
 8001d88:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d8a:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <HAL_SPI_MspInit+0x104>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d90:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <HAL_SPI_MspInit+0x104>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001d96:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <HAL_SPI_MspInit+0x104>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d9c:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <HAL_SPI_MspInit+0x104>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001da2:	481f      	ldr	r0, [pc, #124]	; (8001e20 <HAL_SPI_MspInit+0x104>)
 8001da4:	f001 fd68 	bl	8003878 <HAL_DMA_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_SPI_MspInit+0x96>
    {
      Error_Handler();
 8001dae:	f7ff fa59 	bl	8001264 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a1a      	ldr	r2, [pc, #104]	; (8001e20 <HAL_SPI_MspInit+0x104>)
 8001db6:	659a      	str	r2, [r3, #88]	; 0x58
 8001db8:	4a19      	ldr	r2, [pc, #100]	; (8001e20 <HAL_SPI_MspInit+0x104>)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 8001dbe:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <HAL_SPI_MspInit+0x10c>)
 8001dc0:	4a1a      	ldr	r2, [pc, #104]	; (8001e2c <HAL_SPI_MspInit+0x110>)
 8001dc2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001dc4:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <HAL_SPI_MspInit+0x10c>)
 8001dc6:	2207      	movs	r2, #7
 8001dc8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dca:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <HAL_SPI_MspInit+0x10c>)
 8001dcc:	2210      	movs	r2, #16
 8001dce:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd0:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <HAL_SPI_MspInit+0x10c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dd6:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <HAL_SPI_MspInit+0x10c>)
 8001dd8:	2280      	movs	r2, #128	; 0x80
 8001dda:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ddc:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_SPI_MspInit+0x10c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001de2:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <HAL_SPI_MspInit+0x10c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001de8:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <HAL_SPI_MspInit+0x10c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <HAL_SPI_MspInit+0x10c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001df4:	480c      	ldr	r0, [pc, #48]	; (8001e28 <HAL_SPI_MspInit+0x10c>)
 8001df6:	f001 fd3f 	bl	8003878 <HAL_DMA_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <HAL_SPI_MspInit+0xe8>
    {
      Error_Handler();
 8001e00:	f7ff fa30 	bl	8001264 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a08      	ldr	r2, [pc, #32]	; (8001e28 <HAL_SPI_MspInit+0x10c>)
 8001e08:	655a      	str	r2, [r3, #84]	; 0x54
 8001e0a:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <HAL_SPI_MspInit+0x10c>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e10:	bf00      	nop
 8001e12:	3720      	adds	r7, #32
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40013000 	.word	0x40013000
 8001e1c:	48000400 	.word	0x48000400
 8001e20:	20000550 	.word	0x20000550
 8001e24:	40020008 	.word	0x40020008
 8001e28:	200005b0 	.word	0x200005b0
 8001e2c:	4002001c 	.word	0x4002001c

08001e30 <_ZNSt6atomicIbE5storeEbSt12memory_order>:
#if __cplusplus >= 201703L
    static constexpr bool is_always_lock_free = ATOMIC_BOOL_LOCK_FREE == 2;
#endif

    void
    store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	72fb      	strb	r3, [r7, #11]
    { _M_base.store(__i, __m); }
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	61fb      	str	r3, [r7, #28]
 8001e42:	7afb      	ldrb	r3, [r7, #11]
 8001e44:	76fb      	strb	r3, [r7, #27]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	617b      	str	r3, [r7, #20]
	  = __m & __memory_order_mask;
 8001e4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e4e:	6978      	ldr	r0, [r7, #20]
 8001e50:	f7ff fb36 	bl	80014c0 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 8001e54:	6138      	str	r0, [r7, #16]
	__atomic_store_n(&_M_i, __i, int(__m));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	7efa      	ldrb	r2, [r7, #27]
 8001e5a:	f3bf 8f5b 	dmb	ish
 8001e5e:	701a      	strb	r2, [r3, #0]
 8001e60:	f3bf 8f5b 	dmb	ish
      }
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	3720      	adds	r7, #32
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <_ZN20SpiDmaRequestHandler10putRequestEP13SpiDmaRequest>:
		SpiDmaRequestHandler(const SpiDmaRequestHandler&) = delete;
		SpiDmaRequestHandler& operator=(SpiDmaRequestHandler const&) = delete;

		using Sdrh = SpiDmaRequestHandler;

		static void putRequest(SpiDmaRequest *request)
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
		{
			xQueueSend(Sdrh::queue, (void*)request, (TickType_t)0);
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <_ZN20SpiDmaRequestHandler10putRequestEP13SpiDmaRequest+0x20>)
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	2200      	movs	r2, #0
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	f008 f8f5 	bl	800a070 <xQueueGenericSend>
		}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000700 	.word	0x20000700

08001e94 <_ZN20SpiDmaRequestHandler18peekRequestFromISREP13SpiDmaRequest>:
		static void peekRequestFromISR(SpiDmaRequest *request)
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
		{
			xQueuePeekFromISR(Sdrh::queue, (void*)request);
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <_ZN20SpiDmaRequestHandler18peekRequestFromISREP13SpiDmaRequest+0x1c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f008 fbde 	bl	800a664 <xQueuePeekFromISR>
		}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000700 	.word	0x20000700

08001eb4 <_ZN20SpiDmaRequestHandler17getRequestFromISREP13SpiDmaRequest>:
		static void getRequestFromISR(SpiDmaRequest *request)
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
		{
			xQueueReceiveFromISR(Sdrh::queue, (void*)request, nullptr);
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <_ZN20SpiDmaRequestHandler17getRequestFromISREP13SpiDmaRequest+0x20>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f008 fb4d 	bl	800a564 <xQueueReceiveFromISR>
		}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000700 	.word	0x20000700

08001ed8 <_ZN20SpiDmaRequestHandler19requestCountFromISREv>:
		static uint32_t requestCountFromISR()
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
		{
			return uxQueueMessagesWaitingFromISR(Sdrh::queue);
 8001edc:	4b03      	ldr	r3, [pc, #12]	; (8001eec <_ZN20SpiDmaRequestHandler19requestCountFromISREv+0x14>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f008 fc28 	bl	800a736 <uxQueueMessagesWaitingFromISR>
 8001ee6:	4603      	mov	r3, r0
		}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000700 	.word	0x20000700

08001ef0 <_ZN13SpiDmaRequestC1EPhS0_jP7GpioOutPSt6atomicIbE>:
//	┏┓  •┳┓     ┳┓
//	┗┓┏┓┓┃┃┏┳┓┏┓┣┫┏┓┏┓┓┏┏┓┏╋
//	┗┛┣┛┗┻┛┛┗┗┗┻┛┗┗ ┗┫┗┻┗ ┛┗
//	  ┛              ┗

SpiDmaRequest::SpiDmaRequest(uint8_t *tx_data, uint8_t *rx_data, size_t size, GpioOut *cs, std::atomic<bool> *pending_request) : rx_data(rx_data), tx_data(tx_data), size(size), cs(cs), pending_request(pending_request) { }
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
 8001efc:	603b      	str	r3, [r7, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	69fa      	ldr	r2, [r7, #28]
 8001f1a:	611a      	str	r2, [r3, #16]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <_ZN13SpiDmaRequest4sendEv>:

void SpiDmaRequest::send()
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	SpiDmaRequestHandler::putRequest(this);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ff9b 	bl	8001e70 <_ZN20SpiDmaRequestHandler10putRequestEP13SpiDmaRequest>
	if(this->pending_request != nullptr)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d006      	beq.n	8001f50 <_ZN13SpiDmaRequest4sendEv+0x24>
	{
		this->pending_request->store(true);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	2205      	movs	r2, #5
 8001f48:	2101      	movs	r1, #1
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ff70 	bl	8001e30 <_ZNSt6atomicIbE5storeEbSt12memory_order>
	}
	if(hspi1.State == HAL_SPI_STATE_READY)
 8001f50:	4b20      	ldr	r3, [pc, #128]	; (8001fd4 <_ZN13SpiDmaRequest4sendEv+0xa8>)
 8001f52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	bf0c      	ite	eq
 8001f5c:	2301      	moveq	r3, #1
 8001f5e:	2300      	movne	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d032      	beq.n	8001fcc <_ZN13SpiDmaRequest4sendEv+0xa0>
	{
		this->cs->on();
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fba9 	bl	80006c2 <_ZN7GpioOut2onEv>
		if(this->tx_data != nullptr && this->rx_data != nullptr)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00e      	beq.n	8001f96 <_ZN13SpiDmaRequest4sendEv+0x6a>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00a      	beq.n	8001f96 <_ZN13SpiDmaRequest4sendEv+0x6a>
			HAL_SPI_TransmitReceive_DMA(&hspi1, this->tx_data, this->rx_data, this->size);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6859      	ldr	r1, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	4811      	ldr	r0, [pc, #68]	; (8001fd4 <_ZN13SpiDmaRequest4sendEv+0xa8>)
 8001f90:	f004 fd16 	bl	80069c0 <HAL_SPI_TransmitReceive_DMA>
		else if(this->tx_data != nullptr)
			HAL_SPI_Transmit_DMA(&hspi1, this->tx_data, this->size);
		else if(this->rx_data != nullptr)
			HAL_SPI_Receive_DMA(&hspi1, this->rx_data, this->size);
	}
}
 8001f94:	e01a      	b.n	8001fcc <_ZN13SpiDmaRequest4sendEv+0xa0>
		else if(this->tx_data != nullptr)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d009      	beq.n	8001fb2 <_ZN13SpiDmaRequest4sendEv+0x86>
			HAL_SPI_Transmit_DMA(&hspi1, this->tx_data, this->size);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6859      	ldr	r1, [r3, #4]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	480a      	ldr	r0, [pc, #40]	; (8001fd4 <_ZN13SpiDmaRequest4sendEv+0xa8>)
 8001fac:	f004 faf0 	bl	8006590 <HAL_SPI_Transmit_DMA>
}
 8001fb0:	e00c      	b.n	8001fcc <_ZN13SpiDmaRequest4sendEv+0xa0>
		else if(this->rx_data != nullptr)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d008      	beq.n	8001fcc <_ZN13SpiDmaRequest4sendEv+0xa0>
			HAL_SPI_Receive_DMA(&hspi1, this->rx_data, this->size);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6819      	ldr	r1, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4803      	ldr	r0, [pc, #12]	; (8001fd4 <_ZN13SpiDmaRequest4sendEv+0xa8>)
 8001fc8:	f004 fbd6 	bl	8006778 <HAL_SPI_Receive_DMA>
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	200004ec 	.word	0x200004ec

08001fd8 <_ZL14handleCallbackP19__SPI_HandleTypeDef>:
//	┃┏┓╋┏┓┏┓┏┓┓┏┏┓╋
//	┻┛┗┗┗ ┛ ┛ ┗┻┣┛┗
//				┛

static void handleCallback(SPI_HandleTypeDef *hspi)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	; 0x28
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	6078      	str	r0, [r7, #4]
	SpiDmaRequest request_buff { nullptr, nullptr, 0, nullptr, nullptr };
 8001fe0:	f107 000c 	add.w	r0, r7, #12
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	2300      	movs	r3, #0
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	2300      	movs	r3, #0
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	f7ff ff7d 	bl	8001ef0 <_ZN13SpiDmaRequestC1EPhS0_jP7GpioOutPSt6atomicIbE>
	SpiDmaRequestHandler::getRequestFromISR(&request_buff);
 8001ff6:	f107 030c 	add.w	r3, r7, #12
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff ff5a 	bl	8001eb4 <_ZN20SpiDmaRequestHandler17getRequestFromISREP13SpiDmaRequest>
	request_buff.cs->off();
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fb79 	bl	80006fa <_ZN7GpioOut3offEv>
	if(request_buff.pending_request != nullptr)
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d005      	beq.n	800201a <_ZL14handleCallbackP19__SPI_HandleTypeDef+0x42>
	{
		request_buff.pending_request->store(false);
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	2205      	movs	r2, #5
 8002012:	2100      	movs	r1, #0
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff0b 	bl	8001e30 <_ZNSt6atomicIbE5storeEbSt12memory_order>
	}
	if(SpiDmaRequestHandler::requestCountFromISR() != 0)
 800201a:	f7ff ff5d 	bl	8001ed8 <_ZN20SpiDmaRequestHandler19requestCountFromISREv>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	bf14      	ite	ne
 8002024:	2301      	movne	r3, #1
 8002026:	2300      	moveq	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d02b      	beq.n	8002086 <_ZL14handleCallbackP19__SPI_HandleTypeDef+0xae>
	{
		SpiDmaRequestHandler::peekRequestFromISR(&request_buff);
 800202e:	f107 030c 	add.w	r3, r7, #12
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff ff2e 	bl	8001e94 <_ZN20SpiDmaRequestHandler18peekRequestFromISREP13SpiDmaRequest>
		request_buff.cs->on();
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fb41 	bl	80006c2 <_ZN7GpioOut2onEv>
		if(request_buff.tx_data != nullptr && request_buff.rx_data != nullptr)
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <_ZL14handleCallbackP19__SPI_HandleTypeDef+0x84>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d007      	beq.n	800205c <_ZL14handleCallbackP19__SPI_HandleTypeDef+0x84>
			HAL_SPI_TransmitReceive_DMA(&hspi1, request_buff.tx_data, request_buff.rx_data, request_buff.size);
 800204c:	6939      	ldr	r1, [r7, #16]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	b29b      	uxth	r3, r3
 8002054:	480e      	ldr	r0, [pc, #56]	; (8002090 <_ZL14handleCallbackP19__SPI_HandleTypeDef+0xb8>)
 8002056:	f004 fcb3 	bl	80069c0 <HAL_SPI_TransmitReceive_DMA>
		else if(request_buff.tx_data != nullptr)
			HAL_SPI_Transmit_DMA(&hspi1, request_buff.tx_data, request_buff.size);
		else if(request_buff.rx_data != nullptr)
			HAL_SPI_Receive_DMA(&hspi1, request_buff.rx_data, request_buff.size);
	}
}
 800205a:	e014      	b.n	8002086 <_ZL14handleCallbackP19__SPI_HandleTypeDef+0xae>
		else if(request_buff.tx_data != nullptr)
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d007      	beq.n	8002072 <_ZL14handleCallbackP19__SPI_HandleTypeDef+0x9a>
			HAL_SPI_Transmit_DMA(&hspi1, request_buff.tx_data, request_buff.size);
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	b292      	uxth	r2, r2
 8002068:	4619      	mov	r1, r3
 800206a:	4809      	ldr	r0, [pc, #36]	; (8002090 <_ZL14handleCallbackP19__SPI_HandleTypeDef+0xb8>)
 800206c:	f004 fa90 	bl	8006590 <HAL_SPI_Transmit_DMA>
}
 8002070:	e009      	b.n	8002086 <_ZL14handleCallbackP19__SPI_HandleTypeDef+0xae>
		else if(request_buff.rx_data != nullptr)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d006      	beq.n	8002086 <_ZL14handleCallbackP19__SPI_HandleTypeDef+0xae>
			HAL_SPI_Receive_DMA(&hspi1, request_buff.rx_data, request_buff.size);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	b292      	uxth	r2, r2
 800207e:	4619      	mov	r1, r3
 8002080:	4803      	ldr	r0, [pc, #12]	; (8002090 <_ZL14handleCallbackP19__SPI_HandleTypeDef+0xb8>)
 8002082:	f004 fb79 	bl	8006778 <HAL_SPI_Receive_DMA>
}
 8002086:	bf00      	nop
 8002088:	3720      	adds	r7, #32
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200004ec 	.word	0x200004ec

08002094 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	handleCallback(hspi);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ff9b 	bl	8001fd8 <_ZL14handleCallbackP19__SPI_HandleTypeDef>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
	handleCallback(hspi);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff ff90 	bl	8001fd8 <_ZL14handleCallbackP19__SPI_HandleTypeDef>
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
	handleCallback(hspi);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ff85 	bl	8001fd8 <_ZL14handleCallbackP19__SPI_HandleTypeDef>
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <_Z41__static_initialization_and_destruction_0ii>:
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af02      	add	r7, sp, #8
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d11d      	bne.n	8002124 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d118      	bne.n	8002124 <_Z41__static_initialization_and_destruction_0ii+0x4c>
		static inline QueueHandle_t queue = xQueueCreateStatic(8, sizeof(SpiDmaRequest), queue_stotage, &static_queue);
 80020f2:	4b0e      	ldr	r3, [pc, #56]	; (800212c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	3301      	adds	r3, #1
 80020f8:	4a0c      	ldr	r2, [pc, #48]	; (800212c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80020fa:	6013      	str	r3, [r2, #0]
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	bf0c      	ite	eq
 8002104:	2301      	moveq	r3, #1
 8002106:	2300      	movne	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00a      	beq.n	8002124 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800210e:	2300      	movs	r3, #0
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	4b07      	ldr	r3, [pc, #28]	; (8002130 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002114:	4a07      	ldr	r2, [pc, #28]	; (8002134 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002116:	2114      	movs	r1, #20
 8002118:	2008      	movs	r0, #8
 800211a:	f007 ff0d 	bl	8009f38 <xQueueGenericCreateStatic>
 800211e:	4603      	mov	r3, r0
 8002120:	4a05      	ldr	r2, [pc, #20]	; (8002138 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002122:	6013      	str	r3, [r2, #0]
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000704 	.word	0x20000704
 8002130:	20000610 	.word	0x20000610
 8002134:	20000660 	.word	0x20000660
 8002138:	20000700 	.word	0x20000700

0800213c <_GLOBAL__sub_I__ZN13SpiDmaRequestC2EPhS0_jP7GpioOutPSt6atomicIbE>:
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
 8002140:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002144:	2001      	movs	r0, #1
 8002146:	f7ff ffc7 	bl	80020d8 <_Z41__static_initialization_and_destruction_0ii>
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002150:	2200      	movs	r2, #0
 8002152:	210f      	movs	r1, #15
 8002154:	f06f 0001 	mvn.w	r0, #1
 8002158:	f001 fb66 	bl	8003828 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800215c:	bf00      	nop
 800215e:	bd80      	pop	{r7, pc}

08002160 <LL_APB2_GRP1_EnableClock>:
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800216e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4313      	orrs	r3, r2
 8002176:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4013      	ands	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002184:	68fb      	ldr	r3, [r7, #12]
}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08c      	sub	sp, #48	; 0x30
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 80021a4:	2200      	movs	r2, #0
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	201a      	movs	r0, #26
 80021aa:	f001 fb3d 	bl	8003828 <HAL_NVIC_SetPriority>
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80021ae:	201a      	movs	r0, #26
 80021b0:	f001 fb54 	bl	800385c <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80021b4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80021b8:	f7ff ffd2 	bl	8002160 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021bc:	f107 0208 	add.w	r2, r7, #8
 80021c0:	f107 030c 	add.w	r3, r7, #12
 80021c4:	4611      	mov	r1, r2
 80021c6:	4618      	mov	r0, r3
 80021c8:	f003 fb1e 	bl	8005808 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80021cc:	f003 fb06 	bl	80057dc <HAL_RCC_GetPCLK2Freq>
 80021d0:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d4:	4a12      	ldr	r2, [pc, #72]	; (8002220 <HAL_InitTick+0x8c>)
 80021d6:	fba2 2303 	umull	r2, r3, r2, r3
 80021da:	0c9b      	lsrs	r3, r3, #18
 80021dc:	3b01      	subs	r3, #1
 80021de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80021e0:	4b10      	ldr	r3, [pc, #64]	; (8002224 <HAL_InitTick+0x90>)
 80021e2:	4a11      	ldr	r2, [pc, #68]	; (8002228 <HAL_InitTick+0x94>)
 80021e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80021e6:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <HAL_InitTick+0x90>)
 80021e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021ec:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80021ee:	4a0d      	ldr	r2, [pc, #52]	; (8002224 <HAL_InitTick+0x90>)
 80021f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f2:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_InitTick+0x90>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fa:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <HAL_InitTick+0x90>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8002200:	4808      	ldr	r0, [pc, #32]	; (8002224 <HAL_InitTick+0x90>)
 8002202:	f005 f887 	bl	8007314 <HAL_TIM_Base_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d104      	bne.n	8002216 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 800220c:	4805      	ldr	r0, [pc, #20]	; (8002224 <HAL_InitTick+0x90>)
 800220e:	f005 f8d9 	bl	80073c4 <HAL_TIM_Base_Start_IT>
 8002212:	4603      	mov	r3, r0
 8002214:	e000      	b.n	8002218 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
}
 8002218:	4618      	mov	r0, r3
 800221a:	3730      	adds	r7, #48	; 0x30
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	431bde83 	.word	0x431bde83
 8002224:	20000708 	.word	0x20000708
 8002228:	40014800 	.word	0x40014800

0800222c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002230:	e7fe      	b.n	8002230 <NMI_Handler+0x4>

08002232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002236:	e7fe      	b.n	8002236 <HardFault_Handler+0x4>

08002238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800223c:	e7fe      	b.n	800223c <MemManage_Handler+0x4>

0800223e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002242:	e7fe      	b.n	8002242 <BusFault_Handler+0x4>

08002244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002248:	e7fe      	b.n	8002248 <UsageFault_Handler+0x4>

0800224a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800225c:	4802      	ldr	r0, [pc, #8]	; (8002268 <DMA1_Channel1_IRQHandler+0x10>)
 800225e:	f001 fc2e 	bl	8003abe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000550 	.word	0x20000550

0800226c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <DMA1_Channel2_IRQHandler+0x10>)
 8002272:	f001 fc24 	bl	8003abe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200005b0 	.word	0x200005b0

08002280 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002286:	f005 fa27 	bl	80076d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000754 	.word	0x20000754

08002294 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002298:	4803      	ldr	r0, [pc, #12]	; (80022a8 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 800229a:	f005 fa1d 	bl	80076d8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800229e:	4803      	ldr	r0, [pc, #12]	; (80022ac <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80022a0:	f005 fa1a 	bl	80076d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000754 	.word	0x20000754
 80022ac:	20000708 	.word	0x20000708

080022b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80022b4:	4b24      	ldr	r3, [pc, #144]	; (8002348 <SystemInit+0x98>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ba:	4a23      	ldr	r2, [pc, #140]	; (8002348 <SystemInit+0x98>)
 80022bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80022c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80022d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80022dc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80022de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022e8:	4b18      	ldr	r3, [pc, #96]	; (800234c <SystemInit+0x9c>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80022ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022fa:	f023 0305 	bic.w	r3, r3, #5
 80022fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002306:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800230a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800230e:	f023 0301 	bic.w	r3, r3, #1
 8002312:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231a:	4a0d      	ldr	r2, [pc, #52]	; (8002350 <SystemInit+0xa0>)
 800231c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800231e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002322:	4a0b      	ldr	r2, [pc, #44]	; (8002350 <SystemInit+0xa0>)
 8002324:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002334:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800233a:	2200      	movs	r2, #0
 800233c:	619a      	str	r2, [r3, #24]
}
 800233e:	bf00      	nop
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000ed00 	.word	0xe000ed00
 800234c:	faf6fefb 	.word	0xfaf6fefb
 8002350:	22041000 	.word	0x22041000

08002354 <LL_AHB2_GRP1_EnableClock>:
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800235c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002360:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4313      	orrs	r3, r2
 800236a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800236c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002370:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4013      	ands	r3, r2
 8002376:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002378:	68fb      	ldr	r3, [r7, #12]
}
 800237a:	bf00      	nop
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <LL_APB2_GRP1_EnableClock>:
{
 8002386:	b480      	push	{r7}
 8002388:	b085      	sub	sp, #20
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800238e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002392:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002394:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4313      	orrs	r3, r2
 800239c:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800239e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4013      	ands	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023aa:	68fb      	ldr	r3, [r7, #12]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b09c      	sub	sp, #112	; 0x70
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]
 80023e8:	615a      	str	r2, [r3, #20]
 80023ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	2234      	movs	r2, #52	; 0x34
 80023f0:	2100      	movs	r1, #0
 80023f2:	4618      	mov	r0, r3
 80023f4:	f00a f9b2 	bl	800c75c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023f8:	4b4b      	ldr	r3, [pc, #300]	; (8002528 <MX_TIM1_Init+0x170>)
 80023fa:	4a4c      	ldr	r2, [pc, #304]	; (800252c <MX_TIM1_Init+0x174>)
 80023fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 80023fe:	4b4a      	ldr	r3, [pc, #296]	; (8002528 <MX_TIM1_Init+0x170>)
 8002400:	2240      	movs	r2, #64	; 0x40
 8002402:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002404:	4b48      	ldr	r3, [pc, #288]	; (8002528 <MX_TIM1_Init+0x170>)
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000 - 1;
 800240a:	4b47      	ldr	r3, [pc, #284]	; (8002528 <MX_TIM1_Init+0x170>)
 800240c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002410:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002412:	4b45      	ldr	r3, [pc, #276]	; (8002528 <MX_TIM1_Init+0x170>)
 8002414:	2200      	movs	r2, #0
 8002416:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002418:	4b43      	ldr	r3, [pc, #268]	; (8002528 <MX_TIM1_Init+0x170>)
 800241a:	2200      	movs	r2, #0
 800241c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241e:	4b42      	ldr	r3, [pc, #264]	; (8002528 <MX_TIM1_Init+0x170>)
 8002420:	2200      	movs	r2, #0
 8002422:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002424:	4840      	ldr	r0, [pc, #256]	; (8002528 <MX_TIM1_Init+0x170>)
 8002426:	f004 ff75 	bl	8007314 <HAL_TIM_Base_Init>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002430:	f7fe ff18 	bl	8001264 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002438:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800243a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800243e:	4619      	mov	r1, r3
 8002440:	4839      	ldr	r0, [pc, #228]	; (8002528 <MX_TIM1_Init+0x170>)
 8002442:	f005 fb7d 	bl	8007b40 <HAL_TIM_ConfigClockSource>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800244c:	f7fe ff0a 	bl	8001264 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002450:	4835      	ldr	r0, [pc, #212]	; (8002528 <MX_TIM1_Init+0x170>)
 8002452:	f005 f805 	bl	8007460 <HAL_TIM_PWM_Init>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800245c:	f7fe ff02 	bl	8001264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002460:	2300      	movs	r3, #0
 8002462:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002464:	2300      	movs	r3, #0
 8002466:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002468:	2300      	movs	r3, #0
 800246a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800246c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002470:	4619      	mov	r1, r3
 8002472:	482d      	ldr	r0, [pc, #180]	; (8002528 <MX_TIM1_Init+0x170>)
 8002474:	f005 fffa 	bl	800846c <HAL_TIMEx_MasterConfigSynchronization>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800247e:	f7fe fef1 	bl	8001264 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002482:	2360      	movs	r3, #96	; 0x60
 8002484:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800248a:	2300      	movs	r3, #0
 800248c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800248e:	2300      	movs	r3, #0
 8002490:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002492:	2300      	movs	r3, #0
 8002494:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800249e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024a2:	2200      	movs	r2, #0
 80024a4:	4619      	mov	r1, r3
 80024a6:	4820      	ldr	r0, [pc, #128]	; (8002528 <MX_TIM1_Init+0x170>)
 80024a8:	f005 fa36 	bl	8007918 <HAL_TIM_PWM_ConfigChannel>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80024b2:	f7fe fed7 	bl	8001264 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024ba:	2208      	movs	r2, #8
 80024bc:	4619      	mov	r1, r3
 80024be:	481a      	ldr	r0, [pc, #104]	; (8002528 <MX_TIM1_Init+0x170>)
 80024c0:	f005 fa2a 	bl	8007918 <HAL_TIM_PWM_ConfigChannel>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80024ca:	f7fe fecb 	bl	8001264 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80024ec:	2300      	movs	r3, #0
 80024ee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80024f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80024fe:	2300      	movs	r3, #0
 8002500:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	4619      	mov	r1, r3
 800250a:	4807      	ldr	r0, [pc, #28]	; (8002528 <MX_TIM1_Init+0x170>)
 800250c:	f006 f80e 	bl	800852c <HAL_TIMEx_ConfigBreakDeadTime>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8002516:	f7fe fea5 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800251a:	4803      	ldr	r0, [pc, #12]	; (8002528 <MX_TIM1_Init+0x170>)
 800251c:	f000 f82c 	bl	8002578 <HAL_TIM_MspPostInit>

}
 8002520:	bf00      	nop
 8002522:	3770      	adds	r7, #112	; 0x70
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000754 	.word	0x20000754
 800252c:	40012c00 	.word	0x40012c00

08002530 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a0d      	ldr	r2, [pc, #52]	; (8002574 <HAL_TIM_Base_MspInit+0x44>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d113      	bne.n	800256a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002542:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002546:	f7ff ff1e 	bl	8002386 <LL_APB2_GRP1_EnableClock>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 800254a:	2200      	movs	r2, #0
 800254c:	2105      	movs	r1, #5
 800254e:	2019      	movs	r0, #25
 8002550:	f001 f96a 	bl	8003828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002554:	2019      	movs	r0, #25
 8002556:	f001 f981 	bl	800385c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 15, 0);
 800255a:	2200      	movs	r2, #0
 800255c:	210f      	movs	r1, #15
 800255e:	201a      	movs	r0, #26
 8002560:	f001 f962 	bl	8003828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002564:	201a      	movs	r0, #26
 8002566:	f001 f979 	bl	800385c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40012c00 	.word	0x40012c00

08002578 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b088      	sub	sp, #32
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	f107 030c 	add.w	r3, r7, #12
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a0d      	ldr	r2, [pc, #52]	; (80025cc <HAL_TIM_MspPostInit+0x54>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d114      	bne.n	80025c4 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259a:	2001      	movs	r0, #1
 800259c:	f7ff feda 	bl	8002354 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80025a0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80025a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a6:	2302      	movs	r3, #2
 80025a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025b2:	2301      	movs	r3, #1
 80025b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b6:	f107 030c 	add.w	r3, r7, #12
 80025ba:	4619      	mov	r1, r3
 80025bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025c0:	f001 fbce 	bl	8003d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80025c4:	bf00      	nop
 80025c6:	3720      	adds	r7, #32
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40012c00 	.word	0x40012c00

080025d0 <LL_AHB2_GRP1_EnableClock>:
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80025d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80025e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4013      	ands	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025f4:	68fb      	ldr	r3, [r7, #12]
}
 80025f6:	bf00      	nop
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <LL_APB1_GRP2_EnableClock>:
{
 8002602:	b480      	push	{r7}
 8002604:	b085      	sub	sp, #20
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 800260a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800260e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002610:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4313      	orrs	r3, r2
 8002618:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800261a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4013      	ands	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002626:	68fb      	ldr	r3, [r7, #12]
}
 8002628:	bf00      	nop
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002638:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <MX_LPUART1_UART_Init+0x90>)
 800263a:	4a23      	ldr	r2, [pc, #140]	; (80026c8 <MX_LPUART1_UART_Init+0x94>)
 800263c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800263e:	4b21      	ldr	r3, [pc, #132]	; (80026c4 <MX_LPUART1_UART_Init+0x90>)
 8002640:	4a22      	ldr	r2, [pc, #136]	; (80026cc <MX_LPUART1_UART_Init+0x98>)
 8002642:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002644:	4b1f      	ldr	r3, [pc, #124]	; (80026c4 <MX_LPUART1_UART_Init+0x90>)
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800264a:	4b1e      	ldr	r3, [pc, #120]	; (80026c4 <MX_LPUART1_UART_Init+0x90>)
 800264c:	2200      	movs	r2, #0
 800264e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002650:	4b1c      	ldr	r3, [pc, #112]	; (80026c4 <MX_LPUART1_UART_Init+0x90>)
 8002652:	2200      	movs	r2, #0
 8002654:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002656:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <MX_LPUART1_UART_Init+0x90>)
 8002658:	220c      	movs	r2, #12
 800265a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800265c:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <MX_LPUART1_UART_Init+0x90>)
 800265e:	2200      	movs	r2, #0
 8002660:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002662:	4b18      	ldr	r3, [pc, #96]	; (80026c4 <MX_LPUART1_UART_Init+0x90>)
 8002664:	2200      	movs	r2, #0
 8002666:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002668:	4b16      	ldr	r3, [pc, #88]	; (80026c4 <MX_LPUART1_UART_Init+0x90>)
 800266a:	2200      	movs	r2, #0
 800266c:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <MX_LPUART1_UART_Init+0x90>)
 8002670:	2200      	movs	r2, #0
 8002672:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002674:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <MX_LPUART1_UART_Init+0x90>)
 8002676:	2200      	movs	r2, #0
 8002678:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800267a:	4812      	ldr	r0, [pc, #72]	; (80026c4 <MX_LPUART1_UART_Init+0x90>)
 800267c:	f006 f824 	bl	80086c8 <HAL_UART_Init>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8002686:	f7fe fded 	bl	8001264 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800268a:	2100      	movs	r1, #0
 800268c:	480d      	ldr	r0, [pc, #52]	; (80026c4 <MX_LPUART1_UART_Init+0x90>)
 800268e:	f006 fce5 	bl	800905c <HAL_UARTEx_SetTxFifoThreshold>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8002698:	f7fe fde4 	bl	8001264 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800269c:	2100      	movs	r1, #0
 800269e:	4809      	ldr	r0, [pc, #36]	; (80026c4 <MX_LPUART1_UART_Init+0x90>)
 80026a0:	f006 fd1a 	bl	80090d8 <HAL_UARTEx_SetRxFifoThreshold>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80026aa:	f7fe fddb 	bl	8001264 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80026ae:	4805      	ldr	r0, [pc, #20]	; (80026c4 <MX_LPUART1_UART_Init+0x90>)
 80026b0:	f006 fc9b 	bl	8008fea <HAL_UARTEx_DisableFifoMode>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80026ba:	f7fe fdd3 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	200007a0 	.word	0x200007a0
 80026c8:	40008000 	.word	0x40008000
 80026cc:	00033324 	.word	0x00033324

080026d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b09c      	sub	sp, #112	; 0x70
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026e8:	f107 030c 	add.w	r3, r7, #12
 80026ec:	2250      	movs	r2, #80	; 0x50
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f00a f833 	bl	800c75c <memset>
  if(uartHandle->Instance==LPUART1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a16      	ldr	r2, [pc, #88]	; (8002754 <HAL_UART_MspInit+0x84>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d124      	bne.n	800274a <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002700:	2302      	movs	r3, #2
 8002702:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002704:	2300      	movs	r3, #0
 8002706:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002708:	f107 030c 	add.w	r3, r7, #12
 800270c:	4618      	mov	r0, r3
 800270e:	f003 fb0d 	bl	8005d2c <HAL_RCCEx_PeriphCLKConfig>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002718:	f7fe fda4 	bl	8001264 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800271c:	2001      	movs	r0, #1
 800271e:	f7ff ff70 	bl	8002602 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002722:	2002      	movs	r0, #2
 8002724:	f7ff ff54 	bl	80025d0 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002728:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800272c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272e:	2302      	movs	r3, #2
 8002730:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002736:	2303      	movs	r3, #3
 8002738:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800273a:	2308      	movs	r3, #8
 800273c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800273e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002742:	4619      	mov	r1, r3
 8002744:	4804      	ldr	r0, [pc, #16]	; (8002758 <HAL_UART_MspInit+0x88>)
 8002746:	f001 fb0b 	bl	8003d60 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800274a:	bf00      	nop
 800274c:	3770      	adds	r7, #112	; 0x70
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40008000 	.word	0x40008000
 8002758:	48000400 	.word	0x48000400

0800275c <LL_AHB2_GRP1_EnableClock>:
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002768:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800276a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4313      	orrs	r3, r2
 8002772:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002778:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4013      	ands	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002780:	68fb      	ldr	r3, [r7, #12]
}
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <LL_APB1_GRP1_EnableClock>:
{
 800278e:	b480      	push	{r7}
 8002790:	b085      	sub	sp, #20
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800279a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800279c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80027a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4013      	ands	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027b2:	68fb      	ldr	r3, [r7, #12]
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80027c4:	4b10      	ldr	r3, [pc, #64]	; (8002808 <MX_USB_PCD_Init+0x48>)
 80027c6:	4a11      	ldr	r2, [pc, #68]	; (800280c <MX_USB_PCD_Init+0x4c>)
 80027c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80027ca:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <MX_USB_PCD_Init+0x48>)
 80027cc:	2208      	movs	r2, #8
 80027ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80027d0:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <MX_USB_PCD_Init+0x48>)
 80027d2:	2202      	movs	r2, #2
 80027d4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80027d6:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <MX_USB_PCD_Init+0x48>)
 80027d8:	2202      	movs	r2, #2
 80027da:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80027dc:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <MX_USB_PCD_Init+0x48>)
 80027de:	2200      	movs	r2, #0
 80027e0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80027e2:	4b09      	ldr	r3, [pc, #36]	; (8002808 <MX_USB_PCD_Init+0x48>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80027e8:	4b07      	ldr	r3, [pc, #28]	; (8002808 <MX_USB_PCD_Init+0x48>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80027ee:	4b06      	ldr	r3, [pc, #24]	; (8002808 <MX_USB_PCD_Init+0x48>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80027f4:	4804      	ldr	r0, [pc, #16]	; (8002808 <MX_USB_PCD_Init+0x48>)
 80027f6:	f001 fd47 	bl	8004288 <HAL_PCD_Init>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002800:	f7fe fd30 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002804:	bf00      	nop
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20000834 	.word	0x20000834
 800280c:	40006800 	.word	0x40006800

08002810 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002818:	f107 030c 	add.w	r3, r7, #12
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	60da      	str	r2, [r3, #12]
 8002826:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0f      	ldr	r2, [pc, #60]	; (800286c <HAL_PCD_MspInit+0x5c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d118      	bne.n	8002864 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002832:	2001      	movs	r0, #1
 8002834:	f7ff ff92 	bl	800275c <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002838:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800283c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283e:	2302      	movs	r3, #2
 8002840:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002846:	2300      	movs	r3, #0
 8002848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800284a:	230a      	movs	r3, #10
 800284c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284e:	f107 030c 	add.w	r3, r7, #12
 8002852:	4619      	mov	r1, r3
 8002854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002858:	f001 fa82 	bl	8003d60 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800285c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002860:	f7ff ff95 	bl	800278e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002864:	bf00      	nop
 8002866:	3720      	adds	r7, #32
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40006800 	.word	0x40006800

08002870 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002870:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002872:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002874:	3304      	adds	r3, #4

08002876 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002876:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002878:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800287a:	d3f9      	bcc.n	8002870 <CopyDataInit>
  bx lr
 800287c:	4770      	bx	lr

0800287e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800287e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002880:	3004      	adds	r0, #4

08002882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002882:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002884:	d3fb      	bcc.n	800287e <FillZerobss>
  bx lr
 8002886:	4770      	bx	lr

08002888 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002888:	480c      	ldr	r0, [pc, #48]	; (80028bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800288a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800288c:	f7ff fd10 	bl	80022b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002890:	480b      	ldr	r0, [pc, #44]	; (80028c0 <LoopForever+0x6>)
 8002892:	490c      	ldr	r1, [pc, #48]	; (80028c4 <LoopForever+0xa>)
 8002894:	4a0c      	ldr	r2, [pc, #48]	; (80028c8 <LoopForever+0xe>)
 8002896:	2300      	movs	r3, #0
 8002898:	f7ff ffed 	bl	8002876 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800289c:	480b      	ldr	r0, [pc, #44]	; (80028cc <LoopForever+0x12>)
 800289e:	490c      	ldr	r1, [pc, #48]	; (80028d0 <LoopForever+0x16>)
 80028a0:	4a0c      	ldr	r2, [pc, #48]	; (80028d4 <LoopForever+0x1a>)
 80028a2:	2300      	movs	r3, #0
 80028a4:	f7ff ffe7 	bl	8002876 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80028a8:	480b      	ldr	r0, [pc, #44]	; (80028d8 <LoopForever+0x1e>)
 80028aa:	490c      	ldr	r1, [pc, #48]	; (80028dc <LoopForever+0x22>)
 80028ac:	2300      	movs	r3, #0
 80028ae:	f7ff ffe8 	bl	8002882 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80028b2:	f009 ff5b 	bl	800c76c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80028b6:	f7fe fbc5 	bl	8001044 <main>

080028ba <LoopForever>:

LoopForever:
  b LoopForever
 80028ba:	e7fe      	b.n	80028ba <LoopForever>
  ldr   r0, =_estack
 80028bc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80028c0:	20000008 	.word	0x20000008
 80028c4:	20000038 	.word	0x20000038
 80028c8:	0800c93c 	.word	0x0800c93c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80028cc:	20030000 	.word	0x20030000
 80028d0:	20030000 	.word	0x20030000
 80028d4:	0800c96c 	.word	0x0800c96c
  INIT_BSS _sbss, _ebss
 80028d8:	20000038 	.word	0x20000038
 80028dc:	2000247c 	.word	0x2000247c

080028e0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028e0:	e7fe      	b.n	80028e0 <ADC1_IRQHandler>
	...

080028e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028ee:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <HAL_Init+0x3c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a0b      	ldr	r2, [pc, #44]	; (8002920 <HAL_Init+0x3c>)
 80028f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028fa:	2003      	movs	r0, #3
 80028fc:	f000 ff89 	bl	8003812 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002900:	200f      	movs	r0, #15
 8002902:	f7ff fc47 	bl	8002194 <HAL_InitTick>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d002      	beq.n	8002912 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	71fb      	strb	r3, [r7, #7]
 8002910:	e001      	b.n	8002916 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002912:	f7ff fc1b 	bl	800214c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002916:	79fb      	ldrb	r3, [r7, #7]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	58004000 	.word	0x58004000

08002924 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <HAL_IncTick+0x20>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	461a      	mov	r2, r3
 800292e:	4b06      	ldr	r3, [pc, #24]	; (8002948 <HAL_IncTick+0x24>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4413      	add	r3, r2
 8002934:	4a04      	ldr	r2, [pc, #16]	; (8002948 <HAL_IncTick+0x24>)
 8002936:	6013      	str	r3, [r2, #0]
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	20000030 	.word	0x20000030
 8002948:	20000b28 	.word	0x20000b28

0800294c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return uwTick;
 8002950:	4b03      	ldr	r3, [pc, #12]	; (8002960 <HAL_GetTick+0x14>)
 8002952:	681b      	ldr	r3, [r3, #0]
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	20000b28 	.word	0x20000b28

08002964 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002968:	4b03      	ldr	r3, [pc, #12]	; (8002978 <HAL_GetTickPrio+0x14>)
 800296a:	681b      	ldr	r3, [r3, #0]
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	2000002c 	.word	0x2000002c

0800297c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	609a      	str	r2, [r3, #8]
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	3360      	adds	r3, #96	; 0x60
 80029f6:	461a      	mov	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <LL_ADC_SetOffset+0x44>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002a1c:	bf00      	nop
 8002a1e:	371c      	adds	r7, #28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	03fff000 	.word	0x03fff000

08002a2c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3360      	adds	r3, #96	; 0x60
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	3360      	adds	r3, #96	; 0x60
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a82:	bf00      	nop
 8002a84:	371c      	adds	r7, #28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b087      	sub	sp, #28
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	3330      	adds	r3, #48	; 0x30
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	0a1b      	lsrs	r3, r3, #8
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	4413      	add	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	211f      	movs	r1, #31
 8002aba:	fa01 f303 	lsl.w	r3, r1, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	401a      	ands	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	0e9b      	lsrs	r3, r3, #26
 8002ac6:	f003 011f 	and.w	r1, r3, #31
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002ada:	bf00      	nop
 8002adc:	371c      	adds	r7, #28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b087      	sub	sp, #28
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	3314      	adds	r3, #20
 8002af6:	461a      	mov	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	0e5b      	lsrs	r3, r3, #25
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	4413      	add	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	0d1b      	lsrs	r3, r3, #20
 8002b0e:	f003 031f 	and.w	r3, r3, #31
 8002b12:	2107      	movs	r1, #7
 8002b14:	fa01 f303 	lsl.w	r3, r1, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	401a      	ands	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	0d1b      	lsrs	r3, r3, #20
 8002b20:	f003 031f 	and.w	r3, r3, #31
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002b30:	bf00      	nop
 8002b32:	371c      	adds	r7, #28
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b54:	43db      	mvns	r3, r3
 8002b56:	401a      	ands	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f003 0318 	and.w	r3, r3, #24
 8002b5e:	4908      	ldr	r1, [pc, #32]	; (8002b80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b60:	40d9      	lsrs	r1, r3
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	400b      	ands	r3, r1
 8002b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002b72:	bf00      	nop
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	0007ffff 	.word	0x0007ffff

08002b84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002b94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6093      	str	r3, [r2, #8]
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bbc:	d101      	bne.n	8002bc2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002be0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002be4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c0c:	d101      	bne.n	8002c12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <LL_ADC_IsEnabled+0x18>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <LL_ADC_IsEnabled+0x1a>
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d101      	bne.n	8002c5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d101      	bne.n	8002c84 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
	...

08002c94 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b088      	sub	sp, #32
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e12e      	b.n	8002f10 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d109      	bne.n	8002cd4 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7fd fc59 	bl	8000578 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff ff65 	bl	8002ba8 <LL_ADC_IsDeepPowerDownEnabled>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d004      	beq.n	8002cee <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff ff4b 	bl	8002b84 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff ff80 	bl	8002bf8 <LL_ADC_IsInternalRegulatorEnabled>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d115      	bne.n	8002d2a <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff ff64 	bl	8002bd0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d08:	4b83      	ldr	r3, [pc, #524]	; (8002f18 <HAL_ADC_Init+0x284>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	099b      	lsrs	r3, r3, #6
 8002d0e:	4a83      	ldr	r2, [pc, #524]	; (8002f1c <HAL_ADC_Init+0x288>)
 8002d10:	fba2 2303 	umull	r2, r3, r2, r3
 8002d14:	099b      	lsrs	r3, r3, #6
 8002d16:	3301      	adds	r3, #1
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d1c:	e002      	b.n	8002d24 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f9      	bne.n	8002d1e <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff ff62 	bl	8002bf8 <LL_ADC_IsInternalRegulatorEnabled>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10d      	bne.n	8002d56 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3e:	f043 0210 	orr.w	r2, r3, #16
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4a:	f043 0201 	orr.w	r2, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff ff73 	bl	8002c46 <LL_ADC_REG_IsConversionOngoing>
 8002d60:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d66:	f003 0310 	and.w	r3, r3, #16
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f040 80c7 	bne.w	8002efe <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f040 80c3 	bne.w	8002efe <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d80:	f043 0202 	orr.w	r2, r3, #2
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff ff47 	bl	8002c20 <LL_ADC_IsEnabled>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10b      	bne.n	8002db0 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d98:	4861      	ldr	r0, [pc, #388]	; (8002f20 <HAL_ADC_Init+0x28c>)
 8002d9a:	f7ff ff41 	bl	8002c20 <LL_ADC_IsEnabled>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d105      	bne.n	8002db0 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	4619      	mov	r1, r3
 8002daa:	485e      	ldr	r0, [pc, #376]	; (8002f24 <HAL_ADC_Init+0x290>)
 8002dac:	f7ff fde6 	bl	800297c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	7e5b      	ldrb	r3, [r3, #25]
 8002db4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dba:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002dc0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002dc6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dce:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8002dd0:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d106      	bne.n	8002df0 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	3b01      	subs	r3, #1
 8002de8:	045b      	lsls	r3, r3, #17
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d009      	beq.n	8002e0c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	4b45      	ldr	r3, [pc, #276]	; (8002f28 <HAL_ADC_Init+0x294>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6812      	ldr	r2, [r2, #0]
 8002e1a:	69b9      	ldr	r1, [r7, #24]
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff ff0e 	bl	8002c46 <LL_ADC_REG_IsConversionOngoing>
 8002e2a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff ff1b 	bl	8002c6c <LL_ADC_INJ_IsConversionOngoing>
 8002e36:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d13d      	bne.n	8002eba <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d13a      	bne.n	8002eba <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e48:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e50:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e60:	f023 0302 	bic.w	r3, r3, #2
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	69b9      	ldr	r1, [r7, #24]
 8002e6a:	430b      	orrs	r3, r1
 8002e6c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d118      	bne.n	8002eaa <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e82:	f023 0304 	bic.w	r3, r3, #4
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e8e:	4311      	orrs	r1, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e94:	4311      	orrs	r1, r2
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	611a      	str	r2, [r3, #16]
 8002ea8:	e007      	b.n	8002eba <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0201 	bic.w	r2, r2, #1
 8002eb8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d10c      	bne.n	8002edc <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	f023 010f 	bic.w	r1, r3, #15
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	1e5a      	subs	r2, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	631a      	str	r2, [r3, #48]	; 0x30
 8002eda:	e007      	b.n	8002eec <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 020f 	bic.w	r2, r2, #15
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef0:	f023 0303 	bic.w	r3, r3, #3
 8002ef4:	f043 0201 	orr.w	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	655a      	str	r2, [r3, #84]	; 0x54
 8002efc:	e007      	b.n	8002f0e <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f02:	f043 0210 	orr.w	r2, r3, #16
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3720      	adds	r7, #32
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20000028 	.word	0x20000028
 8002f1c:	053e2d63 	.word	0x053e2d63
 8002f20:	50040000 	.word	0x50040000
 8002f24:	50040300 	.word	0x50040300
 8002f28:	fff0c007 	.word	0xfff0c007

08002f2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b0b6      	sub	sp, #216	; 0xd8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f36:	2300      	movs	r3, #0
 8002f38:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x22>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e39f      	b.n	800368e <HAL_ADC_ConfigChannel+0x762>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fe73 	bl	8002c46 <LL_ADC_REG_IsConversionOngoing>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f040 8384 	bne.w	8003670 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	6859      	ldr	r1, [r3, #4]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	f7ff fd8a 	bl	8002a8e <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fe61 	bl	8002c46 <LL_ADC_REG_IsConversionOngoing>
 8002f84:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fe6d 	bl	8002c6c <LL_ADC_INJ_IsConversionOngoing>
 8002f92:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f040 81a6 	bne.w	80032ec <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fa0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f040 81a1 	bne.w	80032ec <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	6819      	ldr	r1, [r3, #0]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	f7ff fd95 	bl	8002ae6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	695a      	ldr	r2, [r3, #20]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	08db      	lsrs	r3, r3, #3
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	6919      	ldr	r1, [r3, #16]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fee:	f7ff fcf9 	bl	80029e4 <LL_ADC_SetOffset>
 8002ff2:	e17b      	b.n	80032ec <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fd16 	bl	8002a2c <LL_ADC_GetOffsetChannel>
 8003000:	4603      	mov	r3, r0
 8003002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10a      	bne.n	8003020 <HAL_ADC_ConfigChannel+0xf4>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2100      	movs	r1, #0
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff fd0b 	bl	8002a2c <LL_ADC_GetOffsetChannel>
 8003016:	4603      	mov	r3, r0
 8003018:	0e9b      	lsrs	r3, r3, #26
 800301a:	f003 021f 	and.w	r2, r3, #31
 800301e:	e01e      	b.n	800305e <HAL_ADC_ConfigChannel+0x132>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2100      	movs	r1, #0
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fd00 	bl	8002a2c <LL_ADC_GetOffsetChannel>
 800302c:	4603      	mov	r3, r0
 800302e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003036:	fa93 f3a3 	rbit	r3, r3
 800303a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 800303e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003042:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8003046:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 800304e:	2320      	movs	r3, #32
 8003050:	e004      	b.n	800305c <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8003052:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003056:	fab3 f383 	clz	r3, r3
 800305a:	b2db      	uxtb	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003066:	2b00      	cmp	r3, #0
 8003068:	d105      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x14a>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	0e9b      	lsrs	r3, r3, #26
 8003070:	f003 031f 	and.w	r3, r3, #31
 8003074:	e018      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x17c>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003082:	fa93 f3a3 	rbit	r3, r3
 8003086:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800308a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800308e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003092:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800309a:	2320      	movs	r3, #32
 800309c:	e004      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800309e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030a2:	fab3 f383 	clz	r3, r3
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d106      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2200      	movs	r2, #0
 80030b2:	2100      	movs	r1, #0
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff fccf 	bl	8002a58 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2101      	movs	r1, #1
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff fcb3 	bl	8002a2c <LL_ADC_GetOffsetChannel>
 80030c6:	4603      	mov	r3, r0
 80030c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10a      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x1ba>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2101      	movs	r1, #1
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fca8 	bl	8002a2c <LL_ADC_GetOffsetChannel>
 80030dc:	4603      	mov	r3, r0
 80030de:	0e9b      	lsrs	r3, r3, #26
 80030e0:	f003 021f 	and.w	r2, r3, #31
 80030e4:	e01e      	b.n	8003124 <HAL_ADC_ConfigChannel+0x1f8>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2101      	movs	r1, #1
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fc9d 	bl	8002a2c <LL_ADC_GetOffsetChannel>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030fc:	fa93 f3a3 	rbit	r3, r3
 8003100:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003104:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003108:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800310c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8003114:	2320      	movs	r3, #32
 8003116:	e004      	b.n	8003122 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8003118:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800311c:	fab3 f383 	clz	r3, r3
 8003120:	b2db      	uxtb	r3, r3
 8003122:	461a      	mov	r2, r3
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800312c:	2b00      	cmp	r3, #0
 800312e:	d105      	bne.n	800313c <HAL_ADC_ConfigChannel+0x210>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	0e9b      	lsrs	r3, r3, #26
 8003136:	f003 031f 	and.w	r3, r3, #31
 800313a:	e018      	b.n	800316e <HAL_ADC_ConfigChannel+0x242>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003148:	fa93 f3a3 	rbit	r3, r3
 800314c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003150:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003154:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003158:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8003160:	2320      	movs	r3, #32
 8003162:	e004      	b.n	800316e <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8003164:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003168:	fab3 f383 	clz	r3, r3
 800316c:	b2db      	uxtb	r3, r3
 800316e:	429a      	cmp	r2, r3
 8003170:	d106      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2200      	movs	r2, #0
 8003178:	2101      	movs	r1, #1
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fc6c 	bl	8002a58 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2102      	movs	r1, #2
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fc50 	bl	8002a2c <LL_ADC_GetOffsetChannel>
 800318c:	4603      	mov	r3, r0
 800318e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10a      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x280>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2102      	movs	r1, #2
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fc45 	bl	8002a2c <LL_ADC_GetOffsetChannel>
 80031a2:	4603      	mov	r3, r0
 80031a4:	0e9b      	lsrs	r3, r3, #26
 80031a6:	f003 021f 	and.w	r2, r3, #31
 80031aa:	e01e      	b.n	80031ea <HAL_ADC_ConfigChannel+0x2be>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2102      	movs	r1, #2
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff fc3a 	bl	8002a2c <LL_ADC_GetOffsetChannel>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031c2:	fa93 f3a3 	rbit	r3, r3
 80031c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80031ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80031d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80031da:	2320      	movs	r3, #32
 80031dc:	e004      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80031de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031e2:	fab3 f383 	clz	r3, r3
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	461a      	mov	r2, r3
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d105      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x2d6>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	0e9b      	lsrs	r3, r3, #26
 80031fc:	f003 031f 	and.w	r3, r3, #31
 8003200:	e016      	b.n	8003230 <HAL_ADC_ConfigChannel+0x304>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800320e:	fa93 f3a3 	rbit	r3, r3
 8003212:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003214:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003216:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800321a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8003222:	2320      	movs	r3, #32
 8003224:	e004      	b.n	8003230 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8003226:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800322a:	fab3 f383 	clz	r3, r3
 800322e:	b2db      	uxtb	r3, r3
 8003230:	429a      	cmp	r2, r3
 8003232:	d106      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2200      	movs	r2, #0
 800323a:	2102      	movs	r1, #2
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff fc0b 	bl	8002a58 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2103      	movs	r1, #3
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff fbef 	bl	8002a2c <LL_ADC_GetOffsetChannel>
 800324e:	4603      	mov	r3, r0
 8003250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10a      	bne.n	800326e <HAL_ADC_ConfigChannel+0x342>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2103      	movs	r1, #3
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff fbe4 	bl	8002a2c <LL_ADC_GetOffsetChannel>
 8003264:	4603      	mov	r3, r0
 8003266:	0e9b      	lsrs	r3, r3, #26
 8003268:	f003 021f 	and.w	r2, r3, #31
 800326c:	e017      	b.n	800329e <HAL_ADC_ConfigChannel+0x372>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2103      	movs	r1, #3
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fbd9 	bl	8002a2c <LL_ADC_GetOffsetChannel>
 800327a:	4603      	mov	r3, r0
 800327c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003280:	fa93 f3a3 	rbit	r3, r3
 8003284:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003286:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003288:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800328a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8003290:	2320      	movs	r3, #32
 8003292:	e003      	b.n	800329c <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8003294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003296:	fab3 f383 	clz	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	461a      	mov	r2, r3
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d105      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x38a>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	0e9b      	lsrs	r3, r3, #26
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	e011      	b.n	80032da <HAL_ADC_ConfigChannel+0x3ae>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80032c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80032c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80032ce:	2320      	movs	r3, #32
 80032d0:	e003      	b.n	80032da <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80032d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032d4:	fab3 f383 	clz	r3, r3
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	429a      	cmp	r2, r3
 80032dc:	d106      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2200      	movs	r2, #0
 80032e4:	2103      	movs	r1, #3
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff fbb6 	bl	8002a58 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff fc95 	bl	8002c20 <LL_ADC_IsEnabled>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f040 81c2 	bne.w	8003682 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	6819      	ldr	r1, [r3, #0]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	461a      	mov	r2, r3
 800330c:	f7ff fc16 	bl	8002b3c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4a8e      	ldr	r2, [pc, #568]	; (8003550 <HAL_ADC_ConfigChannel+0x624>)
 8003316:	4293      	cmp	r3, r2
 8003318:	f040 8130 	bne.w	800357c <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10b      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x418>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	0e9b      	lsrs	r3, r3, #26
 8003332:	3301      	adds	r3, #1
 8003334:	f003 031f 	and.w	r3, r3, #31
 8003338:	2b09      	cmp	r3, #9
 800333a:	bf94      	ite	ls
 800333c:	2301      	movls	r3, #1
 800333e:	2300      	movhi	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e019      	b.n	8003378 <HAL_ADC_ConfigChannel+0x44c>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800334c:	fa93 f3a3 	rbit	r3, r3
 8003350:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003352:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003354:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003356:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 800335c:	2320      	movs	r3, #32
 800335e:	e003      	b.n	8003368 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8003360:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003362:	fab3 f383 	clz	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	3301      	adds	r3, #1
 800336a:	f003 031f 	and.w	r3, r3, #31
 800336e:	2b09      	cmp	r3, #9
 8003370:	bf94      	ite	ls
 8003372:	2301      	movls	r3, #1
 8003374:	2300      	movhi	r3, #0
 8003376:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003378:	2b00      	cmp	r3, #0
 800337a:	d079      	beq.n	8003470 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003384:	2b00      	cmp	r3, #0
 8003386:	d107      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x46c>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	0e9b      	lsrs	r3, r3, #26
 800338e:	3301      	adds	r3, #1
 8003390:	069b      	lsls	r3, r3, #26
 8003392:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003396:	e015      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x498>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033a0:	fa93 f3a3 	rbit	r3, r3
 80033a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80033a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80033aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80033b0:	2320      	movs	r3, #32
 80033b2:	e003      	b.n	80033bc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80033b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033b6:	fab3 f383 	clz	r3, r3
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	3301      	adds	r3, #1
 80033be:	069b      	lsls	r3, r3, #26
 80033c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d109      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x4b8>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	0e9b      	lsrs	r3, r3, #26
 80033d6:	3301      	adds	r3, #1
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	2101      	movs	r1, #1
 80033de:	fa01 f303 	lsl.w	r3, r1, r3
 80033e2:	e017      	b.n	8003414 <HAL_ADC_ConfigChannel+0x4e8>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ec:	fa93 f3a3 	rbit	r3, r3
 80033f0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80033f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80033f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 80033fc:	2320      	movs	r3, #32
 80033fe:	e003      	b.n	8003408 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8003400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003402:	fab3 f383 	clz	r3, r3
 8003406:	b2db      	uxtb	r3, r3
 8003408:	3301      	adds	r3, #1
 800340a:	f003 031f 	and.w	r3, r3, #31
 800340e:	2101      	movs	r1, #1
 8003410:	fa01 f303 	lsl.w	r3, r1, r3
 8003414:	ea42 0103 	orr.w	r1, r2, r3
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10a      	bne.n	800343a <HAL_ADC_ConfigChannel+0x50e>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	0e9b      	lsrs	r3, r3, #26
 800342a:	3301      	adds	r3, #1
 800342c:	f003 021f 	and.w	r2, r3, #31
 8003430:	4613      	mov	r3, r2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	4413      	add	r3, r2
 8003436:	051b      	lsls	r3, r3, #20
 8003438:	e018      	b.n	800346c <HAL_ADC_ConfigChannel+0x540>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003442:	fa93 f3a3 	rbit	r3, r3
 8003446:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800344a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800344c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003452:	2320      	movs	r3, #32
 8003454:	e003      	b.n	800345e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003458:	fab3 f383 	clz	r3, r3
 800345c:	b2db      	uxtb	r3, r3
 800345e:	3301      	adds	r3, #1
 8003460:	f003 021f 	and.w	r2, r3, #31
 8003464:	4613      	mov	r3, r2
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	4413      	add	r3, r2
 800346a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800346c:	430b      	orrs	r3, r1
 800346e:	e080      	b.n	8003572 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003478:	2b00      	cmp	r3, #0
 800347a:	d107      	bne.n	800348c <HAL_ADC_ConfigChannel+0x560>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	0e9b      	lsrs	r3, r3, #26
 8003482:	3301      	adds	r3, #1
 8003484:	069b      	lsls	r3, r3, #26
 8003486:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800348a:	e015      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x58c>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003494:	fa93 f3a3 	rbit	r3, r3
 8003498:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800349a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800349e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80034a4:	2320      	movs	r3, #32
 80034a6:	e003      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80034a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034aa:	fab3 f383 	clz	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	3301      	adds	r3, #1
 80034b2:	069b      	lsls	r3, r3, #26
 80034b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d109      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x5ac>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	0e9b      	lsrs	r3, r3, #26
 80034ca:	3301      	adds	r3, #1
 80034cc:	f003 031f 	and.w	r3, r3, #31
 80034d0:	2101      	movs	r1, #1
 80034d2:	fa01 f303 	lsl.w	r3, r1, r3
 80034d6:	e017      	b.n	8003508 <HAL_ADC_ConfigChannel+0x5dc>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	fa93 f3a3 	rbit	r3, r3
 80034e4:	61fb      	str	r3, [r7, #28]
  return result;
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80034f0:	2320      	movs	r3, #32
 80034f2:	e003      	b.n	80034fc <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	fab3 f383 	clz	r3, r3
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	3301      	adds	r3, #1
 80034fe:	f003 031f 	and.w	r3, r3, #31
 8003502:	2101      	movs	r1, #1
 8003504:	fa01 f303 	lsl.w	r3, r1, r3
 8003508:	ea42 0103 	orr.w	r1, r2, r3
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10d      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x608>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	0e9b      	lsrs	r3, r3, #26
 800351e:	3301      	adds	r3, #1
 8003520:	f003 021f 	and.w	r2, r3, #31
 8003524:	4613      	mov	r3, r2
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	4413      	add	r3, r2
 800352a:	3b1e      	subs	r3, #30
 800352c:	051b      	lsls	r3, r3, #20
 800352e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003532:	e01d      	b.n	8003570 <HAL_ADC_ConfigChannel+0x644>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	fa93 f3a3 	rbit	r3, r3
 8003540:	613b      	str	r3, [r7, #16]
  return result;
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d103      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 800354c:	2320      	movs	r3, #32
 800354e:	e005      	b.n	800355c <HAL_ADC_ConfigChannel+0x630>
 8003550:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	fab3 f383 	clz	r3, r3
 800355a:	b2db      	uxtb	r3, r3
 800355c:	3301      	adds	r3, #1
 800355e:	f003 021f 	and.w	r2, r3, #31
 8003562:	4613      	mov	r3, r2
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	4413      	add	r3, r2
 8003568:	3b1e      	subs	r3, #30
 800356a:	051b      	lsls	r3, r3, #20
 800356c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003570:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003576:	4619      	mov	r1, r3
 8003578:	f7ff fab5 	bl	8002ae6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4b45      	ldr	r3, [pc, #276]	; (8003698 <HAL_ADC_ConfigChannel+0x76c>)
 8003582:	4013      	ands	r3, r2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d07c      	beq.n	8003682 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003588:	4844      	ldr	r0, [pc, #272]	; (800369c <HAL_ADC_ConfigChannel+0x770>)
 800358a:	f7ff fa1d 	bl	80029c8 <LL_ADC_GetCommonPathInternalCh>
 800358e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003592:	4843      	ldr	r0, [pc, #268]	; (80036a0 <HAL_ADC_ConfigChannel+0x774>)
 8003594:	f7ff fb44 	bl	8002c20 <LL_ADC_IsEnabled>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d15e      	bne.n	800365c <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a40      	ldr	r2, [pc, #256]	; (80036a4 <HAL_ADC_ConfigChannel+0x778>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d127      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x6cc>
 80035a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d121      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a39      	ldr	r2, [pc, #228]	; (80036a0 <HAL_ADC_ConfigChannel+0x774>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d161      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80035be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035c6:	4619      	mov	r1, r3
 80035c8:	4834      	ldr	r0, [pc, #208]	; (800369c <HAL_ADC_ConfigChannel+0x770>)
 80035ca:	f7ff f9ea 	bl	80029a2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035ce:	4b36      	ldr	r3, [pc, #216]	; (80036a8 <HAL_ADC_ConfigChannel+0x77c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	099b      	lsrs	r3, r3, #6
 80035d4:	4a35      	ldr	r2, [pc, #212]	; (80036ac <HAL_ADC_ConfigChannel+0x780>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	099b      	lsrs	r3, r3, #6
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	4613      	mov	r3, r2
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	4413      	add	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80035e8:	e002      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f9      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035f6:	e044      	b.n	8003682 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a2c      	ldr	r2, [pc, #176]	; (80036b0 <HAL_ADC_ConfigChannel+0x784>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d113      	bne.n	800362a <HAL_ADC_ConfigChannel+0x6fe>
 8003602:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003606:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10d      	bne.n	800362a <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a23      	ldr	r2, [pc, #140]	; (80036a0 <HAL_ADC_ConfigChannel+0x774>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d134      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003618:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800361c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003620:	4619      	mov	r1, r3
 8003622:	481e      	ldr	r0, [pc, #120]	; (800369c <HAL_ADC_ConfigChannel+0x770>)
 8003624:	f7ff f9bd 	bl	80029a2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003628:	e02b      	b.n	8003682 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a21      	ldr	r2, [pc, #132]	; (80036b4 <HAL_ADC_ConfigChannel+0x788>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d126      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x756>
 8003634:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003638:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d120      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a16      	ldr	r2, [pc, #88]	; (80036a0 <HAL_ADC_ConfigChannel+0x774>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d11b      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800364a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800364e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003652:	4619      	mov	r1, r3
 8003654:	4811      	ldr	r0, [pc, #68]	; (800369c <HAL_ADC_ConfigChannel+0x770>)
 8003656:	f7ff f9a4 	bl	80029a2 <LL_ADC_SetCommonPathInternalCh>
 800365a:	e012      	b.n	8003682 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003660:	f043 0220 	orr.w	r2, r3, #32
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800366e:	e008      	b.n	8003682 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003674:	f043 0220 	orr.w	r2, r3, #32
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800368a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800368e:	4618      	mov	r0, r3
 8003690:	37d8      	adds	r7, #216	; 0xd8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	80080000 	.word	0x80080000
 800369c:	50040300 	.word	0x50040300
 80036a0:	50040000 	.word	0x50040000
 80036a4:	c7520000 	.word	0xc7520000
 80036a8:	20000028 	.word	0x20000028
 80036ac:	053e2d63 	.word	0x053e2d63
 80036b0:	cb840000 	.word	0xcb840000
 80036b4:	80000001 	.word	0x80000001

080036b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036c8:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <__NVIC_SetPriorityGrouping+0x44>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036d4:	4013      	ands	r3, r2
 80036d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036ea:	4a04      	ldr	r2, [pc, #16]	; (80036fc <__NVIC_SetPriorityGrouping+0x44>)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	60d3      	str	r3, [r2, #12]
}
 80036f0:	bf00      	nop
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	e000ed00 	.word	0xe000ed00

08003700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003704:	4b04      	ldr	r3, [pc, #16]	; (8003718 <__NVIC_GetPriorityGrouping+0x18>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	0a1b      	lsrs	r3, r3, #8
 800370a:	f003 0307 	and.w	r3, r3, #7
}
 800370e:	4618      	mov	r0, r3
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	e000ed00 	.word	0xe000ed00

0800371c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	4603      	mov	r3, r0
 8003724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372a:	2b00      	cmp	r3, #0
 800372c:	db0b      	blt.n	8003746 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	f003 021f 	and.w	r2, r3, #31
 8003734:	4907      	ldr	r1, [pc, #28]	; (8003754 <__NVIC_EnableIRQ+0x38>)
 8003736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	2001      	movs	r0, #1
 800373e:	fa00 f202 	lsl.w	r2, r0, r2
 8003742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	e000e100 	.word	0xe000e100

08003758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	6039      	str	r1, [r7, #0]
 8003762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003768:	2b00      	cmp	r3, #0
 800376a:	db0a      	blt.n	8003782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	b2da      	uxtb	r2, r3
 8003770:	490c      	ldr	r1, [pc, #48]	; (80037a4 <__NVIC_SetPriority+0x4c>)
 8003772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003776:	0112      	lsls	r2, r2, #4
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	440b      	add	r3, r1
 800377c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003780:	e00a      	b.n	8003798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	b2da      	uxtb	r2, r3
 8003786:	4908      	ldr	r1, [pc, #32]	; (80037a8 <__NVIC_SetPriority+0x50>)
 8003788:	79fb      	ldrb	r3, [r7, #7]
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	3b04      	subs	r3, #4
 8003790:	0112      	lsls	r2, r2, #4
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	440b      	add	r3, r1
 8003796:	761a      	strb	r2, [r3, #24]
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	e000e100 	.word	0xe000e100
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b089      	sub	sp, #36	; 0x24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f1c3 0307 	rsb	r3, r3, #7
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	bf28      	it	cs
 80037ca:	2304      	movcs	r3, #4
 80037cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3304      	adds	r3, #4
 80037d2:	2b06      	cmp	r3, #6
 80037d4:	d902      	bls.n	80037dc <NVIC_EncodePriority+0x30>
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	3b03      	subs	r3, #3
 80037da:	e000      	b.n	80037de <NVIC_EncodePriority+0x32>
 80037dc:	2300      	movs	r3, #0
 80037de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e0:	f04f 32ff 	mov.w	r2, #4294967295
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	43da      	mvns	r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	401a      	ands	r2, r3
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037f4:	f04f 31ff 	mov.w	r1, #4294967295
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	fa01 f303 	lsl.w	r3, r1, r3
 80037fe:	43d9      	mvns	r1, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003804:	4313      	orrs	r3, r2
         );
}
 8003806:	4618      	mov	r0, r3
 8003808:	3724      	adds	r7, #36	; 0x24
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b082      	sub	sp, #8
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff ff4c 	bl	80036b8 <__NVIC_SetPriorityGrouping>
}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003836:	f7ff ff63 	bl	8003700 <__NVIC_GetPriorityGrouping>
 800383a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	68b9      	ldr	r1, [r7, #8]
 8003840:	6978      	ldr	r0, [r7, #20]
 8003842:	f7ff ffb3 	bl	80037ac <NVIC_EncodePriority>
 8003846:	4602      	mov	r2, r0
 8003848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800384c:	4611      	mov	r1, r2
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff ff82 	bl	8003758 <__NVIC_SetPriority>
}
 8003854:	bf00      	nop
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff ff56 	bl	800371c <__NVIC_EnableIRQ>
}
 8003870:	bf00      	nop
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e08e      	b.n	80039a8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	4b47      	ldr	r3, [pc, #284]	; (80039b0 <HAL_DMA_Init+0x138>)
 8003892:	429a      	cmp	r2, r3
 8003894:	d80f      	bhi.n	80038b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	461a      	mov	r2, r3
 800389c:	4b45      	ldr	r3, [pc, #276]	; (80039b4 <HAL_DMA_Init+0x13c>)
 800389e:	4413      	add	r3, r2
 80038a0:	4a45      	ldr	r2, [pc, #276]	; (80039b8 <HAL_DMA_Init+0x140>)
 80038a2:	fba2 2303 	umull	r2, r3, r2, r3
 80038a6:	091b      	lsrs	r3, r3, #4
 80038a8:	009a      	lsls	r2, r3, #2
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a42      	ldr	r2, [pc, #264]	; (80039bc <HAL_DMA_Init+0x144>)
 80038b2:	641a      	str	r2, [r3, #64]	; 0x40
 80038b4:	e00e      	b.n	80038d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	4b40      	ldr	r3, [pc, #256]	; (80039c0 <HAL_DMA_Init+0x148>)
 80038be:	4413      	add	r3, r2
 80038c0:	4a3d      	ldr	r2, [pc, #244]	; (80039b8 <HAL_DMA_Init+0x140>)
 80038c2:	fba2 2303 	umull	r2, r3, r2, r3
 80038c6:	091b      	lsrs	r3, r3, #4
 80038c8:	009a      	lsls	r2, r3, #2
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a3c      	ldr	r2, [pc, #240]	; (80039c4 <HAL_DMA_Init+0x14c>)
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80038ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80038f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003904:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003910:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f9b6 	bl	8003c98 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003934:	d102      	bne.n	800393c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003944:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003948:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003952:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d010      	beq.n	800397e <HAL_DMA_Init+0x106>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b04      	cmp	r3, #4
 8003962:	d80c      	bhi.n	800397e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f9d5 	bl	8003d14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800397a:	605a      	str	r2, [r3, #4]
 800397c:	e008      	b.n	8003990 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40020407 	.word	0x40020407
 80039b4:	bffdfff8 	.word	0xbffdfff8
 80039b8:	cccccccd 	.word	0xcccccccd
 80039bc:	40020000 	.word	0x40020000
 80039c0:	bffdfbf8 	.word	0xbffdfbf8
 80039c4:	40020400 	.word	0x40020400

080039c8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
 80039d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_DMA_Start_IT+0x20>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e066      	b.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d155      	bne.n	8003aa8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0201 	bic.w	r2, r2, #1
 8003a18:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	68b9      	ldr	r1, [r7, #8]
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f8fb 	bl	8003c1c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d008      	beq.n	8003a40 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 020e 	orr.w	r2, r2, #14
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	e00f      	b.n	8003a60 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0204 	bic.w	r2, r2, #4
 8003a4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 020a 	orr.w	r2, r2, #10
 8003a5e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d007      	beq.n	8003a7e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a7c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d007      	beq.n	8003a96 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a94:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f042 0201 	orr.w	r2, r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	e005      	b.n	8003ab4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3718      	adds	r7, #24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ada:	f003 031c 	and.w	r3, r3, #28
 8003ade:	2204      	movs	r2, #4
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d026      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x7a>
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d021      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d107      	bne.n	8003b12 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0204 	bic.w	r2, r2, #4
 8003b10:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b16:	f003 021c 	and.w	r2, r3, #28
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	2104      	movs	r1, #4
 8003b20:	fa01 f202 	lsl.w	r2, r1, r2
 8003b24:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d071      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b36:	e06c      	b.n	8003c12 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3c:	f003 031c 	and.w	r3, r3, #28
 8003b40:	2202      	movs	r2, #2
 8003b42:	409a      	lsls	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d02e      	beq.n	8003baa <HAL_DMA_IRQHandler+0xec>
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d029      	beq.n	8003baa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10b      	bne.n	8003b7c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 020a 	bic.w	r2, r2, #10
 8003b72:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b80:	f003 021c 	and.w	r2, r3, #28
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	2102      	movs	r1, #2
 8003b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b8e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d038      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003ba8:	e033      	b.n	8003c12 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bae:	f003 031c 	and.w	r3, r3, #28
 8003bb2:	2208      	movs	r2, #8
 8003bb4:	409a      	lsls	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d02a      	beq.n	8003c14 <HAL_DMA_IRQHandler+0x156>
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d025      	beq.n	8003c14 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 020e 	bic.w	r2, r2, #14
 8003bd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bdc:	f003 021c 	and.w	r2, r3, #28
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be4:	2101      	movs	r1, #1
 8003be6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d004      	beq.n	8003c14 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c12:	bf00      	nop
 8003c14:	bf00      	nop
}
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c32:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d004      	beq.n	8003c46 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c44:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	f003 021c 	and.w	r2, r3, #28
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	2101      	movs	r1, #1
 8003c54:	fa01 f202 	lsl.w	r2, r1, r2
 8003c58:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2b10      	cmp	r3, #16
 8003c68:	d108      	bne.n	8003c7c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c7a:	e007      	b.n	8003c8c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	60da      	str	r2, [r3, #12]
}
 8003c8c:	bf00      	nop
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b17      	ldr	r3, [pc, #92]	; (8003d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d80a      	bhi.n	8003cc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb0:	089b      	lsrs	r3, r3, #2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003cb8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6493      	str	r3, [r2, #72]	; 0x48
 8003cc0:	e007      	b.n	8003cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	089b      	lsrs	r3, r3, #2
 8003cc8:	009a      	lsls	r2, r3, #2
 8003cca:	4b0f      	ldr	r3, [pc, #60]	; (8003d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ccc:	4413      	add	r3, r2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	3b08      	subs	r3, #8
 8003cda:	4a0c      	ldr	r2, [pc, #48]	; (8003d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce0:	091b      	lsrs	r3, r3, #4
 8003ce2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a0a      	ldr	r2, [pc, #40]	; (8003d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003ce8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f003 031f 	and.w	r3, r3, #31
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003cf8:	bf00      	nop
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	40020407 	.word	0x40020407
 8003d08:	4002081c 	.word	0x4002081c
 8003d0c:	cccccccd 	.word	0xcccccccd
 8003d10:	40020880 	.word	0x40020880

08003d14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d24:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	461a      	mov	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a09      	ldr	r2, [pc, #36]	; (8003d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003d38:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	2201      	movs	r2, #1
 8003d44:	409a      	lsls	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003d4a:	bf00      	nop
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	1000823f 	.word	0x1000823f
 8003d5c:	40020940 	.word	0x40020940

08003d60 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d6e:	e14c      	b.n	800400a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	2101      	movs	r1, #1
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 813e 	beq.w	8004004 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f003 0303 	and.w	r3, r3, #3
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d005      	beq.n	8003da0 <HAL_GPIO_Init+0x40>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d130      	bne.n	8003e02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	2203      	movs	r2, #3
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	43db      	mvns	r3, r3
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4013      	ands	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43db      	mvns	r3, r3
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4013      	ands	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	091b      	lsrs	r3, r3, #4
 8003dec:	f003 0201 	and.w	r2, r3, #1
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d017      	beq.n	8003e3e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	2203      	movs	r2, #3
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4013      	ands	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d123      	bne.n	8003e92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	08da      	lsrs	r2, r3, #3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3208      	adds	r2, #8
 8003e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	220f      	movs	r2, #15
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	43db      	mvns	r3, r3
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	691a      	ldr	r2, [r3, #16]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	08da      	lsrs	r2, r3, #3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3208      	adds	r2, #8
 8003e8c:	6939      	ldr	r1, [r7, #16]
 8003e8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	2203      	movs	r2, #3
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f003 0203 	and.w	r2, r3, #3
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 8098 	beq.w	8004004 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003ed4:	4a54      	ldr	r2, [pc, #336]	; (8004028 <HAL_GPIO_Init+0x2c8>)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	089b      	lsrs	r3, r3, #2
 8003eda:	3302      	adds	r3, #2
 8003edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f003 0303 	and.w	r3, r3, #3
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	220f      	movs	r2, #15
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003efe:	d019      	beq.n	8003f34 <HAL_GPIO_Init+0x1d4>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a4a      	ldr	r2, [pc, #296]	; (800402c <HAL_GPIO_Init+0x2cc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d013      	beq.n	8003f30 <HAL_GPIO_Init+0x1d0>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a49      	ldr	r2, [pc, #292]	; (8004030 <HAL_GPIO_Init+0x2d0>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00d      	beq.n	8003f2c <HAL_GPIO_Init+0x1cc>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a48      	ldr	r2, [pc, #288]	; (8004034 <HAL_GPIO_Init+0x2d4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d007      	beq.n	8003f28 <HAL_GPIO_Init+0x1c8>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a47      	ldr	r2, [pc, #284]	; (8004038 <HAL_GPIO_Init+0x2d8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d101      	bne.n	8003f24 <HAL_GPIO_Init+0x1c4>
 8003f20:	2304      	movs	r3, #4
 8003f22:	e008      	b.n	8003f36 <HAL_GPIO_Init+0x1d6>
 8003f24:	2307      	movs	r3, #7
 8003f26:	e006      	b.n	8003f36 <HAL_GPIO_Init+0x1d6>
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e004      	b.n	8003f36 <HAL_GPIO_Init+0x1d6>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e002      	b.n	8003f36 <HAL_GPIO_Init+0x1d6>
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <HAL_GPIO_Init+0x1d6>
 8003f34:	2300      	movs	r3, #0
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	f002 0203 	and.w	r2, r2, #3
 8003f3c:	0092      	lsls	r2, r2, #2
 8003f3e:	4093      	lsls	r3, r2
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f46:	4938      	ldr	r1, [pc, #224]	; (8004028 <HAL_GPIO_Init+0x2c8>)
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	089b      	lsrs	r3, r3, #2
 8003f4c:	3302      	adds	r3, #2
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f54:	4b39      	ldr	r3, [pc, #228]	; (800403c <HAL_GPIO_Init+0x2dc>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4013      	ands	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f78:	4a30      	ldr	r2, [pc, #192]	; (800403c <HAL_GPIO_Init+0x2dc>)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f7e:	4b2f      	ldr	r3, [pc, #188]	; (800403c <HAL_GPIO_Init+0x2dc>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	43db      	mvns	r3, r3
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fa2:	4a26      	ldr	r2, [pc, #152]	; (800403c <HAL_GPIO_Init+0x2dc>)
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003fa8:	4b24      	ldr	r3, [pc, #144]	; (800403c <HAL_GPIO_Init+0x2dc>)
 8003faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fce:	4a1b      	ldr	r2, [pc, #108]	; (800403c <HAL_GPIO_Init+0x2dc>)
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003fd6:	4b19      	ldr	r3, [pc, #100]	; (800403c <HAL_GPIO_Init+0x2dc>)
 8003fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ffc:	4a0f      	ldr	r2, [pc, #60]	; (800403c <HAL_GPIO_Init+0x2dc>)
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	3301      	adds	r3, #1
 8004008:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	fa22 f303 	lsr.w	r3, r2, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	f47f aeab 	bne.w	8003d70 <HAL_GPIO_Init+0x10>
  }
}
 800401a:	bf00      	nop
 800401c:	bf00      	nop
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	40010000 	.word	0x40010000
 800402c:	48000400 	.word	0x48000400
 8004030:	48000800 	.word	0x48000800
 8004034:	48000c00 	.word	0x48000c00
 8004038:	48001000 	.word	0x48001000
 800403c:	58000800 	.word	0x58000800

08004040 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e08f      	b.n	8004172 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d106      	bne.n	8004072 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7fc ff57 	bl	8000f20 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2202      	movs	r2, #2
 8004076:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d004      	beq.n	8004094 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004092:	d103      	bne.n	800409c <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 031e 	bic.w	r3, r3, #30
 800409a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d005      	beq.n	80040b4 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80040ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80040b2:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4b31      	ldr	r3, [pc, #196]	; (800417c <HAL_LPTIM_Init+0x13c>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80040c4:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80040ca:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80040d0:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80040d6:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d107      	bne.n	80040f6 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80040ee:	4313      	orrs	r3, r2
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d004      	beq.n	8004108 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004102:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004106:	d107      	bne.n	8004118 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004110:	4313      	orrs	r3, r2
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004120:	4293      	cmp	r3, r2
 8004122:	d00a      	beq.n	800413a <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800412c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004132:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a0e      	ldr	r2, [pc, #56]	; (8004180 <HAL_LPTIM_Init+0x140>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d108      	bne.n	800415e <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	621a      	str	r2, [r3, #32]
 800415c:	e004      	b.n	8004168 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004166:	621a      	str	r2, [r3, #32]
  }
#endif /* LPTIM_OR_OR */

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	ff19f1fe 	.word	0xff19f1fe
 8004180:	40007c00 	.word	0x40007c00

08004184 <HAL_LPTIM_Counter_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2202      	movs	r2, #2
 8004192:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d00c      	beq.n	80041b8 <HAL_LPTIM_Counter_Start+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041a6:	d107      	bne.n	80041b8 <HAL_LPTIM_Counter_Start+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 80041b6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691a      	ldr	r2, [r3, #16]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2210      	movs	r2, #16
 80041ce:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80041d8:	2110      	movs	r1, #16
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f824 	bl	8004228 <LPTIM_WaitForFlag>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d101      	bne.n	80041ea <HAL_LPTIM_Counter_Start+0x66>
  {
    return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e00c      	b.n	8004204 <HAL_LPTIM_Counter_Start+0x80>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f042 0204 	orr.w	r2, r2, #4
 80041f8:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_LPTIM_ReadCounter>:
  * @brief  Return the current counter value.
  * @param  hlptim LPTIM handle
  * @retval Counter value.
  */
uint32_t HAL_LPTIM_ReadCounter(const LPTIM_HandleTypeDef *hlptim)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  return (hlptim->Instance->CNT);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	69db      	ldr	r3, [r3, #28]
}
 800421a:	4618      	mov	r0, r3
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
	...

08004228 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004236:	4b12      	ldr	r3, [pc, #72]	; (8004280 <LPTIM_WaitForFlag+0x58>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a12      	ldr	r2, [pc, #72]	; (8004284 <LPTIM_WaitForFlag+0x5c>)
 800423c:	fba2 2303 	umull	r2, r3, r2, r3
 8004240:	0b9b      	lsrs	r3, r3, #14
 8004242:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004246:	fb02 f303 	mul.w	r3, r2, r3
 800424a:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	3b01      	subs	r3, #1
 8004250:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	4013      	ands	r3, r2
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d002      	beq.n	8004272 <LPTIM_WaitForFlag+0x4a>
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1ec      	bne.n	800424c <LPTIM_WaitForFlag+0x24>

  return result;
 8004272:	7bfb      	ldrb	r3, [r7, #15]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	20000028 	.word	0x20000028
 8004284:	d1b71759 	.word	0xd1b71759

08004288 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800428a:	b08b      	sub	sp, #44	; 0x2c
 800428c:	af06      	add	r7, sp, #24
 800428e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e0cb      	b.n	8004432 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fe faae 	bl	8002810 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2203      	movs	r2, #3
 80042b8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f005 fb8d 	bl	80099e0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042c6:	2300      	movs	r3, #0
 80042c8:	73fb      	strb	r3, [r7, #15]
 80042ca:	e040      	b.n	800434e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	1c5a      	adds	r2, r3, #1
 80042d2:	4613      	mov	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	440b      	add	r3, r1
 80042dc:	3301      	adds	r3, #1
 80042de:	2201      	movs	r2, #1
 80042e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	4613      	mov	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	440b      	add	r3, r1
 80042f2:	7bfa      	ldrb	r2, [r7, #15]
 80042f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042f6:	7bfb      	ldrb	r3, [r7, #15]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	4613      	mov	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	440b      	add	r3, r1
 8004306:	3303      	adds	r3, #3
 8004308:	2200      	movs	r2, #0
 800430a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800430c:	7bfa      	ldrb	r2, [r7, #15]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	440b      	add	r3, r1
 800431a:	3338      	adds	r3, #56	; 0x38
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004320:	7bfa      	ldrb	r2, [r7, #15]
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	440b      	add	r3, r1
 800432e:	333c      	adds	r3, #60	; 0x3c
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004334:	7bfa      	ldrb	r2, [r7, #15]
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	4613      	mov	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	440b      	add	r3, r1
 8004342:	3340      	adds	r3, #64	; 0x40
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004348:	7bfb      	ldrb	r3, [r7, #15]
 800434a:	3301      	adds	r3, #1
 800434c:	73fb      	strb	r3, [r7, #15]
 800434e:	7bfa      	ldrb	r2, [r7, #15]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	429a      	cmp	r2, r3
 8004356:	d3b9      	bcc.n	80042cc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004358:	2300      	movs	r3, #0
 800435a:	73fb      	strb	r3, [r7, #15]
 800435c:	e044      	b.n	80043e8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800435e:	7bfa      	ldrb	r2, [r7, #15]
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	4613      	mov	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	440b      	add	r3, r1
 800436c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004370:	2200      	movs	r2, #0
 8004372:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004374:	7bfa      	ldrb	r2, [r7, #15]
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	440b      	add	r3, r1
 8004382:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004386:	7bfa      	ldrb	r2, [r7, #15]
 8004388:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800438a:	7bfa      	ldrb	r2, [r7, #15]
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	440b      	add	r3, r1
 8004398:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800439c:	2200      	movs	r2, #0
 800439e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80043a0:	7bfa      	ldrb	r2, [r7, #15]
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	4613      	mov	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	440b      	add	r3, r1
 80043ae:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043b6:	7bfa      	ldrb	r2, [r7, #15]
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	440b      	add	r3, r1
 80043c4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043cc:	7bfa      	ldrb	r2, [r7, #15]
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	4613      	mov	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	440b      	add	r3, r1
 80043da:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
 80043e4:	3301      	adds	r3, #1
 80043e6:	73fb      	strb	r3, [r7, #15]
 80043e8:	7bfa      	ldrb	r2, [r7, #15]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d3b5      	bcc.n	800435e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	603b      	str	r3, [r7, #0]
 80043f8:	687e      	ldr	r6, [r7, #4]
 80043fa:	466d      	mov	r5, sp
 80043fc:	f106 0410 	add.w	r4, r6, #16
 8004400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004402:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	602b      	str	r3, [r5, #0]
 8004408:	1d33      	adds	r3, r6, #4
 800440a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800440c:	6838      	ldr	r0, [r7, #0]
 800440e:	f005 fb02 	bl	8009a16 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d102      	bne.n	8004430 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f805 	bl	800443a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800443a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800443a:	b480      	push	{r7}
 800443c:	b085      	sub	sp, #20
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800445e:	b29b      	uxth	r3, r3
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004472:	b29b      	uxth	r3, r3
 8004474:	f043 0302 	orr.w	r3, r3, #2
 8004478:	b29a      	uxth	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
	...

08004490 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004494:	4b05      	ldr	r3, [pc, #20]	; (80044ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a04      	ldr	r2, [pc, #16]	; (80044ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800449a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800449e:	6013      	str	r3, [r2, #0]
}
 80044a0:	bf00      	nop
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	58000400 	.word	0x58000400

080044b0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80044b4:	4b04      	ldr	r3, [pc, #16]	; (80044c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80044bc:	4618      	mov	r0, r3
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	58000400 	.word	0x58000400

080044cc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80044d4:	f7fe fa3a 	bl	800294c <HAL_GetTick>
 80044d8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e063      	b.n	80045ac <HAL_QSPI_Init+0xe0>
  assert_param(IS_QSPI_SSHIFT(hqspi->Init.SampleShifting));
  assert_param(IS_QSPI_FLASH_SIZE(hqspi->Init.FlashSize));
  assert_param(IS_QSPI_CS_HIGH_TIME(hqspi->Init.ChipSelectHighTime));
  assert_param(IS_QSPI_CLOCK_MODE(hqspi->Init.ClockMode));

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10b      	bne.n	8004508 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7fd fad1 	bl	8001aa0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80044fe:	f241 3188 	movw	r1, #5000	; 0x1388
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f858 	bl	80045b8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	3b01      	subs	r3, #1
 8004518:	021a      	lsls	r2, r3, #8
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	2120      	movs	r1, #32
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f850 	bl	80045d4 <QSPI_WaitFlagStateUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004538:	7afb      	ldrb	r3, [r7, #11]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d131      	bne.n	80045a2 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004548:	f023 0310 	bic.w	r3, r3, #16
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6852      	ldr	r2, [r2, #4]
 8004550:	0611      	lsls	r1, r2, #24
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	68d2      	ldr	r2, [r2, #12]
 8004556:	4311      	orrs	r1, r2
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	430b      	orrs	r3, r1
 800455e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	4b13      	ldr	r3, [pc, #76]	; (80045b4 <HAL_QSPI_Init+0xe8>)
 8004568:	4013      	ands	r3, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6912      	ldr	r2, [r2, #16]
 800456e:	0411      	lsls	r1, r2, #16
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6952      	ldr	r2, [r2, #20]
 8004574:	4311      	orrs	r1, r2
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6992      	ldr	r2, [r2, #24]
 800457a:	4311      	orrs	r1, r2
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6812      	ldr	r2, [r2, #0]
 8004580:	430b      	orrs	r3, r1
 8004582:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0201 	orr.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80045aa:	7afb      	ldrb	r3, [r7, #11]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	ffe0f8fe 	.word	0xffe0f8fe

080045b8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	603b      	str	r3, [r7, #0]
 80045e0:	4613      	mov	r3, r2
 80045e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80045e4:	e01a      	b.n	800461c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ec:	d016      	beq.n	800461c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ee:	f7fe f9ad 	bl	800294c <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d302      	bcc.n	8004604 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10b      	bne.n	800461c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2204      	movs	r2, #4
 8004608:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004610:	f043 0201 	orr.w	r2, r3, #1
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e00e      	b.n	800463a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	4013      	ands	r3, r2
 8004626:	2b00      	cmp	r3, #0
 8004628:	bf14      	ite	ne
 800462a:	2301      	movne	r3, #1
 800462c:	2300      	moveq	r3, #0
 800462e:	b2db      	uxtb	r3, r3
 8004630:	461a      	mov	r2, r3
 8004632:	79fb      	ldrb	r3, [r7, #7]
 8004634:	429a      	cmp	r2, r3
 8004636:	d1d6      	bne.n	80045e6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004642:	b480      	push	{r7}
 8004644:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004650:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004654:	d101      	bne.n	800465a <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004656:	2301      	movs	r3, #1
 8004658:	e000      	b.n	800465c <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <LL_RCC_HSE_Enable>:
{
 8004666:	b480      	push	{r7}
 8004668:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800466a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004678:	6013      	str	r3, [r2, #0]
}
 800467a:	bf00      	nop
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <LL_RCC_HSE_Disable>:
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004696:	6013      	str	r3, [r2, #0]
}
 8004698:	bf00      	nop
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <LL_RCC_HSE_IsReady>:
{
 80046a2:	b480      	push	{r7}
 80046a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80046a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046b4:	d101      	bne.n	80046ba <LL_RCC_HSE_IsReady+0x18>
 80046b6:	2301      	movs	r3, #1
 80046b8:	e000      	b.n	80046bc <LL_RCC_HSE_IsReady+0x1a>
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <LL_RCC_HSI_Enable>:
{
 80046c6:	b480      	push	{r7}
 80046c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80046ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d8:	6013      	str	r3, [r2, #0]
}
 80046da:	bf00      	nop
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <LL_RCC_HSI_Disable>:
{
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80046e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046f6:	6013      	str	r3, [r2, #0]
}
 80046f8:	bf00      	nop
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <LL_RCC_HSI_IsReady>:
{
 8004702:	b480      	push	{r7}
 8004704:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004714:	d101      	bne.n	800471a <LL_RCC_HSI_IsReady+0x18>
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <LL_RCC_HSI_IsReady+0x1a>
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800472e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	061b      	lsls	r3, r3, #24
 800473c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004740:	4313      	orrs	r3, r2
 8004742:	604b      	str	r3, [r1, #4]
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <LL_RCC_HSI48_Enable>:
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004758:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800475c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004760:	f043 0301 	orr.w	r3, r3, #1
 8004764:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004768:	bf00      	nop
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <LL_RCC_HSI48_Disable>:
{
 8004772:	b480      	push	{r7}
 8004774:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800477a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800477e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004782:	f023 0301 	bic.w	r3, r3, #1
 8004786:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800478a:	bf00      	nop
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <LL_RCC_HSI48_IsReady>:
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d101      	bne.n	80047ac <LL_RCC_HSI48_IsReady+0x18>
 80047a8:	2301      	movs	r3, #1
 80047aa:	e000      	b.n	80047ae <LL_RCC_HSI48_IsReady+0x1a>
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <LL_RCC_LSE_Enable>:
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80047bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047c8:	f043 0301 	orr.w	r3, r3, #1
 80047cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80047d0:	bf00      	nop
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <LL_RCC_LSE_Disable>:
{
 80047da:	b480      	push	{r7}
 80047dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80047de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047ea:	f023 0301 	bic.w	r3, r3, #1
 80047ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80047f2:	bf00      	nop
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <LL_RCC_LSE_EnableBypass>:
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004808:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800480c:	f043 0304 	orr.w	r3, r3, #4
 8004810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004814:	bf00      	nop
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <LL_RCC_LSE_DisableBypass>:
{
 800481e:	b480      	push	{r7}
 8004820:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800482e:	f023 0304 	bic.w	r3, r3, #4
 8004832:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004836:	bf00      	nop
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <LL_RCC_LSE_IsReady>:
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b02      	cmp	r3, #2
 8004852:	d101      	bne.n	8004858 <LL_RCC_LSE_IsReady+0x18>
 8004854:	2301      	movs	r3, #1
 8004856:	e000      	b.n	800485a <LL_RCC_LSE_IsReady+0x1a>
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <LL_RCC_LSI1_Enable>:
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800486c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004874:	f043 0301 	orr.w	r3, r3, #1
 8004878:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800487c:	bf00      	nop
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <LL_RCC_LSI1_Disable>:
{
 8004886:	b480      	push	{r7}
 8004888:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800488a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800488e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004896:	f023 0301 	bic.w	r3, r3, #1
 800489a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800489e:	bf00      	nop
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <LL_RCC_LSI1_IsReady>:
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80048ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d101      	bne.n	80048c0 <LL_RCC_LSI1_IsReady+0x18>
 80048bc:	2301      	movs	r3, #1
 80048be:	e000      	b.n	80048c2 <LL_RCC_LSI1_IsReady+0x1a>
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <LL_RCC_LSI2_Enable>:
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80048d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048dc:	f043 0304 	orr.w	r3, r3, #4
 80048e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80048e4:	bf00      	nop
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <LL_RCC_LSI2_Disable>:
{
 80048ee:	b480      	push	{r7}
 80048f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80048f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048fe:	f023 0304 	bic.w	r3, r3, #4
 8004902:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004906:	bf00      	nop
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <LL_RCC_LSI2_IsReady>:
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800491c:	f003 0308 	and.w	r3, r3, #8
 8004920:	2b08      	cmp	r3, #8
 8004922:	d101      	bne.n	8004928 <LL_RCC_LSI2_IsReady+0x18>
 8004924:	2301      	movs	r3, #1
 8004926:	e000      	b.n	800492a <LL_RCC_LSI2_IsReady+0x1a>
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <LL_RCC_LSI2_SetTrimming>:
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800493c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004944:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	021b      	lsls	r3, r3, #8
 800494c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <LL_RCC_MSI_Enable>:
{
 8004962:	b480      	push	{r7}
 8004964:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004970:	f043 0301 	orr.w	r3, r3, #1
 8004974:	6013      	str	r3, [r2, #0]
}
 8004976:	bf00      	nop
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <LL_RCC_MSI_Disable>:
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800498e:	f023 0301 	bic.w	r3, r3, #1
 8004992:	6013      	str	r3, [r2, #0]
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <LL_RCC_MSI_IsReady>:
{
 800499e:	b480      	push	{r7}
 80049a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80049a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d101      	bne.n	80049b4 <LL_RCC_MSI_IsReady+0x16>
 80049b0:	2301      	movs	r3, #1
 80049b2:	e000      	b.n	80049b6 <LL_RCC_MSI_IsReady+0x18>
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <LL_RCC_MSI_SetRange>:
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80049c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4313      	orrs	r3, r2
 80049da:	600b      	str	r3, [r1, #0]
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <LL_RCC_MSI_GetRange>:
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80049ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049f8:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2bb0      	cmp	r3, #176	; 0xb0
 80049fe:	d901      	bls.n	8004a04 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004a00:	23b0      	movs	r3, #176	; 0xb0
 8004a02:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004a04:	687b      	ldr	r3, [r7, #4]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	021b      	lsls	r3, r3, #8
 8004a28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	604b      	str	r3, [r1, #4]
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <LL_RCC_SetSysClkSource>:
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f023 0203 	bic.w	r2, r3, #3
 8004a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	608b      	str	r3, [r1, #8]
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <LL_RCC_GetSysClkSource>:
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 030c 	and.w	r3, r3, #12
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <LL_RCC_SetAHBPrescaler>:
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	608b      	str	r3, [r1, #8]
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <LL_C2_RCC_SetAHBPrescaler>:
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ab8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <LL_RCC_SetAHB4Prescaler>:
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004adc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ae0:	f023 020f 	bic.w	r2, r3, #15
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	091b      	lsrs	r3, r3, #4
 8004ae8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004af2:	bf00      	nop
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <LL_RCC_SetAPB1Prescaler>:
{
 8004afe:	b480      	push	{r7}
 8004b00:	b083      	sub	sp, #12
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	608b      	str	r3, [r1, #8]
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <LL_RCC_SetAPB2Prescaler>:
{
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	608b      	str	r3, [r1, #8]
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <LL_RCC_GetAHBPrescaler>:
{
 8004b4e:	b480      	push	{r7}
 8004b50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <LL_C2_RCC_GetAHBPrescaler>:
{
 8004b66:	b480      	push	{r7}
 8004b68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8004b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <LL_RCC_GetAHB4Prescaler>:
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b88:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <LL_RCC_GetAPB1Prescaler>:
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <LL_RCC_GetAPB2Prescaler>:
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bde:	6013      	str	r3, [r2, #0]
}
 8004be0:	bf00      	nop
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004bea:	b480      	push	{r7}
 8004bec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bf8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bfc:	6013      	str	r3, [r2, #0]
}
 8004bfe:	bf00      	nop
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c1a:	d101      	bne.n	8004c20 <LL_RCC_PLL_IsReady+0x18>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e000      	b.n	8004c22 <LL_RCC_PLL_IsReady+0x1a>
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	0a1b      	lsrs	r3, r3, #8
 8004c38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004c46:	b480      	push	{r7}
 8004c48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004c76:	b480      	push	{r7}
 8004c78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f003 0303 	and.w	r3, r3, #3
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca0:	d101      	bne.n	8004ca6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cc6:	d101      	bne.n	8004ccc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e000      	b.n	8004cce <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ce0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cec:	d101      	bne.n	8004cf2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e000      	b.n	8004cf4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d10:	d101      	bne.n	8004d16 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004d22:	b480      	push	{r7}
 8004d24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d34:	d101      	bne.n	8004d3a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
	...

08004d48 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d48:	b590      	push	{r4, r7, lr}
 8004d4a:	b08d      	sub	sp, #52	; 0x34
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e363      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0320 	and.w	r3, r3, #32
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 808d 	beq.w	8004e82 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d68:	f7ff fe7c 	bl	8004a64 <LL_RCC_GetSysClkSource>
 8004d6c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d6e:	f7ff ff82 	bl	8004c76 <LL_RCC_PLL_GetMainSource>
 8004d72:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d005      	beq.n	8004d86 <HAL_RCC_OscConfig+0x3e>
 8004d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7c:	2b0c      	cmp	r3, #12
 8004d7e:	d147      	bne.n	8004e10 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d144      	bne.n	8004e10 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e347      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004d96:	f7ff fe27 	bl	80049e8 <LL_RCC_MSI_GetRange>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	429c      	cmp	r4, r3
 8004d9e:	d914      	bls.n	8004dca <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 fd61 	bl	800586c <RCC_SetFlashLatencyFromMSIRange>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e336      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff fe01 	bl	80049c0 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff fe25 	bl	8004a12 <LL_RCC_MSI_SetCalibTrimming>
 8004dc8:	e013      	b.n	8004df2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7ff fdf6 	bl	80049c0 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7ff fe1a 	bl	8004a12 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fd42 	bl	800586c <RCC_SetFlashLatencyFromMSIRange>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e317      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004df2:	f000 fcc9 	bl	8005788 <HAL_RCC_GetHCLKFreq>
 8004df6:	4603      	mov	r3, r0
 8004df8:	4aa4      	ldr	r2, [pc, #656]	; (800508c <HAL_RCC_OscConfig+0x344>)
 8004dfa:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004dfc:	4ba4      	ldr	r3, [pc, #656]	; (8005090 <HAL_RCC_OscConfig+0x348>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7fd f9c7 	bl	8002194 <HAL_InitTick>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d039      	beq.n	8004e80 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e308      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d01e      	beq.n	8004e56 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e18:	f7ff fda3 	bl	8004962 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e1c:	f7fd fd96 	bl	800294c <HAL_GetTick>
 8004e20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e24:	f7fd fd92 	bl	800294c <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e2f5      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004e36:	f7ff fdb2 	bl	800499e <LL_RCC_MSI_IsReady>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0f1      	beq.n	8004e24 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7ff fdbb 	bl	80049c0 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7ff fddf 	bl	8004a12 <LL_RCC_MSI_SetCalibTrimming>
 8004e54:	e015      	b.n	8004e82 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004e56:	f7ff fd93 	bl	8004980 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e5a:	f7fd fd77 	bl	800294c <HAL_GetTick>
 8004e5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e62:	f7fd fd73 	bl	800294c <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e2d6      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004e74:	f7ff fd93 	bl	800499e <LL_RCC_MSI_IsReady>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1f1      	bne.n	8004e62 <HAL_RCC_OscConfig+0x11a>
 8004e7e:	e000      	b.n	8004e82 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004e80:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d047      	beq.n	8004f1e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e8e:	f7ff fde9 	bl	8004a64 <LL_RCC_GetSysClkSource>
 8004e92:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e94:	f7ff feef 	bl	8004c76 <LL_RCC_PLL_GetMainSource>
 8004e98:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d005      	beq.n	8004eac <HAL_RCC_OscConfig+0x164>
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	2b0c      	cmp	r3, #12
 8004ea4:	d108      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	2b03      	cmp	r3, #3
 8004eaa:	d105      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d134      	bne.n	8004f1e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e2b4      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec0:	d102      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x180>
 8004ec2:	f7ff fbd0 	bl	8004666 <LL_RCC_HSE_Enable>
 8004ec6:	e001      	b.n	8004ecc <HAL_RCC_OscConfig+0x184>
 8004ec8:	f7ff fbdc 	bl	8004684 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d012      	beq.n	8004efa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed4:	f7fd fd3a 	bl	800294c <HAL_GetTick>
 8004ed8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004edc:	f7fd fd36 	bl	800294c <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b64      	cmp	r3, #100	; 0x64
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e299      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004eee:	f7ff fbd8 	bl	80046a2 <LL_RCC_HSE_IsReady>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0f1      	beq.n	8004edc <HAL_RCC_OscConfig+0x194>
 8004ef8:	e011      	b.n	8004f1e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efa:	f7fd fd27 	bl	800294c <HAL_GetTick>
 8004efe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004f00:	e008      	b.n	8004f14 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f02:	f7fd fd23 	bl	800294c <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b64      	cmp	r3, #100	; 0x64
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e286      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004f14:	f7ff fbc5 	bl	80046a2 <LL_RCC_HSE_IsReady>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1f1      	bne.n	8004f02 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d04c      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f2a:	f7ff fd9b 	bl	8004a64 <LL_RCC_GetSysClkSource>
 8004f2e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f30:	f7ff fea1 	bl	8004c76 <LL_RCC_PLL_GetMainSource>
 8004f34:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	2b04      	cmp	r3, #4
 8004f3a:	d005      	beq.n	8004f48 <HAL_RCC_OscConfig+0x200>
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	2b0c      	cmp	r3, #12
 8004f40:	d10e      	bne.n	8004f60 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d10b      	bne.n	8004f60 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e266      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7ff fbe4 	bl	8004726 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004f5e:	e031      	b.n	8004fc4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d019      	beq.n	8004f9c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f68:	f7ff fbad 	bl	80046c6 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6c:	f7fd fcee 	bl	800294c <HAL_GetTick>
 8004f70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f74:	f7fd fcea 	bl	800294c <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e24d      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004f86:	f7ff fbbc 	bl	8004702 <LL_RCC_HSI_IsReady>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f1      	beq.n	8004f74 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff fbc6 	bl	8004726 <LL_RCC_HSI_SetCalibTrimming>
 8004f9a:	e013      	b.n	8004fc4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f9c:	f7ff fba2 	bl	80046e4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa0:	f7fd fcd4 	bl	800294c <HAL_GetTick>
 8004fa4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fa8:	f7fd fcd0 	bl	800294c <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e233      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004fba:	f7ff fba2 	bl	8004702 <LL_RCC_HSI_IsReady>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1f1      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0308 	and.w	r3, r3, #8
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d106      	bne.n	8004fde <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 80a3 	beq.w	8005124 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d076      	beq.n	80050d4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0310 	and.w	r3, r3, #16
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d046      	beq.n	8005080 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004ff2:	f7ff fc59 	bl	80048a8 <LL_RCC_LSI1_IsReady>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d113      	bne.n	8005024 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004ffc:	f7ff fc32 	bl	8004864 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005000:	f7fd fca4 	bl	800294c <HAL_GetTick>
 8005004:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005008:	f7fd fca0 	bl	800294c <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e203      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800501a:	f7ff fc45 	bl	80048a8 <LL_RCC_LSI1_IsReady>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0f1      	beq.n	8005008 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005024:	f7ff fc52 	bl	80048cc <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005028:	f7fd fc90 	bl	800294c <HAL_GetTick>
 800502c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005030:	f7fd fc8c 	bl	800294c <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b03      	cmp	r3, #3
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e1ef      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005042:	f7ff fc65 	bl	8004910 <LL_RCC_LSI2_IsReady>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0f1      	beq.n	8005030 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff fc6f 	bl	8004934 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005056:	f7ff fc16 	bl	8004886 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505a:	f7fd fc77 	bl	800294c <HAL_GetTick>
 800505e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005060:	e008      	b.n	8005074 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005062:	f7fd fc73 	bl	800294c <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d901      	bls.n	8005074 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e1d6      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005074:	f7ff fc18 	bl	80048a8 <LL_RCC_LSI1_IsReady>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1f1      	bne.n	8005062 <HAL_RCC_OscConfig+0x31a>
 800507e:	e051      	b.n	8005124 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005080:	f7ff fbf0 	bl	8004864 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005084:	f7fd fc62 	bl	800294c <HAL_GetTick>
 8005088:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800508a:	e00c      	b.n	80050a6 <HAL_RCC_OscConfig+0x35e>
 800508c:	20000028 	.word	0x20000028
 8005090:	2000002c 	.word	0x2000002c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005094:	f7fd fc5a 	bl	800294c <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e1bd      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80050a6:	f7ff fbff 	bl	80048a8 <LL_RCC_LSI1_IsReady>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0f1      	beq.n	8005094 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80050b0:	f7ff fc1d 	bl	80048ee <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80050b4:	e008      	b.n	80050c8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80050b6:	f7fd fc49 	bl	800294c <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b03      	cmp	r3, #3
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e1ac      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80050c8:	f7ff fc22 	bl	8004910 <LL_RCC_LSI2_IsReady>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1f1      	bne.n	80050b6 <HAL_RCC_OscConfig+0x36e>
 80050d2:	e027      	b.n	8005124 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80050d4:	f7ff fc0b 	bl	80048ee <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d8:	f7fd fc38 	bl	800294c <HAL_GetTick>
 80050dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80050e0:	f7fd fc34 	bl	800294c <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b03      	cmp	r3, #3
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e197      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80050f2:	f7ff fc0d 	bl	8004910 <LL_RCC_LSI2_IsReady>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1f1      	bne.n	80050e0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80050fc:	f7ff fbc3 	bl	8004886 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005100:	f7fd fc24 	bl	800294c <HAL_GetTick>
 8005104:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005108:	f7fd fc20 	bl	800294c <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e183      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800511a:	f7ff fbc5 	bl	80048a8 <LL_RCC_LSI1_IsReady>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1f1      	bne.n	8005108 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d05b      	beq.n	80051e8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005130:	4ba7      	ldr	r3, [pc, #668]	; (80053d0 <HAL_RCC_OscConfig+0x688>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005138:	2b00      	cmp	r3, #0
 800513a:	d114      	bne.n	8005166 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800513c:	f7ff f9a8 	bl	8004490 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005140:	f7fd fc04 	bl	800294c <HAL_GetTick>
 8005144:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005148:	f7fd fc00 	bl	800294c <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e163      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800515a:	4b9d      	ldr	r3, [pc, #628]	; (80053d0 <HAL_RCC_OscConfig+0x688>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0f0      	beq.n	8005148 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d102      	bne.n	8005174 <HAL_RCC_OscConfig+0x42c>
 800516e:	f7ff fb23 	bl	80047b8 <LL_RCC_LSE_Enable>
 8005172:	e00c      	b.n	800518e <HAL_RCC_OscConfig+0x446>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	2b05      	cmp	r3, #5
 800517a:	d104      	bne.n	8005186 <HAL_RCC_OscConfig+0x43e>
 800517c:	f7ff fb3e 	bl	80047fc <LL_RCC_LSE_EnableBypass>
 8005180:	f7ff fb1a 	bl	80047b8 <LL_RCC_LSE_Enable>
 8005184:	e003      	b.n	800518e <HAL_RCC_OscConfig+0x446>
 8005186:	f7ff fb28 	bl	80047da <LL_RCC_LSE_Disable>
 800518a:	f7ff fb48 	bl	800481e <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d014      	beq.n	80051c0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005196:	f7fd fbd9 	bl	800294c <HAL_GetTick>
 800519a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800519c:	e00a      	b.n	80051b4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800519e:	f7fd fbd5 	bl	800294c <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e136      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80051b4:	f7ff fb44 	bl	8004840 <LL_RCC_LSE_IsReady>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0ef      	beq.n	800519e <HAL_RCC_OscConfig+0x456>
 80051be:	e013      	b.n	80051e8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c0:	f7fd fbc4 	bl	800294c <HAL_GetTick>
 80051c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80051c6:	e00a      	b.n	80051de <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c8:	f7fd fbc0 	bl	800294c <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e121      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80051de:	f7ff fb2f 	bl	8004840 <LL_RCC_LSE_IsReady>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1ef      	bne.n	80051c8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d02c      	beq.n	800524e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d014      	beq.n	8005226 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051fc:	f7ff faa8 	bl	8004750 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005200:	f7fd fba4 	bl	800294c <HAL_GetTick>
 8005204:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005208:	f7fd fba0 	bl	800294c <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e103      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800521a:	f7ff fabb 	bl	8004794 <LL_RCC_HSI48_IsReady>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0f1      	beq.n	8005208 <HAL_RCC_OscConfig+0x4c0>
 8005224:	e013      	b.n	800524e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005226:	f7ff faa4 	bl	8004772 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800522a:	f7fd fb8f 	bl	800294c <HAL_GetTick>
 800522e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005230:	e008      	b.n	8005244 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005232:	f7fd fb8b 	bl	800294c <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d901      	bls.n	8005244 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e0ee      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005244:	f7ff faa6 	bl	8004794 <LL_RCC_HSI48_IsReady>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1f1      	bne.n	8005232 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 80e4 	beq.w	8005420 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005258:	f7ff fc04 	bl	8004a64 <LL_RCC_GetSysClkSource>
 800525c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800525e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526a:	2b02      	cmp	r3, #2
 800526c:	f040 80b4 	bne.w	80053d8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f003 0203 	and.w	r2, r3, #3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	429a      	cmp	r2, r3
 800527c:	d123      	bne.n	80052c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005288:	429a      	cmp	r2, r3
 800528a:	d11c      	bne.n	80052c6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	0a1b      	lsrs	r3, r3, #8
 8005290:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005298:	429a      	cmp	r2, r3
 800529a:	d114      	bne.n	80052c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d10d      	bne.n	80052c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d106      	bne.n	80052c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d05d      	beq.n	8005382 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	2b0c      	cmp	r3, #12
 80052ca:	d058      	beq.n	800537e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80052cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e0a1      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80052de:	f7ff fc84 	bl	8004bea <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052e2:	f7fd fb33 	bl	800294c <HAL_GetTick>
 80052e6:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052e8:	e008      	b.n	80052fc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ea:	f7fd fb2f 	bl	800294c <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e092      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1ef      	bne.n	80052ea <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800530a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	4b30      	ldr	r3, [pc, #192]	; (80053d4 <HAL_RCC_OscConfig+0x68c>)
 8005312:	4013      	ands	r3, r2
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800531c:	4311      	orrs	r1, r2
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005322:	0212      	lsls	r2, r2, #8
 8005324:	4311      	orrs	r1, r2
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800532a:	4311      	orrs	r1, r2
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005330:	4311      	orrs	r1, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005336:	430a      	orrs	r2, r1
 8005338:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800533c:	4313      	orrs	r3, r2
 800533e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005340:	f7ff fc44 	bl	8004bcc <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800534e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005352:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005354:	f7fd fafa 	bl	800294c <HAL_GetTick>
 8005358:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800535c:	f7fd faf6 	bl	800294c <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e059      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800536e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d0ef      	beq.n	800535c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800537c:	e050      	b.n	8005420 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e04f      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d147      	bne.n	8005420 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005390:	f7ff fc1c 	bl	8004bcc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800539e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053a4:	f7fd fad2 	bl	800294c <HAL_GetTick>
 80053a8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ac:	f7fd face 	bl	800294c <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e031      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0ef      	beq.n	80053ac <HAL_RCC_OscConfig+0x664>
 80053cc:	e028      	b.n	8005420 <HAL_RCC_OscConfig+0x6d8>
 80053ce:	bf00      	nop
 80053d0:	58000400 	.word	0x58000400
 80053d4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	2b0c      	cmp	r3, #12
 80053dc:	d01e      	beq.n	800541c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053de:	f7ff fc04 	bl	8004bea <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e2:	f7fd fab3 	bl	800294c <HAL_GetTick>
 80053e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053e8:	e008      	b.n	80053fc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ea:	f7fd faaf 	bl	800294c <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e012      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1ef      	bne.n	80053ea <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800540a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800540e:	68da      	ldr	r2, [r3, #12]
 8005410:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005414:	4b05      	ldr	r3, [pc, #20]	; (800542c <HAL_RCC_OscConfig+0x6e4>)
 8005416:	4013      	ands	r3, r2
 8005418:	60cb      	str	r3, [r1, #12]
 800541a:	e001      	b.n	8005420 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e000      	b.n	8005422 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3734      	adds	r7, #52	; 0x34
 8005426:	46bd      	mov	sp, r7
 8005428:	bd90      	pop	{r4, r7, pc}
 800542a:	bf00      	nop
 800542c:	eefefffc 	.word	0xeefefffc

08005430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e12d      	b.n	80056a0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005444:	4b98      	ldr	r3, [pc, #608]	; (80056a8 <HAL_RCC_ClockConfig+0x278>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d91b      	bls.n	800548a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005452:	4b95      	ldr	r3, [pc, #596]	; (80056a8 <HAL_RCC_ClockConfig+0x278>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f023 0207 	bic.w	r2, r3, #7
 800545a:	4993      	ldr	r1, [pc, #588]	; (80056a8 <HAL_RCC_ClockConfig+0x278>)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	4313      	orrs	r3, r2
 8005460:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005462:	f7fd fa73 	bl	800294c <HAL_GetTick>
 8005466:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005468:	e008      	b.n	800547c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800546a:	f7fd fa6f 	bl	800294c <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d901      	bls.n	800547c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e111      	b.n	80056a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800547c:	4b8a      	ldr	r3, [pc, #552]	; (80056a8 <HAL_RCC_ClockConfig+0x278>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d1ef      	bne.n	800546a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d016      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff faee 	bl	8004a7c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80054a0:	f7fd fa54 	bl	800294c <HAL_GetTick>
 80054a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80054a8:	f7fd fa50 	bl	800294c <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e0f2      	b.n	80056a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80054ba:	f7ff fbe8 	bl	8004c8e <LL_RCC_IsActiveFlag_HPRE>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0f1      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0320 	and.w	r3, r3, #32
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d016      	beq.n	80054fe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7ff fae5 	bl	8004aa4 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80054da:	f7fd fa37 	bl	800294c <HAL_GetTick>
 80054de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80054e0:	e008      	b.n	80054f4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80054e2:	f7fd fa33 	bl	800294c <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e0d5      	b.n	80056a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80054f4:	f7ff fbdd 	bl	8004cb2 <LL_RCC_IsActiveFlag_C2HPRE>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d0f1      	beq.n	80054e2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005506:	2b00      	cmp	r3, #0
 8005508:	d016      	beq.n	8005538 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	4618      	mov	r0, r3
 8005510:	f7ff fade 	bl	8004ad0 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005514:	f7fd fa1a 	bl	800294c <HAL_GetTick>
 8005518:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800551a:	e008      	b.n	800552e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800551c:	f7fd fa16 	bl	800294c <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d901      	bls.n	800552e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e0b8      	b.n	80056a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800552e:	f7ff fbd3 	bl	8004cd8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d0f1      	beq.n	800551c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b00      	cmp	r3, #0
 8005542:	d016      	beq.n	8005572 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	4618      	mov	r0, r3
 800554a:	f7ff fad8 	bl	8004afe <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800554e:	f7fd f9fd 	bl	800294c <HAL_GetTick>
 8005552:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005554:	e008      	b.n	8005568 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005556:	f7fd f9f9 	bl	800294c <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d901      	bls.n	8005568 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e09b      	b.n	80056a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005568:	f7ff fbc9 	bl	8004cfe <LL_RCC_IsActiveFlag_PPRE1>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d0f1      	beq.n	8005556 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d017      	beq.n	80055ae <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	4618      	mov	r0, r3
 8005586:	f7ff face 	bl	8004b26 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800558a:	f7fd f9df 	bl	800294c <HAL_GetTick>
 800558e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005590:	e008      	b.n	80055a4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005592:	f7fd f9db 	bl	800294c <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b02      	cmp	r3, #2
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e07d      	b.n	80056a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80055a4:	f7ff fbbd 	bl	8004d22 <LL_RCC_IsActiveFlag_PPRE2>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0f1      	beq.n	8005592 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d043      	beq.n	8005642 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d106      	bne.n	80055d0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80055c2:	f7ff f86e 	bl	80046a2 <LL_RCC_HSE_IsReady>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d11e      	bne.n	800560a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e067      	b.n	80056a0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b03      	cmp	r3, #3
 80055d6:	d106      	bne.n	80055e6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80055d8:	f7ff fb16 	bl	8004c08 <LL_RCC_PLL_IsReady>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d113      	bne.n	800560a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e05c      	b.n	80056a0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d106      	bne.n	80055fc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80055ee:	f7ff f9d6 	bl	800499e <LL_RCC_MSI_IsReady>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d108      	bne.n	800560a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e051      	b.n	80056a0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80055fc:	f7ff f881 	bl	8004702 <LL_RCC_HSI_IsReady>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e04a      	b.n	80056a0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	4618      	mov	r0, r3
 8005610:	f7ff fa14 	bl	8004a3c <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005614:	f7fd f99a 	bl	800294c <HAL_GetTick>
 8005618:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800561a:	e00a      	b.n	8005632 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800561c:	f7fd f996 	bl	800294c <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	f241 3288 	movw	r2, #5000	; 0x1388
 800562a:	4293      	cmp	r3, r2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e036      	b.n	80056a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005632:	f7ff fa17 	bl	8004a64 <LL_RCC_GetSysClkSource>
 8005636:	4602      	mov	r2, r0
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	429a      	cmp	r2, r3
 8005640:	d1ec      	bne.n	800561c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005642:	4b19      	ldr	r3, [pc, #100]	; (80056a8 <HAL_RCC_ClockConfig+0x278>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	429a      	cmp	r2, r3
 800564e:	d21b      	bcs.n	8005688 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005650:	4b15      	ldr	r3, [pc, #84]	; (80056a8 <HAL_RCC_ClockConfig+0x278>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f023 0207 	bic.w	r2, r3, #7
 8005658:	4913      	ldr	r1, [pc, #76]	; (80056a8 <HAL_RCC_ClockConfig+0x278>)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	4313      	orrs	r3, r2
 800565e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005660:	f7fd f974 	bl	800294c <HAL_GetTick>
 8005664:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005666:	e008      	b.n	800567a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005668:	f7fd f970 	bl	800294c <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d901      	bls.n	800567a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e012      	b.n	80056a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800567a:	4b0b      	ldr	r3, [pc, #44]	; (80056a8 <HAL_RCC_ClockConfig+0x278>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d1ef      	bne.n	8005668 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005688:	f000 f87e 	bl	8005788 <HAL_RCC_GetHCLKFreq>
 800568c:	4603      	mov	r3, r0
 800568e:	4a07      	ldr	r2, [pc, #28]	; (80056ac <HAL_RCC_ClockConfig+0x27c>)
 8005690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005692:	f7fd f967 	bl	8002964 <HAL_GetTickPrio>
 8005696:	4603      	mov	r3, r0
 8005698:	4618      	mov	r0, r3
 800569a:	f7fc fd7b 	bl	8002194 <HAL_InitTick>
 800569e:	4603      	mov	r3, r0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	58004000 	.word	0x58004000
 80056ac:	20000028 	.word	0x20000028

080056b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056b0:	b590      	push	{r4, r7, lr}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056b6:	f7ff f9d5 	bl	8004a64 <LL_RCC_GetSysClkSource>
 80056ba:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10a      	bne.n	80056d8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80056c2:	f7ff f991 	bl	80049e8 <LL_RCC_MSI_GetRange>
 80056c6:	4603      	mov	r3, r0
 80056c8:	091b      	lsrs	r3, r3, #4
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	4a2b      	ldr	r2, [pc, #172]	; (800577c <HAL_RCC_GetSysClockFreq+0xcc>)
 80056d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056d4:	60fb      	str	r3, [r7, #12]
 80056d6:	e04b      	b.n	8005770 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d102      	bne.n	80056e4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80056de:	4b28      	ldr	r3, [pc, #160]	; (8005780 <HAL_RCC_GetSysClockFreq+0xd0>)
 80056e0:	60fb      	str	r3, [r7, #12]
 80056e2:	e045      	b.n	8005770 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b08      	cmp	r3, #8
 80056e8:	d10a      	bne.n	8005700 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80056ea:	f7fe ffaa 	bl	8004642 <LL_RCC_HSE_IsEnabledDiv2>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d102      	bne.n	80056fa <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80056f4:	4b22      	ldr	r3, [pc, #136]	; (8005780 <HAL_RCC_GetSysClockFreq+0xd0>)
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	e03a      	b.n	8005770 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80056fa:	4b22      	ldr	r3, [pc, #136]	; (8005784 <HAL_RCC_GetSysClockFreq+0xd4>)
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	e037      	b.n	8005770 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005700:	f7ff fab9 	bl	8004c76 <LL_RCC_PLL_GetMainSource>
 8005704:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b02      	cmp	r3, #2
 800570a:	d003      	beq.n	8005714 <HAL_RCC_GetSysClockFreq+0x64>
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2b03      	cmp	r3, #3
 8005710:	d003      	beq.n	800571a <HAL_RCC_GetSysClockFreq+0x6a>
 8005712:	e00d      	b.n	8005730 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005714:	4b1a      	ldr	r3, [pc, #104]	; (8005780 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005716:	60bb      	str	r3, [r7, #8]
        break;
 8005718:	e015      	b.n	8005746 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800571a:	f7fe ff92 	bl	8004642 <LL_RCC_HSE_IsEnabledDiv2>
 800571e:	4603      	mov	r3, r0
 8005720:	2b01      	cmp	r3, #1
 8005722:	d102      	bne.n	800572a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005724:	4b16      	ldr	r3, [pc, #88]	; (8005780 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005726:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005728:	e00d      	b.n	8005746 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800572a:	4b16      	ldr	r3, [pc, #88]	; (8005784 <HAL_RCC_GetSysClockFreq+0xd4>)
 800572c:	60bb      	str	r3, [r7, #8]
        break;
 800572e:	e00a      	b.n	8005746 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005730:	f7ff f95a 	bl	80049e8 <LL_RCC_MSI_GetRange>
 8005734:	4603      	mov	r3, r0
 8005736:	091b      	lsrs	r3, r3, #4
 8005738:	f003 030f 	and.w	r3, r3, #15
 800573c:	4a0f      	ldr	r2, [pc, #60]	; (800577c <HAL_RCC_GetSysClockFreq+0xcc>)
 800573e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005742:	60bb      	str	r3, [r7, #8]
        break;
 8005744:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005746:	f7ff fa71 	bl	8004c2c <LL_RCC_PLL_GetN>
 800574a:	4602      	mov	r2, r0
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	fb03 f402 	mul.w	r4, r3, r2
 8005752:	f7ff fa84 	bl	8004c5e <LL_RCC_PLL_GetDivider>
 8005756:	4603      	mov	r3, r0
 8005758:	091b      	lsrs	r3, r3, #4
 800575a:	3301      	adds	r3, #1
 800575c:	fbb4 f4f3 	udiv	r4, r4, r3
 8005760:	f7ff fa71 	bl	8004c46 <LL_RCC_PLL_GetR>
 8005764:	4603      	mov	r3, r0
 8005766:	0f5b      	lsrs	r3, r3, #29
 8005768:	3301      	adds	r3, #1
 800576a:	fbb4 f3f3 	udiv	r3, r4, r3
 800576e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005770:	68fb      	ldr	r3, [r7, #12]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	bd90      	pop	{r4, r7, pc}
 800577a:	bf00      	nop
 800577c:	0800c8bc 	.word	0x0800c8bc
 8005780:	00f42400 	.word	0x00f42400
 8005784:	01e84800 	.word	0x01e84800

08005788 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005788:	b598      	push	{r3, r4, r7, lr}
 800578a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800578c:	f7ff ff90 	bl	80056b0 <HAL_RCC_GetSysClockFreq>
 8005790:	4604      	mov	r4, r0
 8005792:	f7ff f9dc 	bl	8004b4e <LL_RCC_GetAHBPrescaler>
 8005796:	4603      	mov	r3, r0
 8005798:	091b      	lsrs	r3, r3, #4
 800579a:	f003 030f 	and.w	r3, r3, #15
 800579e:	4a03      	ldr	r2, [pc, #12]	; (80057ac <HAL_RCC_GetHCLKFreq+0x24>)
 80057a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057a4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	bd98      	pop	{r3, r4, r7, pc}
 80057ac:	0800c85c 	.word	0x0800c85c

080057b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057b0:	b598      	push	{r3, r4, r7, lr}
 80057b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80057b4:	f7ff ffe8 	bl	8005788 <HAL_RCC_GetHCLKFreq>
 80057b8:	4604      	mov	r4, r0
 80057ba:	f7ff f9ef 	bl	8004b9c <LL_RCC_GetAPB1Prescaler>
 80057be:	4603      	mov	r3, r0
 80057c0:	0a1b      	lsrs	r3, r3, #8
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	4a04      	ldr	r2, [pc, #16]	; (80057d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80057c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057cc:	f003 031f 	and.w	r3, r3, #31
 80057d0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	bd98      	pop	{r3, r4, r7, pc}
 80057d8:	0800c89c 	.word	0x0800c89c

080057dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057dc:	b598      	push	{r3, r4, r7, lr}
 80057de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80057e0:	f7ff ffd2 	bl	8005788 <HAL_RCC_GetHCLKFreq>
 80057e4:	4604      	mov	r4, r0
 80057e6:	f7ff f9e5 	bl	8004bb4 <LL_RCC_GetAPB2Prescaler>
 80057ea:	4603      	mov	r3, r0
 80057ec:	0adb      	lsrs	r3, r3, #11
 80057ee:	f003 0307 	and.w	r3, r3, #7
 80057f2:	4a04      	ldr	r2, [pc, #16]	; (8005804 <HAL_RCC_GetPCLK2Freq+0x28>)
 80057f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057f8:	f003 031f 	and.w	r3, r3, #31
 80057fc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005800:	4618      	mov	r0, r3
 8005802:	bd98      	pop	{r3, r4, r7, pc}
 8005804:	0800c89c 	.word	0x0800c89c

08005808 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	226f      	movs	r2, #111	; 0x6f
 8005816:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8005818:	f7ff f924 	bl	8004a64 <LL_RCC_GetSysClkSource>
 800581c:	4602      	mov	r2, r0
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8005822:	f7ff f994 	bl	8004b4e <LL_RCC_GetAHBPrescaler>
 8005826:	4602      	mov	r2, r0
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800582c:	f7ff f9b6 	bl	8004b9c <LL_RCC_GetAPB1Prescaler>
 8005830:	4602      	mov	r2, r0
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8005836:	f7ff f9bd 	bl	8004bb4 <LL_RCC_GetAPB2Prescaler>
 800583a:	4602      	mov	r2, r0
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8005840:	f7ff f991 	bl	8004b66 <LL_C2_RCC_GetAHBPrescaler>
 8005844:	4602      	mov	r2, r0
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800584a:	f7ff f999 	bl	8004b80 <LL_RCC_GetAHB4Prescaler>
 800584e:	4602      	mov	r2, r0
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005854:	4b04      	ldr	r3, [pc, #16]	; (8005868 <HAL_RCC_GetClockConfig+0x60>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0207 	and.w	r2, r3, #7
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	601a      	str	r2, [r3, #0]
}
 8005860:	bf00      	nop
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	58004000 	.word	0x58004000

0800586c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800586c:	b590      	push	{r4, r7, lr}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2bb0      	cmp	r3, #176	; 0xb0
 8005878:	d903      	bls.n	8005882 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800587a:	4b15      	ldr	r3, [pc, #84]	; (80058d0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800587c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	e007      	b.n	8005892 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	091b      	lsrs	r3, r3, #4
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	4a11      	ldr	r2, [pc, #68]	; (80058d0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800588c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005890:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005892:	f7ff f975 	bl	8004b80 <LL_RCC_GetAHB4Prescaler>
 8005896:	4603      	mov	r3, r0
 8005898:	091b      	lsrs	r3, r3, #4
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	4a0d      	ldr	r2, [pc, #52]	; (80058d4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80058a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058aa:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4a0a      	ldr	r2, [pc, #40]	; (80058d8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80058b0:	fba2 2303 	umull	r2, r3, r2, r3
 80058b4:	0c9c      	lsrs	r4, r3, #18
 80058b6:	f7fe fdfb 	bl	80044b0 <HAL_PWREx_GetVoltageRange>
 80058ba:	4603      	mov	r3, r0
 80058bc:	4619      	mov	r1, r3
 80058be:	4620      	mov	r0, r4
 80058c0:	f000 f80c 	bl	80058dc <RCC_SetFlashLatency>
 80058c4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd90      	pop	{r4, r7, pc}
 80058ce:	bf00      	nop
 80058d0:	0800c8bc 	.word	0x0800c8bc
 80058d4:	0800c85c 	.word	0x0800c85c
 80058d8:	431bde83 	.word	0x431bde83

080058dc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80058dc:	b590      	push	{r4, r7, lr}
 80058de:	b093      	sub	sp, #76	; 0x4c
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80058e6:	4b37      	ldr	r3, [pc, #220]	; (80059c4 <RCC_SetFlashLatency+0xe8>)
 80058e8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80058ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80058ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80058f2:	4a35      	ldr	r2, [pc, #212]	; (80059c8 <RCC_SetFlashLatency+0xec>)
 80058f4:	f107 031c 	add.w	r3, r7, #28
 80058f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80058fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80058fe:	4b33      	ldr	r3, [pc, #204]	; (80059cc <RCC_SetFlashLatency+0xf0>)
 8005900:	f107 040c 	add.w	r4, r7, #12
 8005904:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005906:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800590a:	2300      	movs	r3, #0
 800590c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005914:	d11a      	bne.n	800594c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005916:	2300      	movs	r3, #0
 8005918:	643b      	str	r3, [r7, #64]	; 0x40
 800591a:	e013      	b.n	8005944 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800591c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	3348      	adds	r3, #72	; 0x48
 8005922:	443b      	add	r3, r7
 8005924:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	429a      	cmp	r2, r3
 800592c:	d807      	bhi.n	800593e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800592e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	3348      	adds	r3, #72	; 0x48
 8005934:	443b      	add	r3, r7
 8005936:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800593a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800593c:	e020      	b.n	8005980 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800593e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005940:	3301      	adds	r3, #1
 8005942:	643b      	str	r3, [r7, #64]	; 0x40
 8005944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005946:	2b03      	cmp	r3, #3
 8005948:	d9e8      	bls.n	800591c <RCC_SetFlashLatency+0x40>
 800594a:	e019      	b.n	8005980 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800594c:	2300      	movs	r3, #0
 800594e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005950:	e013      	b.n	800597a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	3348      	adds	r3, #72	; 0x48
 8005958:	443b      	add	r3, r7
 800595a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	429a      	cmp	r2, r3
 8005962:	d807      	bhi.n	8005974 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	3348      	adds	r3, #72	; 0x48
 800596a:	443b      	add	r3, r7
 800596c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005970:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005972:	e005      	b.n	8005980 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005976:	3301      	adds	r3, #1
 8005978:	63fb      	str	r3, [r7, #60]	; 0x3c
 800597a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597c:	2b02      	cmp	r3, #2
 800597e:	d9e8      	bls.n	8005952 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005980:	4b13      	ldr	r3, [pc, #76]	; (80059d0 <RCC_SetFlashLatency+0xf4>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f023 0207 	bic.w	r2, r3, #7
 8005988:	4911      	ldr	r1, [pc, #68]	; (80059d0 <RCC_SetFlashLatency+0xf4>)
 800598a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800598c:	4313      	orrs	r3, r2
 800598e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005990:	f7fc ffdc 	bl	800294c <HAL_GetTick>
 8005994:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005996:	e008      	b.n	80059aa <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005998:	f7fc ffd8 	bl	800294c <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e007      	b.n	80059ba <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80059aa:	4b09      	ldr	r3, [pc, #36]	; (80059d0 <RCC_SetFlashLatency+0xf4>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0307 	and.w	r3, r3, #7
 80059b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d1ef      	bne.n	8005998 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	374c      	adds	r7, #76	; 0x4c
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd90      	pop	{r4, r7, pc}
 80059c2:	bf00      	nop
 80059c4:	0800c7f4 	.word	0x0800c7f4
 80059c8:	0800c804 	.word	0x0800c804
 80059cc:	0800c810 	.word	0x0800c810
 80059d0:	58004000 	.word	0x58004000

080059d4 <LL_RCC_LSE_IsEnabled>:
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80059d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d101      	bne.n	80059ec <LL_RCC_LSE_IsEnabled+0x18>
 80059e8:	2301      	movs	r3, #1
 80059ea:	e000      	b.n	80059ee <LL_RCC_LSE_IsEnabled+0x1a>
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <LL_RCC_LSE_IsReady>:
{
 80059f8:	b480      	push	{r7}
 80059fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80059fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d101      	bne.n	8005a10 <LL_RCC_LSE_IsReady+0x18>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e000      	b.n	8005a12 <LL_RCC_LSE_IsReady+0x1a>
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <LL_RCC_MSI_EnablePLLMode>:
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a2a:	f043 0304 	orr.w	r3, r3, #4
 8005a2e:	6013      	str	r3, [r2, #0]
}
 8005a30:	bf00      	nop
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <LL_RCC_SetRFWKPClockSource>:
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <LL_RCC_SetSMPSClockSource>:
{
 8005a66:	b480      	push	{r7}
 8005a68:	b083      	sub	sp, #12
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	f023 0203 	bic.w	r2, r3, #3
 8005a78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005a82:	bf00      	nop
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <LL_RCC_SetSMPSPrescaler>:
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005aa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <LL_RCC_SetUSARTClockSource>:
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac6:	f023 0203 	bic.w	r2, r3, #3
 8005aca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ad6:	bf00      	nop
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <LL_RCC_SetLPUARTClockSource>:
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005af6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b02:	bf00      	nop
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <LL_RCC_SetI2CClockSource>:
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b083      	sub	sp, #12
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	091b      	lsrs	r3, r3, #4
 8005b22:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005b26:	43db      	mvns	r3, r3
 8005b28:	401a      	ands	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005b32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b36:	4313      	orrs	r3, r2
 8005b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <LL_RCC_SetLPTIMClockSource>:
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	0c1b      	lsrs	r3, r3, #16
 8005b5c:	041b      	lsls	r3, r3, #16
 8005b5e:	43db      	mvns	r3, r3
 8005b60:	401a      	ands	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	041b      	lsls	r3, r3, #16
 8005b66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <LL_RCC_SetSAIClockSource>:
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <LL_RCC_SetRNGClockSource>:
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005bbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <LL_RCC_SetCLK48ClockSource>:
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005be8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <LL_RCC_SetUSBClockSource>:
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f7ff ffe3 	bl	8005bd4 <LL_RCC_SetCLK48ClockSource>
}
 8005c0e:	bf00      	nop
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <LL_RCC_SetADCClockSource>:
{
 8005c16:	b480      	push	{r7}
 8005c18:	b083      	sub	sp, #12
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <LL_RCC_SetRTCClockSource>:
{
 8005c42:	b480      	push	{r7}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005c62:	bf00      	nop
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <LL_RCC_GetRTCClockSource>:
{
 8005c6e:	b480      	push	{r7}
 8005c70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <LL_RCC_ForceBackupDomainReset>:
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005ca0:	bf00      	nop
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <LL_RCC_ReleaseBackupDomainReset>:
{
 8005caa:	b480      	push	{r7}
 8005cac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005cc2:	bf00      	nop
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <LL_RCC_PLLSAI1_Enable>:
{
 8005ccc:	b480      	push	{r7}
 8005cce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005cde:	6013      	str	r3, [r2, #0]
}
 8005ce0:	bf00      	nop
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <LL_RCC_PLLSAI1_Disable>:
{
 8005cea:	b480      	push	{r7}
 8005cec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cf8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005cfc:	6013      	str	r3, [r2, #0]
}
 8005cfe:	bf00      	nop
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <LL_RCC_PLLSAI1_IsReady>:
{
 8005d08:	b480      	push	{r7}
 8005d0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d1a:	d101      	bne.n	8005d20 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e000      	b.n	8005d22 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005d34:	2300      	movs	r3, #0
 8005d36:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005d38:	2300      	movs	r3, #0
 8005d3a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d034      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005d50:	d021      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005d52:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005d56:	d81b      	bhi.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005d58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d5c:	d01d      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005d5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d62:	d815      	bhi.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00b      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005d68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d6c:	d110      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d7c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005d7e:	e00d      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3304      	adds	r3, #4
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 f94d 	bl	8006024 <RCCEx_PLLSAI1_ConfigNP>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005d8e:	e005      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	77fb      	strb	r3, [r7, #31]
        break;
 8005d94:	e002      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005d96:	bf00      	nop
 8005d98:	e000      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005d9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d9c:	7ffb      	ldrb	r3, [r7, #31]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d105      	bne.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff fee8 	bl	8005b7c <LL_RCC_SetSAIClockSource>
 8005dac:	e001      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dae:	7ffb      	ldrb	r3, [r7, #31]
 8005db0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d046      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005dbe:	f7ff ff56 	bl	8005c6e <LL_RCC_GetRTCClockSource>
 8005dc2:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d03c      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005dce:	f7fe fb5f 	bl	8004490 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d105      	bne.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7ff ff30 	bl	8005c42 <LL_RCC_SetRTCClockSource>
 8005de2:	e02e      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dec:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005dee:	f7ff ff4b 	bl	8005c88 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005df2:	f7ff ff5a 	bl	8005caa <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e00:	4313      	orrs	r3, r2
 8005e02:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005e04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005e0e:	f7ff fde1 	bl	80059d4 <LL_RCC_LSE_IsEnabled>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d114      	bne.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e18:	f7fc fd98 	bl	800294c <HAL_GetTick>
 8005e1c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005e1e:	e00b      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e20:	f7fc fd94 	bl	800294c <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d902      	bls.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	77fb      	strb	r3, [r7, #31]
              break;
 8005e36:	e004      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005e38:	f7ff fdde 	bl	80059f8 <LL_RCC_LSE_IsReady>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d1ee      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005e42:	7ffb      	ldrb	r3, [r7, #31]
 8005e44:	77bb      	strb	r3, [r7, #30]
 8005e46:	e001      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e48:	7ffb      	ldrb	r3, [r7, #31]
 8005e4a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d004      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7ff fe2a 	bl	8005ab6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d004      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7ff fe35 	bl	8005ae2 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0310 	and.w	r3, r3, #16
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d004      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7ff fe5d 	bl	8005b48 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0320 	and.w	r3, r3, #32
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d004      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7ff fe52 	bl	8005b48 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d004      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7ff fe2a 	bl	8005b0e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0308 	and.w	r3, r3, #8
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d004      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7ff fe1f 	bl	8005b0e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d022      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7ff fe8d 	bl	8005c00 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005eee:	d107      	bne.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005efe:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f08:	d10b      	bne.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 f8e3 	bl	80060da <RCCEx_PLLSAI1_ConfigNQ>
 8005f14:	4603      	mov	r3, r0
 8005f16:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005f18:	7ffb      	ldrb	r3, [r7, #31]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005f1e:	7ffb      	ldrb	r3, [r7, #31]
 8005f20:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d02b      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f36:	d008      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f40:	d003      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d105      	bne.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff fe2a 	bl	8005ba8 <LL_RCC_SetRNGClockSource>
 8005f54:	e00a      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	2000      	movs	r0, #0
 8005f62:	f7ff fe21 	bl	8005ba8 <LL_RCC_SetRNGClockSource>
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f7ff fe34 	bl	8005bd4 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f70:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005f74:	d107      	bne.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f84:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d022      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7ff fe3d 	bl	8005c16 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fa4:	d107      	bne.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fb4:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fbe:	d10b      	bne.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 f8e3 	bl	8006190 <RCCEx_PLLSAI1_ConfigNR>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005fce:	7ffb      	ldrb	r3, [r7, #31]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d001      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005fd4:	7ffb      	ldrb	r3, [r7, #31]
 8005fd6:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d004      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7ff fd26 	bl	8005a3a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d009      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7ff fd45 	bl	8005a8e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006008:	4618      	mov	r0, r3
 800600a:	f7ff fd2c 	bl	8005a66 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800600e:	7fbb      	ldrb	r3, [r7, #30]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3720      	adds	r7, #32
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800601c:	f7ff fcfe 	bl	8005a1c <LL_RCC_MSI_EnablePLLMode>
}
 8006020:	bf00      	nop
 8006022:	bd80      	pop	{r7, pc}

08006024 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800602c:	2300      	movs	r3, #0
 800602e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006030:	f7ff fe5b 	bl	8005cea <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006034:	f7fc fc8a 	bl	800294c <HAL_GetTick>
 8006038:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800603a:	e009      	b.n	8006050 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800603c:	f7fc fc86 	bl	800294c <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	2b02      	cmp	r3, #2
 8006048:	d902      	bls.n	8006050 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	73fb      	strb	r3, [r7, #15]
      break;
 800604e:	e004      	b.n	800605a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006050:	f7ff fe5a 	bl	8005d08 <LL_RCC_PLLSAI1_IsReady>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1f0      	bne.n	800603c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800605a:	7bfb      	ldrb	r3, [r7, #15]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d137      	bne.n	80060d0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	021b      	lsls	r3, r3, #8
 8006070:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006074:	4313      	orrs	r3, r2
 8006076:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800608a:	4313      	orrs	r3, r2
 800608c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800608e:	f7ff fe1d 	bl	8005ccc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006092:	f7fc fc5b 	bl	800294c <HAL_GetTick>
 8006096:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006098:	e009      	b.n	80060ae <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800609a:	f7fc fc57 	bl	800294c <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d902      	bls.n	80060ae <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	73fb      	strb	r3, [r7, #15]
        break;
 80060ac:	e004      	b.n	80060b8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80060ae:	f7ff fe2b 	bl	8005d08 <LL_RCC_PLLSAI1_IsReady>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d1f0      	bne.n	800609a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d108      	bne.n	80060d0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80060be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060c2:	691a      	ldr	r2, [r3, #16]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060cc:	4313      	orrs	r3, r2
 80060ce:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b084      	sub	sp, #16
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060e2:	2300      	movs	r3, #0
 80060e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80060e6:	f7ff fe00 	bl	8005cea <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80060ea:	f7fc fc2f 	bl	800294c <HAL_GetTick>
 80060ee:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80060f0:	e009      	b.n	8006106 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060f2:	f7fc fc2b 	bl	800294c <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d902      	bls.n	8006106 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	73fb      	strb	r3, [r7, #15]
      break;
 8006104:	e004      	b.n	8006110 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006106:	f7ff fdff 	bl	8005d08 <LL_RCC_PLLSAI1_IsReady>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1f0      	bne.n	80060f2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006110:	7bfb      	ldrb	r3, [r7, #15]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d137      	bne.n	8006186 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	021b      	lsls	r3, r3, #8
 8006126:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800612a:	4313      	orrs	r3, r2
 800612c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800612e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006140:	4313      	orrs	r3, r2
 8006142:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006144:	f7ff fdc2 	bl	8005ccc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006148:	f7fc fc00 	bl	800294c <HAL_GetTick>
 800614c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800614e:	e009      	b.n	8006164 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006150:	f7fc fbfc 	bl	800294c <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d902      	bls.n	8006164 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	73fb      	strb	r3, [r7, #15]
        break;
 8006162:	e004      	b.n	800616e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006164:	f7ff fdd0 	bl	8005d08 <LL_RCC_PLLSAI1_IsReady>
 8006168:	4603      	mov	r3, r0
 800616a:	2b01      	cmp	r3, #1
 800616c:	d1f0      	bne.n	8006150 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800616e:	7bfb      	ldrb	r3, [r7, #15]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d108      	bne.n	8006186 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006178:	691a      	ldr	r2, [r3, #16]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006182:	4313      	orrs	r3, r2
 8006184:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006186:	7bfb      	ldrb	r3, [r7, #15]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006198:	2300      	movs	r3, #0
 800619a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800619c:	f7ff fda5 	bl	8005cea <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80061a0:	f7fc fbd4 	bl	800294c <HAL_GetTick>
 80061a4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80061a6:	e009      	b.n	80061bc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061a8:	f7fc fbd0 	bl	800294c <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d902      	bls.n	80061bc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	73fb      	strb	r3, [r7, #15]
      break;
 80061ba:	e004      	b.n	80061c6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80061bc:	f7ff fda4 	bl	8005d08 <LL_RCC_PLLSAI1_IsReady>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1f0      	bne.n	80061a8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d137      	bne.n	800623c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80061cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	021b      	lsls	r3, r3, #8
 80061dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061e0:	4313      	orrs	r3, r2
 80061e2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80061e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061f6:	4313      	orrs	r3, r2
 80061f8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80061fa:	f7ff fd67 	bl	8005ccc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061fe:	f7fc fba5 	bl	800294c <HAL_GetTick>
 8006202:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006204:	e009      	b.n	800621a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006206:	f7fc fba1 	bl	800294c <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	2b02      	cmp	r3, #2
 8006212:	d902      	bls.n	800621a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	73fb      	strb	r3, [r7, #15]
        break;
 8006218:	e004      	b.n	8006224 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800621a:	f7ff fd75 	bl	8005d08 <LL_RCC_PLLSAI1_IsReady>
 800621e:	4603      	mov	r3, r0
 8006220:	2b01      	cmp	r3, #1
 8006222:	d1f0      	bne.n	8006206 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006224:	7bfb      	ldrb	r3, [r7, #15]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d108      	bne.n	800623c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800622a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800622e:	691a      	ldr	r2, [r3, #16]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006238:	4313      	orrs	r3, r2
 800623a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800623c:	7bfb      	ldrb	r3, [r7, #15]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
	...

08006248 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e09f      	b.n	800639a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d106      	bne.n	8006274 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7fb fcb6 	bl	8001be0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800627c:	4b49      	ldr	r3, [pc, #292]	; (80063a4 <HAL_RTC_Init+0x15c>)
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f003 0310 	and.w	r3, r3, #16
 8006284:	2b10      	cmp	r3, #16
 8006286:	d07e      	beq.n	8006386 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	22ca      	movs	r2, #202	; 0xca
 800628e:	625a      	str	r2, [r3, #36]	; 0x24
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2253      	movs	r2, #83	; 0x53
 8006296:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f8ab 	bl	80063f4 <RTC_EnterInitMode>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00a      	beq.n	80062ba <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	22ff      	movs	r2, #255	; 0xff
 80062aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2204      	movs	r2, #4
 80062b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	73fb      	strb	r3, [r7, #15]
 80062b8:	e067      	b.n	800638a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	6812      	ldr	r2, [r2, #0]
 80062c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80062c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062cc:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6899      	ldr	r1, [r3, #8]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	431a      	orrs	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	68d2      	ldr	r2, [r2, #12]
 80062f4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6919      	ldr	r1, [r3, #16]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	041a      	lsls	r2, r3, #16
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68da      	ldr	r2, [r3, #12]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006318:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0203 	bic.w	r2, r2, #3
 8006328:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	69da      	ldr	r2, [r3, #28]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	431a      	orrs	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f003 0320 	and.w	r3, r3, #32
 800634c:	2b00      	cmp	r3, #0
 800634e:	d113      	bne.n	8006378 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f829 	bl	80063a8 <HAL_RTC_WaitForSynchro>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00d      	beq.n	8006378 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	22ff      	movs	r2, #255	; 0xff
 8006362:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2204      	movs	r2, #4
 8006368:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e010      	b.n	800639a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	22ff      	movs	r2, #255	; 0xff
 800637e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8006380:	2300      	movs	r3, #0
 8006382:	73fb      	strb	r3, [r7, #15]
 8006384:	e001      	b.n	800638a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800638a:	7bfb      	ldrb	r3, [r7, #15]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d103      	bne.n	8006398 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8006398:	7bfb      	ldrb	r3, [r7, #15]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	40002800 	.word	0x40002800

080063a8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80063be:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80063c0:	f7fc fac4 	bl	800294c <HAL_GetTick>
 80063c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80063c6:	e009      	b.n	80063dc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80063c8:	f7fc fac0 	bl	800294c <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063d6:	d901      	bls.n	80063dc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e007      	b.n	80063ec <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	f003 0320 	and.w	r3, r3, #32
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d0ee      	beq.n	80063c8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006406:	2b00      	cmp	r3, #0
 8006408:	d119      	bne.n	800643e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f04f 32ff 	mov.w	r2, #4294967295
 8006412:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006414:	f7fc fa9a 	bl	800294c <HAL_GetTick>
 8006418:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800641a:	e009      	b.n	8006430 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800641c:	f7fc fa96 	bl	800294c <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800642a:	d901      	bls.n	8006430 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e007      	b.n	8006440 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643a:	2b00      	cmp	r3, #0
 800643c:	d0ee      	beq.n	800641c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e095      	b.n	8006586 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	2b00      	cmp	r3, #0
 8006460:	d108      	bne.n	8006474 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800646a:	d009      	beq.n	8006480 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	61da      	str	r2, [r3, #28]
 8006472:	e005      	b.n	8006480 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d106      	bne.n	80064a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7fb fc3e 	bl	8001d1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064c0:	d902      	bls.n	80064c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
 80064c6:	e002      	b.n	80064ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80064c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80064d6:	d007      	beq.n	80064e8 <HAL_SPI_Init+0xa0>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064e0:	d002      	beq.n	80064e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80064f8:	431a      	orrs	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	431a      	orrs	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	431a      	orrs	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006516:	431a      	orrs	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006520:	431a      	orrs	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652a:	ea42 0103 	orr.w	r1, r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006532:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	0c1b      	lsrs	r3, r3, #16
 8006544:	f003 0204 	and.w	r2, r3, #4
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	f003 0310 	and.w	r3, r3, #16
 8006550:	431a      	orrs	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	431a      	orrs	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006564:	ea42 0103 	orr.w	r1, r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
	...

08006590 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	4613      	mov	r3, r2
 800659c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d101      	bne.n	80065b0 <HAL_SPI_Transmit_DMA+0x20>
 80065ac:	2302      	movs	r3, #2
 80065ae:	e0d8      	b.n	8006762 <HAL_SPI_Transmit_DMA+0x1d2>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d002      	beq.n	80065ca <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80065c4:	2302      	movs	r3, #2
 80065c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80065c8:	e0c6      	b.n	8006758 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <HAL_SPI_Transmit_DMA+0x46>
 80065d0:	88fb      	ldrh	r3, [r7, #6]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d102      	bne.n	80065dc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80065da:	e0bd      	b.n	8006758 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2203      	movs	r2, #3
 80065e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	88fa      	ldrh	r2, [r7, #6]
 80065f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	88fa      	ldrh	r2, [r7, #6]
 80065fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006626:	d10f      	bne.n	8006648 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006636:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006646:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664c:	4a47      	ldr	r2, [pc, #284]	; (800676c <HAL_SPI_Transmit_DMA+0x1dc>)
 800664e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006654:	4a46      	ldr	r2, [pc, #280]	; (8006770 <HAL_SPI_Transmit_DMA+0x1e0>)
 8006656:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665c:	4a45      	ldr	r2, [pc, #276]	; (8006774 <HAL_SPI_Transmit_DMA+0x1e4>)
 800665e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006664:	2200      	movs	r2, #0
 8006666:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006676:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006680:	d82d      	bhi.n	80066de <HAL_SPI_Transmit_DMA+0x14e>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800668c:	d127      	bne.n	80066de <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006692:	b29b      	uxth	r3, r3
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10f      	bne.n	80066bc <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	685a      	ldr	r2, [r3, #4]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80066aa:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	085b      	lsrs	r3, r3, #1
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066ba:	e010      	b.n	80066de <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066ca:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	085b      	lsrs	r3, r3, #1
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	3301      	adds	r3, #1
 80066d8:	b29a      	uxth	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e6:	4619      	mov	r1, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	330c      	adds	r3, #12
 80066ee:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066f4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80066f6:	f7fd f967 	bl	80039c8 <HAL_DMA_Start_IT>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00c      	beq.n	800671a <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006704:	f043 0210 	orr.w	r2, r3, #16
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006718:	e01e      	b.n	8006758 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006724:	2b40      	cmp	r3, #64	; 0x40
 8006726:	d007      	beq.n	8006738 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006736:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f042 0220 	orr.w	r2, r2, #32
 8006746:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	685a      	ldr	r2, [r3, #4]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f042 0202 	orr.w	r2, r2, #2
 8006756:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006760:	7dfb      	ldrb	r3, [r7, #23]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3718      	adds	r7, #24
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	08006f07 	.word	0x08006f07
 8006770:	08006d29 	.word	0x08006d29
 8006774:	08006f5b 	.word	0x08006f5b

08006778 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	4613      	mov	r3, r2
 8006784:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d110      	bne.n	80067b4 <HAL_SPI_Receive_DMA+0x3c>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800679a:	d10b      	bne.n	80067b4 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2204      	movs	r2, #4
 80067a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80067a4:	88fb      	ldrh	r3, [r7, #6]
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	68b9      	ldr	r1, [r7, #8]
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f000 f908 	bl	80069c0 <HAL_SPI_TransmitReceive_DMA>
 80067b0:	4603      	mov	r3, r0
 80067b2:	e0fb      	b.n	80069ac <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d101      	bne.n	80067c2 <HAL_SPI_Receive_DMA+0x4a>
 80067be:	2302      	movs	r3, #2
 80067c0:	e0f4      	b.n	80069ac <HAL_SPI_Receive_DMA+0x234>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d002      	beq.n	80067dc <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80067d6:	2302      	movs	r3, #2
 80067d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80067da:	e0e2      	b.n	80069a2 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d002      	beq.n	80067e8 <HAL_SPI_Receive_DMA+0x70>
 80067e2:	88fb      	ldrh	r3, [r7, #6]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d102      	bne.n	80067ee <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80067ec:	e0d9      	b.n	80069a2 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2204      	movs	r2, #4
 80067f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	88fa      	ldrh	r2, [r7, #6]
 8006806:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	88fa      	ldrh	r2, [r7, #6]
 800680e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006832:	d10f      	bne.n	8006854 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006842:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006852:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006862:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800686c:	d908      	bls.n	8006880 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800687c:	605a      	str	r2, [r3, #4]
 800687e:	e042      	b.n	8006906 <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800688e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800689a:	d134      	bne.n	8006906 <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80068aa:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d111      	bne.n	80068e0 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068ca:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	085b      	lsrs	r3, r3, #1
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80068de:	e012      	b.n	8006906 <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068ee:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	085b      	lsrs	r3, r3, #1
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	3301      	adds	r3, #1
 80068fe:	b29a      	uxth	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800690a:	4a2a      	ldr	r2, [pc, #168]	; (80069b4 <HAL_SPI_Receive_DMA+0x23c>)
 800690c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006912:	4a29      	ldr	r2, [pc, #164]	; (80069b8 <HAL_SPI_Receive_DMA+0x240>)
 8006914:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800691a:	4a28      	ldr	r2, [pc, #160]	; (80069bc <HAL_SPI_Receive_DMA+0x244>)
 800691c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006922:	2200      	movs	r2, #0
 8006924:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	330c      	adds	r3, #12
 8006930:	4619      	mov	r1, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006936:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800693e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006940:	f7fd f842 	bl	80039c8 <HAL_DMA_Start_IT>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00c      	beq.n	8006964 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800694e:	f043 0210 	orr.w	r2, r3, #16
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006962:	e01e      	b.n	80069a2 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696e:	2b40      	cmp	r3, #64	; 0x40
 8006970:	d007      	beq.n	8006982 <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006980:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f042 0220 	orr.w	r2, r2, #32
 8006990:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f042 0201 	orr.w	r2, r2, #1
 80069a0:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80069aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3718      	adds	r7, #24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	08006f23 	.word	0x08006f23
 80069b8:	08006dcf 	.word	0x08006dcf
 80069bc:	08006f5b 	.word	0x08006f5b

080069c0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
 80069cc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d101      	bne.n	80069e0 <HAL_SPI_TransmitReceive_DMA+0x20>
 80069dc:	2302      	movs	r3, #2
 80069de:	e16c      	b.n	8006cba <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069ee:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80069f6:	7dbb      	ldrb	r3, [r7, #22]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d00d      	beq.n	8006a18 <HAL_SPI_TransmitReceive_DMA+0x58>
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a02:	d106      	bne.n	8006a12 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d102      	bne.n	8006a12 <HAL_SPI_TransmitReceive_DMA+0x52>
 8006a0c:	7dbb      	ldrb	r3, [r7, #22]
 8006a0e:	2b04      	cmp	r3, #4
 8006a10:	d002      	beq.n	8006a18 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8006a12:	2302      	movs	r3, #2
 8006a14:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a16:	e14b      	b.n	8006cb0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d005      	beq.n	8006a2a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006a24:	887b      	ldrh	r3, [r7, #2]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d102      	bne.n	8006a30 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a2e:	e13f      	b.n	8006cb0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b04      	cmp	r3, #4
 8006a3a:	d003      	beq.n	8006a44 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2205      	movs	r2, #5
 8006a40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	887a      	ldrh	r2, [r7, #2]
 8006a54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	887a      	ldrh	r2, [r7, #2]
 8006a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	887a      	ldrh	r2, [r7, #2]
 8006a66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	887a      	ldrh	r2, [r7, #2]
 8006a6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8006a8c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a96:	d908      	bls.n	8006aaa <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006aa6:	605a      	str	r2, [r3, #4]
 8006aa8:	e06f      	b.n	8006b8a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ab8:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ac4:	d126      	bne.n	8006b14 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10f      	bne.n	8006af2 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006ae0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	085b      	lsrs	r3, r3, #1
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006af0:	e010      	b.n	8006b14 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b00:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	085b      	lsrs	r3, r3, #1
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b1e:	d134      	bne.n	8006b8a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b2e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d111      	bne.n	8006b64 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685a      	ldr	r2, [r3, #4]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b4e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	085b      	lsrs	r3, r3, #1
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006b62:	e012      	b.n	8006b8a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685a      	ldr	r2, [r3, #4]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b72:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	085b      	lsrs	r3, r3, #1
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	3301      	adds	r3, #1
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b04      	cmp	r3, #4
 8006b94:	d108      	bne.n	8006ba8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b9a:	4a4a      	ldr	r2, [pc, #296]	; (8006cc4 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8006b9c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ba2:	4a49      	ldr	r2, [pc, #292]	; (8006cc8 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8006ba4:	62da      	str	r2, [r3, #44]	; 0x2c
 8006ba6:	e007      	b.n	8006bb8 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bac:	4a47      	ldr	r2, [pc, #284]	; (8006ccc <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8006bae:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb4:	4a46      	ldr	r2, [pc, #280]	; (8006cd0 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8006bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bbc:	4a45      	ldr	r2, [pc, #276]	; (8006cd4 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8006bbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	330c      	adds	r3, #12
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006be0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006be2:	f7fc fef1 	bl	80039c8 <HAL_DMA_Start_IT>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00c      	beq.n	8006c06 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bf0:	f043 0210 	orr.w	r2, r3, #16
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006c04:	e054      	b.n	8006cb0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f042 0201 	orr.w	r2, r2, #1
 8006c14:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c22:	2200      	movs	r2, #0
 8006c24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c32:	2200      	movs	r2, #0
 8006c34:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3e:	4619      	mov	r1, r3
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	330c      	adds	r3, #12
 8006c46:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c4c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006c4e:	f7fc febb 	bl	80039c8 <HAL_DMA_Start_IT>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00c      	beq.n	8006c72 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c5c:	f043 0210 	orr.w	r2, r3, #16
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006c70:	e01e      	b.n	8006cb0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7c:	2b40      	cmp	r3, #64	; 0x40
 8006c7e:	d007      	beq.n	8006c90 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c8e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f042 0220 	orr.w	r2, r2, #32
 8006c9e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f042 0202 	orr.w	r2, r2, #2
 8006cae:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3718      	adds	r7, #24
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	08006f23 	.word	0x08006f23
 8006cc8:	08006dcf 	.word	0x08006dcf
 8006ccc:	08006f3f 	.word	0x08006f3f
 8006cd0:	08006e77 	.word	0x08006e77
 8006cd4:	08006f5b 	.word	0x08006f5b

08006cd8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d34:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d36:	f7fb fe09 	bl	800294c <HAL_GetTick>
 8006d3a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0320 	and.w	r3, r3, #32
 8006d46:	2b20      	cmp	r3, #32
 8006d48:	d03b      	beq.n	8006dc2 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 0220 	bic.w	r2, r2, #32
 8006d58:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 0202 	bic.w	r2, r2, #2
 8006d68:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	2164      	movs	r1, #100	; 0x64
 8006d6e:	6978      	ldr	r0, [r7, #20]
 8006d70:	f000 fa8a 	bl	8007288 <SPI_EndRxTxTransaction>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d005      	beq.n	8006d86 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d7e:	f043 0220 	orr.w	r2, r3, #32
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10a      	bne.n	8006da4 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d8e:	2300      	movs	r3, #0
 8006d90:	60fb      	str	r3, [r7, #12]
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	60fb      	str	r3, [r7, #12]
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	2200      	movs	r2, #0
 8006da8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d003      	beq.n	8006dc2 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006dba:	6978      	ldr	r0, [r7, #20]
 8006dbc:	f7ff ffaa 	bl	8006d14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006dc0:	e002      	b.n	8006dc8 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006dc2:	6978      	ldr	r0, [r7, #20]
 8006dc4:	f7fb f971 	bl	80020aa <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b084      	sub	sp, #16
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dda:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ddc:	f7fb fdb6 	bl	800294c <HAL_GetTick>
 8006de0:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0320 	and.w	r3, r3, #32
 8006dec:	2b20      	cmp	r3, #32
 8006dee:	d03c      	beq.n	8006e6a <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685a      	ldr	r2, [r3, #4]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 0220 	bic.w	r2, r2, #32
 8006dfe:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10d      	bne.n	8006e24 <SPI_DMAReceiveCplt+0x56>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e10:	d108      	bne.n	8006e24 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f022 0203 	bic.w	r2, r2, #3
 8006e20:	605a      	str	r2, [r3, #4]
 8006e22:	e007      	b.n	8006e34 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685a      	ldr	r2, [r3, #4]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f022 0201 	bic.w	r2, r2, #1
 8006e32:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006e34:	68ba      	ldr	r2, [r7, #8]
 8006e36:	2164      	movs	r1, #100	; 0x64
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f000 f9cd 	bl	80071d8 <SPI_EndRxTransaction>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d002      	beq.n	8006e4a <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2220      	movs	r2, #32
 8006e48:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f7ff ff56 	bl	8006d14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006e68:	e002      	b.n	8006e70 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f7fb f928 	bl	80020c0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b084      	sub	sp, #16
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e82:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e84:	f7fb fd62 	bl	800294c <HAL_GetTick>
 8006e88:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0320 	and.w	r3, r3, #32
 8006e94:	2b20      	cmp	r3, #32
 8006e96:	d030      	beq.n	8006efa <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f022 0220 	bic.w	r2, r2, #32
 8006ea6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	2164      	movs	r1, #100	; 0x64
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f000 f9eb 	bl	8007288 <SPI_EndRxTxTransaction>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d005      	beq.n	8006ec4 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ebc:	f043 0220 	orr.w	r2, r3, #32
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f022 0203 	bic.w	r2, r2, #3
 8006ed2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d003      	beq.n	8006efa <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f7ff ff0e 	bl	8006d14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006ef8:	e002      	b.n	8006f00 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f7fb f8ca 	bl	8002094 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b084      	sub	sp, #16
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f7ff fedf 	bl	8006cd8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f1a:	bf00      	nop
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b084      	sub	sp, #16
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f7ff fedb 	bl	8006cec <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f36:	bf00      	nop
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b084      	sub	sp, #16
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f7ff fed7 	bl	8006d00 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f52:	bf00      	nop
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b084      	sub	sp, #16
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f66:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 0203 	bic.w	r2, r2, #3
 8006f76:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f7c:	f043 0210 	orr.w	r2, r3, #16
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f7ff fec1 	bl	8006d14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f92:	bf00      	nop
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
	...

08006f9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b088      	sub	sp, #32
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	603b      	str	r3, [r7, #0]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006fac:	f7fb fcce 	bl	800294c <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb4:	1a9b      	subs	r3, r3, r2
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	4413      	add	r3, r2
 8006fba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006fbc:	f7fb fcc6 	bl	800294c <HAL_GetTick>
 8006fc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006fc2:	4b39      	ldr	r3, [pc, #228]	; (80070a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	015b      	lsls	r3, r3, #5
 8006fc8:	0d1b      	lsrs	r3, r3, #20
 8006fca:	69fa      	ldr	r2, [r7, #28]
 8006fcc:	fb02 f303 	mul.w	r3, r2, r3
 8006fd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fd2:	e054      	b.n	800707e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fda:	d050      	beq.n	800707e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fdc:	f7fb fcb6 	bl	800294c <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	69fa      	ldr	r2, [r7, #28]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d902      	bls.n	8006ff2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d13d      	bne.n	800706e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007000:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800700a:	d111      	bne.n	8007030 <SPI_WaitFlagStateUntilTimeout+0x94>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007014:	d004      	beq.n	8007020 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800701e:	d107      	bne.n	8007030 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800702e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007038:	d10f      	bne.n	800705a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007048:	601a      	str	r2, [r3, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007058:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e017      	b.n	800709e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d101      	bne.n	8007078 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007074:	2300      	movs	r3, #0
 8007076:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	3b01      	subs	r3, #1
 800707c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689a      	ldr	r2, [r3, #8]
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	4013      	ands	r3, r2
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	429a      	cmp	r2, r3
 800708c:	bf0c      	ite	eq
 800708e:	2301      	moveq	r3, #1
 8007090:	2300      	movne	r3, #0
 8007092:	b2db      	uxtb	r3, r3
 8007094:	461a      	mov	r2, r3
 8007096:	79fb      	ldrb	r3, [r7, #7]
 8007098:	429a      	cmp	r2, r3
 800709a:	d19b      	bne.n	8006fd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3720      	adds	r7, #32
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20000028 	.word	0x20000028

080070ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b08a      	sub	sp, #40	; 0x28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80070ba:	2300      	movs	r3, #0
 80070bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80070be:	f7fb fc45 	bl	800294c <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c6:	1a9b      	subs	r3, r3, r2
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	4413      	add	r3, r2
 80070cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80070ce:	f7fb fc3d 	bl	800294c <HAL_GetTick>
 80070d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	330c      	adds	r3, #12
 80070da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80070dc:	4b3d      	ldr	r3, [pc, #244]	; (80071d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	4613      	mov	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4413      	add	r3, r2
 80070e6:	00da      	lsls	r2, r3, #3
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	0d1b      	lsrs	r3, r3, #20
 80070ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ee:	fb02 f303 	mul.w	r3, r2, r3
 80070f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80070f4:	e060      	b.n	80071b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80070fc:	d107      	bne.n	800710e <SPI_WaitFifoStateUntilTimeout+0x62>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d104      	bne.n	800710e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	b2db      	uxtb	r3, r3
 800710a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800710c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007114:	d050      	beq.n	80071b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007116:	f7fb fc19 	bl	800294c <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007122:	429a      	cmp	r2, r3
 8007124:	d902      	bls.n	800712c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007128:	2b00      	cmp	r3, #0
 800712a:	d13d      	bne.n	80071a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800713a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007144:	d111      	bne.n	800716a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800714e:	d004      	beq.n	800715a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007158:	d107      	bne.n	800716a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007168:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007172:	d10f      	bne.n	8007194 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007192:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e010      	b.n	80071ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80071ae:	2300      	movs	r3, #0
 80071b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	3b01      	subs	r3, #1
 80071b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689a      	ldr	r2, [r3, #8]
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	4013      	ands	r3, r2
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d196      	bne.n	80070f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3728      	adds	r7, #40	; 0x28
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	20000028 	.word	0x20000028

080071d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af02      	add	r7, sp, #8
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071ec:	d111      	bne.n	8007212 <SPI_EndRxTransaction+0x3a>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071f6:	d004      	beq.n	8007202 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007200:	d107      	bne.n	8007212 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007210:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2200      	movs	r2, #0
 800721a:	2180      	movs	r1, #128	; 0x80
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f7ff febd 	bl	8006f9c <SPI_WaitFlagStateUntilTimeout>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d007      	beq.n	8007238 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800722c:	f043 0220 	orr.w	r2, r3, #32
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e023      	b.n	8007280 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007240:	d11d      	bne.n	800727e <SPI_EndRxTransaction+0xa6>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800724a:	d004      	beq.n	8007256 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007254:	d113      	bne.n	800727e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2200      	movs	r2, #0
 800725e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f7ff ff22 	bl	80070ac <SPI_WaitFifoStateUntilTimeout>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d007      	beq.n	800727e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007272:	f043 0220 	orr.w	r2, r3, #32
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e000      	b.n	8007280 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af02      	add	r7, sp, #8
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	2200      	movs	r2, #0
 800729c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f7ff ff03 	bl	80070ac <SPI_WaitFifoStateUntilTimeout>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d007      	beq.n	80072bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072b0:	f043 0220 	orr.w	r2, r3, #32
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e027      	b.n	800730c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2200      	movs	r2, #0
 80072c4:	2180      	movs	r1, #128	; 0x80
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f7ff fe68 	bl	8006f9c <SPI_WaitFlagStateUntilTimeout>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d007      	beq.n	80072e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072d6:	f043 0220 	orr.w	r2, r3, #32
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e014      	b.n	800730c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f7ff fedc 	bl	80070ac <SPI_WaitFifoStateUntilTimeout>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d007      	beq.n	800730a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072fe:	f043 0220 	orr.w	r2, r3, #32
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e000      	b.n	800730c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e049      	b.n	80073ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d106      	bne.n	8007340 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7fb f8f8 	bl	8002530 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2202      	movs	r2, #2
 8007344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	3304      	adds	r3, #4
 8007350:	4619      	mov	r1, r3
 8007352:	4610      	mov	r0, r2
 8007354:	f000 fce6 	bl	8007d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
	...

080073c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d001      	beq.n	80073dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e036      	b.n	800744a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2202      	movs	r2, #2
 80073e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68da      	ldr	r2, [r3, #12]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f042 0201 	orr.w	r2, r2, #1
 80073f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a17      	ldr	r2, [pc, #92]	; (8007458 <HAL_TIM_Base_Start_IT+0x94>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d004      	beq.n	8007408 <HAL_TIM_Base_Start_IT+0x44>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007406:	d115      	bne.n	8007434 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689a      	ldr	r2, [r3, #8]
 800740e:	4b13      	ldr	r3, [pc, #76]	; (800745c <HAL_TIM_Base_Start_IT+0x98>)
 8007410:	4013      	ands	r3, r2
 8007412:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2b06      	cmp	r3, #6
 8007418:	d015      	beq.n	8007446 <HAL_TIM_Base_Start_IT+0x82>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007420:	d011      	beq.n	8007446 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f042 0201 	orr.w	r2, r2, #1
 8007430:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007432:	e008      	b.n	8007446 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0201 	orr.w	r2, r2, #1
 8007442:	601a      	str	r2, [r3, #0]
 8007444:	e000      	b.n	8007448 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007446:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	40012c00 	.word	0x40012c00
 800745c:	00010007 	.word	0x00010007

08007460 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e049      	b.n	8007506 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	d106      	bne.n	800748c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f841 	bl	800750e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2202      	movs	r2, #2
 8007490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	3304      	adds	r3, #4
 800749c:	4619      	mov	r1, r3
 800749e:	4610      	mov	r0, r2
 80074a0:	f000 fc40 	bl	8007d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800750e:	b480      	push	{r7}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007516:	bf00      	nop
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
	...

08007524 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d109      	bne.n	8007548 <HAL_TIM_PWM_Start+0x24>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800753a:	b2db      	uxtb	r3, r3
 800753c:	2b01      	cmp	r3, #1
 800753e:	bf14      	ite	ne
 8007540:	2301      	movne	r3, #1
 8007542:	2300      	moveq	r3, #0
 8007544:	b2db      	uxtb	r3, r3
 8007546:	e03c      	b.n	80075c2 <HAL_TIM_PWM_Start+0x9e>
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	2b04      	cmp	r3, #4
 800754c:	d109      	bne.n	8007562 <HAL_TIM_PWM_Start+0x3e>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b01      	cmp	r3, #1
 8007558:	bf14      	ite	ne
 800755a:	2301      	movne	r3, #1
 800755c:	2300      	moveq	r3, #0
 800755e:	b2db      	uxtb	r3, r3
 8007560:	e02f      	b.n	80075c2 <HAL_TIM_PWM_Start+0x9e>
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	2b08      	cmp	r3, #8
 8007566:	d109      	bne.n	800757c <HAL_TIM_PWM_Start+0x58>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b01      	cmp	r3, #1
 8007572:	bf14      	ite	ne
 8007574:	2301      	movne	r3, #1
 8007576:	2300      	moveq	r3, #0
 8007578:	b2db      	uxtb	r3, r3
 800757a:	e022      	b.n	80075c2 <HAL_TIM_PWM_Start+0x9e>
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	2b0c      	cmp	r3, #12
 8007580:	d109      	bne.n	8007596 <HAL_TIM_PWM_Start+0x72>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b01      	cmp	r3, #1
 800758c:	bf14      	ite	ne
 800758e:	2301      	movne	r3, #1
 8007590:	2300      	moveq	r3, #0
 8007592:	b2db      	uxtb	r3, r3
 8007594:	e015      	b.n	80075c2 <HAL_TIM_PWM_Start+0x9e>
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b10      	cmp	r3, #16
 800759a:	d109      	bne.n	80075b0 <HAL_TIM_PWM_Start+0x8c>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	bf14      	ite	ne
 80075a8:	2301      	movne	r3, #1
 80075aa:	2300      	moveq	r3, #0
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	e008      	b.n	80075c2 <HAL_TIM_PWM_Start+0x9e>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	bf14      	ite	ne
 80075bc:	2301      	movne	r3, #1
 80075be:	2300      	moveq	r3, #0
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e079      	b.n	80076be <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d104      	bne.n	80075da <HAL_TIM_PWM_Start+0xb6>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2202      	movs	r2, #2
 80075d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075d8:	e023      	b.n	8007622 <HAL_TIM_PWM_Start+0xfe>
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	2b04      	cmp	r3, #4
 80075de:	d104      	bne.n	80075ea <HAL_TIM_PWM_Start+0xc6>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075e8:	e01b      	b.n	8007622 <HAL_TIM_PWM_Start+0xfe>
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	2b08      	cmp	r3, #8
 80075ee:	d104      	bne.n	80075fa <HAL_TIM_PWM_Start+0xd6>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2202      	movs	r2, #2
 80075f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075f8:	e013      	b.n	8007622 <HAL_TIM_PWM_Start+0xfe>
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	2b0c      	cmp	r3, #12
 80075fe:	d104      	bne.n	800760a <HAL_TIM_PWM_Start+0xe6>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2202      	movs	r2, #2
 8007604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007608:	e00b      	b.n	8007622 <HAL_TIM_PWM_Start+0xfe>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b10      	cmp	r3, #16
 800760e:	d104      	bne.n	800761a <HAL_TIM_PWM_Start+0xf6>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2202      	movs	r2, #2
 8007614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007618:	e003      	b.n	8007622 <HAL_TIM_PWM_Start+0xfe>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2202      	movs	r2, #2
 800761e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2201      	movs	r2, #1
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	4618      	mov	r0, r3
 800762c:	f000 fef8 	bl	8008420 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a24      	ldr	r2, [pc, #144]	; (80076c8 <HAL_TIM_PWM_Start+0x1a4>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d009      	beq.n	800764e <HAL_TIM_PWM_Start+0x12a>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a23      	ldr	r2, [pc, #140]	; (80076cc <HAL_TIM_PWM_Start+0x1a8>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d004      	beq.n	800764e <HAL_TIM_PWM_Start+0x12a>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a21      	ldr	r2, [pc, #132]	; (80076d0 <HAL_TIM_PWM_Start+0x1ac>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d101      	bne.n	8007652 <HAL_TIM_PWM_Start+0x12e>
 800764e:	2301      	movs	r3, #1
 8007650:	e000      	b.n	8007654 <HAL_TIM_PWM_Start+0x130>
 8007652:	2300      	movs	r3, #0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d007      	beq.n	8007668 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007666:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a16      	ldr	r2, [pc, #88]	; (80076c8 <HAL_TIM_PWM_Start+0x1a4>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d004      	beq.n	800767c <HAL_TIM_PWM_Start+0x158>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800767a:	d115      	bne.n	80076a8 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689a      	ldr	r2, [r3, #8]
 8007682:	4b14      	ldr	r3, [pc, #80]	; (80076d4 <HAL_TIM_PWM_Start+0x1b0>)
 8007684:	4013      	ands	r3, r2
 8007686:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2b06      	cmp	r3, #6
 800768c:	d015      	beq.n	80076ba <HAL_TIM_PWM_Start+0x196>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007694:	d011      	beq.n	80076ba <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f042 0201 	orr.w	r2, r2, #1
 80076a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a6:	e008      	b.n	80076ba <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f042 0201 	orr.w	r2, r2, #1
 80076b6:	601a      	str	r2, [r3, #0]
 80076b8:	e000      	b.n	80076bc <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	40012c00 	.word	0x40012c00
 80076cc:	40014400 	.word	0x40014400
 80076d0:	40014800 	.word	0x40014800
 80076d4:	00010007 	.word	0x00010007

080076d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	f003 0302 	and.w	r3, r3, #2
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d122      	bne.n	8007734 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	f003 0302 	and.w	r3, r3, #2
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d11b      	bne.n	8007734 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f06f 0202 	mvn.w	r2, #2
 8007704:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	699b      	ldr	r3, [r3, #24]
 8007712:	f003 0303 	and.w	r3, r3, #3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d003      	beq.n	8007722 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fae3 	bl	8007ce6 <HAL_TIM_IC_CaptureCallback>
 8007720:	e005      	b.n	800772e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fad5 	bl	8007cd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 fae6 	bl	8007cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	f003 0304 	and.w	r3, r3, #4
 800773e:	2b04      	cmp	r3, #4
 8007740:	d122      	bne.n	8007788 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	f003 0304 	and.w	r3, r3, #4
 800774c:	2b04      	cmp	r3, #4
 800774e:	d11b      	bne.n	8007788 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f06f 0204 	mvn.w	r2, #4
 8007758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2202      	movs	r2, #2
 800775e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fab9 	bl	8007ce6 <HAL_TIM_IC_CaptureCallback>
 8007774:	e005      	b.n	8007782 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 faab 	bl	8007cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fabc 	bl	8007cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	f003 0308 	and.w	r3, r3, #8
 8007792:	2b08      	cmp	r3, #8
 8007794:	d122      	bne.n	80077dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	f003 0308 	and.w	r3, r3, #8
 80077a0:	2b08      	cmp	r3, #8
 80077a2:	d11b      	bne.n	80077dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f06f 0208 	mvn.w	r2, #8
 80077ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2204      	movs	r2, #4
 80077b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	69db      	ldr	r3, [r3, #28]
 80077ba:	f003 0303 	and.w	r3, r3, #3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d003      	beq.n	80077ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fa8f 	bl	8007ce6 <HAL_TIM_IC_CaptureCallback>
 80077c8:	e005      	b.n	80077d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fa81 	bl	8007cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fa92 	bl	8007cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	f003 0310 	and.w	r3, r3, #16
 80077e6:	2b10      	cmp	r3, #16
 80077e8:	d122      	bne.n	8007830 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	f003 0310 	and.w	r3, r3, #16
 80077f4:	2b10      	cmp	r3, #16
 80077f6:	d11b      	bne.n	8007830 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f06f 0210 	mvn.w	r2, #16
 8007800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2208      	movs	r2, #8
 8007806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	69db      	ldr	r3, [r3, #28]
 800780e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007812:	2b00      	cmp	r3, #0
 8007814:	d003      	beq.n	800781e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fa65 	bl	8007ce6 <HAL_TIM_IC_CaptureCallback>
 800781c:	e005      	b.n	800782a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fa57 	bl	8007cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fa68 	bl	8007cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	2b01      	cmp	r3, #1
 800783c:	d10e      	bne.n	800785c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b01      	cmp	r3, #1
 800784a:	d107      	bne.n	800785c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f06f 0201 	mvn.w	r2, #1
 8007854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7f9 fcf2 	bl	8001240 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007866:	2b80      	cmp	r3, #128	; 0x80
 8007868:	d10e      	bne.n	8007888 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007874:	2b80      	cmp	r3, #128	; 0x80
 8007876:	d107      	bne.n	8007888 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 feec 	bl	8008660 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007896:	d10e      	bne.n	80078b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a2:	2b80      	cmp	r3, #128	; 0x80
 80078a4:	d107      	bne.n	80078b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80078ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fedf 	bl	8008674 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c0:	2b40      	cmp	r3, #64	; 0x40
 80078c2:	d10e      	bne.n	80078e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ce:	2b40      	cmp	r3, #64	; 0x40
 80078d0:	d107      	bne.n	80078e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fa16 	bl	8007d0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	f003 0320 	and.w	r3, r3, #32
 80078ec:	2b20      	cmp	r3, #32
 80078ee:	d10e      	bne.n	800790e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	f003 0320 	and.w	r3, r3, #32
 80078fa:	2b20      	cmp	r3, #32
 80078fc:	d107      	bne.n	800790e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f06f 0220 	mvn.w	r2, #32
 8007906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fe9f 	bl	800864c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800790e:	bf00      	nop
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
	...

08007918 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b086      	sub	sp, #24
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800792e:	2b01      	cmp	r3, #1
 8007930:	d101      	bne.n	8007936 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007932:	2302      	movs	r3, #2
 8007934:	e0ff      	b.n	8007b36 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2b14      	cmp	r3, #20
 8007942:	f200 80f0 	bhi.w	8007b26 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007946:	a201      	add	r2, pc, #4	; (adr r2, 800794c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794c:	080079a1 	.word	0x080079a1
 8007950:	08007b27 	.word	0x08007b27
 8007954:	08007b27 	.word	0x08007b27
 8007958:	08007b27 	.word	0x08007b27
 800795c:	080079e1 	.word	0x080079e1
 8007960:	08007b27 	.word	0x08007b27
 8007964:	08007b27 	.word	0x08007b27
 8007968:	08007b27 	.word	0x08007b27
 800796c:	08007a23 	.word	0x08007a23
 8007970:	08007b27 	.word	0x08007b27
 8007974:	08007b27 	.word	0x08007b27
 8007978:	08007b27 	.word	0x08007b27
 800797c:	08007a63 	.word	0x08007a63
 8007980:	08007b27 	.word	0x08007b27
 8007984:	08007b27 	.word	0x08007b27
 8007988:	08007b27 	.word	0x08007b27
 800798c:	08007aa5 	.word	0x08007aa5
 8007990:	08007b27 	.word	0x08007b27
 8007994:	08007b27 	.word	0x08007b27
 8007998:	08007b27 	.word	0x08007b27
 800799c:	08007ae5 	.word	0x08007ae5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68b9      	ldr	r1, [r7, #8]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 fa20 	bl	8007dec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	699a      	ldr	r2, [r3, #24]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f042 0208 	orr.w	r2, r2, #8
 80079ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	699a      	ldr	r2, [r3, #24]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f022 0204 	bic.w	r2, r2, #4
 80079ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6999      	ldr	r1, [r3, #24]
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	691a      	ldr	r2, [r3, #16]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	430a      	orrs	r2, r1
 80079dc:	619a      	str	r2, [r3, #24]
      break;
 80079de:	e0a5      	b.n	8007b2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68b9      	ldr	r1, [r7, #8]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 fa7c 	bl	8007ee4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	699a      	ldr	r2, [r3, #24]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	699a      	ldr	r2, [r3, #24]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6999      	ldr	r1, [r3, #24]
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	021a      	lsls	r2, r3, #8
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	619a      	str	r2, [r3, #24]
      break;
 8007a20:	e084      	b.n	8007b2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68b9      	ldr	r1, [r7, #8]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f000 fad5 	bl	8007fd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	69da      	ldr	r2, [r3, #28]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f042 0208 	orr.w	r2, r2, #8
 8007a3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	69da      	ldr	r2, [r3, #28]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f022 0204 	bic.w	r2, r2, #4
 8007a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	69d9      	ldr	r1, [r3, #28]
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	691a      	ldr	r2, [r3, #16]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	430a      	orrs	r2, r1
 8007a5e:	61da      	str	r2, [r3, #28]
      break;
 8007a60:	e064      	b.n	8007b2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68b9      	ldr	r1, [r7, #8]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 fb2d 	bl	80080c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	69da      	ldr	r2, [r3, #28]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	69da      	ldr	r2, [r3, #28]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	69d9      	ldr	r1, [r3, #28]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	021a      	lsls	r2, r3, #8
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	61da      	str	r2, [r3, #28]
      break;
 8007aa2:	e043      	b.n	8007b2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68b9      	ldr	r1, [r7, #8]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 fb6a 	bl	8008184 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f042 0208 	orr.w	r2, r2, #8
 8007abe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f022 0204 	bic.w	r2, r2, #4
 8007ace:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	691a      	ldr	r2, [r3, #16]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007ae2:	e023      	b.n	8007b2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68b9      	ldr	r1, [r7, #8]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 fba2 	bl	8008234 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007afe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b0e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	021a      	lsls	r2, r3, #8
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	430a      	orrs	r2, r1
 8007b22:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007b24:	e002      	b.n	8007b2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	75fb      	strb	r3, [r7, #23]
      break;
 8007b2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop

08007b40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d101      	bne.n	8007b5c <HAL_TIM_ConfigClockSource+0x1c>
 8007b58:	2302      	movs	r3, #2
 8007b5a:	e0b6      	b.n	8007cca <HAL_TIM_ConfigClockSource+0x18a>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2202      	movs	r2, #2
 8007b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007b7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b98:	d03e      	beq.n	8007c18 <HAL_TIM_ConfigClockSource+0xd8>
 8007b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b9e:	f200 8087 	bhi.w	8007cb0 <HAL_TIM_ConfigClockSource+0x170>
 8007ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ba6:	f000 8086 	beq.w	8007cb6 <HAL_TIM_ConfigClockSource+0x176>
 8007baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bae:	d87f      	bhi.n	8007cb0 <HAL_TIM_ConfigClockSource+0x170>
 8007bb0:	2b70      	cmp	r3, #112	; 0x70
 8007bb2:	d01a      	beq.n	8007bea <HAL_TIM_ConfigClockSource+0xaa>
 8007bb4:	2b70      	cmp	r3, #112	; 0x70
 8007bb6:	d87b      	bhi.n	8007cb0 <HAL_TIM_ConfigClockSource+0x170>
 8007bb8:	2b60      	cmp	r3, #96	; 0x60
 8007bba:	d050      	beq.n	8007c5e <HAL_TIM_ConfigClockSource+0x11e>
 8007bbc:	2b60      	cmp	r3, #96	; 0x60
 8007bbe:	d877      	bhi.n	8007cb0 <HAL_TIM_ConfigClockSource+0x170>
 8007bc0:	2b50      	cmp	r3, #80	; 0x50
 8007bc2:	d03c      	beq.n	8007c3e <HAL_TIM_ConfigClockSource+0xfe>
 8007bc4:	2b50      	cmp	r3, #80	; 0x50
 8007bc6:	d873      	bhi.n	8007cb0 <HAL_TIM_ConfigClockSource+0x170>
 8007bc8:	2b40      	cmp	r3, #64	; 0x40
 8007bca:	d058      	beq.n	8007c7e <HAL_TIM_ConfigClockSource+0x13e>
 8007bcc:	2b40      	cmp	r3, #64	; 0x40
 8007bce:	d86f      	bhi.n	8007cb0 <HAL_TIM_ConfigClockSource+0x170>
 8007bd0:	2b30      	cmp	r3, #48	; 0x30
 8007bd2:	d064      	beq.n	8007c9e <HAL_TIM_ConfigClockSource+0x15e>
 8007bd4:	2b30      	cmp	r3, #48	; 0x30
 8007bd6:	d86b      	bhi.n	8007cb0 <HAL_TIM_ConfigClockSource+0x170>
 8007bd8:	2b20      	cmp	r3, #32
 8007bda:	d060      	beq.n	8007c9e <HAL_TIM_ConfigClockSource+0x15e>
 8007bdc:	2b20      	cmp	r3, #32
 8007bde:	d867      	bhi.n	8007cb0 <HAL_TIM_ConfigClockSource+0x170>
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d05c      	beq.n	8007c9e <HAL_TIM_ConfigClockSource+0x15e>
 8007be4:	2b10      	cmp	r3, #16
 8007be6:	d05a      	beq.n	8007c9e <HAL_TIM_ConfigClockSource+0x15e>
 8007be8:	e062      	b.n	8007cb0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007bfa:	f000 fbf1 	bl	80083e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007c0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	609a      	str	r2, [r3, #8]
      break;
 8007c16:	e04f      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c28:	f000 fbda 	bl	80083e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	689a      	ldr	r2, [r3, #8]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c3a:	609a      	str	r2, [r3, #8]
      break;
 8007c3c:	e03c      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	f000 fb4c 	bl	80082e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2150      	movs	r1, #80	; 0x50
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 fba5 	bl	80083a6 <TIM_ITRx_SetConfig>
      break;
 8007c5c:	e02c      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f000 fb6b 	bl	8008346 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2160      	movs	r1, #96	; 0x60
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 fb95 	bl	80083a6 <TIM_ITRx_SetConfig>
      break;
 8007c7c:	e01c      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	f000 fb2c 	bl	80082e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2140      	movs	r1, #64	; 0x40
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 fb85 	bl	80083a6 <TIM_ITRx_SetConfig>
      break;
 8007c9c:	e00c      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	4610      	mov	r0, r2
 8007caa:	f000 fb7c 	bl	80083a6 <TIM_ITRx_SetConfig>
      break;
 8007cae:	e003      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb4:	e000      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007cb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b083      	sub	sp, #12
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007cda:	bf00      	nop
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b083      	sub	sp, #12
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d02:	bf00      	nop
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b083      	sub	sp, #12
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d16:	bf00      	nop
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr
	...

08007d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a2a      	ldr	r2, [pc, #168]	; (8007de0 <TIM_Base_SetConfig+0xbc>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d003      	beq.n	8007d44 <TIM_Base_SetConfig+0x20>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d42:	d108      	bne.n	8007d56 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a21      	ldr	r2, [pc, #132]	; (8007de0 <TIM_Base_SetConfig+0xbc>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d00b      	beq.n	8007d76 <TIM_Base_SetConfig+0x52>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d64:	d007      	beq.n	8007d76 <TIM_Base_SetConfig+0x52>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a1e      	ldr	r2, [pc, #120]	; (8007de4 <TIM_Base_SetConfig+0xc0>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d003      	beq.n	8007d76 <TIM_Base_SetConfig+0x52>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a1d      	ldr	r2, [pc, #116]	; (8007de8 <TIM_Base_SetConfig+0xc4>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d108      	bne.n	8007d88 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	689a      	ldr	r2, [r3, #8]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a0c      	ldr	r2, [pc, #48]	; (8007de0 <TIM_Base_SetConfig+0xbc>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d007      	beq.n	8007dc4 <TIM_Base_SetConfig+0xa0>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a0b      	ldr	r2, [pc, #44]	; (8007de4 <TIM_Base_SetConfig+0xc0>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d003      	beq.n	8007dc4 <TIM_Base_SetConfig+0xa0>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a0a      	ldr	r2, [pc, #40]	; (8007de8 <TIM_Base_SetConfig+0xc4>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d103      	bne.n	8007dcc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	691a      	ldr	r2, [r3, #16]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	615a      	str	r2, [r3, #20]
}
 8007dd2:	bf00      	nop
 8007dd4:	3714      	adds	r7, #20
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	40012c00 	.word	0x40012c00
 8007de4:	40014400 	.word	0x40014400
 8007de8:	40014800 	.word	0x40014800

08007dec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b087      	sub	sp, #28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	f023 0201 	bic.w	r2, r3, #1
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f023 0303 	bic.w	r3, r3, #3
 8007e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f023 0302 	bic.w	r3, r3, #2
 8007e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a24      	ldr	r2, [pc, #144]	; (8007ed8 <TIM_OC1_SetConfig+0xec>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d007      	beq.n	8007e5c <TIM_OC1_SetConfig+0x70>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a23      	ldr	r2, [pc, #140]	; (8007edc <TIM_OC1_SetConfig+0xf0>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d003      	beq.n	8007e5c <TIM_OC1_SetConfig+0x70>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a22      	ldr	r2, [pc, #136]	; (8007ee0 <TIM_OC1_SetConfig+0xf4>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d10c      	bne.n	8007e76 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	f023 0308 	bic.w	r3, r3, #8
 8007e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f023 0304 	bic.w	r3, r3, #4
 8007e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a17      	ldr	r2, [pc, #92]	; (8007ed8 <TIM_OC1_SetConfig+0xec>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d007      	beq.n	8007e8e <TIM_OC1_SetConfig+0xa2>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a17      	ldr	r2, [pc, #92]	; (8007ee0 <TIM_OC1_SetConfig+0xf4>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d003      	beq.n	8007e8e <TIM_OC1_SetConfig+0xa2>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a14      	ldr	r2, [pc, #80]	; (8007edc <TIM_OC1_SetConfig+0xf0>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d111      	bne.n	8007eb2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	693a      	ldr	r2, [r7, #16]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	685a      	ldr	r2, [r3, #4]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	697a      	ldr	r2, [r7, #20]
 8007eca:	621a      	str	r2, [r3, #32]
}
 8007ecc:	bf00      	nop
 8007ece:	371c      	adds	r7, #28
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	40012c00 	.word	0x40012c00
 8007edc:	40014800 	.word	0x40014800
 8007ee0:	40014400 	.word	0x40014400

08007ee4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b087      	sub	sp, #28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	f023 0210 	bic.w	r2, r3, #16
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	699b      	ldr	r3, [r3, #24]
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	021b      	lsls	r3, r3, #8
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	f023 0320 	bic.w	r3, r3, #32
 8007f32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	011b      	lsls	r3, r3, #4
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a22      	ldr	r2, [pc, #136]	; (8007fcc <TIM_OC2_SetConfig+0xe8>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d10d      	bne.n	8007f64 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	011b      	lsls	r3, r3, #4
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a19      	ldr	r2, [pc, #100]	; (8007fcc <TIM_OC2_SetConfig+0xe8>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d007      	beq.n	8007f7c <TIM_OC2_SetConfig+0x98>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a18      	ldr	r2, [pc, #96]	; (8007fd0 <TIM_OC2_SetConfig+0xec>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d003      	beq.n	8007f7c <TIM_OC2_SetConfig+0x98>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a17      	ldr	r2, [pc, #92]	; (8007fd4 <TIM_OC2_SetConfig+0xf0>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d113      	bne.n	8007fa4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	693a      	ldr	r2, [r7, #16]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	685a      	ldr	r2, [r3, #4]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	621a      	str	r2, [r3, #32]
}
 8007fbe:	bf00      	nop
 8007fc0:	371c      	adds	r7, #28
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	40012c00 	.word	0x40012c00
 8007fd0:	40014400 	.word	0x40014400
 8007fd4:	40014800 	.word	0x40014800

08007fd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b087      	sub	sp, #28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
 8007fe6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a1b      	ldr	r3, [r3, #32]
 8007ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	69db      	ldr	r3, [r3, #28]
 8007ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800800a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f023 0303 	bic.w	r3, r3, #3
 8008012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	4313      	orrs	r3, r2
 800801c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	021b      	lsls	r3, r3, #8
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	4313      	orrs	r3, r2
 8008030:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a21      	ldr	r2, [pc, #132]	; (80080bc <TIM_OC3_SetConfig+0xe4>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d10d      	bne.n	8008056 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008040:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	021b      	lsls	r3, r3, #8
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	4313      	orrs	r3, r2
 800804c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a18      	ldr	r2, [pc, #96]	; (80080bc <TIM_OC3_SetConfig+0xe4>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d007      	beq.n	800806e <TIM_OC3_SetConfig+0x96>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a17      	ldr	r2, [pc, #92]	; (80080c0 <TIM_OC3_SetConfig+0xe8>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d003      	beq.n	800806e <TIM_OC3_SetConfig+0x96>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a16      	ldr	r2, [pc, #88]	; (80080c4 <TIM_OC3_SetConfig+0xec>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d113      	bne.n	8008096 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800807c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	695b      	ldr	r3, [r3, #20]
 8008082:	011b      	lsls	r3, r3, #4
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	4313      	orrs	r3, r2
 8008088:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	011b      	lsls	r3, r3, #4
 8008090:	693a      	ldr	r2, [r7, #16]
 8008092:	4313      	orrs	r3, r2
 8008094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	621a      	str	r2, [r3, #32]
}
 80080b0:	bf00      	nop
 80080b2:	371c      	adds	r7, #28
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	40012c00 	.word	0x40012c00
 80080c0:	40014400 	.word	0x40014400
 80080c4:	40014800 	.word	0x40014800

080080c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a1b      	ldr	r3, [r3, #32]
 80080e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	021b      	lsls	r3, r3, #8
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	4313      	orrs	r3, r2
 800810e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	031b      	lsls	r3, r3, #12
 800811e:	693a      	ldr	r2, [r7, #16]
 8008120:	4313      	orrs	r3, r2
 8008122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a14      	ldr	r2, [pc, #80]	; (8008178 <TIM_OC4_SetConfig+0xb0>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d007      	beq.n	800813c <TIM_OC4_SetConfig+0x74>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a13      	ldr	r2, [pc, #76]	; (800817c <TIM_OC4_SetConfig+0xb4>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d003      	beq.n	800813c <TIM_OC4_SetConfig+0x74>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a12      	ldr	r2, [pc, #72]	; (8008180 <TIM_OC4_SetConfig+0xb8>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d109      	bne.n	8008150 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008142:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	695b      	ldr	r3, [r3, #20]
 8008148:	019b      	lsls	r3, r3, #6
 800814a:	697a      	ldr	r2, [r7, #20]
 800814c:	4313      	orrs	r3, r2
 800814e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	697a      	ldr	r2, [r7, #20]
 8008154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	621a      	str	r2, [r3, #32]
}
 800816a:	bf00      	nop
 800816c:	371c      	adds	r7, #28
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	40012c00 	.word	0x40012c00
 800817c:	40014400 	.word	0x40014400
 8008180:	40014800 	.word	0x40014800

08008184 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008184:	b480      	push	{r7}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a1b      	ldr	r3, [r3, #32]
 800819e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	4313      	orrs	r3, r2
 80081c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80081c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	041b      	lsls	r3, r3, #16
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a13      	ldr	r2, [pc, #76]	; (8008228 <TIM_OC5_SetConfig+0xa4>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d007      	beq.n	80081ee <TIM_OC5_SetConfig+0x6a>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a12      	ldr	r2, [pc, #72]	; (800822c <TIM_OC5_SetConfig+0xa8>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d003      	beq.n	80081ee <TIM_OC5_SetConfig+0x6a>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a11      	ldr	r2, [pc, #68]	; (8008230 <TIM_OC5_SetConfig+0xac>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d109      	bne.n	8008202 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	021b      	lsls	r3, r3, #8
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	4313      	orrs	r3, r2
 8008200:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	697a      	ldr	r2, [r7, #20]
 8008206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	685a      	ldr	r2, [r3, #4]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	693a      	ldr	r2, [r7, #16]
 800821a:	621a      	str	r2, [r3, #32]
}
 800821c:	bf00      	nop
 800821e:	371c      	adds	r7, #28
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr
 8008228:	40012c00 	.word	0x40012c00
 800822c:	40014400 	.word	0x40014400
 8008230:	40014800 	.word	0x40014800

08008234 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008234:	b480      	push	{r7}
 8008236:	b087      	sub	sp, #28
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a1b      	ldr	r3, [r3, #32]
 800824e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800825a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	021b      	lsls	r3, r3, #8
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	4313      	orrs	r3, r2
 8008272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800827a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	051b      	lsls	r3, r3, #20
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	4313      	orrs	r3, r2
 8008286:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a14      	ldr	r2, [pc, #80]	; (80082dc <TIM_OC6_SetConfig+0xa8>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d007      	beq.n	80082a0 <TIM_OC6_SetConfig+0x6c>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a13      	ldr	r2, [pc, #76]	; (80082e0 <TIM_OC6_SetConfig+0xac>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d003      	beq.n	80082a0 <TIM_OC6_SetConfig+0x6c>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a12      	ldr	r2, [pc, #72]	; (80082e4 <TIM_OC6_SetConfig+0xb0>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d109      	bne.n	80082b4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	695b      	ldr	r3, [r3, #20]
 80082ac:	029b      	lsls	r3, r3, #10
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	685a      	ldr	r2, [r3, #4]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	693a      	ldr	r2, [r7, #16]
 80082cc:	621a      	str	r2, [r3, #32]
}
 80082ce:	bf00      	nop
 80082d0:	371c      	adds	r7, #28
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	40012c00 	.word	0x40012c00
 80082e0:	40014400 	.word	0x40014400
 80082e4:	40014800 	.word	0x40014800

080082e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b087      	sub	sp, #28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6a1b      	ldr	r3, [r3, #32]
 80082f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	f023 0201 	bic.w	r2, r3, #1
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	011b      	lsls	r3, r3, #4
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	4313      	orrs	r3, r2
 800831c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	f023 030a 	bic.w	r3, r3, #10
 8008324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	4313      	orrs	r3, r2
 800832c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	621a      	str	r2, [r3, #32]
}
 800833a:	bf00      	nop
 800833c:	371c      	adds	r7, #28
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008346:	b480      	push	{r7}
 8008348:	b087      	sub	sp, #28
 800834a:	af00      	add	r7, sp, #0
 800834c:	60f8      	str	r0, [r7, #12]
 800834e:	60b9      	str	r1, [r7, #8]
 8008350:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	f023 0210 	bic.w	r2, r3, #16
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6a1b      	ldr	r3, [r3, #32]
 8008368:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008370:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	031b      	lsls	r3, r3, #12
 8008376:	697a      	ldr	r2, [r7, #20]
 8008378:	4313      	orrs	r3, r2
 800837a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008382:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	011b      	lsls	r3, r3, #4
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	4313      	orrs	r3, r2
 800838c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	693a      	ldr	r2, [r7, #16]
 8008398:	621a      	str	r2, [r3, #32]
}
 800839a:	bf00      	nop
 800839c:	371c      	adds	r7, #28
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr

080083a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083a6:	b480      	push	{r7}
 80083a8:	b085      	sub	sp, #20
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
 80083ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80083bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083c2:	683a      	ldr	r2, [r7, #0]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	f043 0307 	orr.w	r3, r3, #7
 80083cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	609a      	str	r2, [r3, #8]
}
 80083d4:	bf00      	nop
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b087      	sub	sp, #28
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
 80083ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	021a      	lsls	r2, r3, #8
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	431a      	orrs	r2, r3
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	4313      	orrs	r3, r2
 8008408:	697a      	ldr	r2, [r7, #20]
 800840a:	4313      	orrs	r3, r2
 800840c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	697a      	ldr	r2, [r7, #20]
 8008412:	609a      	str	r2, [r3, #8]
}
 8008414:	bf00      	nop
 8008416:	371c      	adds	r7, #28
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008420:	b480      	push	{r7}
 8008422:	b087      	sub	sp, #28
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	f003 031f 	and.w	r3, r3, #31
 8008432:	2201      	movs	r2, #1
 8008434:	fa02 f303 	lsl.w	r3, r2, r3
 8008438:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6a1a      	ldr	r2, [r3, #32]
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	43db      	mvns	r3, r3
 8008442:	401a      	ands	r2, r3
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6a1a      	ldr	r2, [r3, #32]
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	f003 031f 	and.w	r3, r3, #31
 8008452:	6879      	ldr	r1, [r7, #4]
 8008454:	fa01 f303 	lsl.w	r3, r1, r3
 8008458:	431a      	orrs	r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	621a      	str	r2, [r3, #32]
}
 800845e:	bf00      	nop
 8008460:	371c      	adds	r7, #28
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
	...

0800846c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800847c:	2b01      	cmp	r3, #1
 800847e:	d101      	bne.n	8008484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008480:	2302      	movs	r3, #2
 8008482:	e04a      	b.n	800851a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2202      	movs	r2, #2
 8008490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a1f      	ldr	r2, [pc, #124]	; (8008528 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d108      	bne.n	80084c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80084b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	4313      	orrs	r3, r2
 80084be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a12      	ldr	r2, [pc, #72]	; (8008528 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d004      	beq.n	80084ee <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ec:	d10c      	bne.n	8008508 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68ba      	ldr	r2, [r7, #8]
 8008506:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3714      	adds	r7, #20
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	40012c00 	.word	0x40012c00

0800852c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008536:	2300      	movs	r3, #0
 8008538:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008540:	2b01      	cmp	r3, #1
 8008542:	d101      	bne.n	8008548 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008544:	2302      	movs	r3, #2
 8008546:	e078      	b.n	800863a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	4313      	orrs	r3, r2
 800855c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	4313      	orrs	r3, r2
 800856a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	4313      	orrs	r3, r2
 8008578:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4313      	orrs	r3, r2
 8008586:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	4313      	orrs	r3, r2
 8008594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	695b      	ldr	r3, [r3, #20]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ae:	4313      	orrs	r3, r2
 80085b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	041b      	lsls	r3, r3, #16
 80085be:	4313      	orrs	r3, r2
 80085c0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a20      	ldr	r2, [pc, #128]	; (8008648 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d106      	bne.n	80085da <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	69db      	ldr	r3, [r3, #28]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a1a      	ldr	r2, [pc, #104]	; (8008648 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d121      	bne.n	8008628 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ee:	051b      	lsls	r3, r3, #20
 80085f0:	4313      	orrs	r3, r2
 80085f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	4313      	orrs	r3, r2
 8008600:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860c:	4313      	orrs	r3, r2
 800860e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a0c      	ldr	r2, [pc, #48]	; (8008648 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d106      	bne.n	8008628 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008624:	4313      	orrs	r3, r2
 8008626:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3714      	adds	r7, #20
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	40012c00 	.word	0x40012c00

0800864c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008654:	bf00      	nop
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <LL_RCC_GetUSARTClockSource>:
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008694:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4013      	ands	r3, r2
}
 800869c:	4618      	mov	r0, r3
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <LL_RCC_GetLPUARTClockSource>:
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80086b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4013      	ands	r3, r2
}
 80086bc:	4618      	mov	r0, r3
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d101      	bne.n	80086da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e042      	b.n	8008760 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d106      	bne.n	80086f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f7f9 ffef 	bl	80026d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2224      	movs	r2, #36	; 0x24
 80086f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f022 0201 	bic.w	r2, r2, #1
 8008708:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f82c 	bl	8008768 <UART_SetConfig>
 8008710:	4603      	mov	r3, r0
 8008712:	2b01      	cmp	r3, #1
 8008714:	d101      	bne.n	800871a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	e022      	b.n	8008760 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871e:	2b00      	cmp	r3, #0
 8008720:	d002      	beq.n	8008728 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 fa48 	bl	8008bb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008736:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689a      	ldr	r2, [r3, #8]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008746:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f042 0201 	orr.w	r2, r2, #1
 8008756:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 facf 	bl	8008cfc <UART_CheckIdleState>
 800875e:	4603      	mov	r3, r0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800876c:	b08c      	sub	sp, #48	; 0x30
 800876e:	af00      	add	r7, sp, #0
 8008770:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	689a      	ldr	r2, [r3, #8]
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	431a      	orrs	r2, r3
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	431a      	orrs	r2, r3
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	69db      	ldr	r3, [r3, #28]
 800878c:	4313      	orrs	r3, r2
 800878e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	4baf      	ldr	r3, [pc, #700]	; (8008a54 <UART_SetConfig+0x2ec>)
 8008798:	4013      	ands	r3, r2
 800879a:	697a      	ldr	r2, [r7, #20]
 800879c:	6812      	ldr	r2, [r2, #0]
 800879e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087a0:	430b      	orrs	r3, r1
 80087a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	68da      	ldr	r2, [r3, #12]
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	430a      	orrs	r2, r1
 80087b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4aa4      	ldr	r2, [pc, #656]	; (8008a58 <UART_SetConfig+0x2f0>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d004      	beq.n	80087d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087d0:	4313      	orrs	r3, r2
 80087d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80087de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	6812      	ldr	r2, [r2, #0]
 80087e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087e8:	430b      	orrs	r3, r1
 80087ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f2:	f023 010f 	bic.w	r1, r3, #15
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	430a      	orrs	r2, r1
 8008800:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a95      	ldr	r2, [pc, #596]	; (8008a5c <UART_SetConfig+0x2f4>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d125      	bne.n	8008858 <UART_SetConfig+0xf0>
 800880c:	2003      	movs	r0, #3
 800880e:	f7ff ff3b 	bl	8008688 <LL_RCC_GetUSARTClockSource>
 8008812:	4603      	mov	r3, r0
 8008814:	2b03      	cmp	r3, #3
 8008816:	d81b      	bhi.n	8008850 <UART_SetConfig+0xe8>
 8008818:	a201      	add	r2, pc, #4	; (adr r2, 8008820 <UART_SetConfig+0xb8>)
 800881a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881e:	bf00      	nop
 8008820:	08008831 	.word	0x08008831
 8008824:	08008841 	.word	0x08008841
 8008828:	08008839 	.word	0x08008839
 800882c:	08008849 	.word	0x08008849
 8008830:	2301      	movs	r3, #1
 8008832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008836:	e042      	b.n	80088be <UART_SetConfig+0x156>
 8008838:	2302      	movs	r3, #2
 800883a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800883e:	e03e      	b.n	80088be <UART_SetConfig+0x156>
 8008840:	2304      	movs	r3, #4
 8008842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008846:	e03a      	b.n	80088be <UART_SetConfig+0x156>
 8008848:	2308      	movs	r3, #8
 800884a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800884e:	e036      	b.n	80088be <UART_SetConfig+0x156>
 8008850:	2310      	movs	r3, #16
 8008852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008856:	e032      	b.n	80088be <UART_SetConfig+0x156>
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a7e      	ldr	r2, [pc, #504]	; (8008a58 <UART_SetConfig+0x2f0>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d12a      	bne.n	80088b8 <UART_SetConfig+0x150>
 8008862:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008866:	f7ff ff1f 	bl	80086a8 <LL_RCC_GetLPUARTClockSource>
 800886a:	4603      	mov	r3, r0
 800886c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008870:	d01a      	beq.n	80088a8 <UART_SetConfig+0x140>
 8008872:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008876:	d81b      	bhi.n	80088b0 <UART_SetConfig+0x148>
 8008878:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800887c:	d00c      	beq.n	8008898 <UART_SetConfig+0x130>
 800887e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008882:	d815      	bhi.n	80088b0 <UART_SetConfig+0x148>
 8008884:	2b00      	cmp	r3, #0
 8008886:	d003      	beq.n	8008890 <UART_SetConfig+0x128>
 8008888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800888c:	d008      	beq.n	80088a0 <UART_SetConfig+0x138>
 800888e:	e00f      	b.n	80088b0 <UART_SetConfig+0x148>
 8008890:	2300      	movs	r3, #0
 8008892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008896:	e012      	b.n	80088be <UART_SetConfig+0x156>
 8008898:	2302      	movs	r3, #2
 800889a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800889e:	e00e      	b.n	80088be <UART_SetConfig+0x156>
 80088a0:	2304      	movs	r3, #4
 80088a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088a6:	e00a      	b.n	80088be <UART_SetConfig+0x156>
 80088a8:	2308      	movs	r3, #8
 80088aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088ae:	e006      	b.n	80088be <UART_SetConfig+0x156>
 80088b0:	2310      	movs	r3, #16
 80088b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088b6:	e002      	b.n	80088be <UART_SetConfig+0x156>
 80088b8:	2310      	movs	r3, #16
 80088ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a65      	ldr	r2, [pc, #404]	; (8008a58 <UART_SetConfig+0x2f0>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	f040 8097 	bne.w	80089f8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80088ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80088ce:	2b08      	cmp	r3, #8
 80088d0:	d823      	bhi.n	800891a <UART_SetConfig+0x1b2>
 80088d2:	a201      	add	r2, pc, #4	; (adr r2, 80088d8 <UART_SetConfig+0x170>)
 80088d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d8:	080088fd 	.word	0x080088fd
 80088dc:	0800891b 	.word	0x0800891b
 80088e0:	08008905 	.word	0x08008905
 80088e4:	0800891b 	.word	0x0800891b
 80088e8:	0800890b 	.word	0x0800890b
 80088ec:	0800891b 	.word	0x0800891b
 80088f0:	0800891b 	.word	0x0800891b
 80088f4:	0800891b 	.word	0x0800891b
 80088f8:	08008913 	.word	0x08008913
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088fc:	f7fc ff58 	bl	80057b0 <HAL_RCC_GetPCLK1Freq>
 8008900:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008902:	e010      	b.n	8008926 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008904:	4b56      	ldr	r3, [pc, #344]	; (8008a60 <UART_SetConfig+0x2f8>)
 8008906:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008908:	e00d      	b.n	8008926 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800890a:	f7fc fed1 	bl	80056b0 <HAL_RCC_GetSysClockFreq>
 800890e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008910:	e009      	b.n	8008926 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008916:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008918:	e005      	b.n	8008926 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800891a:	2300      	movs	r3, #0
 800891c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008924:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 812b 	beq.w	8008b84 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008932:	4a4c      	ldr	r2, [pc, #304]	; (8008a64 <UART_SetConfig+0x2fc>)
 8008934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008938:	461a      	mov	r2, r3
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008940:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	685a      	ldr	r2, [r3, #4]
 8008946:	4613      	mov	r3, r2
 8008948:	005b      	lsls	r3, r3, #1
 800894a:	4413      	add	r3, r2
 800894c:	69ba      	ldr	r2, [r7, #24]
 800894e:	429a      	cmp	r2, r3
 8008950:	d305      	bcc.n	800895e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008958:	69ba      	ldr	r2, [r7, #24]
 800895a:	429a      	cmp	r2, r3
 800895c:	d903      	bls.n	8008966 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008964:	e10e      	b.n	8008b84 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008968:	2200      	movs	r2, #0
 800896a:	60bb      	str	r3, [r7, #8]
 800896c:	60fa      	str	r2, [r7, #12]
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008972:	4a3c      	ldr	r2, [pc, #240]	; (8008a64 <UART_SetConfig+0x2fc>)
 8008974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008978:	b29b      	uxth	r3, r3
 800897a:	2200      	movs	r2, #0
 800897c:	603b      	str	r3, [r7, #0]
 800897e:	607a      	str	r2, [r7, #4]
 8008980:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008984:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008988:	f7f7 fbfa 	bl	8000180 <__aeabi_uldivmod>
 800898c:	4602      	mov	r2, r0
 800898e:	460b      	mov	r3, r1
 8008990:	4610      	mov	r0, r2
 8008992:	4619      	mov	r1, r3
 8008994:	f04f 0200 	mov.w	r2, #0
 8008998:	f04f 0300 	mov.w	r3, #0
 800899c:	020b      	lsls	r3, r1, #8
 800899e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80089a2:	0202      	lsls	r2, r0, #8
 80089a4:	6979      	ldr	r1, [r7, #20]
 80089a6:	6849      	ldr	r1, [r1, #4]
 80089a8:	0849      	lsrs	r1, r1, #1
 80089aa:	2000      	movs	r0, #0
 80089ac:	460c      	mov	r4, r1
 80089ae:	4605      	mov	r5, r0
 80089b0:	eb12 0804 	adds.w	r8, r2, r4
 80089b4:	eb43 0905 	adc.w	r9, r3, r5
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	469a      	mov	sl, r3
 80089c0:	4693      	mov	fp, r2
 80089c2:	4652      	mov	r2, sl
 80089c4:	465b      	mov	r3, fp
 80089c6:	4640      	mov	r0, r8
 80089c8:	4649      	mov	r1, r9
 80089ca:	f7f7 fbd9 	bl	8000180 <__aeabi_uldivmod>
 80089ce:	4602      	mov	r2, r0
 80089d0:	460b      	mov	r3, r1
 80089d2:	4613      	mov	r3, r2
 80089d4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089d6:	6a3b      	ldr	r3, [r7, #32]
 80089d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089dc:	d308      	bcc.n	80089f0 <UART_SetConfig+0x288>
 80089de:	6a3b      	ldr	r3, [r7, #32]
 80089e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089e4:	d204      	bcs.n	80089f0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	6a3a      	ldr	r2, [r7, #32]
 80089ec:	60da      	str	r2, [r3, #12]
 80089ee:	e0c9      	b.n	8008b84 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80089f6:	e0c5      	b.n	8008b84 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	69db      	ldr	r3, [r3, #28]
 80089fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a00:	d16d      	bne.n	8008ade <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008a02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a06:	3b01      	subs	r3, #1
 8008a08:	2b07      	cmp	r3, #7
 8008a0a:	d82d      	bhi.n	8008a68 <UART_SetConfig+0x300>
 8008a0c:	a201      	add	r2, pc, #4	; (adr r2, 8008a14 <UART_SetConfig+0x2ac>)
 8008a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a12:	bf00      	nop
 8008a14:	08008a35 	.word	0x08008a35
 8008a18:	08008a3d 	.word	0x08008a3d
 8008a1c:	08008a69 	.word	0x08008a69
 8008a20:	08008a43 	.word	0x08008a43
 8008a24:	08008a69 	.word	0x08008a69
 8008a28:	08008a69 	.word	0x08008a69
 8008a2c:	08008a69 	.word	0x08008a69
 8008a30:	08008a4b 	.word	0x08008a4b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a34:	f7fc fed2 	bl	80057dc <HAL_RCC_GetPCLK2Freq>
 8008a38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a3a:	e01b      	b.n	8008a74 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a3c:	4b08      	ldr	r3, [pc, #32]	; (8008a60 <UART_SetConfig+0x2f8>)
 8008a3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a40:	e018      	b.n	8008a74 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a42:	f7fc fe35 	bl	80056b0 <HAL_RCC_GetSysClockFreq>
 8008a46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a48:	e014      	b.n	8008a74 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a50:	e010      	b.n	8008a74 <UART_SetConfig+0x30c>
 8008a52:	bf00      	nop
 8008a54:	cfff69f3 	.word	0xcfff69f3
 8008a58:	40008000 	.word	0x40008000
 8008a5c:	40013800 	.word	0x40013800
 8008a60:	00f42400 	.word	0x00f42400
 8008a64:	0800c8fc 	.word	0x0800c8fc
      default:
        pclk = 0U;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f000 8084 	beq.w	8008b84 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a80:	4a4b      	ldr	r2, [pc, #300]	; (8008bb0 <UART_SetConfig+0x448>)
 8008a82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a86:	461a      	mov	r2, r3
 8008a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a8e:	005a      	lsls	r2, r3, #1
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	085b      	lsrs	r3, r3, #1
 8008a96:	441a      	add	r2, r3
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aa0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	2b0f      	cmp	r3, #15
 8008aa6:	d916      	bls.n	8008ad6 <UART_SetConfig+0x36e>
 8008aa8:	6a3b      	ldr	r3, [r7, #32]
 8008aaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aae:	d212      	bcs.n	8008ad6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ab0:	6a3b      	ldr	r3, [r7, #32]
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	f023 030f 	bic.w	r3, r3, #15
 8008ab8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008aba:	6a3b      	ldr	r3, [r7, #32]
 8008abc:	085b      	lsrs	r3, r3, #1
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	f003 0307 	and.w	r3, r3, #7
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	8bfb      	ldrh	r3, [r7, #30]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	8bfa      	ldrh	r2, [r7, #30]
 8008ad2:	60da      	str	r2, [r3, #12]
 8008ad4:	e056      	b.n	8008b84 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008adc:	e052      	b.n	8008b84 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ade:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	2b07      	cmp	r3, #7
 8008ae6:	d822      	bhi.n	8008b2e <UART_SetConfig+0x3c6>
 8008ae8:	a201      	add	r2, pc, #4	; (adr r2, 8008af0 <UART_SetConfig+0x388>)
 8008aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aee:	bf00      	nop
 8008af0:	08008b11 	.word	0x08008b11
 8008af4:	08008b19 	.word	0x08008b19
 8008af8:	08008b2f 	.word	0x08008b2f
 8008afc:	08008b1f 	.word	0x08008b1f
 8008b00:	08008b2f 	.word	0x08008b2f
 8008b04:	08008b2f 	.word	0x08008b2f
 8008b08:	08008b2f 	.word	0x08008b2f
 8008b0c:	08008b27 	.word	0x08008b27
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b10:	f7fc fe64 	bl	80057dc <HAL_RCC_GetPCLK2Freq>
 8008b14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b16:	e010      	b.n	8008b3a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b18:	4b26      	ldr	r3, [pc, #152]	; (8008bb4 <UART_SetConfig+0x44c>)
 8008b1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b1c:	e00d      	b.n	8008b3a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b1e:	f7fc fdc7 	bl	80056b0 <HAL_RCC_GetSysClockFreq>
 8008b22:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b24:	e009      	b.n	8008b3a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b2c:	e005      	b.n	8008b3a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008b38:	bf00      	nop
    }

    if (pclk != 0U)
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d021      	beq.n	8008b84 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b44:	4a1a      	ldr	r2, [pc, #104]	; (8008bb0 <UART_SetConfig+0x448>)
 8008b46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	085b      	lsrs	r3, r3, #1
 8008b58:	441a      	add	r2, r3
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b62:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b64:	6a3b      	ldr	r3, [r7, #32]
 8008b66:	2b0f      	cmp	r3, #15
 8008b68:	d909      	bls.n	8008b7e <UART_SetConfig+0x416>
 8008b6a:	6a3b      	ldr	r3, [r7, #32]
 8008b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b70:	d205      	bcs.n	8008b7e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	b29a      	uxth	r2, r3
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	60da      	str	r2, [r3, #12]
 8008b7c:	e002      	b.n	8008b84 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	2200      	movs	r2, #0
 8008b98:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008ba0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3730      	adds	r7, #48	; 0x30
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bae:	bf00      	nop
 8008bb0:	0800c8fc 	.word	0x0800c8fc
 8008bb4:	00f42400 	.word	0x00f42400

08008bb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00a      	beq.n	8008be2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	430a      	orrs	r2, r1
 8008be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be6:	f003 0302 	and.w	r3, r3, #2
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00a      	beq.n	8008c04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	430a      	orrs	r2, r1
 8008c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c08:	f003 0304 	and.w	r3, r3, #4
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00a      	beq.n	8008c26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2a:	f003 0308 	and.w	r3, r3, #8
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00a      	beq.n	8008c48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	430a      	orrs	r2, r1
 8008c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4c:	f003 0310 	and.w	r3, r3, #16
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00a      	beq.n	8008c6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	430a      	orrs	r2, r1
 8008c68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c6e:	f003 0320 	and.w	r3, r3, #32
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00a      	beq.n	8008c8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	430a      	orrs	r2, r1
 8008c8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d01a      	beq.n	8008cce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	430a      	orrs	r2, r1
 8008cac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cb6:	d10a      	bne.n	8008cce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	430a      	orrs	r2, r1
 8008ccc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00a      	beq.n	8008cf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	430a      	orrs	r2, r1
 8008cee:	605a      	str	r2, [r3, #4]
  }
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b098      	sub	sp, #96	; 0x60
 8008d00:	af02      	add	r7, sp, #8
 8008d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d0c:	f7f9 fe1e 	bl	800294c <HAL_GetTick>
 8008d10:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 0308 	and.w	r3, r3, #8
 8008d1c:	2b08      	cmp	r3, #8
 8008d1e:	d12f      	bne.n	8008d80 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f88e 	bl	8008e50 <UART_WaitOnFlagUntilTimeout>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d022      	beq.n	8008d80 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d42:	e853 3f00 	ldrex	r3, [r3]
 8008d46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d4e:	653b      	str	r3, [r7, #80]	; 0x50
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	461a      	mov	r2, r3
 8008d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d58:	647b      	str	r3, [r7, #68]	; 0x44
 8008d5a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d60:	e841 2300 	strex	r3, r2, [r1]
 8008d64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1e6      	bne.n	8008d3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2220      	movs	r2, #32
 8008d70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e063      	b.n	8008e48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 0304 	and.w	r3, r3, #4
 8008d8a:	2b04      	cmp	r3, #4
 8008d8c:	d149      	bne.n	8008e22 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d8e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d92:	9300      	str	r3, [sp, #0]
 8008d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d96:	2200      	movs	r2, #0
 8008d98:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 f857 	bl	8008e50 <UART_WaitOnFlagUntilTimeout>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d03c      	beq.n	8008e22 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	e853 3f00 	ldrex	r3, [r3]
 8008db4:	623b      	str	r3, [r7, #32]
   return(result);
 8008db6:	6a3b      	ldr	r3, [r7, #32]
 8008db8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dc6:	633b      	str	r3, [r7, #48]	; 0x30
 8008dc8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dce:	e841 2300 	strex	r3, r2, [r1]
 8008dd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1e6      	bne.n	8008da8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	3308      	adds	r3, #8
 8008de0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	e853 3f00 	ldrex	r3, [r3]
 8008de8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f023 0301 	bic.w	r3, r3, #1
 8008df0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	3308      	adds	r3, #8
 8008df8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dfa:	61fa      	str	r2, [r7, #28]
 8008dfc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfe:	69b9      	ldr	r1, [r7, #24]
 8008e00:	69fa      	ldr	r2, [r7, #28]
 8008e02:	e841 2300 	strex	r3, r2, [r1]
 8008e06:	617b      	str	r3, [r7, #20]
   return(result);
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1e5      	bne.n	8008dda <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2220      	movs	r2, #32
 8008e12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e012      	b.n	8008e48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2220      	movs	r2, #32
 8008e26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2220      	movs	r2, #32
 8008e2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3758      	adds	r7, #88	; 0x58
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	603b      	str	r3, [r7, #0]
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e60:	e049      	b.n	8008ef6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e68:	d045      	beq.n	8008ef6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e6a:	f7f9 fd6f 	bl	800294c <HAL_GetTick>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	69ba      	ldr	r2, [r7, #24]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d302      	bcc.n	8008e80 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d101      	bne.n	8008e84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e80:	2303      	movs	r3, #3
 8008e82:	e048      	b.n	8008f16 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 0304 	and.w	r3, r3, #4
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d031      	beq.n	8008ef6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	69db      	ldr	r3, [r3, #28]
 8008e98:	f003 0308 	and.w	r3, r3, #8
 8008e9c:	2b08      	cmp	r3, #8
 8008e9e:	d110      	bne.n	8008ec2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2208      	movs	r2, #8
 8008ea6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f000 f838 	bl	8008f1e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2208      	movs	r2, #8
 8008eb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e029      	b.n	8008f16 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	69db      	ldr	r3, [r3, #28]
 8008ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ecc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ed0:	d111      	bne.n	8008ef6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008eda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f000 f81e 	bl	8008f1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2220      	movs	r2, #32
 8008ee6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008ef2:	2303      	movs	r3, #3
 8008ef4:	e00f      	b.n	8008f16 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	69da      	ldr	r2, [r3, #28]
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	4013      	ands	r3, r2
 8008f00:	68ba      	ldr	r2, [r7, #8]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	bf0c      	ite	eq
 8008f06:	2301      	moveq	r3, #1
 8008f08:	2300      	movne	r3, #0
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	79fb      	ldrb	r3, [r7, #7]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d0a6      	beq.n	8008e62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b095      	sub	sp, #84	; 0x54
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f2e:	e853 3f00 	ldrex	r3, [r3]
 8008f32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	461a      	mov	r2, r3
 8008f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f44:	643b      	str	r3, [r7, #64]	; 0x40
 8008f46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f4c:	e841 2300 	strex	r3, r2, [r1]
 8008f50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1e6      	bne.n	8008f26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	3308      	adds	r3, #8
 8008f5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f60:	6a3b      	ldr	r3, [r7, #32]
 8008f62:	e853 3f00 	ldrex	r3, [r3]
 8008f66:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f6e:	f023 0301 	bic.w	r3, r3, #1
 8008f72:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	3308      	adds	r3, #8
 8008f7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f84:	e841 2300 	strex	r3, r2, [r1]
 8008f88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1e3      	bne.n	8008f58 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d118      	bne.n	8008fca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	e853 3f00 	ldrex	r3, [r3]
 8008fa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	f023 0310 	bic.w	r3, r3, #16
 8008fac:	647b      	str	r3, [r7, #68]	; 0x44
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fb6:	61bb      	str	r3, [r7, #24]
 8008fb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fba:	6979      	ldr	r1, [r7, #20]
 8008fbc:	69ba      	ldr	r2, [r7, #24]
 8008fbe:	e841 2300 	strex	r3, r2, [r1]
 8008fc2:	613b      	str	r3, [r7, #16]
   return(result);
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1e6      	bne.n	8008f98 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2220      	movs	r2, #32
 8008fce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008fde:	bf00      	nop
 8008fe0:	3754      	adds	r7, #84	; 0x54
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008fea:	b480      	push	{r7}
 8008fec:	b085      	sub	sp, #20
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d101      	bne.n	8009000 <HAL_UARTEx_DisableFifoMode+0x16>
 8008ffc:	2302      	movs	r3, #2
 8008ffe:	e027      	b.n	8009050 <HAL_UARTEx_DisableFifoMode+0x66>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2224      	movs	r2, #36	; 0x24
 800900c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f022 0201 	bic.w	r2, r2, #1
 8009026:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800902e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2220      	movs	r2, #32
 8009042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3714      	adds	r7, #20
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800906c:	2b01      	cmp	r3, #1
 800906e:	d101      	bne.n	8009074 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009070:	2302      	movs	r3, #2
 8009072:	e02d      	b.n	80090d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2224      	movs	r2, #36	; 0x24
 8009080:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f022 0201 	bic.w	r2, r2, #1
 800909a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	430a      	orrs	r2, r1
 80090ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f84f 	bl	8009154 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2220      	movs	r2, #32
 80090c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d101      	bne.n	80090f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80090ec:	2302      	movs	r3, #2
 80090ee:	e02d      	b.n	800914c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2224      	movs	r2, #36	; 0x24
 80090fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f022 0201 	bic.w	r2, r2, #1
 8009116:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	683a      	ldr	r2, [r7, #0]
 8009128:	430a      	orrs	r2, r1
 800912a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 f811 	bl	8009154 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	68fa      	ldr	r2, [r7, #12]
 8009138:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2220      	movs	r2, #32
 800913e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800914a:	2300      	movs	r3, #0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009154:	b480      	push	{r7}
 8009156:	b085      	sub	sp, #20
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009160:	2b00      	cmp	r3, #0
 8009162:	d108      	bne.n	8009176 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009174:	e031      	b.n	80091da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009176:	2308      	movs	r3, #8
 8009178:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800917a:	2308      	movs	r3, #8
 800917c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	0e5b      	lsrs	r3, r3, #25
 8009186:	b2db      	uxtb	r3, r3
 8009188:	f003 0307 	and.w	r3, r3, #7
 800918c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	0f5b      	lsrs	r3, r3, #29
 8009196:	b2db      	uxtb	r3, r3
 8009198:	f003 0307 	and.w	r3, r3, #7
 800919c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800919e:	7bbb      	ldrb	r3, [r7, #14]
 80091a0:	7b3a      	ldrb	r2, [r7, #12]
 80091a2:	4911      	ldr	r1, [pc, #68]	; (80091e8 <UARTEx_SetNbDataToProcess+0x94>)
 80091a4:	5c8a      	ldrb	r2, [r1, r2]
 80091a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80091aa:	7b3a      	ldrb	r2, [r7, #12]
 80091ac:	490f      	ldr	r1, [pc, #60]	; (80091ec <UARTEx_SetNbDataToProcess+0x98>)
 80091ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091bc:	7bfb      	ldrb	r3, [r7, #15]
 80091be:	7b7a      	ldrb	r2, [r7, #13]
 80091c0:	4909      	ldr	r1, [pc, #36]	; (80091e8 <UARTEx_SetNbDataToProcess+0x94>)
 80091c2:	5c8a      	ldrb	r2, [r1, r2]
 80091c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80091c8:	7b7a      	ldrb	r2, [r7, #13]
 80091ca:	4908      	ldr	r1, [pc, #32]	; (80091ec <UARTEx_SetNbDataToProcess+0x98>)
 80091cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80091da:	bf00      	nop
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	0800c914 	.word	0x0800c914
 80091ec:	0800c91c 	.word	0x0800c91c

080091f0 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80091f8:	4b06      	ldr	r3, [pc, #24]	; (8009214 <LL_EXTI_EnableIT_0_31+0x24>)
 80091fa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80091fe:	4905      	ldr	r1, [pc, #20]	; (8009214 <LL_EXTI_EnableIT_0_31+0x24>)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4313      	orrs	r3, r2
 8009204:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8009208:	bf00      	nop
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr
 8009214:	58000800 	.word	0x58000800

08009218 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8009220:	4b06      	ldr	r3, [pc, #24]	; (800923c <LL_EXTI_EnableIT_32_63+0x24>)
 8009222:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009226:	4905      	ldr	r1, [pc, #20]	; (800923c <LL_EXTI_EnableIT_32_63+0x24>)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4313      	orrs	r3, r2
 800922c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009230:	bf00      	nop
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	58000800 	.word	0x58000800

08009240 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8009248:	4b07      	ldr	r3, [pc, #28]	; (8009268 <LL_EXTI_DisableIT_0_31+0x28>)
 800924a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	43db      	mvns	r3, r3
 8009252:	4905      	ldr	r1, [pc, #20]	; (8009268 <LL_EXTI_DisableIT_0_31+0x28>)
 8009254:	4013      	ands	r3, r2
 8009256:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800925a:	bf00      	nop
 800925c:	370c      	adds	r7, #12
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	58000800 	.word	0x58000800

0800926c <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8009274:	4b07      	ldr	r3, [pc, #28]	; (8009294 <LL_EXTI_DisableIT_32_63+0x28>)
 8009276:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	43db      	mvns	r3, r3
 800927e:	4905      	ldr	r1, [pc, #20]	; (8009294 <LL_EXTI_DisableIT_32_63+0x28>)
 8009280:	4013      	ands	r3, r2
 8009282:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009286:	bf00      	nop
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	58000800 	.word	0x58000800

08009298 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_21 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80092a0:	4b06      	ldr	r3, [pc, #24]	; (80092bc <LL_EXTI_EnableEvent_0_31+0x24>)
 80092a2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80092a6:	4905      	ldr	r1, [pc, #20]	; (80092bc <LL_EXTI_EnableEvent_0_31+0x24>)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 80092b0:	bf00      	nop
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr
 80092bc:	58000800 	.word	0x58000800

080092c0 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80092c8:	4b06      	ldr	r3, [pc, #24]	; (80092e4 <LL_EXTI_EnableEvent_32_63+0x24>)
 80092ca:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80092ce:	4905      	ldr	r1, [pc, #20]	; (80092e4 <LL_EXTI_EnableEvent_32_63+0x24>)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80092d8:	bf00      	nop
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr
 80092e4:	58000800 	.word	0x58000800

080092e8 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_20 (*)
  *         @arg @ref LL_EXTI_LINE_21 (*)
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80092f0:	4b07      	ldr	r3, [pc, #28]	; (8009310 <LL_EXTI_DisableEvent_0_31+0x28>)
 80092f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	43db      	mvns	r3, r3
 80092fa:	4905      	ldr	r1, [pc, #20]	; (8009310 <LL_EXTI_DisableEvent_0_31+0x28>)
 80092fc:	4013      	ands	r3, r2
 80092fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8009302:	bf00      	nop
 8009304:	370c      	adds	r7, #12
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	58000800 	.word	0x58000800

08009314 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800931c:	4b07      	ldr	r3, [pc, #28]	; (800933c <LL_EXTI_DisableEvent_32_63+0x28>)
 800931e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	43db      	mvns	r3, r3
 8009326:	4905      	ldr	r1, [pc, #20]	; (800933c <LL_EXTI_DisableEvent_32_63+0x28>)
 8009328:	4013      	ands	r3, r2
 800932a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800932e:	bf00      	nop
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	58000800 	.word	0x58000800

08009340 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8009348:	4b05      	ldr	r3, [pc, #20]	; (8009360 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	4904      	ldr	r1, [pc, #16]	; (8009360 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	4313      	orrs	r3, r2
 8009352:	600b      	str	r3, [r1, #0]

}
 8009354:	bf00      	nop
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr
 8009360:	58000800 	.word	0x58000800

08009364 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800936c:	4b05      	ldr	r3, [pc, #20]	; (8009384 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800936e:	6a1a      	ldr	r2, [r3, #32]
 8009370:	4904      	ldr	r1, [pc, #16]	; (8009384 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4313      	orrs	r3, r2
 8009376:	620b      	str	r3, [r1, #32]
}
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr
 8009384:	58000800 	.word	0x58000800

08009388 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8009390:	4b06      	ldr	r3, [pc, #24]	; (80093ac <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	43db      	mvns	r3, r3
 8009398:	4904      	ldr	r1, [pc, #16]	; (80093ac <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800939a:	4013      	ands	r3, r2
 800939c:	600b      	str	r3, [r1, #0]

}
 800939e:	bf00      	nop
 80093a0:	370c      	adds	r7, #12
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	58000800 	.word	0x58000800

080093b0 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80093b8:	4b06      	ldr	r3, [pc, #24]	; (80093d4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80093ba:	6a1a      	ldr	r2, [r3, #32]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	43db      	mvns	r3, r3
 80093c0:	4904      	ldr	r1, [pc, #16]	; (80093d4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80093c2:	4013      	ands	r3, r2
 80093c4:	620b      	str	r3, [r1, #32]
}
 80093c6:	bf00      	nop
 80093c8:	370c      	adds	r7, #12
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	58000800 	.word	0x58000800

080093d8 <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80093e0:	4b05      	ldr	r3, [pc, #20]	; (80093f8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80093e2:	685a      	ldr	r2, [r3, #4]
 80093e4:	4904      	ldr	r1, [pc, #16]	; (80093f8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4313      	orrs	r3, r2
 80093ea:	604b      	str	r3, [r1, #4]
}
 80093ec:	bf00      	nop
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	58000800 	.word	0x58000800

080093fc <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8009404:	4b05      	ldr	r3, [pc, #20]	; (800941c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8009406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009408:	4904      	ldr	r1, [pc, #16]	; (800941c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4313      	orrs	r3, r2
 800940e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009410:	bf00      	nop
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr
 800941c:	58000800 	.word	0x58000800

08009420 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8009428:	4b06      	ldr	r3, [pc, #24]	; (8009444 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800942a:	685a      	ldr	r2, [r3, #4]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	43db      	mvns	r3, r3
 8009430:	4904      	ldr	r1, [pc, #16]	; (8009444 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8009432:	4013      	ands	r3, r2
 8009434:	604b      	str	r3, [r1, #4]
}
 8009436:	bf00      	nop
 8009438:	370c      	adds	r7, #12
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	58000800 	.word	0x58000800

08009448 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8009450:	4b06      	ldr	r3, [pc, #24]	; (800946c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8009452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	43db      	mvns	r3, r3
 8009458:	4904      	ldr	r1, [pc, #16]	; (800946c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800945a:	4013      	ands	r3, r2
 800945c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800945e:	bf00      	nop
 8009460:	370c      	adds	r7, #12
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	58000800 	.word	0x58000800

08009470 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8009478:	2300      	movs	r3, #0
 800947a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	7a1b      	ldrb	r3, [r3, #8]
 8009480:	2b00      	cmp	r3, #0
 8009482:	f000 80cc 	beq.w	800961e <LL_EXTI_Init+0x1ae>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d061      	beq.n	8009552 <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	7a5b      	ldrb	r3, [r3, #9]
 8009492:	2b02      	cmp	r3, #2
 8009494:	d01c      	beq.n	80094d0 <LL_EXTI_Init+0x60>
 8009496:	2b02      	cmp	r3, #2
 8009498:	dc25      	bgt.n	80094e6 <LL_EXTI_Init+0x76>
 800949a:	2b00      	cmp	r3, #0
 800949c:	d002      	beq.n	80094a4 <LL_EXTI_Init+0x34>
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d00b      	beq.n	80094ba <LL_EXTI_Init+0x4a>
 80094a2:	e020      	b.n	80094e6 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7ff ff1d 	bl	80092e8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7ff fe9c 	bl	80091f0 <LL_EXTI_EnableIT_0_31>
          break;
 80094b8:	e018      	b.n	80094ec <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4618      	mov	r0, r3
 80094c0:	f7ff febe 	bl	8009240 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7ff fee5 	bl	8009298 <LL_EXTI_EnableEvent_0_31>
          break;
 80094ce:	e00d      	b.n	80094ec <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7ff fe8b 	bl	80091f0 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4618      	mov	r0, r3
 80094e0:	f7ff feda 	bl	8009298 <LL_EXTI_EnableEvent_0_31>
          break;
 80094e4:	e002      	b.n	80094ec <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	73fb      	strb	r3, [r7, #15]
          break;
 80094ea:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	7a9b      	ldrb	r3, [r3, #10]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d02e      	beq.n	8009552 <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	7a9b      	ldrb	r3, [r3, #10]
 80094f8:	2b03      	cmp	r3, #3
 80094fa:	d01c      	beq.n	8009536 <LL_EXTI_Init+0xc6>
 80094fc:	2b03      	cmp	r3, #3
 80094fe:	dc25      	bgt.n	800954c <LL_EXTI_Init+0xdc>
 8009500:	2b01      	cmp	r3, #1
 8009502:	d002      	beq.n	800950a <LL_EXTI_Init+0x9a>
 8009504:	2b02      	cmp	r3, #2
 8009506:	d00b      	beq.n	8009520 <LL_EXTI_Init+0xb0>
 8009508:	e020      	b.n	800954c <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4618      	mov	r0, r3
 8009510:	f7ff ff86 	bl	8009420 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4618      	mov	r0, r3
 800951a:	f7ff ff11 	bl	8009340 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800951e:	e018      	b.n	8009552 <LL_EXTI_Init+0xe2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4618      	mov	r0, r3
 8009526:	f7ff ff2f 	bl	8009388 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4618      	mov	r0, r3
 8009530:	f7ff ff52 	bl	80093d8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8009534:	e00d      	b.n	8009552 <LL_EXTI_Init+0xe2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4618      	mov	r0, r3
 800953c:	f7ff ff00 	bl	8009340 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4618      	mov	r0, r3
 8009546:	f7ff ff47 	bl	80093d8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800954a:	e002      	b.n	8009552 <LL_EXTI_Init+0xe2>
          default:
            status = ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	73fb      	strb	r3, [r7, #15]
            break;
 8009550:	bf00      	nop
        }
      }
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d075      	beq.n	8009646 <LL_EXTI_Init+0x1d6>
    {
      switch (EXTI_InitStruct->Mode)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	7a5b      	ldrb	r3, [r3, #9]
 800955e:	2b02      	cmp	r3, #2
 8009560:	d01c      	beq.n	800959c <LL_EXTI_Init+0x12c>
 8009562:	2b02      	cmp	r3, #2
 8009564:	dc25      	bgt.n	80095b2 <LL_EXTI_Init+0x142>
 8009566:	2b00      	cmp	r3, #0
 8009568:	d002      	beq.n	8009570 <LL_EXTI_Init+0x100>
 800956a:	2b01      	cmp	r3, #1
 800956c:	d00b      	beq.n	8009586 <LL_EXTI_Init+0x116>
 800956e:	e020      	b.n	80095b2 <LL_EXTI_Init+0x142>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	4618      	mov	r0, r3
 8009576:	f7ff fecd 	bl	8009314 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	4618      	mov	r0, r3
 8009580:	f7ff fe4a 	bl	8009218 <LL_EXTI_EnableIT_32_63>
          break;
 8009584:	e018      	b.n	80095b8 <LL_EXTI_Init+0x148>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	4618      	mov	r0, r3
 800958c:	f7ff fe6e 	bl	800926c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	4618      	mov	r0, r3
 8009596:	f7ff fe93 	bl	80092c0 <LL_EXTI_EnableEvent_32_63>
          break;
 800959a:	e00d      	b.n	80095b8 <LL_EXTI_Init+0x148>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7ff fe39 	bl	8009218 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7ff fe88 	bl	80092c0 <LL_EXTI_EnableEvent_32_63>
          break;
 80095b0:	e002      	b.n	80095b8 <LL_EXTI_Init+0x148>
        default:
          status = ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	73fb      	strb	r3, [r7, #15]
          break;
 80095b6:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	7a9b      	ldrb	r3, [r3, #10]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d042      	beq.n	8009646 <LL_EXTI_Init+0x1d6>
      {
        switch (EXTI_InitStruct->Trigger)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	7a9b      	ldrb	r3, [r3, #10]
 80095c4:	2b03      	cmp	r3, #3
 80095c6:	d01c      	beq.n	8009602 <LL_EXTI_Init+0x192>
 80095c8:	2b03      	cmp	r3, #3
 80095ca:	dc25      	bgt.n	8009618 <LL_EXTI_Init+0x1a8>
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d002      	beq.n	80095d6 <LL_EXTI_Init+0x166>
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d00b      	beq.n	80095ec <LL_EXTI_Init+0x17c>
 80095d4:	e020      	b.n	8009618 <LL_EXTI_Init+0x1a8>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	4618      	mov	r0, r3
 80095dc:	f7ff ff34 	bl	8009448 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7ff febd 	bl	8009364 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80095ea:	e02c      	b.n	8009646 <LL_EXTI_Init+0x1d6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7ff fedd 	bl	80093b0 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7ff fefe 	bl	80093fc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8009600:	e021      	b.n	8009646 <LL_EXTI_Init+0x1d6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	4618      	mov	r0, r3
 8009608:	f7ff feac 	bl	8009364 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	4618      	mov	r0, r3
 8009612:	f7ff fef3 	bl	80093fc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8009616:	e016      	b.n	8009646 <LL_EXTI_Init+0x1d6>
          default:
            status = ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	73fb      	strb	r3, [r7, #15]
            break;
 800961c:	e013      	b.n	8009646 <LL_EXTI_Init+0x1d6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4618      	mov	r0, r3
 8009624:	f7ff fe0c 	bl	8009240 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4618      	mov	r0, r3
 800962e:	f7ff fe5b 	bl	80092e8 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	4618      	mov	r0, r3
 8009638:	f7ff fe18 	bl	800926c <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	4618      	mov	r0, r3
 8009642:	f7ff fe67 	bl	8009314 <LL_EXTI_DisableEvent_32_63>
  }
  return status;
 8009646:	7bfb      	ldrb	r3, [r7, #15]
}
 8009648:	4618      	mov	r0, r3
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <LL_GPIO_SetPinMode>:
{
 8009650:	b480      	push	{r7}
 8009652:	b08b      	sub	sp, #44	; 0x2c
 8009654:	af00      	add	r7, sp, #0
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	fa93 f3a3 	rbit	r3, r3
 800966a:	613b      	str	r3, [r7, #16]
  return result;
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009670:	69bb      	ldr	r3, [r7, #24]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d101      	bne.n	800967a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8009676:	2320      	movs	r3, #32
 8009678:	e003      	b.n	8009682 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	fab3 f383 	clz	r3, r3
 8009680:	b2db      	uxtb	r3, r3
 8009682:	005b      	lsls	r3, r3, #1
 8009684:	2103      	movs	r1, #3
 8009686:	fa01 f303 	lsl.w	r3, r1, r3
 800968a:	43db      	mvns	r3, r3
 800968c:	401a      	ands	r2, r3
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009692:	6a3b      	ldr	r3, [r7, #32]
 8009694:	fa93 f3a3 	rbit	r3, r3
 8009698:	61fb      	str	r3, [r7, #28]
  return result;
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800969e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d101      	bne.n	80096a8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80096a4:	2320      	movs	r3, #32
 80096a6:	e003      	b.n	80096b0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80096a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096aa:	fab3 f383 	clz	r3, r3
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	005b      	lsls	r3, r3, #1
 80096b2:	6879      	ldr	r1, [r7, #4]
 80096b4:	fa01 f303 	lsl.w	r3, r1, r3
 80096b8:	431a      	orrs	r2, r3
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	601a      	str	r2, [r3, #0]
}
 80096be:	bf00      	nop
 80096c0:	372c      	adds	r7, #44	; 0x2c
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr

080096ca <LL_GPIO_SetPinOutputType>:
{
 80096ca:	b480      	push	{r7}
 80096cc:	b085      	sub	sp, #20
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	60f8      	str	r0, [r7, #12]
 80096d2:	60b9      	str	r1, [r7, #8]
 80096d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	685a      	ldr	r2, [r3, #4]
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	43db      	mvns	r3, r3
 80096de:	401a      	ands	r2, r3
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	6879      	ldr	r1, [r7, #4]
 80096e4:	fb01 f303 	mul.w	r3, r1, r3
 80096e8:	431a      	orrs	r2, r3
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	605a      	str	r2, [r3, #4]
}
 80096ee:	bf00      	nop
 80096f0:	3714      	adds	r7, #20
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr

080096fa <LL_GPIO_SetPinSpeed>:
{
 80096fa:	b480      	push	{r7}
 80096fc:	b08b      	sub	sp, #44	; 0x2c
 80096fe:	af00      	add	r7, sp, #0
 8009700:	60f8      	str	r0, [r7, #12]
 8009702:	60b9      	str	r1, [r7, #8]
 8009704:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	689a      	ldr	r2, [r3, #8]
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	fa93 f3a3 	rbit	r3, r3
 8009714:	613b      	str	r3, [r7, #16]
  return result;
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d101      	bne.n	8009724 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009720:	2320      	movs	r3, #32
 8009722:	e003      	b.n	800972c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	fab3 f383 	clz	r3, r3
 800972a:	b2db      	uxtb	r3, r3
 800972c:	005b      	lsls	r3, r3, #1
 800972e:	2103      	movs	r1, #3
 8009730:	fa01 f303 	lsl.w	r3, r1, r3
 8009734:	43db      	mvns	r3, r3
 8009736:	401a      	ands	r2, r3
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800973c:	6a3b      	ldr	r3, [r7, #32]
 800973e:	fa93 f3a3 	rbit	r3, r3
 8009742:	61fb      	str	r3, [r7, #28]
  return result;
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974a:	2b00      	cmp	r3, #0
 800974c:	d101      	bne.n	8009752 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800974e:	2320      	movs	r3, #32
 8009750:	e003      	b.n	800975a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8009752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009754:	fab3 f383 	clz	r3, r3
 8009758:	b2db      	uxtb	r3, r3
 800975a:	005b      	lsls	r3, r3, #1
 800975c:	6879      	ldr	r1, [r7, #4]
 800975e:	fa01 f303 	lsl.w	r3, r1, r3
 8009762:	431a      	orrs	r2, r3
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	609a      	str	r2, [r3, #8]
}
 8009768:	bf00      	nop
 800976a:	372c      	adds	r7, #44	; 0x2c
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <LL_GPIO_SetPinPull>:
{
 8009774:	b480      	push	{r7}
 8009776:	b08b      	sub	sp, #44	; 0x2c
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	68da      	ldr	r2, [r3, #12]
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	fa93 f3a3 	rbit	r3, r3
 800978e:	613b      	str	r3, [r7, #16]
  return result;
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d101      	bne.n	800979e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800979a:	2320      	movs	r3, #32
 800979c:	e003      	b.n	80097a6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	fab3 f383 	clz	r3, r3
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	005b      	lsls	r3, r3, #1
 80097a8:	2103      	movs	r1, #3
 80097aa:	fa01 f303 	lsl.w	r3, r1, r3
 80097ae:	43db      	mvns	r3, r3
 80097b0:	401a      	ands	r2, r3
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097b6:	6a3b      	ldr	r3, [r7, #32]
 80097b8:	fa93 f3a3 	rbit	r3, r3
 80097bc:	61fb      	str	r3, [r7, #28]
  return result;
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80097c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d101      	bne.n	80097cc <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80097c8:	2320      	movs	r3, #32
 80097ca:	e003      	b.n	80097d4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80097cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ce:	fab3 f383 	clz	r3, r3
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	005b      	lsls	r3, r3, #1
 80097d6:	6879      	ldr	r1, [r7, #4]
 80097d8:	fa01 f303 	lsl.w	r3, r1, r3
 80097dc:	431a      	orrs	r2, r3
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	60da      	str	r2, [r3, #12]
}
 80097e2:	bf00      	nop
 80097e4:	372c      	adds	r7, #44	; 0x2c
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <LL_GPIO_SetAFPin_0_7>:
{
 80097ee:	b480      	push	{r7}
 80097f0:	b08b      	sub	sp, #44	; 0x2c
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	60f8      	str	r0, [r7, #12]
 80097f6:	60b9      	str	r1, [r7, #8]
 80097f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6a1a      	ldr	r2, [r3, #32]
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	fa93 f3a3 	rbit	r3, r3
 8009808:	613b      	str	r3, [r7, #16]
  return result;
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d101      	bne.n	8009818 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009814:	2320      	movs	r3, #32
 8009816:	e003      	b.n	8009820 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	fab3 f383 	clz	r3, r3
 800981e:	b2db      	uxtb	r3, r3
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	210f      	movs	r1, #15
 8009824:	fa01 f303 	lsl.w	r3, r1, r3
 8009828:	43db      	mvns	r3, r3
 800982a:	401a      	ands	r2, r3
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009830:	6a3b      	ldr	r3, [r7, #32]
 8009832:	fa93 f3a3 	rbit	r3, r3
 8009836:	61fb      	str	r3, [r7, #28]
  return result;
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800983c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983e:	2b00      	cmp	r3, #0
 8009840:	d101      	bne.n	8009846 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009842:	2320      	movs	r3, #32
 8009844:	e003      	b.n	800984e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8009846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009848:	fab3 f383 	clz	r3, r3
 800984c:	b2db      	uxtb	r3, r3
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	6879      	ldr	r1, [r7, #4]
 8009852:	fa01 f303 	lsl.w	r3, r1, r3
 8009856:	431a      	orrs	r2, r3
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	621a      	str	r2, [r3, #32]
}
 800985c:	bf00      	nop
 800985e:	372c      	adds	r7, #44	; 0x2c
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <LL_GPIO_SetAFPin_8_15>:
{
 8009868:	b480      	push	{r7}
 800986a:	b08b      	sub	sp, #44	; 0x2c
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	0a1b      	lsrs	r3, r3, #8
 800987c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	fa93 f3a3 	rbit	r3, r3
 8009884:	613b      	str	r3, [r7, #16]
  return result;
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d101      	bne.n	8009894 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8009890:	2320      	movs	r3, #32
 8009892:	e003      	b.n	800989c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	fab3 f383 	clz	r3, r3
 800989a:	b2db      	uxtb	r3, r3
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	210f      	movs	r1, #15
 80098a0:	fa01 f303 	lsl.w	r3, r1, r3
 80098a4:	43db      	mvns	r3, r3
 80098a6:	401a      	ands	r2, r3
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	0a1b      	lsrs	r3, r3, #8
 80098ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098ae:	6a3b      	ldr	r3, [r7, #32]
 80098b0:	fa93 f3a3 	rbit	r3, r3
 80098b4:	61fb      	str	r3, [r7, #28]
  return result;
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80098ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d101      	bne.n	80098c4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80098c0:	2320      	movs	r3, #32
 80098c2:	e003      	b.n	80098cc <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80098c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c6:	fab3 f383 	clz	r3, r3
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	6879      	ldr	r1, [r7, #4]
 80098d0:	fa01 f303 	lsl.w	r3, r1, r3
 80098d4:	431a      	orrs	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80098da:	bf00      	nop
 80098dc:	372c      	adds	r7, #44	; 0x2c
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr

080098e6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b08a      	sub	sp, #40	; 0x28
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
 80098ee:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	fa93 f3a3 	rbit	r3, r3
 80098fc:	617b      	str	r3, [r7, #20]
  return result;
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d101      	bne.n	800990c <LL_GPIO_Init+0x26>
    return 32U;
 8009908:	2320      	movs	r3, #32
 800990a:	e003      	b.n	8009914 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	fab3 f383 	clz	r3, r3
 8009912:	b2db      	uxtb	r3, r3
 8009914:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8009916:	e057      	b.n	80099c8 <LL_GPIO_Init+0xe2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	2101      	movs	r1, #1
 800991e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009920:	fa01 f303 	lsl.w	r3, r1, r3
 8009924:	4013      	ands	r3, r2
 8009926:	623b      	str	r3, [r7, #32]

    if (currentpin != 0x00u)
 8009928:	6a3b      	ldr	r3, [r7, #32]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d049      	beq.n	80099c2 <LL_GPIO_Init+0xdc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	2b01      	cmp	r3, #1
 8009934:	d003      	beq.n	800993e <LL_GPIO_Init+0x58>
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	2b02      	cmp	r3, #2
 800993c:	d10d      	bne.n	800995a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	461a      	mov	r2, r3
 8009944:	6a39      	ldr	r1, [r7, #32]
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f7ff fed7 	bl	80096fa <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	461a      	mov	r2, r3
 8009952:	6a39      	ldr	r1, [r7, #32]
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f7ff feb8 	bl	80096ca <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	691b      	ldr	r3, [r3, #16]
 800995e:	461a      	mov	r2, r3
 8009960:	6a39      	ldr	r1, [r7, #32]
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f7ff ff06 	bl	8009774 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	2b02      	cmp	r3, #2
 800996e:	d121      	bne.n	80099b4 <LL_GPIO_Init+0xce>
 8009970:	6a3b      	ldr	r3, [r7, #32]
 8009972:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	fa93 f3a3 	rbit	r3, r3
 800997a:	60bb      	str	r3, [r7, #8]
  return result;
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d101      	bne.n	800998a <LL_GPIO_Init+0xa4>
    return 32U;
 8009986:	2320      	movs	r3, #32
 8009988:	e003      	b.n	8009992 <LL_GPIO_Init+0xac>
  return __builtin_clz(value);
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	fab3 f383 	clz	r3, r3
 8009990:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008uL)
 8009992:	2b07      	cmp	r3, #7
 8009994:	d807      	bhi.n	80099a6 <LL_GPIO_Init+0xc0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	695b      	ldr	r3, [r3, #20]
 800999a:	461a      	mov	r2, r3
 800999c:	6a39      	ldr	r1, [r7, #32]
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7ff ff25 	bl	80097ee <LL_GPIO_SetAFPin_0_7>
 80099a4:	e006      	b.n	80099b4 <LL_GPIO_Init+0xce>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	695b      	ldr	r3, [r3, #20]
 80099aa:	461a      	mov	r2, r3
 80099ac:	6a39      	ldr	r1, [r7, #32]
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f7ff ff5a 	bl	8009868 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	461a      	mov	r2, r3
 80099ba:	6a39      	ldr	r1, [r7, #32]
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f7ff fe47 	bl	8009650 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80099c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c4:	3301      	adds	r3, #1
 80099c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ce:	fa22 f303 	lsr.w	r3, r2, r3
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1a0      	bne.n	8009918 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80099d6:	2300      	movs	r3, #0
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3728      	adds	r7, #40	; 0x28
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80099e8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80099ec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	43db      	mvns	r3, r3
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	4013      	ands	r3, r2
 8009a00:	b29a      	uxth	r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3714      	adds	r7, #20
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr

08009a16 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009a16:	b084      	sub	sp, #16
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	f107 0014 	add.w	r0, r7, #20
 8009a24:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	370c      	adds	r7, #12
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	b004      	add	sp, #16
 8009a56:	4770      	bx	lr

08009a58 <__NVIC_SetPriority>:
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	4603      	mov	r3, r0
 8009a60:	6039      	str	r1, [r7, #0]
 8009a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	db0a      	blt.n	8009a82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	b2da      	uxtb	r2, r3
 8009a70:	490c      	ldr	r1, [pc, #48]	; (8009aa4 <__NVIC_SetPriority+0x4c>)
 8009a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a76:	0112      	lsls	r2, r2, #4
 8009a78:	b2d2      	uxtb	r2, r2
 8009a7a:	440b      	add	r3, r1
 8009a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009a80:	e00a      	b.n	8009a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	b2da      	uxtb	r2, r3
 8009a86:	4908      	ldr	r1, [pc, #32]	; (8009aa8 <__NVIC_SetPriority+0x50>)
 8009a88:	79fb      	ldrb	r3, [r7, #7]
 8009a8a:	f003 030f 	and.w	r3, r3, #15
 8009a8e:	3b04      	subs	r3, #4
 8009a90:	0112      	lsls	r2, r2, #4
 8009a92:	b2d2      	uxtb	r2, r2
 8009a94:	440b      	add	r3, r1
 8009a96:	761a      	strb	r2, [r3, #24]
}
 8009a98:	bf00      	nop
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr
 8009aa4:	e000e100 	.word	0xe000e100
 8009aa8:	e000ed00 	.word	0xe000ed00

08009aac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009aac:	b580      	push	{r7, lr}
 8009aae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009ab0:	4b05      	ldr	r3, [pc, #20]	; (8009ac8 <SysTick_Handler+0x1c>)
 8009ab2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009ab4:	f001 fdea 	bl	800b68c <xTaskGetSchedulerState>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d001      	beq.n	8009ac2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009abe:	f002 fbd3 	bl	800c268 <xPortSysTickHandler>
  }
}
 8009ac2:	bf00      	nop
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	e000e010 	.word	0xe000e010

08009acc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009acc:	b580      	push	{r7, lr}
 8009ace:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	f06f 0004 	mvn.w	r0, #4
 8009ad6:	f7ff ffbf 	bl	8009a58 <__NVIC_SetPriority>
#endif
}
 8009ada:	bf00      	nop
 8009adc:	bd80      	pop	{r7, pc}
	...

08009ae0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ae6:	f3ef 8305 	mrs	r3, IPSR
 8009aea:	603b      	str	r3, [r7, #0]
  return(result);
 8009aec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d003      	beq.n	8009afa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009af2:	f06f 0305 	mvn.w	r3, #5
 8009af6:	607b      	str	r3, [r7, #4]
 8009af8:	e00c      	b.n	8009b14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009afa:	4b0a      	ldr	r3, [pc, #40]	; (8009b24 <osKernelInitialize+0x44>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d105      	bne.n	8009b0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009b02:	4b08      	ldr	r3, [pc, #32]	; (8009b24 <osKernelInitialize+0x44>)
 8009b04:	2201      	movs	r2, #1
 8009b06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	607b      	str	r3, [r7, #4]
 8009b0c:	e002      	b.n	8009b14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b14:	687b      	ldr	r3, [r7, #4]
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	370c      	adds	r7, #12
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop
 8009b24:	20000b2c 	.word	0x20000b2c

08009b28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b2e:	f3ef 8305 	mrs	r3, IPSR
 8009b32:	603b      	str	r3, [r7, #0]
  return(result);
 8009b34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d003      	beq.n	8009b42 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009b3a:	f06f 0305 	mvn.w	r3, #5
 8009b3e:	607b      	str	r3, [r7, #4]
 8009b40:	e010      	b.n	8009b64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009b42:	4b0b      	ldr	r3, [pc, #44]	; (8009b70 <osKernelStart+0x48>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d109      	bne.n	8009b5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009b4a:	f7ff ffbf 	bl	8009acc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009b4e:	4b08      	ldr	r3, [pc, #32]	; (8009b70 <osKernelStart+0x48>)
 8009b50:	2202      	movs	r2, #2
 8009b52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009b54:	f001 f952 	bl	800adfc <vTaskStartScheduler>
      stat = osOK;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	607b      	str	r3, [r7, #4]
 8009b5c:	e002      	b.n	8009b64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b64:	687b      	ldr	r3, [r7, #4]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3708      	adds	r7, #8
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	20000b2c 	.word	0x20000b2c

08009b74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b08e      	sub	sp, #56	; 0x38
 8009b78:	af04      	add	r7, sp, #16
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009b80:	2300      	movs	r3, #0
 8009b82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b84:	f3ef 8305 	mrs	r3, IPSR
 8009b88:	617b      	str	r3, [r7, #20]
  return(result);
 8009b8a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d17e      	bne.n	8009c8e <osThreadNew+0x11a>
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d07b      	beq.n	8009c8e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009b96:	2380      	movs	r3, #128	; 0x80
 8009b98:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009b9a:	2318      	movs	r3, #24
 8009b9c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d045      	beq.n	8009c3a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d002      	beq.n	8009bbc <osThreadNew+0x48>
        name = attr->name;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	699b      	ldr	r3, [r3, #24]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d002      	beq.n	8009bca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d008      	beq.n	8009be2 <osThreadNew+0x6e>
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	2b38      	cmp	r3, #56	; 0x38
 8009bd4:	d805      	bhi.n	8009be2 <osThreadNew+0x6e>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	f003 0301 	and.w	r3, r3, #1
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <osThreadNew+0x72>
        return (NULL);
 8009be2:	2300      	movs	r3, #0
 8009be4:	e054      	b.n	8009c90 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	695b      	ldr	r3, [r3, #20]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d003      	beq.n	8009bf6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	695b      	ldr	r3, [r3, #20]
 8009bf2:	089b      	lsrs	r3, r3, #2
 8009bf4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00e      	beq.n	8009c1c <osThreadNew+0xa8>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	2b5b      	cmp	r3, #91	; 0x5b
 8009c04:	d90a      	bls.n	8009c1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d006      	beq.n	8009c1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	695b      	ldr	r3, [r3, #20]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d002      	beq.n	8009c1c <osThreadNew+0xa8>
        mem = 1;
 8009c16:	2301      	movs	r3, #1
 8009c18:	61bb      	str	r3, [r7, #24]
 8009c1a:	e010      	b.n	8009c3e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d10c      	bne.n	8009c3e <osThreadNew+0xca>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d108      	bne.n	8009c3e <osThreadNew+0xca>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	691b      	ldr	r3, [r3, #16]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d104      	bne.n	8009c3e <osThreadNew+0xca>
          mem = 0;
 8009c34:	2300      	movs	r3, #0
 8009c36:	61bb      	str	r3, [r7, #24]
 8009c38:	e001      	b.n	8009c3e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d110      	bne.n	8009c66 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c4c:	9202      	str	r2, [sp, #8]
 8009c4e:	9301      	str	r3, [sp, #4]
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	9300      	str	r3, [sp, #0]
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	6a3a      	ldr	r2, [r7, #32]
 8009c58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f000 fef8 	bl	800aa50 <xTaskCreateStatic>
 8009c60:	4603      	mov	r3, r0
 8009c62:	613b      	str	r3, [r7, #16]
 8009c64:	e013      	b.n	8009c8e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d110      	bne.n	8009c8e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009c6c:	6a3b      	ldr	r3, [r7, #32]
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	f107 0310 	add.w	r3, r7, #16
 8009c74:	9301      	str	r3, [sp, #4]
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	9300      	str	r3, [sp, #0]
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f000 ff43 	bl	800ab0a <xTaskCreate>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d001      	beq.n	8009c8e <osThreadNew+0x11a>
            hTask = NULL;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009c8e:	693b      	ldr	r3, [r7, #16]
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3728      	adds	r7, #40	; 0x28
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	4a07      	ldr	r2, [pc, #28]	; (8009cc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8009ca8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	4a06      	ldr	r2, [pc, #24]	; (8009cc8 <vApplicationGetIdleTaskMemory+0x30>)
 8009cae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2280      	movs	r2, #128	; 0x80
 8009cb4:	601a      	str	r2, [r3, #0]
}
 8009cb6:	bf00      	nop
 8009cb8:	3714      	adds	r7, #20
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	20000b30 	.word	0x20000b30
 8009cc8:	20000b8c 	.word	0x20000b8c

08009ccc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009ccc:	b480      	push	{r7}
 8009cce:	b085      	sub	sp, #20
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	4a07      	ldr	r2, [pc, #28]	; (8009cf8 <vApplicationGetTimerTaskMemory+0x2c>)
 8009cdc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	4a06      	ldr	r2, [pc, #24]	; (8009cfc <vApplicationGetTimerTaskMemory+0x30>)
 8009ce2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009cea:	601a      	str	r2, [r3, #0]
}
 8009cec:	bf00      	nop
 8009cee:	3714      	adds	r7, #20
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr
 8009cf8:	20000d8c 	.word	0x20000d8c
 8009cfc:	20000de8 	.word	0x20000de8

08009d00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f103 0208 	add.w	r2, r3, #8
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f04f 32ff 	mov.w	r2, #4294967295
 8009d18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f103 0208 	add.w	r2, r3, #8
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f103 0208 	add.w	r2, r3, #8
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2200      	movs	r2, #0
 8009d32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009d34:	bf00      	nop
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009d4e:	bf00      	nop
 8009d50:	370c      	adds	r7, #12
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr

08009d5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d5a:	b480      	push	{r7}
 8009d5c:	b085      	sub	sp, #20
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
 8009d62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	689a      	ldr	r2, [r3, #8]
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	683a      	ldr	r2, [r7, #0]
 8009d7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	683a      	ldr	r2, [r7, #0]
 8009d84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	1c5a      	adds	r2, r3, #1
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	601a      	str	r2, [r3, #0]
}
 8009d96:	bf00      	nop
 8009d98:	3714      	adds	r7, #20
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr

08009da2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009da2:	b480      	push	{r7}
 8009da4:	b085      	sub	sp, #20
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
 8009daa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db8:	d103      	bne.n	8009dc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	691b      	ldr	r3, [r3, #16]
 8009dbe:	60fb      	str	r3, [r7, #12]
 8009dc0:	e00c      	b.n	8009ddc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	3308      	adds	r3, #8
 8009dc6:	60fb      	str	r3, [r7, #12]
 8009dc8:	e002      	b.n	8009dd0 <vListInsert+0x2e>
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	60fb      	str	r3, [r7, #12]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	68ba      	ldr	r2, [r7, #8]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d2f6      	bcs.n	8009dca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	685a      	ldr	r2, [r3, #4]
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	683a      	ldr	r2, [r7, #0]
 8009dea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	683a      	ldr	r2, [r7, #0]
 8009df6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	1c5a      	adds	r2, r3, #1
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	601a      	str	r2, [r3, #0]
}
 8009e08:	bf00      	nop
 8009e0a:	3714      	adds	r7, #20
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	6892      	ldr	r2, [r2, #8]
 8009e2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	6852      	ldr	r2, [r2, #4]
 8009e34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d103      	bne.n	8009e48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	689a      	ldr	r2, [r3, #8]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	1e5a      	subs	r2, r3, #1
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3714      	adds	r7, #20
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d10a      	bne.n	8009e92 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e80:	f383 8811 	msr	BASEPRI, r3
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	f3bf 8f4f 	dsb	sy
 8009e8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009e8e:	bf00      	nop
 8009e90:	e7fe      	b.n	8009e90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009e92:	f002 f957 	bl	800c144 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e9e:	68f9      	ldr	r1, [r7, #12]
 8009ea0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ea2:	fb01 f303 	mul.w	r3, r1, r3
 8009ea6:	441a      	add	r2, r3
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	68f9      	ldr	r1, [r7, #12]
 8009ec6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ec8:	fb01 f303 	mul.w	r3, r1, r3
 8009ecc:	441a      	add	r2, r3
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	22ff      	movs	r2, #255	; 0xff
 8009ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	22ff      	movs	r2, #255	; 0xff
 8009ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d114      	bne.n	8009f12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d01a      	beq.n	8009f26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	3310      	adds	r3, #16
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f001 fa0b 	bl	800b310 <xTaskRemoveFromEventList>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d012      	beq.n	8009f26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009f00:	4b0c      	ldr	r3, [pc, #48]	; (8009f34 <xQueueGenericReset+0xcc>)
 8009f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f06:	601a      	str	r2, [r3, #0]
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	f3bf 8f6f 	isb	sy
 8009f10:	e009      	b.n	8009f26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	3310      	adds	r3, #16
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7ff fef2 	bl	8009d00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	3324      	adds	r3, #36	; 0x24
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7ff feed 	bl	8009d00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009f26:	f002 f93d 	bl	800c1a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009f2a:	2301      	movs	r3, #1
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	e000ed04 	.word	0xe000ed04

08009f38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b08e      	sub	sp, #56	; 0x38
 8009f3c:	af02      	add	r7, sp, #8
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
 8009f44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d10a      	bne.n	8009f62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f50:	f383 8811 	msr	BASEPRI, r3
 8009f54:	f3bf 8f6f 	isb	sy
 8009f58:	f3bf 8f4f 	dsb	sy
 8009f5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f5e:	bf00      	nop
 8009f60:	e7fe      	b.n	8009f60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d10a      	bne.n	8009f7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6c:	f383 8811 	msr	BASEPRI, r3
 8009f70:	f3bf 8f6f 	isb	sy
 8009f74:	f3bf 8f4f 	dsb	sy
 8009f78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f7a:	bf00      	nop
 8009f7c:	e7fe      	b.n	8009f7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d002      	beq.n	8009f8a <xQueueGenericCreateStatic+0x52>
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d001      	beq.n	8009f8e <xQueueGenericCreateStatic+0x56>
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e000      	b.n	8009f90 <xQueueGenericCreateStatic+0x58>
 8009f8e:	2300      	movs	r3, #0
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d10a      	bne.n	8009faa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f98:	f383 8811 	msr	BASEPRI, r3
 8009f9c:	f3bf 8f6f 	isb	sy
 8009fa0:	f3bf 8f4f 	dsb	sy
 8009fa4:	623b      	str	r3, [r7, #32]
}
 8009fa6:	bf00      	nop
 8009fa8:	e7fe      	b.n	8009fa8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d102      	bne.n	8009fb6 <xQueueGenericCreateStatic+0x7e>
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d101      	bne.n	8009fba <xQueueGenericCreateStatic+0x82>
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e000      	b.n	8009fbc <xQueueGenericCreateStatic+0x84>
 8009fba:	2300      	movs	r3, #0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d10a      	bne.n	8009fd6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc4:	f383 8811 	msr	BASEPRI, r3
 8009fc8:	f3bf 8f6f 	isb	sy
 8009fcc:	f3bf 8f4f 	dsb	sy
 8009fd0:	61fb      	str	r3, [r7, #28]
}
 8009fd2:	bf00      	nop
 8009fd4:	e7fe      	b.n	8009fd4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009fd6:	2350      	movs	r3, #80	; 0x50
 8009fd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	2b50      	cmp	r3, #80	; 0x50
 8009fde:	d00a      	beq.n	8009ff6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe4:	f383 8811 	msr	BASEPRI, r3
 8009fe8:	f3bf 8f6f 	isb	sy
 8009fec:	f3bf 8f4f 	dsb	sy
 8009ff0:	61bb      	str	r3, [r7, #24]
}
 8009ff2:	bf00      	nop
 8009ff4:	e7fe      	b.n	8009ff4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009ff6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00d      	beq.n	800a01e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a004:	2201      	movs	r2, #1
 800a006:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a00a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a010:	9300      	str	r3, [sp, #0]
 800a012:	4613      	mov	r3, r2
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	68b9      	ldr	r1, [r7, #8]
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	f000 f805 	bl	800a028 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a020:	4618      	mov	r0, r3
 800a022:	3730      	adds	r7, #48	; 0x30
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
 800a034:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d103      	bne.n	800a044 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	69ba      	ldr	r2, [r7, #24]
 800a040:	601a      	str	r2, [r3, #0]
 800a042:	e002      	b.n	800a04a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	68fa      	ldr	r2, [r7, #12]
 800a04e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a050:	69bb      	ldr	r3, [r7, #24]
 800a052:	68ba      	ldr	r2, [r7, #8]
 800a054:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a056:	2101      	movs	r1, #1
 800a058:	69b8      	ldr	r0, [r7, #24]
 800a05a:	f7ff ff05 	bl	8009e68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	78fa      	ldrb	r2, [r7, #3]
 800a062:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a066:	bf00      	nop
 800a068:	3710      	adds	r7, #16
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
	...

0800a070 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b08e      	sub	sp, #56	; 0x38
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	607a      	str	r2, [r7, #4]
 800a07c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a07e:	2300      	movs	r3, #0
 800a080:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d10a      	bne.n	800a0a2 <xQueueGenericSend+0x32>
	__asm volatile
 800a08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a090:	f383 8811 	msr	BASEPRI, r3
 800a094:	f3bf 8f6f 	isb	sy
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a09e:	bf00      	nop
 800a0a0:	e7fe      	b.n	800a0a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d103      	bne.n	800a0b0 <xQueueGenericSend+0x40>
 800a0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d101      	bne.n	800a0b4 <xQueueGenericSend+0x44>
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e000      	b.n	800a0b6 <xQueueGenericSend+0x46>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d10a      	bne.n	800a0d0 <xQueueGenericSend+0x60>
	__asm volatile
 800a0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0be:	f383 8811 	msr	BASEPRI, r3
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	f3bf 8f4f 	dsb	sy
 800a0ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a0cc:	bf00      	nop
 800a0ce:	e7fe      	b.n	800a0ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d103      	bne.n	800a0de <xQueueGenericSend+0x6e>
 800a0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d101      	bne.n	800a0e2 <xQueueGenericSend+0x72>
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e000      	b.n	800a0e4 <xQueueGenericSend+0x74>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10a      	bne.n	800a0fe <xQueueGenericSend+0x8e>
	__asm volatile
 800a0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ec:	f383 8811 	msr	BASEPRI, r3
 800a0f0:	f3bf 8f6f 	isb	sy
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	623b      	str	r3, [r7, #32]
}
 800a0fa:	bf00      	nop
 800a0fc:	e7fe      	b.n	800a0fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0fe:	f001 fac5 	bl	800b68c <xTaskGetSchedulerState>
 800a102:	4603      	mov	r3, r0
 800a104:	2b00      	cmp	r3, #0
 800a106:	d102      	bne.n	800a10e <xQueueGenericSend+0x9e>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d101      	bne.n	800a112 <xQueueGenericSend+0xa2>
 800a10e:	2301      	movs	r3, #1
 800a110:	e000      	b.n	800a114 <xQueueGenericSend+0xa4>
 800a112:	2300      	movs	r3, #0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d10a      	bne.n	800a12e <xQueueGenericSend+0xbe>
	__asm volatile
 800a118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11c:	f383 8811 	msr	BASEPRI, r3
 800a120:	f3bf 8f6f 	isb	sy
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	61fb      	str	r3, [r7, #28]
}
 800a12a:	bf00      	nop
 800a12c:	e7fe      	b.n	800a12c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a12e:	f002 f809 	bl	800c144 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d302      	bcc.n	800a144 <xQueueGenericSend+0xd4>
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	2b02      	cmp	r3, #2
 800a142:	d129      	bne.n	800a198 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a144:	683a      	ldr	r2, [r7, #0]
 800a146:	68b9      	ldr	r1, [r7, #8]
 800a148:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a14a:	f000 fb12 	bl	800a772 <prvCopyDataToQueue>
 800a14e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a154:	2b00      	cmp	r3, #0
 800a156:	d010      	beq.n	800a17a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15a:	3324      	adds	r3, #36	; 0x24
 800a15c:	4618      	mov	r0, r3
 800a15e:	f001 f8d7 	bl	800b310 <xTaskRemoveFromEventList>
 800a162:	4603      	mov	r3, r0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d013      	beq.n	800a190 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a168:	4b3f      	ldr	r3, [pc, #252]	; (800a268 <xQueueGenericSend+0x1f8>)
 800a16a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a16e:	601a      	str	r2, [r3, #0]
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	f3bf 8f6f 	isb	sy
 800a178:	e00a      	b.n	800a190 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d007      	beq.n	800a190 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a180:	4b39      	ldr	r3, [pc, #228]	; (800a268 <xQueueGenericSend+0x1f8>)
 800a182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a186:	601a      	str	r2, [r3, #0]
 800a188:	f3bf 8f4f 	dsb	sy
 800a18c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a190:	f002 f808 	bl	800c1a4 <vPortExitCritical>
				return pdPASS;
 800a194:	2301      	movs	r3, #1
 800a196:	e063      	b.n	800a260 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d103      	bne.n	800a1a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a19e:	f002 f801 	bl	800c1a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	e05c      	b.n	800a260 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d106      	bne.n	800a1ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a1ac:	f107 0314 	add.w	r3, r7, #20
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f001 f911 	bl	800b3d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a1ba:	f001 fff3 	bl	800c1a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a1be:	f000 fe83 	bl	800aec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1c2:	f001 ffbf 	bl	800c144 <vPortEnterCritical>
 800a1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1cc:	b25b      	sxtb	r3, r3
 800a1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1d2:	d103      	bne.n	800a1dc <xQueueGenericSend+0x16c>
 800a1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1e2:	b25b      	sxtb	r3, r3
 800a1e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1e8:	d103      	bne.n	800a1f2 <xQueueGenericSend+0x182>
 800a1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1f2:	f001 ffd7 	bl	800c1a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1f6:	1d3a      	adds	r2, r7, #4
 800a1f8:	f107 0314 	add.w	r3, r7, #20
 800a1fc:	4611      	mov	r1, r2
 800a1fe:	4618      	mov	r0, r3
 800a200:	f001 f900 	bl	800b404 <xTaskCheckForTimeOut>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d124      	bne.n	800a254 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a20a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a20c:	f000 fba9 	bl	800a962 <prvIsQueueFull>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d018      	beq.n	800a248 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a218:	3310      	adds	r3, #16
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	4611      	mov	r1, r2
 800a21e:	4618      	mov	r0, r3
 800a220:	f001 f826 	bl	800b270 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a226:	f000 fb34 	bl	800a892 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a22a:	f000 fe5b 	bl	800aee4 <xTaskResumeAll>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	f47f af7c 	bne.w	800a12e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a236:	4b0c      	ldr	r3, [pc, #48]	; (800a268 <xQueueGenericSend+0x1f8>)
 800a238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a23c:	601a      	str	r2, [r3, #0]
 800a23e:	f3bf 8f4f 	dsb	sy
 800a242:	f3bf 8f6f 	isb	sy
 800a246:	e772      	b.n	800a12e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a24a:	f000 fb22 	bl	800a892 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a24e:	f000 fe49 	bl	800aee4 <xTaskResumeAll>
 800a252:	e76c      	b.n	800a12e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a256:	f000 fb1c 	bl	800a892 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a25a:	f000 fe43 	bl	800aee4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a25e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a260:	4618      	mov	r0, r3
 800a262:	3738      	adds	r7, #56	; 0x38
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	e000ed04 	.word	0xe000ed04

0800a26c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b090      	sub	sp, #64	; 0x40
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	607a      	str	r2, [r7, #4]
 800a278:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a280:	2b00      	cmp	r3, #0
 800a282:	d10a      	bne.n	800a29a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a288:	f383 8811 	msr	BASEPRI, r3
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a296:	bf00      	nop
 800a298:	e7fe      	b.n	800a298 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d103      	bne.n	800a2a8 <xQueueGenericSendFromISR+0x3c>
 800a2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d101      	bne.n	800a2ac <xQueueGenericSendFromISR+0x40>
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	e000      	b.n	800a2ae <xQueueGenericSendFromISR+0x42>
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d10a      	bne.n	800a2c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b6:	f383 8811 	msr	BASEPRI, r3
 800a2ba:	f3bf 8f6f 	isb	sy
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a2c4:	bf00      	nop
 800a2c6:	e7fe      	b.n	800a2c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	2b02      	cmp	r3, #2
 800a2cc:	d103      	bne.n	800a2d6 <xQueueGenericSendFromISR+0x6a>
 800a2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d101      	bne.n	800a2da <xQueueGenericSendFromISR+0x6e>
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e000      	b.n	800a2dc <xQueueGenericSendFromISR+0x70>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d10a      	bne.n	800a2f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e4:	f383 8811 	msr	BASEPRI, r3
 800a2e8:	f3bf 8f6f 	isb	sy
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	623b      	str	r3, [r7, #32]
}
 800a2f2:	bf00      	nop
 800a2f4:	e7fe      	b.n	800a2f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a2f6:	f002 f807 	bl	800c308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a2fa:	f3ef 8211 	mrs	r2, BASEPRI
 800a2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a302:	f383 8811 	msr	BASEPRI, r3
 800a306:	f3bf 8f6f 	isb	sy
 800a30a:	f3bf 8f4f 	dsb	sy
 800a30e:	61fa      	str	r2, [r7, #28]
 800a310:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a312:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a314:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a31e:	429a      	cmp	r2, r3
 800a320:	d302      	bcc.n	800a328 <xQueueGenericSendFromISR+0xbc>
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	2b02      	cmp	r3, #2
 800a326:	d12f      	bne.n	800a388 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a32e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a336:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a338:	683a      	ldr	r2, [r7, #0]
 800a33a:	68b9      	ldr	r1, [r7, #8]
 800a33c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a33e:	f000 fa18 	bl	800a772 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a342:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a34a:	d112      	bne.n	800a372 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a350:	2b00      	cmp	r3, #0
 800a352:	d016      	beq.n	800a382 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a356:	3324      	adds	r3, #36	; 0x24
 800a358:	4618      	mov	r0, r3
 800a35a:	f000 ffd9 	bl	800b310 <xTaskRemoveFromEventList>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d00e      	beq.n	800a382 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00b      	beq.n	800a382 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2201      	movs	r2, #1
 800a36e:	601a      	str	r2, [r3, #0]
 800a370:	e007      	b.n	800a382 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a372:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a376:	3301      	adds	r3, #1
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	b25a      	sxtb	r2, r3
 800a37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a37e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a382:	2301      	movs	r3, #1
 800a384:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a386:	e001      	b.n	800a38c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a388:	2300      	movs	r3, #0
 800a38a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a38c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a38e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a396:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3740      	adds	r7, #64	; 0x40
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
	...

0800a3a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b08c      	sub	sp, #48	; 0x30
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d10a      	bne.n	800a3d4 <xQueueReceive+0x30>
	__asm volatile
 800a3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c2:	f383 8811 	msr	BASEPRI, r3
 800a3c6:	f3bf 8f6f 	isb	sy
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	623b      	str	r3, [r7, #32]
}
 800a3d0:	bf00      	nop
 800a3d2:	e7fe      	b.n	800a3d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d103      	bne.n	800a3e2 <xQueueReceive+0x3e>
 800a3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d101      	bne.n	800a3e6 <xQueueReceive+0x42>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e000      	b.n	800a3e8 <xQueueReceive+0x44>
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10a      	bne.n	800a402 <xQueueReceive+0x5e>
	__asm volatile
 800a3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f0:	f383 8811 	msr	BASEPRI, r3
 800a3f4:	f3bf 8f6f 	isb	sy
 800a3f8:	f3bf 8f4f 	dsb	sy
 800a3fc:	61fb      	str	r3, [r7, #28]
}
 800a3fe:	bf00      	nop
 800a400:	e7fe      	b.n	800a400 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a402:	f001 f943 	bl	800b68c <xTaskGetSchedulerState>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d102      	bne.n	800a412 <xQueueReceive+0x6e>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d101      	bne.n	800a416 <xQueueReceive+0x72>
 800a412:	2301      	movs	r3, #1
 800a414:	e000      	b.n	800a418 <xQueueReceive+0x74>
 800a416:	2300      	movs	r3, #0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d10a      	bne.n	800a432 <xQueueReceive+0x8e>
	__asm volatile
 800a41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a420:	f383 8811 	msr	BASEPRI, r3
 800a424:	f3bf 8f6f 	isb	sy
 800a428:	f3bf 8f4f 	dsb	sy
 800a42c:	61bb      	str	r3, [r7, #24]
}
 800a42e:	bf00      	nop
 800a430:	e7fe      	b.n	800a430 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a432:	f001 fe87 	bl	800c144 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a43a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d01f      	beq.n	800a482 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a442:	68b9      	ldr	r1, [r7, #8]
 800a444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a446:	f000 f9fe 	bl	800a846 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44c:	1e5a      	subs	r2, r3, #1
 800a44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a450:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00f      	beq.n	800a47a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45c:	3310      	adds	r3, #16
 800a45e:	4618      	mov	r0, r3
 800a460:	f000 ff56 	bl	800b310 <xTaskRemoveFromEventList>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d007      	beq.n	800a47a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a46a:	4b3d      	ldr	r3, [pc, #244]	; (800a560 <xQueueReceive+0x1bc>)
 800a46c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a470:	601a      	str	r2, [r3, #0]
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a47a:	f001 fe93 	bl	800c1a4 <vPortExitCritical>
				return pdPASS;
 800a47e:	2301      	movs	r3, #1
 800a480:	e069      	b.n	800a556 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d103      	bne.n	800a490 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a488:	f001 fe8c 	bl	800c1a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a48c:	2300      	movs	r3, #0
 800a48e:	e062      	b.n	800a556 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a492:	2b00      	cmp	r3, #0
 800a494:	d106      	bne.n	800a4a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a496:	f107 0310 	add.w	r3, r7, #16
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 ff9c 	bl	800b3d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4a4:	f001 fe7e 	bl	800c1a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4a8:	f000 fd0e 	bl	800aec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4ac:	f001 fe4a 	bl	800c144 <vPortEnterCritical>
 800a4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4b6:	b25b      	sxtb	r3, r3
 800a4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4bc:	d103      	bne.n	800a4c6 <xQueueReceive+0x122>
 800a4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4cc:	b25b      	sxtb	r3, r3
 800a4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d2:	d103      	bne.n	800a4dc <xQueueReceive+0x138>
 800a4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4dc:	f001 fe62 	bl	800c1a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4e0:	1d3a      	adds	r2, r7, #4
 800a4e2:	f107 0310 	add.w	r3, r7, #16
 800a4e6:	4611      	mov	r1, r2
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f000 ff8b 	bl	800b404 <xTaskCheckForTimeOut>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d123      	bne.n	800a53c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4f6:	f000 fa1e 	bl	800a936 <prvIsQueueEmpty>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d017      	beq.n	800a530 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a502:	3324      	adds	r3, #36	; 0x24
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	4611      	mov	r1, r2
 800a508:	4618      	mov	r0, r3
 800a50a:	f000 feb1 	bl	800b270 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a50e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a510:	f000 f9bf 	bl	800a892 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a514:	f000 fce6 	bl	800aee4 <xTaskResumeAll>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d189      	bne.n	800a432 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a51e:	4b10      	ldr	r3, [pc, #64]	; (800a560 <xQueueReceive+0x1bc>)
 800a520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a524:	601a      	str	r2, [r3, #0]
 800a526:	f3bf 8f4f 	dsb	sy
 800a52a:	f3bf 8f6f 	isb	sy
 800a52e:	e780      	b.n	800a432 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a532:	f000 f9ae 	bl	800a892 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a536:	f000 fcd5 	bl	800aee4 <xTaskResumeAll>
 800a53a:	e77a      	b.n	800a432 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a53c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a53e:	f000 f9a8 	bl	800a892 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a542:	f000 fccf 	bl	800aee4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a546:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a548:	f000 f9f5 	bl	800a936 <prvIsQueueEmpty>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	f43f af6f 	beq.w	800a432 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a554:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a556:	4618      	mov	r0, r3
 800a558:	3730      	adds	r7, #48	; 0x30
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	e000ed04 	.word	0xe000ed04

0800a564 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b08e      	sub	sp, #56	; 0x38
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a576:	2b00      	cmp	r3, #0
 800a578:	d10a      	bne.n	800a590 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57e:	f383 8811 	msr	BASEPRI, r3
 800a582:	f3bf 8f6f 	isb	sy
 800a586:	f3bf 8f4f 	dsb	sy
 800a58a:	623b      	str	r3, [r7, #32]
}
 800a58c:	bf00      	nop
 800a58e:	e7fe      	b.n	800a58e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d103      	bne.n	800a59e <xQueueReceiveFromISR+0x3a>
 800a596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d101      	bne.n	800a5a2 <xQueueReceiveFromISR+0x3e>
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e000      	b.n	800a5a4 <xQueueReceiveFromISR+0x40>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d10a      	bne.n	800a5be <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ac:	f383 8811 	msr	BASEPRI, r3
 800a5b0:	f3bf 8f6f 	isb	sy
 800a5b4:	f3bf 8f4f 	dsb	sy
 800a5b8:	61fb      	str	r3, [r7, #28]
}
 800a5ba:	bf00      	nop
 800a5bc:	e7fe      	b.n	800a5bc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a5be:	f001 fea3 	bl	800c308 <vPortValidateInterruptPriority>
	__asm volatile
 800a5c2:	f3ef 8211 	mrs	r2, BASEPRI
 800a5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ca:	f383 8811 	msr	BASEPRI, r3
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	f3bf 8f4f 	dsb	sy
 800a5d6:	61ba      	str	r2, [r7, #24]
 800a5d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a5da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a5dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d02f      	beq.n	800a64a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a5f4:	68b9      	ldr	r1, [r7, #8]
 800a5f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5f8:	f000 f925 	bl	800a846 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fe:	1e5a      	subs	r2, r3, #1
 800a600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a602:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a604:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a60c:	d112      	bne.n	800a634 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d016      	beq.n	800a644 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a618:	3310      	adds	r3, #16
 800a61a:	4618      	mov	r0, r3
 800a61c:	f000 fe78 	bl	800b310 <xTaskRemoveFromEventList>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00e      	beq.n	800a644 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d00b      	beq.n	800a644 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	601a      	str	r2, [r3, #0]
 800a632:	e007      	b.n	800a644 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a638:	3301      	adds	r3, #1
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	b25a      	sxtb	r2, r3
 800a63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a644:	2301      	movs	r3, #1
 800a646:	637b      	str	r3, [r7, #52]	; 0x34
 800a648:	e001      	b.n	800a64e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a64a:	2300      	movs	r3, #0
 800a64c:	637b      	str	r3, [r7, #52]	; 0x34
 800a64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a650:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	f383 8811 	msr	BASEPRI, r3
}
 800a658:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3738      	adds	r7, #56	; 0x38
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b08c      	sub	sp, #48	; 0x30
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 800a672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a674:	2b00      	cmp	r3, #0
 800a676:	d10a      	bne.n	800a68e <xQueuePeekFromISR+0x2a>
	__asm volatile
 800a678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67c:	f383 8811 	msr	BASEPRI, r3
 800a680:	f3bf 8f6f 	isb	sy
 800a684:	f3bf 8f4f 	dsb	sy
 800a688:	61fb      	str	r3, [r7, #28]
}
 800a68a:	bf00      	nop
 800a68c:	e7fe      	b.n	800a68c <xQueuePeekFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d103      	bne.n	800a69c <xQueuePeekFromISR+0x38>
 800a694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d101      	bne.n	800a6a0 <xQueuePeekFromISR+0x3c>
 800a69c:	2301      	movs	r3, #1
 800a69e:	e000      	b.n	800a6a2 <xQueuePeekFromISR+0x3e>
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d10a      	bne.n	800a6bc <xQueuePeekFromISR+0x58>
	__asm volatile
 800a6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6aa:	f383 8811 	msr	BASEPRI, r3
 800a6ae:	f3bf 8f6f 	isb	sy
 800a6b2:	f3bf 8f4f 	dsb	sy
 800a6b6:	61bb      	str	r3, [r7, #24]
}
 800a6b8:	bf00      	nop
 800a6ba:	e7fe      	b.n	800a6ba <xQueuePeekFromISR+0x56>
	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 800a6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10a      	bne.n	800a6da <xQueuePeekFromISR+0x76>
	__asm volatile
 800a6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c8:	f383 8811 	msr	BASEPRI, r3
 800a6cc:	f3bf 8f6f 	isb	sy
 800a6d0:	f3bf 8f4f 	dsb	sy
 800a6d4:	617b      	str	r3, [r7, #20]
}
 800a6d6:	bf00      	nop
 800a6d8:	e7fe      	b.n	800a6d8 <xQueuePeekFromISR+0x74>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a6da:	f001 fe15 	bl	800c308 <vPortValidateInterruptPriority>
	__asm volatile
 800a6de:	f3ef 8211 	mrs	r2, BASEPRI
 800a6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e6:	f383 8811 	msr	BASEPRI, r3
 800a6ea:	f3bf 8f6f 	isb	sy
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	613a      	str	r2, [r7, #16]
 800a6f4:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 800a6f6:	693b      	ldr	r3, [r7, #16]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6f8:	627b      	str	r3, [r7, #36]	; 0x24
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00c      	beq.n	800a71c <xQueuePeekFromISR+0xb8>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 800a702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	623b      	str	r3, [r7, #32]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a708:	6839      	ldr	r1, [r7, #0]
 800a70a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a70c:	f000 f89b 	bl	800a846 <prvCopyDataFromQueue>
			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 800a710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a712:	6a3a      	ldr	r2, [r7, #32]
 800a714:	60da      	str	r2, [r3, #12]

			xReturn = pdPASS;
 800a716:	2301      	movs	r3, #1
 800a718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a71a:	e001      	b.n	800a720 <xQueuePeekFromISR+0xbc>
		}
		else
		{
			xReturn = pdFAIL;
 800a71c:	2300      	movs	r3, #0
 800a71e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a722:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	f383 8811 	msr	BASEPRI, r3
}
 800a72a:	bf00      	nop
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3730      	adds	r7, #48	; 0x30
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800a736:	b480      	push	{r7}
 800a738:	b087      	sub	sp, #28
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d10a      	bne.n	800a75e <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800a748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74c:	f383 8811 	msr	BASEPRI, r3
 800a750:	f3bf 8f6f 	isb	sy
 800a754:	f3bf 8f4f 	dsb	sy
 800a758:	60fb      	str	r3, [r7, #12]
}
 800a75a:	bf00      	nop
 800a75c:	e7fe      	b.n	800a75c <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a762:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800a764:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a766:	4618      	mov	r0, r3
 800a768:	371c      	adds	r7, #28
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr

0800a772 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b086      	sub	sp, #24
 800a776:	af00      	add	r7, sp, #0
 800a778:	60f8      	str	r0, [r7, #12]
 800a77a:	60b9      	str	r1, [r7, #8]
 800a77c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a77e:	2300      	movs	r3, #0
 800a780:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a786:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d10d      	bne.n	800a7ac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d14d      	bne.n	800a834 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	4618      	mov	r0, r3
 800a79e:	f000 ff93 	bl	800b6c8 <xTaskPriorityDisinherit>
 800a7a2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	609a      	str	r2, [r3, #8]
 800a7aa:	e043      	b.n	800a834 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d119      	bne.n	800a7e6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	6858      	ldr	r0, [r3, #4]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	68b9      	ldr	r1, [r7, #8]
 800a7be:	f001 fff9 	bl	800c7b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	685a      	ldr	r2, [r3, #4]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ca:	441a      	add	r2, r3
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	685a      	ldr	r2, [r3, #4]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d32b      	bcc.n	800a834 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	605a      	str	r2, [r3, #4]
 800a7e4:	e026      	b.n	800a834 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	68d8      	ldr	r0, [r3, #12]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	68b9      	ldr	r1, [r7, #8]
 800a7f2:	f001 ffdf 	bl	800c7b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	68da      	ldr	r2, [r3, #12]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7fe:	425b      	negs	r3, r3
 800a800:	441a      	add	r2, r3
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	68da      	ldr	r2, [r3, #12]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d207      	bcs.n	800a822 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	689a      	ldr	r2, [r3, #8]
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a81a:	425b      	negs	r3, r3
 800a81c:	441a      	add	r2, r3
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2b02      	cmp	r3, #2
 800a826:	d105      	bne.n	800a834 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d002      	beq.n	800a834 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	3b01      	subs	r3, #1
 800a832:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	1c5a      	adds	r2, r3, #1
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a83c:	697b      	ldr	r3, [r7, #20]
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3718      	adds	r7, #24
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}

0800a846 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a846:	b580      	push	{r7, lr}
 800a848:	b082      	sub	sp, #8
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
 800a84e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a854:	2b00      	cmp	r3, #0
 800a856:	d018      	beq.n	800a88a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	68da      	ldr	r2, [r3, #12]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a860:	441a      	add	r2, r3
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	68da      	ldr	r2, [r3, #12]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	689b      	ldr	r3, [r3, #8]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d303      	bcc.n	800a87a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	68d9      	ldr	r1, [r3, #12]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a882:	461a      	mov	r2, r3
 800a884:	6838      	ldr	r0, [r7, #0]
 800a886:	f001 ff95 	bl	800c7b4 <memcpy>
	}
}
 800a88a:	bf00      	nop
 800a88c:	3708      	adds	r7, #8
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}

0800a892 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a892:	b580      	push	{r7, lr}
 800a894:	b084      	sub	sp, #16
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a89a:	f001 fc53 	bl	800c144 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8a4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a8a6:	e011      	b.n	800a8cc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d012      	beq.n	800a8d6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	3324      	adds	r3, #36	; 0x24
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f000 fd2b 	bl	800b310 <xTaskRemoveFromEventList>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d001      	beq.n	800a8c4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a8c0:	f000 fe02 	bl	800b4c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a8c4:	7bfb      	ldrb	r3, [r7, #15]
 800a8c6:	3b01      	subs	r3, #1
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a8cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	dce9      	bgt.n	800a8a8 <prvUnlockQueue+0x16>
 800a8d4:	e000      	b.n	800a8d8 <prvUnlockQueue+0x46>
					break;
 800a8d6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	22ff      	movs	r2, #255	; 0xff
 800a8dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a8e0:	f001 fc60 	bl	800c1a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a8e4:	f001 fc2e 	bl	800c144 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8ee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8f0:	e011      	b.n	800a916 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	691b      	ldr	r3, [r3, #16]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d012      	beq.n	800a920 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	3310      	adds	r3, #16
 800a8fe:	4618      	mov	r0, r3
 800a900:	f000 fd06 	bl	800b310 <xTaskRemoveFromEventList>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d001      	beq.n	800a90e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a90a:	f000 fddd 	bl	800b4c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a90e:	7bbb      	ldrb	r3, [r7, #14]
 800a910:	3b01      	subs	r3, #1
 800a912:	b2db      	uxtb	r3, r3
 800a914:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a916:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	dce9      	bgt.n	800a8f2 <prvUnlockQueue+0x60>
 800a91e:	e000      	b.n	800a922 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a920:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	22ff      	movs	r2, #255	; 0xff
 800a926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a92a:	f001 fc3b 	bl	800c1a4 <vPortExitCritical>
}
 800a92e:	bf00      	nop
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b084      	sub	sp, #16
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a93e:	f001 fc01 	bl	800c144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a946:	2b00      	cmp	r3, #0
 800a948:	d102      	bne.n	800a950 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a94a:	2301      	movs	r3, #1
 800a94c:	60fb      	str	r3, [r7, #12]
 800a94e:	e001      	b.n	800a954 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a950:	2300      	movs	r3, #0
 800a952:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a954:	f001 fc26 	bl	800c1a4 <vPortExitCritical>

	return xReturn;
 800a958:	68fb      	ldr	r3, [r7, #12]
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3710      	adds	r7, #16
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b084      	sub	sp, #16
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a96a:	f001 fbeb 	bl	800c144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a976:	429a      	cmp	r2, r3
 800a978:	d102      	bne.n	800a980 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a97a:	2301      	movs	r3, #1
 800a97c:	60fb      	str	r3, [r7, #12]
 800a97e:	e001      	b.n	800a984 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a980:	2300      	movs	r3, #0
 800a982:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a984:	f001 fc0e 	bl	800c1a4 <vPortExitCritical>

	return xReturn;
 800a988:	68fb      	ldr	r3, [r7, #12]
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
	...

0800a994 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a99e:	2300      	movs	r3, #0
 800a9a0:	60fb      	str	r3, [r7, #12]
 800a9a2:	e014      	b.n	800a9ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a9a4:	4a0f      	ldr	r2, [pc, #60]	; (800a9e4 <vQueueAddToRegistry+0x50>)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d10b      	bne.n	800a9c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a9b0:	490c      	ldr	r1, [pc, #48]	; (800a9e4 <vQueueAddToRegistry+0x50>)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	683a      	ldr	r2, [r7, #0]
 800a9b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a9ba:	4a0a      	ldr	r2, [pc, #40]	; (800a9e4 <vQueueAddToRegistry+0x50>)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	00db      	lsls	r3, r3, #3
 800a9c0:	4413      	add	r3, r2
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a9c6:	e006      	b.n	800a9d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	60fb      	str	r3, [r7, #12]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2b07      	cmp	r3, #7
 800a9d2:	d9e7      	bls.n	800a9a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a9d4:	bf00      	nop
 800a9d6:	bf00      	nop
 800a9d8:	3714      	adds	r7, #20
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	200011e8 	.word	0x200011e8

0800a9e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b086      	sub	sp, #24
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a9f8:	f001 fba4 	bl	800c144 <vPortEnterCritical>
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa02:	b25b      	sxtb	r3, r3
 800aa04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa08:	d103      	bne.n	800aa12 <vQueueWaitForMessageRestricted+0x2a>
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa18:	b25b      	sxtb	r3, r3
 800aa1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1e:	d103      	bne.n	800aa28 <vQueueWaitForMessageRestricted+0x40>
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	2200      	movs	r2, #0
 800aa24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa28:	f001 fbbc 	bl	800c1a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d106      	bne.n	800aa42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	3324      	adds	r3, #36	; 0x24
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	68b9      	ldr	r1, [r7, #8]
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f000 fc3b 	bl	800b2b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aa42:	6978      	ldr	r0, [r7, #20]
 800aa44:	f7ff ff25 	bl	800a892 <prvUnlockQueue>
	}
 800aa48:	bf00      	nop
 800aa4a:	3718      	adds	r7, #24
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b08e      	sub	sp, #56	; 0x38
 800aa54:	af04      	add	r7, sp, #16
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	607a      	str	r2, [r7, #4]
 800aa5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aa5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d10a      	bne.n	800aa7a <xTaskCreateStatic+0x2a>
	__asm volatile
 800aa64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa68:	f383 8811 	msr	BASEPRI, r3
 800aa6c:	f3bf 8f6f 	isb	sy
 800aa70:	f3bf 8f4f 	dsb	sy
 800aa74:	623b      	str	r3, [r7, #32]
}
 800aa76:	bf00      	nop
 800aa78:	e7fe      	b.n	800aa78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aa7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d10a      	bne.n	800aa96 <xTaskCreateStatic+0x46>
	__asm volatile
 800aa80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa84:	f383 8811 	msr	BASEPRI, r3
 800aa88:	f3bf 8f6f 	isb	sy
 800aa8c:	f3bf 8f4f 	dsb	sy
 800aa90:	61fb      	str	r3, [r7, #28]
}
 800aa92:	bf00      	nop
 800aa94:	e7fe      	b.n	800aa94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aa96:	235c      	movs	r3, #92	; 0x5c
 800aa98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	2b5c      	cmp	r3, #92	; 0x5c
 800aa9e:	d00a      	beq.n	800aab6 <xTaskCreateStatic+0x66>
	__asm volatile
 800aaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa4:	f383 8811 	msr	BASEPRI, r3
 800aaa8:	f3bf 8f6f 	isb	sy
 800aaac:	f3bf 8f4f 	dsb	sy
 800aab0:	61bb      	str	r3, [r7, #24]
}
 800aab2:	bf00      	nop
 800aab4:	e7fe      	b.n	800aab4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aab6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d01e      	beq.n	800aafc <xTaskCreateStatic+0xac>
 800aabe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d01b      	beq.n	800aafc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aacc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad0:	2202      	movs	r2, #2
 800aad2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aad6:	2300      	movs	r3, #0
 800aad8:	9303      	str	r3, [sp, #12]
 800aada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aadc:	9302      	str	r3, [sp, #8]
 800aade:	f107 0314 	add.w	r3, r7, #20
 800aae2:	9301      	str	r3, [sp, #4]
 800aae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae6:	9300      	str	r3, [sp, #0]
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	68b9      	ldr	r1, [r7, #8]
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	f000 f850 	bl	800ab94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aaf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aaf6:	f000 f8dd 	bl	800acb4 <prvAddNewTaskToReadyList>
 800aafa:	e001      	b.n	800ab00 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aafc:	2300      	movs	r3, #0
 800aafe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab00:	697b      	ldr	r3, [r7, #20]
	}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3728      	adds	r7, #40	; 0x28
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}

0800ab0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ab0a:	b580      	push	{r7, lr}
 800ab0c:	b08c      	sub	sp, #48	; 0x30
 800ab0e:	af04      	add	r7, sp, #16
 800ab10:	60f8      	str	r0, [r7, #12]
 800ab12:	60b9      	str	r1, [r7, #8]
 800ab14:	603b      	str	r3, [r7, #0]
 800ab16:	4613      	mov	r3, r2
 800ab18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ab1a:	88fb      	ldrh	r3, [r7, #6]
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f001 fc32 	bl	800c388 <pvPortMalloc>
 800ab24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00e      	beq.n	800ab4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ab2c:	205c      	movs	r0, #92	; 0x5c
 800ab2e:	f001 fc2b 	bl	800c388 <pvPortMalloc>
 800ab32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d003      	beq.n	800ab42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ab3a:	69fb      	ldr	r3, [r7, #28]
 800ab3c:	697a      	ldr	r2, [r7, #20]
 800ab3e:	631a      	str	r2, [r3, #48]	; 0x30
 800ab40:	e005      	b.n	800ab4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ab42:	6978      	ldr	r0, [r7, #20]
 800ab44:	f001 fcec 	bl	800c520 <vPortFree>
 800ab48:	e001      	b.n	800ab4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ab4e:	69fb      	ldr	r3, [r7, #28]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d017      	beq.n	800ab84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	2200      	movs	r2, #0
 800ab58:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ab5c:	88fa      	ldrh	r2, [r7, #6]
 800ab5e:	2300      	movs	r3, #0
 800ab60:	9303      	str	r3, [sp, #12]
 800ab62:	69fb      	ldr	r3, [r7, #28]
 800ab64:	9302      	str	r3, [sp, #8]
 800ab66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab68:	9301      	str	r3, [sp, #4]
 800ab6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6c:	9300      	str	r3, [sp, #0]
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	68b9      	ldr	r1, [r7, #8]
 800ab72:	68f8      	ldr	r0, [r7, #12]
 800ab74:	f000 f80e 	bl	800ab94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab78:	69f8      	ldr	r0, [r7, #28]
 800ab7a:	f000 f89b 	bl	800acb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	61bb      	str	r3, [r7, #24]
 800ab82:	e002      	b.n	800ab8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ab84:	f04f 33ff 	mov.w	r3, #4294967295
 800ab88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ab8a:	69bb      	ldr	r3, [r7, #24]
	}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3720      	adds	r7, #32
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b088      	sub	sp, #32
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	607a      	str	r2, [r7, #4]
 800aba0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	461a      	mov	r2, r3
 800abac:	21a5      	movs	r1, #165	; 0xa5
 800abae:	f001 fdd5 	bl	800c75c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800abb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800abbc:	3b01      	subs	r3, #1
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	4413      	add	r3, r2
 800abc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800abc4:	69bb      	ldr	r3, [r7, #24]
 800abc6:	f023 0307 	bic.w	r3, r3, #7
 800abca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800abcc:	69bb      	ldr	r3, [r7, #24]
 800abce:	f003 0307 	and.w	r3, r3, #7
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00a      	beq.n	800abec <prvInitialiseNewTask+0x58>
	__asm volatile
 800abd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abda:	f383 8811 	msr	BASEPRI, r3
 800abde:	f3bf 8f6f 	isb	sy
 800abe2:	f3bf 8f4f 	dsb	sy
 800abe6:	617b      	str	r3, [r7, #20]
}
 800abe8:	bf00      	nop
 800abea:	e7fe      	b.n	800abea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d01f      	beq.n	800ac32 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800abf2:	2300      	movs	r3, #0
 800abf4:	61fb      	str	r3, [r7, #28]
 800abf6:	e012      	b.n	800ac1e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800abf8:	68ba      	ldr	r2, [r7, #8]
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	4413      	add	r3, r2
 800abfe:	7819      	ldrb	r1, [r3, #0]
 800ac00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac02:	69fb      	ldr	r3, [r7, #28]
 800ac04:	4413      	add	r3, r2
 800ac06:	3334      	adds	r3, #52	; 0x34
 800ac08:	460a      	mov	r2, r1
 800ac0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ac0c:	68ba      	ldr	r2, [r7, #8]
 800ac0e:	69fb      	ldr	r3, [r7, #28]
 800ac10:	4413      	add	r3, r2
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d006      	beq.n	800ac26 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	61fb      	str	r3, [r7, #28]
 800ac1e:	69fb      	ldr	r3, [r7, #28]
 800ac20:	2b0f      	cmp	r3, #15
 800ac22:	d9e9      	bls.n	800abf8 <prvInitialiseNewTask+0x64>
 800ac24:	e000      	b.n	800ac28 <prvInitialiseNewTask+0x94>
			{
				break;
 800ac26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ac28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac30:	e003      	b.n	800ac3a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ac32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac34:	2200      	movs	r2, #0
 800ac36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ac3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3c:	2b37      	cmp	r3, #55	; 0x37
 800ac3e:	d901      	bls.n	800ac44 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ac40:	2337      	movs	r3, #55	; 0x37
 800ac42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ac44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ac4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ac50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac52:	2200      	movs	r2, #0
 800ac54:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ac56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac58:	3304      	adds	r3, #4
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7ff f870 	bl	8009d40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ac60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac62:	3318      	adds	r3, #24
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7ff f86b 	bl	8009d40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ac6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ac7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ac80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac82:	2200      	movs	r2, #0
 800ac84:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ac86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ac8e:	683a      	ldr	r2, [r7, #0]
 800ac90:	68f9      	ldr	r1, [r7, #12]
 800ac92:	69b8      	ldr	r0, [r7, #24]
 800ac94:	f001 f928 	bl	800bee8 <pxPortInitialiseStack>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ac9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d002      	beq.n	800acaa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aca8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acaa:	bf00      	nop
 800acac:	3720      	adds	r7, #32
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
	...

0800acb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800acbc:	f001 fa42 	bl	800c144 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800acc0:	4b2d      	ldr	r3, [pc, #180]	; (800ad78 <prvAddNewTaskToReadyList+0xc4>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	3301      	adds	r3, #1
 800acc6:	4a2c      	ldr	r2, [pc, #176]	; (800ad78 <prvAddNewTaskToReadyList+0xc4>)
 800acc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800acca:	4b2c      	ldr	r3, [pc, #176]	; (800ad7c <prvAddNewTaskToReadyList+0xc8>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d109      	bne.n	800ace6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800acd2:	4a2a      	ldr	r2, [pc, #168]	; (800ad7c <prvAddNewTaskToReadyList+0xc8>)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800acd8:	4b27      	ldr	r3, [pc, #156]	; (800ad78 <prvAddNewTaskToReadyList+0xc4>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d110      	bne.n	800ad02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ace0:	f000 fc16 	bl	800b510 <prvInitialiseTaskLists>
 800ace4:	e00d      	b.n	800ad02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ace6:	4b26      	ldr	r3, [pc, #152]	; (800ad80 <prvAddNewTaskToReadyList+0xcc>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d109      	bne.n	800ad02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800acee:	4b23      	ldr	r3, [pc, #140]	; (800ad7c <prvAddNewTaskToReadyList+0xc8>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d802      	bhi.n	800ad02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800acfc:	4a1f      	ldr	r2, [pc, #124]	; (800ad7c <prvAddNewTaskToReadyList+0xc8>)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ad02:	4b20      	ldr	r3, [pc, #128]	; (800ad84 <prvAddNewTaskToReadyList+0xd0>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	3301      	adds	r3, #1
 800ad08:	4a1e      	ldr	r2, [pc, #120]	; (800ad84 <prvAddNewTaskToReadyList+0xd0>)
 800ad0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ad0c:	4b1d      	ldr	r3, [pc, #116]	; (800ad84 <prvAddNewTaskToReadyList+0xd0>)
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad18:	4b1b      	ldr	r3, [pc, #108]	; (800ad88 <prvAddNewTaskToReadyList+0xd4>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d903      	bls.n	800ad28 <prvAddNewTaskToReadyList+0x74>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad24:	4a18      	ldr	r2, [pc, #96]	; (800ad88 <prvAddNewTaskToReadyList+0xd4>)
 800ad26:	6013      	str	r3, [r2, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad2c:	4613      	mov	r3, r2
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	4413      	add	r3, r2
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	4a15      	ldr	r2, [pc, #84]	; (800ad8c <prvAddNewTaskToReadyList+0xd8>)
 800ad36:	441a      	add	r2, r3
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	3304      	adds	r3, #4
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	4610      	mov	r0, r2
 800ad40:	f7ff f80b 	bl	8009d5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ad44:	f001 fa2e 	bl	800c1a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ad48:	4b0d      	ldr	r3, [pc, #52]	; (800ad80 <prvAddNewTaskToReadyList+0xcc>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d00e      	beq.n	800ad6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ad50:	4b0a      	ldr	r3, [pc, #40]	; (800ad7c <prvAddNewTaskToReadyList+0xc8>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d207      	bcs.n	800ad6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ad5e:	4b0c      	ldr	r3, [pc, #48]	; (800ad90 <prvAddNewTaskToReadyList+0xdc>)
 800ad60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad64:	601a      	str	r2, [r3, #0]
 800ad66:	f3bf 8f4f 	dsb	sy
 800ad6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad6e:	bf00      	nop
 800ad70:	3708      	adds	r7, #8
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	200016fc 	.word	0x200016fc
 800ad7c:	20001228 	.word	0x20001228
 800ad80:	20001708 	.word	0x20001708
 800ad84:	20001718 	.word	0x20001718
 800ad88:	20001704 	.word	0x20001704
 800ad8c:	2000122c 	.word	0x2000122c
 800ad90:	e000ed04 	.word	0xe000ed04

0800ad94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d017      	beq.n	800add6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ada6:	4b13      	ldr	r3, [pc, #76]	; (800adf4 <vTaskDelay+0x60>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d00a      	beq.n	800adc4 <vTaskDelay+0x30>
	__asm volatile
 800adae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb2:	f383 8811 	msr	BASEPRI, r3
 800adb6:	f3bf 8f6f 	isb	sy
 800adba:	f3bf 8f4f 	dsb	sy
 800adbe:	60bb      	str	r3, [r7, #8]
}
 800adc0:	bf00      	nop
 800adc2:	e7fe      	b.n	800adc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800adc4:	f000 f880 	bl	800aec8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800adc8:	2100      	movs	r1, #0
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 fcea 	bl	800b7a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800add0:	f000 f888 	bl	800aee4 <xTaskResumeAll>
 800add4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d107      	bne.n	800adec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800addc:	4b06      	ldr	r3, [pc, #24]	; (800adf8 <vTaskDelay+0x64>)
 800adde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ade2:	601a      	str	r2, [r3, #0]
 800ade4:	f3bf 8f4f 	dsb	sy
 800ade8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800adec:	bf00      	nop
 800adee:	3710      	adds	r7, #16
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	20001724 	.word	0x20001724
 800adf8:	e000ed04 	.word	0xe000ed04

0800adfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b08a      	sub	sp, #40	; 0x28
 800ae00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ae02:	2300      	movs	r3, #0
 800ae04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ae06:	2300      	movs	r3, #0
 800ae08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ae0a:	463a      	mov	r2, r7
 800ae0c:	1d39      	adds	r1, r7, #4
 800ae0e:	f107 0308 	add.w	r3, r7, #8
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7fe ff40 	bl	8009c98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ae18:	6839      	ldr	r1, [r7, #0]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	68ba      	ldr	r2, [r7, #8]
 800ae1e:	9202      	str	r2, [sp, #8]
 800ae20:	9301      	str	r3, [sp, #4]
 800ae22:	2300      	movs	r3, #0
 800ae24:	9300      	str	r3, [sp, #0]
 800ae26:	2300      	movs	r3, #0
 800ae28:	460a      	mov	r2, r1
 800ae2a:	4921      	ldr	r1, [pc, #132]	; (800aeb0 <vTaskStartScheduler+0xb4>)
 800ae2c:	4821      	ldr	r0, [pc, #132]	; (800aeb4 <vTaskStartScheduler+0xb8>)
 800ae2e:	f7ff fe0f 	bl	800aa50 <xTaskCreateStatic>
 800ae32:	4603      	mov	r3, r0
 800ae34:	4a20      	ldr	r2, [pc, #128]	; (800aeb8 <vTaskStartScheduler+0xbc>)
 800ae36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ae38:	4b1f      	ldr	r3, [pc, #124]	; (800aeb8 <vTaskStartScheduler+0xbc>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d002      	beq.n	800ae46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ae40:	2301      	movs	r3, #1
 800ae42:	617b      	str	r3, [r7, #20]
 800ae44:	e001      	b.n	800ae4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ae46:	2300      	movs	r3, #0
 800ae48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d102      	bne.n	800ae56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ae50:	f000 fcfc 	bl	800b84c <xTimerCreateTimerTask>
 800ae54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d116      	bne.n	800ae8a <vTaskStartScheduler+0x8e>
	__asm volatile
 800ae5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae60:	f383 8811 	msr	BASEPRI, r3
 800ae64:	f3bf 8f6f 	isb	sy
 800ae68:	f3bf 8f4f 	dsb	sy
 800ae6c:	613b      	str	r3, [r7, #16]
}
 800ae6e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ae70:	4b12      	ldr	r3, [pc, #72]	; (800aebc <vTaskStartScheduler+0xc0>)
 800ae72:	f04f 32ff 	mov.w	r2, #4294967295
 800ae76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ae78:	4b11      	ldr	r3, [pc, #68]	; (800aec0 <vTaskStartScheduler+0xc4>)
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ae7e:	4b11      	ldr	r3, [pc, #68]	; (800aec4 <vTaskStartScheduler+0xc8>)
 800ae80:	2200      	movs	r2, #0
 800ae82:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ae84:	f001 f8bc 	bl	800c000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ae88:	e00e      	b.n	800aea8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae90:	d10a      	bne.n	800aea8 <vTaskStartScheduler+0xac>
	__asm volatile
 800ae92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae96:	f383 8811 	msr	BASEPRI, r3
 800ae9a:	f3bf 8f6f 	isb	sy
 800ae9e:	f3bf 8f4f 	dsb	sy
 800aea2:	60fb      	str	r3, [r7, #12]
}
 800aea4:	bf00      	nop
 800aea6:	e7fe      	b.n	800aea6 <vTaskStartScheduler+0xaa>
}
 800aea8:	bf00      	nop
 800aeaa:	3718      	adds	r7, #24
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	0800c820 	.word	0x0800c820
 800aeb4:	0800b4e1 	.word	0x0800b4e1
 800aeb8:	20001720 	.word	0x20001720
 800aebc:	2000171c 	.word	0x2000171c
 800aec0:	20001708 	.word	0x20001708
 800aec4:	20001700 	.word	0x20001700

0800aec8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aec8:	b480      	push	{r7}
 800aeca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aecc:	4b04      	ldr	r3, [pc, #16]	; (800aee0 <vTaskSuspendAll+0x18>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	3301      	adds	r3, #1
 800aed2:	4a03      	ldr	r2, [pc, #12]	; (800aee0 <vTaskSuspendAll+0x18>)
 800aed4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aed6:	bf00      	nop
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr
 800aee0:	20001724 	.word	0x20001724

0800aee4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aeea:	2300      	movs	r3, #0
 800aeec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aeee:	2300      	movs	r3, #0
 800aef0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aef2:	4b42      	ldr	r3, [pc, #264]	; (800affc <xTaskResumeAll+0x118>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d10a      	bne.n	800af10 <xTaskResumeAll+0x2c>
	__asm volatile
 800aefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefe:	f383 8811 	msr	BASEPRI, r3
 800af02:	f3bf 8f6f 	isb	sy
 800af06:	f3bf 8f4f 	dsb	sy
 800af0a:	603b      	str	r3, [r7, #0]
}
 800af0c:	bf00      	nop
 800af0e:	e7fe      	b.n	800af0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800af10:	f001 f918 	bl	800c144 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800af14:	4b39      	ldr	r3, [pc, #228]	; (800affc <xTaskResumeAll+0x118>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	3b01      	subs	r3, #1
 800af1a:	4a38      	ldr	r2, [pc, #224]	; (800affc <xTaskResumeAll+0x118>)
 800af1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af1e:	4b37      	ldr	r3, [pc, #220]	; (800affc <xTaskResumeAll+0x118>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d162      	bne.n	800afec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800af26:	4b36      	ldr	r3, [pc, #216]	; (800b000 <xTaskResumeAll+0x11c>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d05e      	beq.n	800afec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af2e:	e02f      	b.n	800af90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af30:	4b34      	ldr	r3, [pc, #208]	; (800b004 <xTaskResumeAll+0x120>)
 800af32:	68db      	ldr	r3, [r3, #12]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	3318      	adds	r3, #24
 800af3c:	4618      	mov	r0, r3
 800af3e:	f7fe ff69 	bl	8009e14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	3304      	adds	r3, #4
 800af46:	4618      	mov	r0, r3
 800af48:	f7fe ff64 	bl	8009e14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af50:	4b2d      	ldr	r3, [pc, #180]	; (800b008 <xTaskResumeAll+0x124>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	429a      	cmp	r2, r3
 800af56:	d903      	bls.n	800af60 <xTaskResumeAll+0x7c>
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5c:	4a2a      	ldr	r2, [pc, #168]	; (800b008 <xTaskResumeAll+0x124>)
 800af5e:	6013      	str	r3, [r2, #0]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af64:	4613      	mov	r3, r2
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	4413      	add	r3, r2
 800af6a:	009b      	lsls	r3, r3, #2
 800af6c:	4a27      	ldr	r2, [pc, #156]	; (800b00c <xTaskResumeAll+0x128>)
 800af6e:	441a      	add	r2, r3
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	3304      	adds	r3, #4
 800af74:	4619      	mov	r1, r3
 800af76:	4610      	mov	r0, r2
 800af78:	f7fe feef 	bl	8009d5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af80:	4b23      	ldr	r3, [pc, #140]	; (800b010 <xTaskResumeAll+0x12c>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af86:	429a      	cmp	r2, r3
 800af88:	d302      	bcc.n	800af90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800af8a:	4b22      	ldr	r3, [pc, #136]	; (800b014 <xTaskResumeAll+0x130>)
 800af8c:	2201      	movs	r2, #1
 800af8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af90:	4b1c      	ldr	r3, [pc, #112]	; (800b004 <xTaskResumeAll+0x120>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d1cb      	bne.n	800af30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d001      	beq.n	800afa2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800af9e:	f000 fb55 	bl	800b64c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800afa2:	4b1d      	ldr	r3, [pc, #116]	; (800b018 <xTaskResumeAll+0x134>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d010      	beq.n	800afd0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800afae:	f000 f847 	bl	800b040 <xTaskIncrementTick>
 800afb2:	4603      	mov	r3, r0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d002      	beq.n	800afbe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800afb8:	4b16      	ldr	r3, [pc, #88]	; (800b014 <xTaskResumeAll+0x130>)
 800afba:	2201      	movs	r2, #1
 800afbc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	3b01      	subs	r3, #1
 800afc2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1f1      	bne.n	800afae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800afca:	4b13      	ldr	r3, [pc, #76]	; (800b018 <xTaskResumeAll+0x134>)
 800afcc:	2200      	movs	r2, #0
 800afce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800afd0:	4b10      	ldr	r3, [pc, #64]	; (800b014 <xTaskResumeAll+0x130>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d009      	beq.n	800afec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800afd8:	2301      	movs	r3, #1
 800afda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800afdc:	4b0f      	ldr	r3, [pc, #60]	; (800b01c <xTaskResumeAll+0x138>)
 800afde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afe2:	601a      	str	r2, [r3, #0]
 800afe4:	f3bf 8f4f 	dsb	sy
 800afe8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800afec:	f001 f8da 	bl	800c1a4 <vPortExitCritical>

	return xAlreadyYielded;
 800aff0:	68bb      	ldr	r3, [r7, #8]
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3710      	adds	r7, #16
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	20001724 	.word	0x20001724
 800b000:	200016fc 	.word	0x200016fc
 800b004:	200016bc 	.word	0x200016bc
 800b008:	20001704 	.word	0x20001704
 800b00c:	2000122c 	.word	0x2000122c
 800b010:	20001228 	.word	0x20001228
 800b014:	20001710 	.word	0x20001710
 800b018:	2000170c 	.word	0x2000170c
 800b01c:	e000ed04 	.word	0xe000ed04

0800b020 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b026:	4b05      	ldr	r3, [pc, #20]	; (800b03c <xTaskGetTickCount+0x1c>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b02c:	687b      	ldr	r3, [r7, #4]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	370c      	adds	r7, #12
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr
 800b03a:	bf00      	nop
 800b03c:	20001700 	.word	0x20001700

0800b040 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b086      	sub	sp, #24
 800b044:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b046:	2300      	movs	r3, #0
 800b048:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b04a:	4b4f      	ldr	r3, [pc, #316]	; (800b188 <xTaskIncrementTick+0x148>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	f040 808f 	bne.w	800b172 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b054:	4b4d      	ldr	r3, [pc, #308]	; (800b18c <xTaskIncrementTick+0x14c>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	3301      	adds	r3, #1
 800b05a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b05c:	4a4b      	ldr	r2, [pc, #300]	; (800b18c <xTaskIncrementTick+0x14c>)
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d120      	bne.n	800b0aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b068:	4b49      	ldr	r3, [pc, #292]	; (800b190 <xTaskIncrementTick+0x150>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d00a      	beq.n	800b088 <xTaskIncrementTick+0x48>
	__asm volatile
 800b072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b076:	f383 8811 	msr	BASEPRI, r3
 800b07a:	f3bf 8f6f 	isb	sy
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	603b      	str	r3, [r7, #0]
}
 800b084:	bf00      	nop
 800b086:	e7fe      	b.n	800b086 <xTaskIncrementTick+0x46>
 800b088:	4b41      	ldr	r3, [pc, #260]	; (800b190 <xTaskIncrementTick+0x150>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	60fb      	str	r3, [r7, #12]
 800b08e:	4b41      	ldr	r3, [pc, #260]	; (800b194 <xTaskIncrementTick+0x154>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a3f      	ldr	r2, [pc, #252]	; (800b190 <xTaskIncrementTick+0x150>)
 800b094:	6013      	str	r3, [r2, #0]
 800b096:	4a3f      	ldr	r2, [pc, #252]	; (800b194 <xTaskIncrementTick+0x154>)
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	6013      	str	r3, [r2, #0]
 800b09c:	4b3e      	ldr	r3, [pc, #248]	; (800b198 <xTaskIncrementTick+0x158>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	4a3d      	ldr	r2, [pc, #244]	; (800b198 <xTaskIncrementTick+0x158>)
 800b0a4:	6013      	str	r3, [r2, #0]
 800b0a6:	f000 fad1 	bl	800b64c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b0aa:	4b3c      	ldr	r3, [pc, #240]	; (800b19c <xTaskIncrementTick+0x15c>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	693a      	ldr	r2, [r7, #16]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d349      	bcc.n	800b148 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0b4:	4b36      	ldr	r3, [pc, #216]	; (800b190 <xTaskIncrementTick+0x150>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d104      	bne.n	800b0c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0be:	4b37      	ldr	r3, [pc, #220]	; (800b19c <xTaskIncrementTick+0x15c>)
 800b0c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c4:	601a      	str	r2, [r3, #0]
					break;
 800b0c6:	e03f      	b.n	800b148 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0c8:	4b31      	ldr	r3, [pc, #196]	; (800b190 <xTaskIncrementTick+0x150>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	68db      	ldr	r3, [r3, #12]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b0d8:	693a      	ldr	r2, [r7, #16]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d203      	bcs.n	800b0e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b0e0:	4a2e      	ldr	r2, [pc, #184]	; (800b19c <xTaskIncrementTick+0x15c>)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b0e6:	e02f      	b.n	800b148 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	3304      	adds	r3, #4
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7fe fe91 	bl	8009e14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d004      	beq.n	800b104 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	3318      	adds	r3, #24
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7fe fe88 	bl	8009e14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b108:	4b25      	ldr	r3, [pc, #148]	; (800b1a0 <xTaskIncrementTick+0x160>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d903      	bls.n	800b118 <xTaskIncrementTick+0xd8>
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b114:	4a22      	ldr	r2, [pc, #136]	; (800b1a0 <xTaskIncrementTick+0x160>)
 800b116:	6013      	str	r3, [r2, #0]
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b11c:	4613      	mov	r3, r2
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	4413      	add	r3, r2
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	4a1f      	ldr	r2, [pc, #124]	; (800b1a4 <xTaskIncrementTick+0x164>)
 800b126:	441a      	add	r2, r3
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	3304      	adds	r3, #4
 800b12c:	4619      	mov	r1, r3
 800b12e:	4610      	mov	r0, r2
 800b130:	f7fe fe13 	bl	8009d5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b138:	4b1b      	ldr	r3, [pc, #108]	; (800b1a8 <xTaskIncrementTick+0x168>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13e:	429a      	cmp	r2, r3
 800b140:	d3b8      	bcc.n	800b0b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b142:	2301      	movs	r3, #1
 800b144:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b146:	e7b5      	b.n	800b0b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b148:	4b17      	ldr	r3, [pc, #92]	; (800b1a8 <xTaskIncrementTick+0x168>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b14e:	4915      	ldr	r1, [pc, #84]	; (800b1a4 <xTaskIncrementTick+0x164>)
 800b150:	4613      	mov	r3, r2
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	4413      	add	r3, r2
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	440b      	add	r3, r1
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d901      	bls.n	800b164 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b160:	2301      	movs	r3, #1
 800b162:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b164:	4b11      	ldr	r3, [pc, #68]	; (800b1ac <xTaskIncrementTick+0x16c>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d007      	beq.n	800b17c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b16c:	2301      	movs	r3, #1
 800b16e:	617b      	str	r3, [r7, #20]
 800b170:	e004      	b.n	800b17c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b172:	4b0f      	ldr	r3, [pc, #60]	; (800b1b0 <xTaskIncrementTick+0x170>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	3301      	adds	r3, #1
 800b178:	4a0d      	ldr	r2, [pc, #52]	; (800b1b0 <xTaskIncrementTick+0x170>)
 800b17a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b17c:	697b      	ldr	r3, [r7, #20]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3718      	adds	r7, #24
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	20001724 	.word	0x20001724
 800b18c:	20001700 	.word	0x20001700
 800b190:	200016b4 	.word	0x200016b4
 800b194:	200016b8 	.word	0x200016b8
 800b198:	20001714 	.word	0x20001714
 800b19c:	2000171c 	.word	0x2000171c
 800b1a0:	20001704 	.word	0x20001704
 800b1a4:	2000122c 	.word	0x2000122c
 800b1a8:	20001228 	.word	0x20001228
 800b1ac:	20001710 	.word	0x20001710
 800b1b0:	2000170c 	.word	0x2000170c

0800b1b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b1ba:	4b28      	ldr	r3, [pc, #160]	; (800b25c <vTaskSwitchContext+0xa8>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d003      	beq.n	800b1ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b1c2:	4b27      	ldr	r3, [pc, #156]	; (800b260 <vTaskSwitchContext+0xac>)
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b1c8:	e041      	b.n	800b24e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b1ca:	4b25      	ldr	r3, [pc, #148]	; (800b260 <vTaskSwitchContext+0xac>)
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1d0:	4b24      	ldr	r3, [pc, #144]	; (800b264 <vTaskSwitchContext+0xb0>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	60fb      	str	r3, [r7, #12]
 800b1d6:	e010      	b.n	800b1fa <vTaskSwitchContext+0x46>
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d10a      	bne.n	800b1f4 <vTaskSwitchContext+0x40>
	__asm volatile
 800b1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e2:	f383 8811 	msr	BASEPRI, r3
 800b1e6:	f3bf 8f6f 	isb	sy
 800b1ea:	f3bf 8f4f 	dsb	sy
 800b1ee:	607b      	str	r3, [r7, #4]
}
 800b1f0:	bf00      	nop
 800b1f2:	e7fe      	b.n	800b1f2 <vTaskSwitchContext+0x3e>
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	3b01      	subs	r3, #1
 800b1f8:	60fb      	str	r3, [r7, #12]
 800b1fa:	491b      	ldr	r1, [pc, #108]	; (800b268 <vTaskSwitchContext+0xb4>)
 800b1fc:	68fa      	ldr	r2, [r7, #12]
 800b1fe:	4613      	mov	r3, r2
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	4413      	add	r3, r2
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	440b      	add	r3, r1
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d0e4      	beq.n	800b1d8 <vTaskSwitchContext+0x24>
 800b20e:	68fa      	ldr	r2, [r7, #12]
 800b210:	4613      	mov	r3, r2
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	4413      	add	r3, r2
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	4a13      	ldr	r2, [pc, #76]	; (800b268 <vTaskSwitchContext+0xb4>)
 800b21a:	4413      	add	r3, r2
 800b21c:	60bb      	str	r3, [r7, #8]
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	685a      	ldr	r2, [r3, #4]
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	605a      	str	r2, [r3, #4]
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	685a      	ldr	r2, [r3, #4]
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	3308      	adds	r3, #8
 800b230:	429a      	cmp	r2, r3
 800b232:	d104      	bne.n	800b23e <vTaskSwitchContext+0x8a>
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	685a      	ldr	r2, [r3, #4]
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	605a      	str	r2, [r3, #4]
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	4a09      	ldr	r2, [pc, #36]	; (800b26c <vTaskSwitchContext+0xb8>)
 800b246:	6013      	str	r3, [r2, #0]
 800b248:	4a06      	ldr	r2, [pc, #24]	; (800b264 <vTaskSwitchContext+0xb0>)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	6013      	str	r3, [r2, #0]
}
 800b24e:	bf00      	nop
 800b250:	3714      	adds	r7, #20
 800b252:	46bd      	mov	sp, r7
 800b254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b258:	4770      	bx	lr
 800b25a:	bf00      	nop
 800b25c:	20001724 	.word	0x20001724
 800b260:	20001710 	.word	0x20001710
 800b264:	20001704 	.word	0x20001704
 800b268:	2000122c 	.word	0x2000122c
 800b26c:	20001228 	.word	0x20001228

0800b270 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d10a      	bne.n	800b296 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b284:	f383 8811 	msr	BASEPRI, r3
 800b288:	f3bf 8f6f 	isb	sy
 800b28c:	f3bf 8f4f 	dsb	sy
 800b290:	60fb      	str	r3, [r7, #12]
}
 800b292:	bf00      	nop
 800b294:	e7fe      	b.n	800b294 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b296:	4b07      	ldr	r3, [pc, #28]	; (800b2b4 <vTaskPlaceOnEventList+0x44>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	3318      	adds	r3, #24
 800b29c:	4619      	mov	r1, r3
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f7fe fd7f 	bl	8009da2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b2a4:	2101      	movs	r1, #1
 800b2a6:	6838      	ldr	r0, [r7, #0]
 800b2a8:	f000 fa7c 	bl	800b7a4 <prvAddCurrentTaskToDelayedList>
}
 800b2ac:	bf00      	nop
 800b2ae:	3710      	adds	r7, #16
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	20001228 	.word	0x20001228

0800b2b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b086      	sub	sp, #24
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d10a      	bne.n	800b2e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ce:	f383 8811 	msr	BASEPRI, r3
 800b2d2:	f3bf 8f6f 	isb	sy
 800b2d6:	f3bf 8f4f 	dsb	sy
 800b2da:	617b      	str	r3, [r7, #20]
}
 800b2dc:	bf00      	nop
 800b2de:	e7fe      	b.n	800b2de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b2e0:	4b0a      	ldr	r3, [pc, #40]	; (800b30c <vTaskPlaceOnEventListRestricted+0x54>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	3318      	adds	r3, #24
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f7fe fd36 	bl	8009d5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d002      	beq.n	800b2fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b2f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b2fa:	6879      	ldr	r1, [r7, #4]
 800b2fc:	68b8      	ldr	r0, [r7, #8]
 800b2fe:	f000 fa51 	bl	800b7a4 <prvAddCurrentTaskToDelayedList>
	}
 800b302:	bf00      	nop
 800b304:	3718      	adds	r7, #24
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	20001228 	.word	0x20001228

0800b310 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b086      	sub	sp, #24
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	68db      	ldr	r3, [r3, #12]
 800b31c:	68db      	ldr	r3, [r3, #12]
 800b31e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d10a      	bne.n	800b33c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32a:	f383 8811 	msr	BASEPRI, r3
 800b32e:	f3bf 8f6f 	isb	sy
 800b332:	f3bf 8f4f 	dsb	sy
 800b336:	60fb      	str	r3, [r7, #12]
}
 800b338:	bf00      	nop
 800b33a:	e7fe      	b.n	800b33a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	3318      	adds	r3, #24
 800b340:	4618      	mov	r0, r3
 800b342:	f7fe fd67 	bl	8009e14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b346:	4b1e      	ldr	r3, [pc, #120]	; (800b3c0 <xTaskRemoveFromEventList+0xb0>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d11d      	bne.n	800b38a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	3304      	adds	r3, #4
 800b352:	4618      	mov	r0, r3
 800b354:	f7fe fd5e 	bl	8009e14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b35c:	4b19      	ldr	r3, [pc, #100]	; (800b3c4 <xTaskRemoveFromEventList+0xb4>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	429a      	cmp	r2, r3
 800b362:	d903      	bls.n	800b36c <xTaskRemoveFromEventList+0x5c>
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b368:	4a16      	ldr	r2, [pc, #88]	; (800b3c4 <xTaskRemoveFromEventList+0xb4>)
 800b36a:	6013      	str	r3, [r2, #0]
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b370:	4613      	mov	r3, r2
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	4413      	add	r3, r2
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	4a13      	ldr	r2, [pc, #76]	; (800b3c8 <xTaskRemoveFromEventList+0xb8>)
 800b37a:	441a      	add	r2, r3
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	3304      	adds	r3, #4
 800b380:	4619      	mov	r1, r3
 800b382:	4610      	mov	r0, r2
 800b384:	f7fe fce9 	bl	8009d5a <vListInsertEnd>
 800b388:	e005      	b.n	800b396 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	3318      	adds	r3, #24
 800b38e:	4619      	mov	r1, r3
 800b390:	480e      	ldr	r0, [pc, #56]	; (800b3cc <xTaskRemoveFromEventList+0xbc>)
 800b392:	f7fe fce2 	bl	8009d5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b39a:	4b0d      	ldr	r3, [pc, #52]	; (800b3d0 <xTaskRemoveFromEventList+0xc0>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d905      	bls.n	800b3b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b3a8:	4b0a      	ldr	r3, [pc, #40]	; (800b3d4 <xTaskRemoveFromEventList+0xc4>)
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	601a      	str	r2, [r3, #0]
 800b3ae:	e001      	b.n	800b3b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b3b4:	697b      	ldr	r3, [r7, #20]
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3718      	adds	r7, #24
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	20001724 	.word	0x20001724
 800b3c4:	20001704 	.word	0x20001704
 800b3c8:	2000122c 	.word	0x2000122c
 800b3cc:	200016bc 	.word	0x200016bc
 800b3d0:	20001228 	.word	0x20001228
 800b3d4:	20001710 	.word	0x20001710

0800b3d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b3e0:	4b06      	ldr	r3, [pc, #24]	; (800b3fc <vTaskInternalSetTimeOutState+0x24>)
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b3e8:	4b05      	ldr	r3, [pc, #20]	; (800b400 <vTaskInternalSetTimeOutState+0x28>)
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	605a      	str	r2, [r3, #4]
}
 800b3f0:	bf00      	nop
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr
 800b3fc:	20001714 	.word	0x20001714
 800b400:	20001700 	.word	0x20001700

0800b404 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b088      	sub	sp, #32
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d10a      	bne.n	800b42a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b418:	f383 8811 	msr	BASEPRI, r3
 800b41c:	f3bf 8f6f 	isb	sy
 800b420:	f3bf 8f4f 	dsb	sy
 800b424:	613b      	str	r3, [r7, #16]
}
 800b426:	bf00      	nop
 800b428:	e7fe      	b.n	800b428 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d10a      	bne.n	800b446 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b434:	f383 8811 	msr	BASEPRI, r3
 800b438:	f3bf 8f6f 	isb	sy
 800b43c:	f3bf 8f4f 	dsb	sy
 800b440:	60fb      	str	r3, [r7, #12]
}
 800b442:	bf00      	nop
 800b444:	e7fe      	b.n	800b444 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b446:	f000 fe7d 	bl	800c144 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b44a:	4b1d      	ldr	r3, [pc, #116]	; (800b4c0 <xTaskCheckForTimeOut+0xbc>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	69ba      	ldr	r2, [r7, #24]
 800b456:	1ad3      	subs	r3, r2, r3
 800b458:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b462:	d102      	bne.n	800b46a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b464:	2300      	movs	r3, #0
 800b466:	61fb      	str	r3, [r7, #28]
 800b468:	e023      	b.n	800b4b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681a      	ldr	r2, [r3, #0]
 800b46e:	4b15      	ldr	r3, [pc, #84]	; (800b4c4 <xTaskCheckForTimeOut+0xc0>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	429a      	cmp	r2, r3
 800b474:	d007      	beq.n	800b486 <xTaskCheckForTimeOut+0x82>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	69ba      	ldr	r2, [r7, #24]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d302      	bcc.n	800b486 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b480:	2301      	movs	r3, #1
 800b482:	61fb      	str	r3, [r7, #28]
 800b484:	e015      	b.n	800b4b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	697a      	ldr	r2, [r7, #20]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d20b      	bcs.n	800b4a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	1ad2      	subs	r2, r2, r3
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f7ff ff9b 	bl	800b3d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	61fb      	str	r3, [r7, #28]
 800b4a6:	e004      	b.n	800b4b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b4b2:	f000 fe77 	bl	800c1a4 <vPortExitCritical>

	return xReturn;
 800b4b6:	69fb      	ldr	r3, [r7, #28]
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3720      	adds	r7, #32
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	20001700 	.word	0x20001700
 800b4c4:	20001714 	.word	0x20001714

0800b4c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b4cc:	4b03      	ldr	r3, [pc, #12]	; (800b4dc <vTaskMissedYield+0x14>)
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	601a      	str	r2, [r3, #0]
}
 800b4d2:	bf00      	nop
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr
 800b4dc:	20001710 	.word	0x20001710

0800b4e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b082      	sub	sp, #8
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b4e8:	f000 f852 	bl	800b590 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b4ec:	4b06      	ldr	r3, [pc, #24]	; (800b508 <prvIdleTask+0x28>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d9f9      	bls.n	800b4e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b4f4:	4b05      	ldr	r3, [pc, #20]	; (800b50c <prvIdleTask+0x2c>)
 800b4f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4fa:	601a      	str	r2, [r3, #0]
 800b4fc:	f3bf 8f4f 	dsb	sy
 800b500:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b504:	e7f0      	b.n	800b4e8 <prvIdleTask+0x8>
 800b506:	bf00      	nop
 800b508:	2000122c 	.word	0x2000122c
 800b50c:	e000ed04 	.word	0xe000ed04

0800b510 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b516:	2300      	movs	r3, #0
 800b518:	607b      	str	r3, [r7, #4]
 800b51a:	e00c      	b.n	800b536 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	4613      	mov	r3, r2
 800b520:	009b      	lsls	r3, r3, #2
 800b522:	4413      	add	r3, r2
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	4a12      	ldr	r2, [pc, #72]	; (800b570 <prvInitialiseTaskLists+0x60>)
 800b528:	4413      	add	r3, r2
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7fe fbe8 	bl	8009d00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	3301      	adds	r3, #1
 800b534:	607b      	str	r3, [r7, #4]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2b37      	cmp	r3, #55	; 0x37
 800b53a:	d9ef      	bls.n	800b51c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b53c:	480d      	ldr	r0, [pc, #52]	; (800b574 <prvInitialiseTaskLists+0x64>)
 800b53e:	f7fe fbdf 	bl	8009d00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b542:	480d      	ldr	r0, [pc, #52]	; (800b578 <prvInitialiseTaskLists+0x68>)
 800b544:	f7fe fbdc 	bl	8009d00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b548:	480c      	ldr	r0, [pc, #48]	; (800b57c <prvInitialiseTaskLists+0x6c>)
 800b54a:	f7fe fbd9 	bl	8009d00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b54e:	480c      	ldr	r0, [pc, #48]	; (800b580 <prvInitialiseTaskLists+0x70>)
 800b550:	f7fe fbd6 	bl	8009d00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b554:	480b      	ldr	r0, [pc, #44]	; (800b584 <prvInitialiseTaskLists+0x74>)
 800b556:	f7fe fbd3 	bl	8009d00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b55a:	4b0b      	ldr	r3, [pc, #44]	; (800b588 <prvInitialiseTaskLists+0x78>)
 800b55c:	4a05      	ldr	r2, [pc, #20]	; (800b574 <prvInitialiseTaskLists+0x64>)
 800b55e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b560:	4b0a      	ldr	r3, [pc, #40]	; (800b58c <prvInitialiseTaskLists+0x7c>)
 800b562:	4a05      	ldr	r2, [pc, #20]	; (800b578 <prvInitialiseTaskLists+0x68>)
 800b564:	601a      	str	r2, [r3, #0]
}
 800b566:	bf00      	nop
 800b568:	3708      	adds	r7, #8
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	2000122c 	.word	0x2000122c
 800b574:	2000168c 	.word	0x2000168c
 800b578:	200016a0 	.word	0x200016a0
 800b57c:	200016bc 	.word	0x200016bc
 800b580:	200016d0 	.word	0x200016d0
 800b584:	200016e8 	.word	0x200016e8
 800b588:	200016b4 	.word	0x200016b4
 800b58c:	200016b8 	.word	0x200016b8

0800b590 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b082      	sub	sp, #8
 800b594:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b596:	e019      	b.n	800b5cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b598:	f000 fdd4 	bl	800c144 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b59c:	4b10      	ldr	r3, [pc, #64]	; (800b5e0 <prvCheckTasksWaitingTermination+0x50>)
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	3304      	adds	r3, #4
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f7fe fc33 	bl	8009e14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b5ae:	4b0d      	ldr	r3, [pc, #52]	; (800b5e4 <prvCheckTasksWaitingTermination+0x54>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	3b01      	subs	r3, #1
 800b5b4:	4a0b      	ldr	r2, [pc, #44]	; (800b5e4 <prvCheckTasksWaitingTermination+0x54>)
 800b5b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b5b8:	4b0b      	ldr	r3, [pc, #44]	; (800b5e8 <prvCheckTasksWaitingTermination+0x58>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	3b01      	subs	r3, #1
 800b5be:	4a0a      	ldr	r2, [pc, #40]	; (800b5e8 <prvCheckTasksWaitingTermination+0x58>)
 800b5c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b5c2:	f000 fdef 	bl	800c1a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 f810 	bl	800b5ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5cc:	4b06      	ldr	r3, [pc, #24]	; (800b5e8 <prvCheckTasksWaitingTermination+0x58>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d1e1      	bne.n	800b598 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b5d4:	bf00      	nop
 800b5d6:	bf00      	nop
 800b5d8:	3708      	adds	r7, #8
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	200016d0 	.word	0x200016d0
 800b5e4:	200016fc 	.word	0x200016fc
 800b5e8:	200016e4 	.word	0x200016e4

0800b5ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d108      	bne.n	800b610 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b602:	4618      	mov	r0, r3
 800b604:	f000 ff8c 	bl	800c520 <vPortFree>
				vPortFree( pxTCB );
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f000 ff89 	bl	800c520 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b60e:	e018      	b.n	800b642 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b616:	2b01      	cmp	r3, #1
 800b618:	d103      	bne.n	800b622 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 ff80 	bl	800c520 <vPortFree>
	}
 800b620:	e00f      	b.n	800b642 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b628:	2b02      	cmp	r3, #2
 800b62a:	d00a      	beq.n	800b642 <prvDeleteTCB+0x56>
	__asm volatile
 800b62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b630:	f383 8811 	msr	BASEPRI, r3
 800b634:	f3bf 8f6f 	isb	sy
 800b638:	f3bf 8f4f 	dsb	sy
 800b63c:	60fb      	str	r3, [r7, #12]
}
 800b63e:	bf00      	nop
 800b640:	e7fe      	b.n	800b640 <prvDeleteTCB+0x54>
	}
 800b642:	bf00      	nop
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
	...

0800b64c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b652:	4b0c      	ldr	r3, [pc, #48]	; (800b684 <prvResetNextTaskUnblockTime+0x38>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d104      	bne.n	800b666 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b65c:	4b0a      	ldr	r3, [pc, #40]	; (800b688 <prvResetNextTaskUnblockTime+0x3c>)
 800b65e:	f04f 32ff 	mov.w	r2, #4294967295
 800b662:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b664:	e008      	b.n	800b678 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b666:	4b07      	ldr	r3, [pc, #28]	; (800b684 <prvResetNextTaskUnblockTime+0x38>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	68db      	ldr	r3, [r3, #12]
 800b66e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	4a04      	ldr	r2, [pc, #16]	; (800b688 <prvResetNextTaskUnblockTime+0x3c>)
 800b676:	6013      	str	r3, [r2, #0]
}
 800b678:	bf00      	nop
 800b67a:	370c      	adds	r7, #12
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr
 800b684:	200016b4 	.word	0x200016b4
 800b688:	2000171c 	.word	0x2000171c

0800b68c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b68c:	b480      	push	{r7}
 800b68e:	b083      	sub	sp, #12
 800b690:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b692:	4b0b      	ldr	r3, [pc, #44]	; (800b6c0 <xTaskGetSchedulerState+0x34>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d102      	bne.n	800b6a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b69a:	2301      	movs	r3, #1
 800b69c:	607b      	str	r3, [r7, #4]
 800b69e:	e008      	b.n	800b6b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6a0:	4b08      	ldr	r3, [pc, #32]	; (800b6c4 <xTaskGetSchedulerState+0x38>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d102      	bne.n	800b6ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b6a8:	2302      	movs	r3, #2
 800b6aa:	607b      	str	r3, [r7, #4]
 800b6ac:	e001      	b.n	800b6b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b6b2:	687b      	ldr	r3, [r7, #4]
	}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr
 800b6c0:	20001708 	.word	0x20001708
 800b6c4:	20001724 	.word	0x20001724

0800b6c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b086      	sub	sp, #24
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d056      	beq.n	800b78c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b6de:	4b2e      	ldr	r3, [pc, #184]	; (800b798 <xTaskPriorityDisinherit+0xd0>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	693a      	ldr	r2, [r7, #16]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d00a      	beq.n	800b6fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ec:	f383 8811 	msr	BASEPRI, r3
 800b6f0:	f3bf 8f6f 	isb	sy
 800b6f4:	f3bf 8f4f 	dsb	sy
 800b6f8:	60fb      	str	r3, [r7, #12]
}
 800b6fa:	bf00      	nop
 800b6fc:	e7fe      	b.n	800b6fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b702:	2b00      	cmp	r3, #0
 800b704:	d10a      	bne.n	800b71c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70a:	f383 8811 	msr	BASEPRI, r3
 800b70e:	f3bf 8f6f 	isb	sy
 800b712:	f3bf 8f4f 	dsb	sy
 800b716:	60bb      	str	r3, [r7, #8]
}
 800b718:	bf00      	nop
 800b71a:	e7fe      	b.n	800b71a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b720:	1e5a      	subs	r2, r3, #1
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b72e:	429a      	cmp	r2, r3
 800b730:	d02c      	beq.n	800b78c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b736:	2b00      	cmp	r3, #0
 800b738:	d128      	bne.n	800b78c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	3304      	adds	r3, #4
 800b73e:	4618      	mov	r0, r3
 800b740:	f7fe fb68 	bl	8009e14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b750:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b75c:	4b0f      	ldr	r3, [pc, #60]	; (800b79c <xTaskPriorityDisinherit+0xd4>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	429a      	cmp	r2, r3
 800b762:	d903      	bls.n	800b76c <xTaskPriorityDisinherit+0xa4>
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b768:	4a0c      	ldr	r2, [pc, #48]	; (800b79c <xTaskPriorityDisinherit+0xd4>)
 800b76a:	6013      	str	r3, [r2, #0]
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b770:	4613      	mov	r3, r2
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	4413      	add	r3, r2
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	4a09      	ldr	r2, [pc, #36]	; (800b7a0 <xTaskPriorityDisinherit+0xd8>)
 800b77a:	441a      	add	r2, r3
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	3304      	adds	r3, #4
 800b780:	4619      	mov	r1, r3
 800b782:	4610      	mov	r0, r2
 800b784:	f7fe fae9 	bl	8009d5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b788:	2301      	movs	r3, #1
 800b78a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b78c:	697b      	ldr	r3, [r7, #20]
	}
 800b78e:	4618      	mov	r0, r3
 800b790:	3718      	adds	r7, #24
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	20001228 	.word	0x20001228
 800b79c:	20001704 	.word	0x20001704
 800b7a0:	2000122c 	.word	0x2000122c

0800b7a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b7ae:	4b21      	ldr	r3, [pc, #132]	; (800b834 <prvAddCurrentTaskToDelayedList+0x90>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7b4:	4b20      	ldr	r3, [pc, #128]	; (800b838 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	3304      	adds	r3, #4
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7fe fb2a 	bl	8009e14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7c6:	d10a      	bne.n	800b7de <prvAddCurrentTaskToDelayedList+0x3a>
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d007      	beq.n	800b7de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7ce:	4b1a      	ldr	r3, [pc, #104]	; (800b838 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	3304      	adds	r3, #4
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	4819      	ldr	r0, [pc, #100]	; (800b83c <prvAddCurrentTaskToDelayedList+0x98>)
 800b7d8:	f7fe fabf 	bl	8009d5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b7dc:	e026      	b.n	800b82c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b7de:	68fa      	ldr	r2, [r7, #12]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b7e6:	4b14      	ldr	r3, [pc, #80]	; (800b838 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	68ba      	ldr	r2, [r7, #8]
 800b7ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b7ee:	68ba      	ldr	r2, [r7, #8]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d209      	bcs.n	800b80a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7f6:	4b12      	ldr	r3, [pc, #72]	; (800b840 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	4b0f      	ldr	r3, [pc, #60]	; (800b838 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	3304      	adds	r3, #4
 800b800:	4619      	mov	r1, r3
 800b802:	4610      	mov	r0, r2
 800b804:	f7fe facd 	bl	8009da2 <vListInsert>
}
 800b808:	e010      	b.n	800b82c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b80a:	4b0e      	ldr	r3, [pc, #56]	; (800b844 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	4b0a      	ldr	r3, [pc, #40]	; (800b838 <prvAddCurrentTaskToDelayedList+0x94>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	3304      	adds	r3, #4
 800b814:	4619      	mov	r1, r3
 800b816:	4610      	mov	r0, r2
 800b818:	f7fe fac3 	bl	8009da2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b81c:	4b0a      	ldr	r3, [pc, #40]	; (800b848 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	68ba      	ldr	r2, [r7, #8]
 800b822:	429a      	cmp	r2, r3
 800b824:	d202      	bcs.n	800b82c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b826:	4a08      	ldr	r2, [pc, #32]	; (800b848 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	6013      	str	r3, [r2, #0]
}
 800b82c:	bf00      	nop
 800b82e:	3710      	adds	r7, #16
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}
 800b834:	20001700 	.word	0x20001700
 800b838:	20001228 	.word	0x20001228
 800b83c:	200016e8 	.word	0x200016e8
 800b840:	200016b8 	.word	0x200016b8
 800b844:	200016b4 	.word	0x200016b4
 800b848:	2000171c 	.word	0x2000171c

0800b84c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b08a      	sub	sp, #40	; 0x28
 800b850:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b852:	2300      	movs	r3, #0
 800b854:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b856:	f000 fb07 	bl	800be68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b85a:	4b1c      	ldr	r3, [pc, #112]	; (800b8cc <xTimerCreateTimerTask+0x80>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d021      	beq.n	800b8a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b862:	2300      	movs	r3, #0
 800b864:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b866:	2300      	movs	r3, #0
 800b868:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b86a:	1d3a      	adds	r2, r7, #4
 800b86c:	f107 0108 	add.w	r1, r7, #8
 800b870:	f107 030c 	add.w	r3, r7, #12
 800b874:	4618      	mov	r0, r3
 800b876:	f7fe fa29 	bl	8009ccc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b87a:	6879      	ldr	r1, [r7, #4]
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	68fa      	ldr	r2, [r7, #12]
 800b880:	9202      	str	r2, [sp, #8]
 800b882:	9301      	str	r3, [sp, #4]
 800b884:	2302      	movs	r3, #2
 800b886:	9300      	str	r3, [sp, #0]
 800b888:	2300      	movs	r3, #0
 800b88a:	460a      	mov	r2, r1
 800b88c:	4910      	ldr	r1, [pc, #64]	; (800b8d0 <xTimerCreateTimerTask+0x84>)
 800b88e:	4811      	ldr	r0, [pc, #68]	; (800b8d4 <xTimerCreateTimerTask+0x88>)
 800b890:	f7ff f8de 	bl	800aa50 <xTaskCreateStatic>
 800b894:	4603      	mov	r3, r0
 800b896:	4a10      	ldr	r2, [pc, #64]	; (800b8d8 <xTimerCreateTimerTask+0x8c>)
 800b898:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b89a:	4b0f      	ldr	r3, [pc, #60]	; (800b8d8 <xTimerCreateTimerTask+0x8c>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d001      	beq.n	800b8a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10a      	bne.n	800b8c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b0:	f383 8811 	msr	BASEPRI, r3
 800b8b4:	f3bf 8f6f 	isb	sy
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	613b      	str	r3, [r7, #16]
}
 800b8be:	bf00      	nop
 800b8c0:	e7fe      	b.n	800b8c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b8c2:	697b      	ldr	r3, [r7, #20]
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3718      	adds	r7, #24
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}
 800b8cc:	20001758 	.word	0x20001758
 800b8d0:	0800c828 	.word	0x0800c828
 800b8d4:	0800ba11 	.word	0x0800ba11
 800b8d8:	2000175c 	.word	0x2000175c

0800b8dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b08a      	sub	sp, #40	; 0x28
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	607a      	str	r2, [r7, #4]
 800b8e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d10a      	bne.n	800b90a <xTimerGenericCommand+0x2e>
	__asm volatile
 800b8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	623b      	str	r3, [r7, #32]
}
 800b906:	bf00      	nop
 800b908:	e7fe      	b.n	800b908 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b90a:	4b1a      	ldr	r3, [pc, #104]	; (800b974 <xTimerGenericCommand+0x98>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d02a      	beq.n	800b968 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	2b05      	cmp	r3, #5
 800b922:	dc18      	bgt.n	800b956 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b924:	f7ff feb2 	bl	800b68c <xTaskGetSchedulerState>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b02      	cmp	r3, #2
 800b92c:	d109      	bne.n	800b942 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b92e:	4b11      	ldr	r3, [pc, #68]	; (800b974 <xTimerGenericCommand+0x98>)
 800b930:	6818      	ldr	r0, [r3, #0]
 800b932:	f107 0110 	add.w	r1, r7, #16
 800b936:	2300      	movs	r3, #0
 800b938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b93a:	f7fe fb99 	bl	800a070 <xQueueGenericSend>
 800b93e:	6278      	str	r0, [r7, #36]	; 0x24
 800b940:	e012      	b.n	800b968 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b942:	4b0c      	ldr	r3, [pc, #48]	; (800b974 <xTimerGenericCommand+0x98>)
 800b944:	6818      	ldr	r0, [r3, #0]
 800b946:	f107 0110 	add.w	r1, r7, #16
 800b94a:	2300      	movs	r3, #0
 800b94c:	2200      	movs	r2, #0
 800b94e:	f7fe fb8f 	bl	800a070 <xQueueGenericSend>
 800b952:	6278      	str	r0, [r7, #36]	; 0x24
 800b954:	e008      	b.n	800b968 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b956:	4b07      	ldr	r3, [pc, #28]	; (800b974 <xTimerGenericCommand+0x98>)
 800b958:	6818      	ldr	r0, [r3, #0]
 800b95a:	f107 0110 	add.w	r1, r7, #16
 800b95e:	2300      	movs	r3, #0
 800b960:	683a      	ldr	r2, [r7, #0]
 800b962:	f7fe fc83 	bl	800a26c <xQueueGenericSendFromISR>
 800b966:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3728      	adds	r7, #40	; 0x28
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	20001758 	.word	0x20001758

0800b978 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b088      	sub	sp, #32
 800b97c:	af02      	add	r7, sp, #8
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b982:	4b22      	ldr	r3, [pc, #136]	; (800ba0c <prvProcessExpiredTimer+0x94>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	68db      	ldr	r3, [r3, #12]
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	3304      	adds	r3, #4
 800b990:	4618      	mov	r0, r3
 800b992:	f7fe fa3f 	bl	8009e14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b99c:	f003 0304 	and.w	r3, r3, #4
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d022      	beq.n	800b9ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	699a      	ldr	r2, [r3, #24]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	18d1      	adds	r1, r2, r3
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	683a      	ldr	r2, [r7, #0]
 800b9b0:	6978      	ldr	r0, [r7, #20]
 800b9b2:	f000 f8d1 	bl	800bb58 <prvInsertTimerInActiveList>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d01f      	beq.n	800b9fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b9bc:	2300      	movs	r3, #0
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	6978      	ldr	r0, [r7, #20]
 800b9c8:	f7ff ff88 	bl	800b8dc <xTimerGenericCommand>
 800b9cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d113      	bne.n	800b9fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d8:	f383 8811 	msr	BASEPRI, r3
 800b9dc:	f3bf 8f6f 	isb	sy
 800b9e0:	f3bf 8f4f 	dsb	sy
 800b9e4:	60fb      	str	r3, [r7, #12]
}
 800b9e6:	bf00      	nop
 800b9e8:	e7fe      	b.n	800b9e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9f0:	f023 0301 	bic.w	r3, r3, #1
 800b9f4:	b2da      	uxtb	r2, r3
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	6a1b      	ldr	r3, [r3, #32]
 800ba00:	6978      	ldr	r0, [r7, #20]
 800ba02:	4798      	blx	r3
}
 800ba04:	bf00      	nop
 800ba06:	3718      	adds	r7, #24
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	20001750 	.word	0x20001750

0800ba10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba18:	f107 0308 	add.w	r3, r7, #8
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f000 f857 	bl	800bad0 <prvGetNextExpireTime>
 800ba22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	4619      	mov	r1, r3
 800ba28:	68f8      	ldr	r0, [r7, #12]
 800ba2a:	f000 f803 	bl	800ba34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ba2e:	f000 f8d5 	bl	800bbdc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba32:	e7f1      	b.n	800ba18 <prvTimerTask+0x8>

0800ba34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ba3e:	f7ff fa43 	bl	800aec8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba42:	f107 0308 	add.w	r3, r7, #8
 800ba46:	4618      	mov	r0, r3
 800ba48:	f000 f866 	bl	800bb18 <prvSampleTimeNow>
 800ba4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d130      	bne.n	800bab6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d10a      	bne.n	800ba70 <prvProcessTimerOrBlockTask+0x3c>
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d806      	bhi.n	800ba70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ba62:	f7ff fa3f 	bl	800aee4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ba66:	68f9      	ldr	r1, [r7, #12]
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f7ff ff85 	bl	800b978 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ba6e:	e024      	b.n	800baba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d008      	beq.n	800ba88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ba76:	4b13      	ldr	r3, [pc, #76]	; (800bac4 <prvProcessTimerOrBlockTask+0x90>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d101      	bne.n	800ba84 <prvProcessTimerOrBlockTask+0x50>
 800ba80:	2301      	movs	r3, #1
 800ba82:	e000      	b.n	800ba86 <prvProcessTimerOrBlockTask+0x52>
 800ba84:	2300      	movs	r3, #0
 800ba86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ba88:	4b0f      	ldr	r3, [pc, #60]	; (800bac8 <prvProcessTimerOrBlockTask+0x94>)
 800ba8a:	6818      	ldr	r0, [r3, #0]
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	1ad3      	subs	r3, r2, r3
 800ba92:	683a      	ldr	r2, [r7, #0]
 800ba94:	4619      	mov	r1, r3
 800ba96:	f7fe ffa7 	bl	800a9e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ba9a:	f7ff fa23 	bl	800aee4 <xTaskResumeAll>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d10a      	bne.n	800baba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800baa4:	4b09      	ldr	r3, [pc, #36]	; (800bacc <prvProcessTimerOrBlockTask+0x98>)
 800baa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baaa:	601a      	str	r2, [r3, #0]
 800baac:	f3bf 8f4f 	dsb	sy
 800bab0:	f3bf 8f6f 	isb	sy
}
 800bab4:	e001      	b.n	800baba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bab6:	f7ff fa15 	bl	800aee4 <xTaskResumeAll>
}
 800baba:	bf00      	nop
 800babc:	3710      	adds	r7, #16
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	20001754 	.word	0x20001754
 800bac8:	20001758 	.word	0x20001758
 800bacc:	e000ed04 	.word	0xe000ed04

0800bad0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bad0:	b480      	push	{r7}
 800bad2:	b085      	sub	sp, #20
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bad8:	4b0e      	ldr	r3, [pc, #56]	; (800bb14 <prvGetNextExpireTime+0x44>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d101      	bne.n	800bae6 <prvGetNextExpireTime+0x16>
 800bae2:	2201      	movs	r2, #1
 800bae4:	e000      	b.n	800bae8 <prvGetNextExpireTime+0x18>
 800bae6:	2200      	movs	r2, #0
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d105      	bne.n	800bb00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800baf4:	4b07      	ldr	r3, [pc, #28]	; (800bb14 <prvGetNextExpireTime+0x44>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	68db      	ldr	r3, [r3, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	60fb      	str	r3, [r7, #12]
 800bafe:	e001      	b.n	800bb04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bb00:	2300      	movs	r3, #0
 800bb02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bb04:	68fb      	ldr	r3, [r7, #12]
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3714      	adds	r7, #20
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	20001750 	.word	0x20001750

0800bb18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bb20:	f7ff fa7e 	bl	800b020 <xTaskGetTickCount>
 800bb24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bb26:	4b0b      	ldr	r3, [pc, #44]	; (800bb54 <prvSampleTimeNow+0x3c>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	68fa      	ldr	r2, [r7, #12]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d205      	bcs.n	800bb3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bb30:	f000 f936 	bl	800bda0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2201      	movs	r2, #1
 800bb38:	601a      	str	r2, [r3, #0]
 800bb3a:	e002      	b.n	800bb42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bb42:	4a04      	ldr	r2, [pc, #16]	; (800bb54 <prvSampleTimeNow+0x3c>)
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bb48:	68fb      	ldr	r3, [r7, #12]
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3710      	adds	r7, #16
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	20001760 	.word	0x20001760

0800bb58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b086      	sub	sp, #24
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	60b9      	str	r1, [r7, #8]
 800bb62:	607a      	str	r2, [r7, #4]
 800bb64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bb66:	2300      	movs	r3, #0
 800bb68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	68ba      	ldr	r2, [r7, #8]
 800bb6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	68fa      	ldr	r2, [r7, #12]
 800bb74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bb76:	68ba      	ldr	r2, [r7, #8]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d812      	bhi.n	800bba4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	1ad2      	subs	r2, r2, r3
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	699b      	ldr	r3, [r3, #24]
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d302      	bcc.n	800bb92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	617b      	str	r3, [r7, #20]
 800bb90:	e01b      	b.n	800bbca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bb92:	4b10      	ldr	r3, [pc, #64]	; (800bbd4 <prvInsertTimerInActiveList+0x7c>)
 800bb94:	681a      	ldr	r2, [r3, #0]
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	3304      	adds	r3, #4
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	4610      	mov	r0, r2
 800bb9e:	f7fe f900 	bl	8009da2 <vListInsert>
 800bba2:	e012      	b.n	800bbca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bba4:	687a      	ldr	r2, [r7, #4]
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d206      	bcs.n	800bbba <prvInsertTimerInActiveList+0x62>
 800bbac:	68ba      	ldr	r2, [r7, #8]
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d302      	bcc.n	800bbba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	617b      	str	r3, [r7, #20]
 800bbb8:	e007      	b.n	800bbca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bbba:	4b07      	ldr	r3, [pc, #28]	; (800bbd8 <prvInsertTimerInActiveList+0x80>)
 800bbbc:	681a      	ldr	r2, [r3, #0]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	3304      	adds	r3, #4
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	4610      	mov	r0, r2
 800bbc6:	f7fe f8ec 	bl	8009da2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bbca:	697b      	ldr	r3, [r7, #20]
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3718      	adds	r7, #24
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	20001754 	.word	0x20001754
 800bbd8:	20001750 	.word	0x20001750

0800bbdc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b08e      	sub	sp, #56	; 0x38
 800bbe0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bbe2:	e0ca      	b.n	800bd7a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	da18      	bge.n	800bc1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bbea:	1d3b      	adds	r3, r7, #4
 800bbec:	3304      	adds	r3, #4
 800bbee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d10a      	bne.n	800bc0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfa:	f383 8811 	msr	BASEPRI, r3
 800bbfe:	f3bf 8f6f 	isb	sy
 800bc02:	f3bf 8f4f 	dsb	sy
 800bc06:	61fb      	str	r3, [r7, #28]
}
 800bc08:	bf00      	nop
 800bc0a:	e7fe      	b.n	800bc0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc12:	6850      	ldr	r0, [r2, #4]
 800bc14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc16:	6892      	ldr	r2, [r2, #8]
 800bc18:	4611      	mov	r1, r2
 800bc1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	f2c0 80ab 	blt.w	800bd7a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc2a:	695b      	ldr	r3, [r3, #20]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d004      	beq.n	800bc3a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc32:	3304      	adds	r3, #4
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7fe f8ed 	bl	8009e14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc3a:	463b      	mov	r3, r7
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f7ff ff6b 	bl	800bb18 <prvSampleTimeNow>
 800bc42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2b09      	cmp	r3, #9
 800bc48:	f200 8096 	bhi.w	800bd78 <prvProcessReceivedCommands+0x19c>
 800bc4c:	a201      	add	r2, pc, #4	; (adr r2, 800bc54 <prvProcessReceivedCommands+0x78>)
 800bc4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc52:	bf00      	nop
 800bc54:	0800bc7d 	.word	0x0800bc7d
 800bc58:	0800bc7d 	.word	0x0800bc7d
 800bc5c:	0800bc7d 	.word	0x0800bc7d
 800bc60:	0800bcf1 	.word	0x0800bcf1
 800bc64:	0800bd05 	.word	0x0800bd05
 800bc68:	0800bd4f 	.word	0x0800bd4f
 800bc6c:	0800bc7d 	.word	0x0800bc7d
 800bc70:	0800bc7d 	.word	0x0800bc7d
 800bc74:	0800bcf1 	.word	0x0800bcf1
 800bc78:	0800bd05 	.word	0x0800bd05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc82:	f043 0301 	orr.w	r3, r3, #1
 800bc86:	b2da      	uxtb	r2, r3
 800bc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bc8e:	68ba      	ldr	r2, [r7, #8]
 800bc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc92:	699b      	ldr	r3, [r3, #24]
 800bc94:	18d1      	adds	r1, r2, r3
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc9c:	f7ff ff5c 	bl	800bb58 <prvInsertTimerInActiveList>
 800bca0:	4603      	mov	r3, r0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d069      	beq.n	800bd7a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca8:	6a1b      	ldr	r3, [r3, #32]
 800bcaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcb4:	f003 0304 	and.w	r3, r3, #4
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d05e      	beq.n	800bd7a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bcbc:	68ba      	ldr	r2, [r7, #8]
 800bcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc0:	699b      	ldr	r3, [r3, #24]
 800bcc2:	441a      	add	r2, r3
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	9300      	str	r3, [sp, #0]
 800bcc8:	2300      	movs	r3, #0
 800bcca:	2100      	movs	r1, #0
 800bccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcce:	f7ff fe05 	bl	800b8dc <xTimerGenericCommand>
 800bcd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bcd4:	6a3b      	ldr	r3, [r7, #32]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d14f      	bne.n	800bd7a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bcda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcde:	f383 8811 	msr	BASEPRI, r3
 800bce2:	f3bf 8f6f 	isb	sy
 800bce6:	f3bf 8f4f 	dsb	sy
 800bcea:	61bb      	str	r3, [r7, #24]
}
 800bcec:	bf00      	nop
 800bcee:	e7fe      	b.n	800bcee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcf6:	f023 0301 	bic.w	r3, r3, #1
 800bcfa:	b2da      	uxtb	r2, r3
 800bcfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bd02:	e03a      	b.n	800bd7a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd0a:	f043 0301 	orr.w	r3, r3, #1
 800bd0e:	b2da      	uxtb	r2, r3
 800bd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bd16:	68ba      	ldr	r2, [r7, #8]
 800bd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1e:	699b      	ldr	r3, [r3, #24]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d10a      	bne.n	800bd3a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bd24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd28:	f383 8811 	msr	BASEPRI, r3
 800bd2c:	f3bf 8f6f 	isb	sy
 800bd30:	f3bf 8f4f 	dsb	sy
 800bd34:	617b      	str	r3, [r7, #20]
}
 800bd36:	bf00      	nop
 800bd38:	e7fe      	b.n	800bd38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bd3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3c:	699a      	ldr	r2, [r3, #24]
 800bd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd40:	18d1      	adds	r1, r2, r3
 800bd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd48:	f7ff ff06 	bl	800bb58 <prvInsertTimerInActiveList>
					break;
 800bd4c:	e015      	b.n	800bd7a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd54:	f003 0302 	and.w	r3, r3, #2
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d103      	bne.n	800bd64 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bd5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd5e:	f000 fbdf 	bl	800c520 <vPortFree>
 800bd62:	e00a      	b.n	800bd7a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd6a:	f023 0301 	bic.w	r3, r3, #1
 800bd6e:	b2da      	uxtb	r2, r3
 800bd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bd76:	e000      	b.n	800bd7a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800bd78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd7a:	4b08      	ldr	r3, [pc, #32]	; (800bd9c <prvProcessReceivedCommands+0x1c0>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	1d39      	adds	r1, r7, #4
 800bd80:	2200      	movs	r2, #0
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7fe fb0e 	bl	800a3a4 <xQueueReceive>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	f47f af2a 	bne.w	800bbe4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bd90:	bf00      	nop
 800bd92:	bf00      	nop
 800bd94:	3730      	adds	r7, #48	; 0x30
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	20001758 	.word	0x20001758

0800bda0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b088      	sub	sp, #32
 800bda4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bda6:	e048      	b.n	800be3a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bda8:	4b2d      	ldr	r3, [pc, #180]	; (800be60 <prvSwitchTimerLists+0xc0>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdb2:	4b2b      	ldr	r3, [pc, #172]	; (800be60 <prvSwitchTimerLists+0xc0>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	68db      	ldr	r3, [r3, #12]
 800bdb8:	68db      	ldr	r3, [r3, #12]
 800bdba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	3304      	adds	r3, #4
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7fe f827 	bl	8009e14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	6a1b      	ldr	r3, [r3, #32]
 800bdca:	68f8      	ldr	r0, [r7, #12]
 800bdcc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdd4:	f003 0304 	and.w	r3, r3, #4
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d02e      	beq.n	800be3a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	699b      	ldr	r3, [r3, #24]
 800bde0:	693a      	ldr	r2, [r7, #16]
 800bde2:	4413      	add	r3, r2
 800bde4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bde6:	68ba      	ldr	r2, [r7, #8]
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d90e      	bls.n	800be0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	68ba      	ldr	r2, [r7, #8]
 800bdf2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bdfa:	4b19      	ldr	r3, [pc, #100]	; (800be60 <prvSwitchTimerLists+0xc0>)
 800bdfc:	681a      	ldr	r2, [r3, #0]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	3304      	adds	r3, #4
 800be02:	4619      	mov	r1, r3
 800be04:	4610      	mov	r0, r2
 800be06:	f7fd ffcc 	bl	8009da2 <vListInsert>
 800be0a:	e016      	b.n	800be3a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be0c:	2300      	movs	r3, #0
 800be0e:	9300      	str	r3, [sp, #0]
 800be10:	2300      	movs	r3, #0
 800be12:	693a      	ldr	r2, [r7, #16]
 800be14:	2100      	movs	r1, #0
 800be16:	68f8      	ldr	r0, [r7, #12]
 800be18:	f7ff fd60 	bl	800b8dc <xTimerGenericCommand>
 800be1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d10a      	bne.n	800be3a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800be24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be28:	f383 8811 	msr	BASEPRI, r3
 800be2c:	f3bf 8f6f 	isb	sy
 800be30:	f3bf 8f4f 	dsb	sy
 800be34:	603b      	str	r3, [r7, #0]
}
 800be36:	bf00      	nop
 800be38:	e7fe      	b.n	800be38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be3a:	4b09      	ldr	r3, [pc, #36]	; (800be60 <prvSwitchTimerLists+0xc0>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d1b1      	bne.n	800bda8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800be44:	4b06      	ldr	r3, [pc, #24]	; (800be60 <prvSwitchTimerLists+0xc0>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800be4a:	4b06      	ldr	r3, [pc, #24]	; (800be64 <prvSwitchTimerLists+0xc4>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4a04      	ldr	r2, [pc, #16]	; (800be60 <prvSwitchTimerLists+0xc0>)
 800be50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800be52:	4a04      	ldr	r2, [pc, #16]	; (800be64 <prvSwitchTimerLists+0xc4>)
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	6013      	str	r3, [r2, #0]
}
 800be58:	bf00      	nop
 800be5a:	3718      	adds	r7, #24
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}
 800be60:	20001750 	.word	0x20001750
 800be64:	20001754 	.word	0x20001754

0800be68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800be6e:	f000 f969 	bl	800c144 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800be72:	4b15      	ldr	r3, [pc, #84]	; (800bec8 <prvCheckForValidListAndQueue+0x60>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d120      	bne.n	800bebc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800be7a:	4814      	ldr	r0, [pc, #80]	; (800becc <prvCheckForValidListAndQueue+0x64>)
 800be7c:	f7fd ff40 	bl	8009d00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800be80:	4813      	ldr	r0, [pc, #76]	; (800bed0 <prvCheckForValidListAndQueue+0x68>)
 800be82:	f7fd ff3d 	bl	8009d00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800be86:	4b13      	ldr	r3, [pc, #76]	; (800bed4 <prvCheckForValidListAndQueue+0x6c>)
 800be88:	4a10      	ldr	r2, [pc, #64]	; (800becc <prvCheckForValidListAndQueue+0x64>)
 800be8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800be8c:	4b12      	ldr	r3, [pc, #72]	; (800bed8 <prvCheckForValidListAndQueue+0x70>)
 800be8e:	4a10      	ldr	r2, [pc, #64]	; (800bed0 <prvCheckForValidListAndQueue+0x68>)
 800be90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800be92:	2300      	movs	r3, #0
 800be94:	9300      	str	r3, [sp, #0]
 800be96:	4b11      	ldr	r3, [pc, #68]	; (800bedc <prvCheckForValidListAndQueue+0x74>)
 800be98:	4a11      	ldr	r2, [pc, #68]	; (800bee0 <prvCheckForValidListAndQueue+0x78>)
 800be9a:	2110      	movs	r1, #16
 800be9c:	200a      	movs	r0, #10
 800be9e:	f7fe f84b 	bl	8009f38 <xQueueGenericCreateStatic>
 800bea2:	4603      	mov	r3, r0
 800bea4:	4a08      	ldr	r2, [pc, #32]	; (800bec8 <prvCheckForValidListAndQueue+0x60>)
 800bea6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bea8:	4b07      	ldr	r3, [pc, #28]	; (800bec8 <prvCheckForValidListAndQueue+0x60>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d005      	beq.n	800bebc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800beb0:	4b05      	ldr	r3, [pc, #20]	; (800bec8 <prvCheckForValidListAndQueue+0x60>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	490b      	ldr	r1, [pc, #44]	; (800bee4 <prvCheckForValidListAndQueue+0x7c>)
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7fe fd6c 	bl	800a994 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bebc:	f000 f972 	bl	800c1a4 <vPortExitCritical>
}
 800bec0:	bf00      	nop
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
 800bec6:	bf00      	nop
 800bec8:	20001758 	.word	0x20001758
 800becc:	20001728 	.word	0x20001728
 800bed0:	2000173c 	.word	0x2000173c
 800bed4:	20001750 	.word	0x20001750
 800bed8:	20001754 	.word	0x20001754
 800bedc:	20001804 	.word	0x20001804
 800bee0:	20001764 	.word	0x20001764
 800bee4:	0800c830 	.word	0x0800c830

0800bee8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bee8:	b480      	push	{r7}
 800beea:	b085      	sub	sp, #20
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	3b04      	subs	r3, #4
 800bef8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bf00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	3b04      	subs	r3, #4
 800bf06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	f023 0201 	bic.w	r2, r3, #1
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	3b04      	subs	r3, #4
 800bf16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bf18:	4a0c      	ldr	r2, [pc, #48]	; (800bf4c <pxPortInitialiseStack+0x64>)
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	3b14      	subs	r3, #20
 800bf22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	3b04      	subs	r3, #4
 800bf2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f06f 0202 	mvn.w	r2, #2
 800bf36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	3b20      	subs	r3, #32
 800bf3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3714      	adds	r7, #20
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr
 800bf4c:	0800bf51 	.word	0x0800bf51

0800bf50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bf50:	b480      	push	{r7}
 800bf52:	b085      	sub	sp, #20
 800bf54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bf56:	2300      	movs	r3, #0
 800bf58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bf5a:	4b12      	ldr	r3, [pc, #72]	; (800bfa4 <prvTaskExitError+0x54>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf62:	d00a      	beq.n	800bf7a <prvTaskExitError+0x2a>
	__asm volatile
 800bf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf68:	f383 8811 	msr	BASEPRI, r3
 800bf6c:	f3bf 8f6f 	isb	sy
 800bf70:	f3bf 8f4f 	dsb	sy
 800bf74:	60fb      	str	r3, [r7, #12]
}
 800bf76:	bf00      	nop
 800bf78:	e7fe      	b.n	800bf78 <prvTaskExitError+0x28>
	__asm volatile
 800bf7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7e:	f383 8811 	msr	BASEPRI, r3
 800bf82:	f3bf 8f6f 	isb	sy
 800bf86:	f3bf 8f4f 	dsb	sy
 800bf8a:	60bb      	str	r3, [r7, #8]
}
 800bf8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bf8e:	bf00      	nop
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d0fc      	beq.n	800bf90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf96:	bf00      	nop
 800bf98:	bf00      	nop
 800bf9a:	3714      	adds	r7, #20
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr
 800bfa4:	20000034 	.word	0x20000034
	...

0800bfb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bfb0:	4b07      	ldr	r3, [pc, #28]	; (800bfd0 <pxCurrentTCBConst2>)
 800bfb2:	6819      	ldr	r1, [r3, #0]
 800bfb4:	6808      	ldr	r0, [r1, #0]
 800bfb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfba:	f380 8809 	msr	PSP, r0
 800bfbe:	f3bf 8f6f 	isb	sy
 800bfc2:	f04f 0000 	mov.w	r0, #0
 800bfc6:	f380 8811 	msr	BASEPRI, r0
 800bfca:	4770      	bx	lr
 800bfcc:	f3af 8000 	nop.w

0800bfd0 <pxCurrentTCBConst2>:
 800bfd0:	20001228 	.word	0x20001228
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bfd4:	bf00      	nop
 800bfd6:	bf00      	nop

0800bfd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bfd8:	4808      	ldr	r0, [pc, #32]	; (800bffc <prvPortStartFirstTask+0x24>)
 800bfda:	6800      	ldr	r0, [r0, #0]
 800bfdc:	6800      	ldr	r0, [r0, #0]
 800bfde:	f380 8808 	msr	MSP, r0
 800bfe2:	f04f 0000 	mov.w	r0, #0
 800bfe6:	f380 8814 	msr	CONTROL, r0
 800bfea:	b662      	cpsie	i
 800bfec:	b661      	cpsie	f
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	f3bf 8f6f 	isb	sy
 800bff6:	df00      	svc	0
 800bff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bffa:	bf00      	nop
 800bffc:	e000ed08 	.word	0xe000ed08

0800c000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b086      	sub	sp, #24
 800c004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c006:	4b46      	ldr	r3, [pc, #280]	; (800c120 <xPortStartScheduler+0x120>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4a46      	ldr	r2, [pc, #280]	; (800c124 <xPortStartScheduler+0x124>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d10a      	bne.n	800c026 <xPortStartScheduler+0x26>
	__asm volatile
 800c010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c014:	f383 8811 	msr	BASEPRI, r3
 800c018:	f3bf 8f6f 	isb	sy
 800c01c:	f3bf 8f4f 	dsb	sy
 800c020:	613b      	str	r3, [r7, #16]
}
 800c022:	bf00      	nop
 800c024:	e7fe      	b.n	800c024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c026:	4b3e      	ldr	r3, [pc, #248]	; (800c120 <xPortStartScheduler+0x120>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4a3f      	ldr	r2, [pc, #252]	; (800c128 <xPortStartScheduler+0x128>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d10a      	bne.n	800c046 <xPortStartScheduler+0x46>
	__asm volatile
 800c030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c034:	f383 8811 	msr	BASEPRI, r3
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	60fb      	str	r3, [r7, #12]
}
 800c042:	bf00      	nop
 800c044:	e7fe      	b.n	800c044 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c046:	4b39      	ldr	r3, [pc, #228]	; (800c12c <xPortStartScheduler+0x12c>)
 800c048:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	22ff      	movs	r2, #255	; 0xff
 800c056:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c060:	78fb      	ldrb	r3, [r7, #3]
 800c062:	b2db      	uxtb	r3, r3
 800c064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c068:	b2da      	uxtb	r2, r3
 800c06a:	4b31      	ldr	r3, [pc, #196]	; (800c130 <xPortStartScheduler+0x130>)
 800c06c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c06e:	4b31      	ldr	r3, [pc, #196]	; (800c134 <xPortStartScheduler+0x134>)
 800c070:	2207      	movs	r2, #7
 800c072:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c074:	e009      	b.n	800c08a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c076:	4b2f      	ldr	r3, [pc, #188]	; (800c134 <xPortStartScheduler+0x134>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	3b01      	subs	r3, #1
 800c07c:	4a2d      	ldr	r2, [pc, #180]	; (800c134 <xPortStartScheduler+0x134>)
 800c07e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c080:	78fb      	ldrb	r3, [r7, #3]
 800c082:	b2db      	uxtb	r3, r3
 800c084:	005b      	lsls	r3, r3, #1
 800c086:	b2db      	uxtb	r3, r3
 800c088:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c08a:	78fb      	ldrb	r3, [r7, #3]
 800c08c:	b2db      	uxtb	r3, r3
 800c08e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c092:	2b80      	cmp	r3, #128	; 0x80
 800c094:	d0ef      	beq.n	800c076 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c096:	4b27      	ldr	r3, [pc, #156]	; (800c134 <xPortStartScheduler+0x134>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f1c3 0307 	rsb	r3, r3, #7
 800c09e:	2b04      	cmp	r3, #4
 800c0a0:	d00a      	beq.n	800c0b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a6:	f383 8811 	msr	BASEPRI, r3
 800c0aa:	f3bf 8f6f 	isb	sy
 800c0ae:	f3bf 8f4f 	dsb	sy
 800c0b2:	60bb      	str	r3, [r7, #8]
}
 800c0b4:	bf00      	nop
 800c0b6:	e7fe      	b.n	800c0b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c0b8:	4b1e      	ldr	r3, [pc, #120]	; (800c134 <xPortStartScheduler+0x134>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	021b      	lsls	r3, r3, #8
 800c0be:	4a1d      	ldr	r2, [pc, #116]	; (800c134 <xPortStartScheduler+0x134>)
 800c0c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c0c2:	4b1c      	ldr	r3, [pc, #112]	; (800c134 <xPortStartScheduler+0x134>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c0ca:	4a1a      	ldr	r2, [pc, #104]	; (800c134 <xPortStartScheduler+0x134>)
 800c0cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	b2da      	uxtb	r2, r3
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c0d6:	4b18      	ldr	r3, [pc, #96]	; (800c138 <xPortStartScheduler+0x138>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4a17      	ldr	r2, [pc, #92]	; (800c138 <xPortStartScheduler+0x138>)
 800c0dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c0e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c0e2:	4b15      	ldr	r3, [pc, #84]	; (800c138 <xPortStartScheduler+0x138>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a14      	ldr	r2, [pc, #80]	; (800c138 <xPortStartScheduler+0x138>)
 800c0e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c0ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c0ee:	f000 f8dd 	bl	800c2ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c0f2:	4b12      	ldr	r3, [pc, #72]	; (800c13c <xPortStartScheduler+0x13c>)
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c0f8:	f000 f8fc 	bl	800c2f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c0fc:	4b10      	ldr	r3, [pc, #64]	; (800c140 <xPortStartScheduler+0x140>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4a0f      	ldr	r2, [pc, #60]	; (800c140 <xPortStartScheduler+0x140>)
 800c102:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c106:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c108:	f7ff ff66 	bl	800bfd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c10c:	f7ff f852 	bl	800b1b4 <vTaskSwitchContext>
	prvTaskExitError();
 800c110:	f7ff ff1e 	bl	800bf50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c114:	2300      	movs	r3, #0
}
 800c116:	4618      	mov	r0, r3
 800c118:	3718      	adds	r7, #24
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	e000ed00 	.word	0xe000ed00
 800c124:	410fc271 	.word	0x410fc271
 800c128:	410fc270 	.word	0x410fc270
 800c12c:	e000e400 	.word	0xe000e400
 800c130:	20001854 	.word	0x20001854
 800c134:	20001858 	.word	0x20001858
 800c138:	e000ed20 	.word	0xe000ed20
 800c13c:	20000034 	.word	0x20000034
 800c140:	e000ef34 	.word	0xe000ef34

0800c144 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
	__asm volatile
 800c14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14e:	f383 8811 	msr	BASEPRI, r3
 800c152:	f3bf 8f6f 	isb	sy
 800c156:	f3bf 8f4f 	dsb	sy
 800c15a:	607b      	str	r3, [r7, #4]
}
 800c15c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c15e:	4b0f      	ldr	r3, [pc, #60]	; (800c19c <vPortEnterCritical+0x58>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	3301      	adds	r3, #1
 800c164:	4a0d      	ldr	r2, [pc, #52]	; (800c19c <vPortEnterCritical+0x58>)
 800c166:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c168:	4b0c      	ldr	r3, [pc, #48]	; (800c19c <vPortEnterCritical+0x58>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	d10f      	bne.n	800c190 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c170:	4b0b      	ldr	r3, [pc, #44]	; (800c1a0 <vPortEnterCritical+0x5c>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	b2db      	uxtb	r3, r3
 800c176:	2b00      	cmp	r3, #0
 800c178:	d00a      	beq.n	800c190 <vPortEnterCritical+0x4c>
	__asm volatile
 800c17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17e:	f383 8811 	msr	BASEPRI, r3
 800c182:	f3bf 8f6f 	isb	sy
 800c186:	f3bf 8f4f 	dsb	sy
 800c18a:	603b      	str	r3, [r7, #0]
}
 800c18c:	bf00      	nop
 800c18e:	e7fe      	b.n	800c18e <vPortEnterCritical+0x4a>
	}
}
 800c190:	bf00      	nop
 800c192:	370c      	adds	r7, #12
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr
 800c19c:	20000034 	.word	0x20000034
 800c1a0:	e000ed04 	.word	0xe000ed04

0800c1a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b083      	sub	sp, #12
 800c1a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c1aa:	4b12      	ldr	r3, [pc, #72]	; (800c1f4 <vPortExitCritical+0x50>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d10a      	bne.n	800c1c8 <vPortExitCritical+0x24>
	__asm volatile
 800c1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b6:	f383 8811 	msr	BASEPRI, r3
 800c1ba:	f3bf 8f6f 	isb	sy
 800c1be:	f3bf 8f4f 	dsb	sy
 800c1c2:	607b      	str	r3, [r7, #4]
}
 800c1c4:	bf00      	nop
 800c1c6:	e7fe      	b.n	800c1c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c1c8:	4b0a      	ldr	r3, [pc, #40]	; (800c1f4 <vPortExitCritical+0x50>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	3b01      	subs	r3, #1
 800c1ce:	4a09      	ldr	r2, [pc, #36]	; (800c1f4 <vPortExitCritical+0x50>)
 800c1d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c1d2:	4b08      	ldr	r3, [pc, #32]	; (800c1f4 <vPortExitCritical+0x50>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d105      	bne.n	800c1e6 <vPortExitCritical+0x42>
 800c1da:	2300      	movs	r3, #0
 800c1dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	f383 8811 	msr	BASEPRI, r3
}
 800c1e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c1e6:	bf00      	nop
 800c1e8:	370c      	adds	r7, #12
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr
 800c1f2:	bf00      	nop
 800c1f4:	20000034 	.word	0x20000034
	...

0800c200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c200:	f3ef 8009 	mrs	r0, PSP
 800c204:	f3bf 8f6f 	isb	sy
 800c208:	4b15      	ldr	r3, [pc, #84]	; (800c260 <pxCurrentTCBConst>)
 800c20a:	681a      	ldr	r2, [r3, #0]
 800c20c:	f01e 0f10 	tst.w	lr, #16
 800c210:	bf08      	it	eq
 800c212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c21a:	6010      	str	r0, [r2, #0]
 800c21c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c220:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c224:	f380 8811 	msr	BASEPRI, r0
 800c228:	f3bf 8f4f 	dsb	sy
 800c22c:	f3bf 8f6f 	isb	sy
 800c230:	f7fe ffc0 	bl	800b1b4 <vTaskSwitchContext>
 800c234:	f04f 0000 	mov.w	r0, #0
 800c238:	f380 8811 	msr	BASEPRI, r0
 800c23c:	bc09      	pop	{r0, r3}
 800c23e:	6819      	ldr	r1, [r3, #0]
 800c240:	6808      	ldr	r0, [r1, #0]
 800c242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c246:	f01e 0f10 	tst.w	lr, #16
 800c24a:	bf08      	it	eq
 800c24c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c250:	f380 8809 	msr	PSP, r0
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	4770      	bx	lr
 800c25a:	bf00      	nop
 800c25c:	f3af 8000 	nop.w

0800c260 <pxCurrentTCBConst>:
 800c260:	20001228 	.word	0x20001228
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c264:	bf00      	nop
 800c266:	bf00      	nop

0800c268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
	__asm volatile
 800c26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c272:	f383 8811 	msr	BASEPRI, r3
 800c276:	f3bf 8f6f 	isb	sy
 800c27a:	f3bf 8f4f 	dsb	sy
 800c27e:	607b      	str	r3, [r7, #4]
}
 800c280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c282:	f7fe fedd 	bl	800b040 <xTaskIncrementTick>
 800c286:	4603      	mov	r3, r0
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d003      	beq.n	800c294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c28c:	4b06      	ldr	r3, [pc, #24]	; (800c2a8 <xPortSysTickHandler+0x40>)
 800c28e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c292:	601a      	str	r2, [r3, #0]
 800c294:	2300      	movs	r3, #0
 800c296:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	f383 8811 	msr	BASEPRI, r3
}
 800c29e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c2a0:	bf00      	nop
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	e000ed04 	.word	0xe000ed04

0800c2ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c2b0:	4b0b      	ldr	r3, [pc, #44]	; (800c2e0 <vPortSetupTimerInterrupt+0x34>)
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c2b6:	4b0b      	ldr	r3, [pc, #44]	; (800c2e4 <vPortSetupTimerInterrupt+0x38>)
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c2bc:	4b0a      	ldr	r3, [pc, #40]	; (800c2e8 <vPortSetupTimerInterrupt+0x3c>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	4a0a      	ldr	r2, [pc, #40]	; (800c2ec <vPortSetupTimerInterrupt+0x40>)
 800c2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2c6:	099b      	lsrs	r3, r3, #6
 800c2c8:	4a09      	ldr	r2, [pc, #36]	; (800c2f0 <vPortSetupTimerInterrupt+0x44>)
 800c2ca:	3b01      	subs	r3, #1
 800c2cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c2ce:	4b04      	ldr	r3, [pc, #16]	; (800c2e0 <vPortSetupTimerInterrupt+0x34>)
 800c2d0:	2207      	movs	r2, #7
 800c2d2:	601a      	str	r2, [r3, #0]
}
 800c2d4:	bf00      	nop
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr
 800c2de:	bf00      	nop
 800c2e0:	e000e010 	.word	0xe000e010
 800c2e4:	e000e018 	.word	0xe000e018
 800c2e8:	20000028 	.word	0x20000028
 800c2ec:	10624dd3 	.word	0x10624dd3
 800c2f0:	e000e014 	.word	0xe000e014

0800c2f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c2f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c304 <vPortEnableVFP+0x10>
 800c2f8:	6801      	ldr	r1, [r0, #0]
 800c2fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c2fe:	6001      	str	r1, [r0, #0]
 800c300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c302:	bf00      	nop
 800c304:	e000ed88 	.word	0xe000ed88

0800c308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c308:	b480      	push	{r7}
 800c30a:	b085      	sub	sp, #20
 800c30c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c30e:	f3ef 8305 	mrs	r3, IPSR
 800c312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2b0f      	cmp	r3, #15
 800c318:	d914      	bls.n	800c344 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c31a:	4a17      	ldr	r2, [pc, #92]	; (800c378 <vPortValidateInterruptPriority+0x70>)
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	4413      	add	r3, r2
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c324:	4b15      	ldr	r3, [pc, #84]	; (800c37c <vPortValidateInterruptPriority+0x74>)
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	7afa      	ldrb	r2, [r7, #11]
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d20a      	bcs.n	800c344 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c332:	f383 8811 	msr	BASEPRI, r3
 800c336:	f3bf 8f6f 	isb	sy
 800c33a:	f3bf 8f4f 	dsb	sy
 800c33e:	607b      	str	r3, [r7, #4]
}
 800c340:	bf00      	nop
 800c342:	e7fe      	b.n	800c342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c344:	4b0e      	ldr	r3, [pc, #56]	; (800c380 <vPortValidateInterruptPriority+0x78>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c34c:	4b0d      	ldr	r3, [pc, #52]	; (800c384 <vPortValidateInterruptPriority+0x7c>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	429a      	cmp	r2, r3
 800c352:	d90a      	bls.n	800c36a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c358:	f383 8811 	msr	BASEPRI, r3
 800c35c:	f3bf 8f6f 	isb	sy
 800c360:	f3bf 8f4f 	dsb	sy
 800c364:	603b      	str	r3, [r7, #0]
}
 800c366:	bf00      	nop
 800c368:	e7fe      	b.n	800c368 <vPortValidateInterruptPriority+0x60>
	}
 800c36a:	bf00      	nop
 800c36c:	3714      	adds	r7, #20
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr
 800c376:	bf00      	nop
 800c378:	e000e3f0 	.word	0xe000e3f0
 800c37c:	20001854 	.word	0x20001854
 800c380:	e000ed0c 	.word	0xe000ed0c
 800c384:	20001858 	.word	0x20001858

0800c388 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b08a      	sub	sp, #40	; 0x28
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c390:	2300      	movs	r3, #0
 800c392:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c394:	f7fe fd98 	bl	800aec8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c398:	4b5b      	ldr	r3, [pc, #364]	; (800c508 <pvPortMalloc+0x180>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d101      	bne.n	800c3a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c3a0:	f000 f920 	bl	800c5e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c3a4:	4b59      	ldr	r3, [pc, #356]	; (800c50c <pvPortMalloc+0x184>)
 800c3a6:	681a      	ldr	r2, [r3, #0]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	4013      	ands	r3, r2
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	f040 8093 	bne.w	800c4d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d01d      	beq.n	800c3f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c3b8:	2208      	movs	r2, #8
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	4413      	add	r3, r2
 800c3be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f003 0307 	and.w	r3, r3, #7
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d014      	beq.n	800c3f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f023 0307 	bic.w	r3, r3, #7
 800c3d0:	3308      	adds	r3, #8
 800c3d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f003 0307 	and.w	r3, r3, #7
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d00a      	beq.n	800c3f4 <pvPortMalloc+0x6c>
	__asm volatile
 800c3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e2:	f383 8811 	msr	BASEPRI, r3
 800c3e6:	f3bf 8f6f 	isb	sy
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	617b      	str	r3, [r7, #20]
}
 800c3f0:	bf00      	nop
 800c3f2:	e7fe      	b.n	800c3f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d06e      	beq.n	800c4d8 <pvPortMalloc+0x150>
 800c3fa:	4b45      	ldr	r3, [pc, #276]	; (800c510 <pvPortMalloc+0x188>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	429a      	cmp	r2, r3
 800c402:	d869      	bhi.n	800c4d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c404:	4b43      	ldr	r3, [pc, #268]	; (800c514 <pvPortMalloc+0x18c>)
 800c406:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c408:	4b42      	ldr	r3, [pc, #264]	; (800c514 <pvPortMalloc+0x18c>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c40e:	e004      	b.n	800c41a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c412:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	429a      	cmp	r2, r3
 800c422:	d903      	bls.n	800c42c <pvPortMalloc+0xa4>
 800c424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d1f1      	bne.n	800c410 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c42c:	4b36      	ldr	r3, [pc, #216]	; (800c508 <pvPortMalloc+0x180>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c432:	429a      	cmp	r2, r3
 800c434:	d050      	beq.n	800c4d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c436:	6a3b      	ldr	r3, [r7, #32]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	2208      	movs	r2, #8
 800c43c:	4413      	add	r3, r2
 800c43e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c442:	681a      	ldr	r2, [r3, #0]
 800c444:	6a3b      	ldr	r3, [r7, #32]
 800c446:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44a:	685a      	ldr	r2, [r3, #4]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	1ad2      	subs	r2, r2, r3
 800c450:	2308      	movs	r3, #8
 800c452:	005b      	lsls	r3, r3, #1
 800c454:	429a      	cmp	r2, r3
 800c456:	d91f      	bls.n	800c498 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	4413      	add	r3, r2
 800c45e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c460:	69bb      	ldr	r3, [r7, #24]
 800c462:	f003 0307 	and.w	r3, r3, #7
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00a      	beq.n	800c480 <pvPortMalloc+0xf8>
	__asm volatile
 800c46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46e:	f383 8811 	msr	BASEPRI, r3
 800c472:	f3bf 8f6f 	isb	sy
 800c476:	f3bf 8f4f 	dsb	sy
 800c47a:	613b      	str	r3, [r7, #16]
}
 800c47c:	bf00      	nop
 800c47e:	e7fe      	b.n	800c47e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c482:	685a      	ldr	r2, [r3, #4]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	1ad2      	subs	r2, r2, r3
 800c488:	69bb      	ldr	r3, [r7, #24]
 800c48a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c492:	69b8      	ldr	r0, [r7, #24]
 800c494:	f000 f908 	bl	800c6a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c498:	4b1d      	ldr	r3, [pc, #116]	; (800c510 <pvPortMalloc+0x188>)
 800c49a:	681a      	ldr	r2, [r3, #0]
 800c49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	1ad3      	subs	r3, r2, r3
 800c4a2:	4a1b      	ldr	r2, [pc, #108]	; (800c510 <pvPortMalloc+0x188>)
 800c4a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c4a6:	4b1a      	ldr	r3, [pc, #104]	; (800c510 <pvPortMalloc+0x188>)
 800c4a8:	681a      	ldr	r2, [r3, #0]
 800c4aa:	4b1b      	ldr	r3, [pc, #108]	; (800c518 <pvPortMalloc+0x190>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d203      	bcs.n	800c4ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c4b2:	4b17      	ldr	r3, [pc, #92]	; (800c510 <pvPortMalloc+0x188>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4a18      	ldr	r2, [pc, #96]	; (800c518 <pvPortMalloc+0x190>)
 800c4b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4bc:	685a      	ldr	r2, [r3, #4]
 800c4be:	4b13      	ldr	r3, [pc, #76]	; (800c50c <pvPortMalloc+0x184>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	431a      	orrs	r2, r3
 800c4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c4ce:	4b13      	ldr	r3, [pc, #76]	; (800c51c <pvPortMalloc+0x194>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	4a11      	ldr	r2, [pc, #68]	; (800c51c <pvPortMalloc+0x194>)
 800c4d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c4d8:	f7fe fd04 	bl	800aee4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4dc:	69fb      	ldr	r3, [r7, #28]
 800c4de:	f003 0307 	and.w	r3, r3, #7
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d00a      	beq.n	800c4fc <pvPortMalloc+0x174>
	__asm volatile
 800c4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ea:	f383 8811 	msr	BASEPRI, r3
 800c4ee:	f3bf 8f6f 	isb	sy
 800c4f2:	f3bf 8f4f 	dsb	sy
 800c4f6:	60fb      	str	r3, [r7, #12]
}
 800c4f8:	bf00      	nop
 800c4fa:	e7fe      	b.n	800c4fa <pvPortMalloc+0x172>
	return pvReturn;
 800c4fc:	69fb      	ldr	r3, [r7, #28]
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3728      	adds	r7, #40	; 0x28
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	20002464 	.word	0x20002464
 800c50c:	20002478 	.word	0x20002478
 800c510:	20002468 	.word	0x20002468
 800c514:	2000245c 	.word	0x2000245c
 800c518:	2000246c 	.word	0x2000246c
 800c51c:	20002470 	.word	0x20002470

0800c520 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b086      	sub	sp, #24
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d04d      	beq.n	800c5ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c532:	2308      	movs	r3, #8
 800c534:	425b      	negs	r3, r3
 800c536:	697a      	ldr	r2, [r7, #20]
 800c538:	4413      	add	r3, r2
 800c53a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	685a      	ldr	r2, [r3, #4]
 800c544:	4b24      	ldr	r3, [pc, #144]	; (800c5d8 <vPortFree+0xb8>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4013      	ands	r3, r2
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d10a      	bne.n	800c564 <vPortFree+0x44>
	__asm volatile
 800c54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c552:	f383 8811 	msr	BASEPRI, r3
 800c556:	f3bf 8f6f 	isb	sy
 800c55a:	f3bf 8f4f 	dsb	sy
 800c55e:	60fb      	str	r3, [r7, #12]
}
 800c560:	bf00      	nop
 800c562:	e7fe      	b.n	800c562 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d00a      	beq.n	800c582 <vPortFree+0x62>
	__asm volatile
 800c56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c570:	f383 8811 	msr	BASEPRI, r3
 800c574:	f3bf 8f6f 	isb	sy
 800c578:	f3bf 8f4f 	dsb	sy
 800c57c:	60bb      	str	r3, [r7, #8]
}
 800c57e:	bf00      	nop
 800c580:	e7fe      	b.n	800c580 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	685a      	ldr	r2, [r3, #4]
 800c586:	4b14      	ldr	r3, [pc, #80]	; (800c5d8 <vPortFree+0xb8>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4013      	ands	r3, r2
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d01e      	beq.n	800c5ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d11a      	bne.n	800c5ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	685a      	ldr	r2, [r3, #4]
 800c59c:	4b0e      	ldr	r3, [pc, #56]	; (800c5d8 <vPortFree+0xb8>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	43db      	mvns	r3, r3
 800c5a2:	401a      	ands	r2, r3
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c5a8:	f7fe fc8e 	bl	800aec8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	685a      	ldr	r2, [r3, #4]
 800c5b0:	4b0a      	ldr	r3, [pc, #40]	; (800c5dc <vPortFree+0xbc>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	4a09      	ldr	r2, [pc, #36]	; (800c5dc <vPortFree+0xbc>)
 800c5b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c5ba:	6938      	ldr	r0, [r7, #16]
 800c5bc:	f000 f874 	bl	800c6a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c5c0:	4b07      	ldr	r3, [pc, #28]	; (800c5e0 <vPortFree+0xc0>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	3301      	adds	r3, #1
 800c5c6:	4a06      	ldr	r2, [pc, #24]	; (800c5e0 <vPortFree+0xc0>)
 800c5c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c5ca:	f7fe fc8b 	bl	800aee4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c5ce:	bf00      	nop
 800c5d0:	3718      	adds	r7, #24
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	20002478 	.word	0x20002478
 800c5dc:	20002468 	.word	0x20002468
 800c5e0:	20002474 	.word	0x20002474

0800c5e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b085      	sub	sp, #20
 800c5e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c5ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c5ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c5f0:	4b27      	ldr	r3, [pc, #156]	; (800c690 <prvHeapInit+0xac>)
 800c5f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f003 0307 	and.w	r3, r3, #7
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d00c      	beq.n	800c618 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	3307      	adds	r3, #7
 800c602:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f023 0307 	bic.w	r3, r3, #7
 800c60a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c60c:	68ba      	ldr	r2, [r7, #8]
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	1ad3      	subs	r3, r2, r3
 800c612:	4a1f      	ldr	r2, [pc, #124]	; (800c690 <prvHeapInit+0xac>)
 800c614:	4413      	add	r3, r2
 800c616:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c61c:	4a1d      	ldr	r2, [pc, #116]	; (800c694 <prvHeapInit+0xb0>)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c622:	4b1c      	ldr	r3, [pc, #112]	; (800c694 <prvHeapInit+0xb0>)
 800c624:	2200      	movs	r2, #0
 800c626:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	68ba      	ldr	r2, [r7, #8]
 800c62c:	4413      	add	r3, r2
 800c62e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c630:	2208      	movs	r2, #8
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	1a9b      	subs	r3, r3, r2
 800c636:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f023 0307 	bic.w	r3, r3, #7
 800c63e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	4a15      	ldr	r2, [pc, #84]	; (800c698 <prvHeapInit+0xb4>)
 800c644:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c646:	4b14      	ldr	r3, [pc, #80]	; (800c698 <prvHeapInit+0xb4>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	2200      	movs	r2, #0
 800c64c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c64e:	4b12      	ldr	r3, [pc, #72]	; (800c698 <prvHeapInit+0xb4>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	2200      	movs	r2, #0
 800c654:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	68fa      	ldr	r2, [r7, #12]
 800c65e:	1ad2      	subs	r2, r2, r3
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c664:	4b0c      	ldr	r3, [pc, #48]	; (800c698 <prvHeapInit+0xb4>)
 800c666:	681a      	ldr	r2, [r3, #0]
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	4a0a      	ldr	r2, [pc, #40]	; (800c69c <prvHeapInit+0xb8>)
 800c672:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	4a09      	ldr	r2, [pc, #36]	; (800c6a0 <prvHeapInit+0xbc>)
 800c67a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c67c:	4b09      	ldr	r3, [pc, #36]	; (800c6a4 <prvHeapInit+0xc0>)
 800c67e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c682:	601a      	str	r2, [r3, #0]
}
 800c684:	bf00      	nop
 800c686:	3714      	adds	r7, #20
 800c688:	46bd      	mov	sp, r7
 800c68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68e:	4770      	bx	lr
 800c690:	2000185c 	.word	0x2000185c
 800c694:	2000245c 	.word	0x2000245c
 800c698:	20002464 	.word	0x20002464
 800c69c:	2000246c 	.word	0x2000246c
 800c6a0:	20002468 	.word	0x20002468
 800c6a4:	20002478 	.word	0x20002478

0800c6a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c6b0:	4b28      	ldr	r3, [pc, #160]	; (800c754 <prvInsertBlockIntoFreeList+0xac>)
 800c6b2:	60fb      	str	r3, [r7, #12]
 800c6b4:	e002      	b.n	800c6bc <prvInsertBlockIntoFreeList+0x14>
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	60fb      	str	r3, [r7, #12]
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d8f7      	bhi.n	800c6b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	685b      	ldr	r3, [r3, #4]
 800c6ce:	68ba      	ldr	r2, [r7, #8]
 800c6d0:	4413      	add	r3, r2
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d108      	bne.n	800c6ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	685a      	ldr	r2, [r3, #4]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	441a      	add	r2, r3
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	68ba      	ldr	r2, [r7, #8]
 800c6f4:	441a      	add	r2, r3
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d118      	bne.n	800c730 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681a      	ldr	r2, [r3, #0]
 800c702:	4b15      	ldr	r3, [pc, #84]	; (800c758 <prvInsertBlockIntoFreeList+0xb0>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	429a      	cmp	r2, r3
 800c708:	d00d      	beq.n	800c726 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	685a      	ldr	r2, [r3, #4]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	441a      	add	r2, r3
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	681a      	ldr	r2, [r3, #0]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	601a      	str	r2, [r3, #0]
 800c724:	e008      	b.n	800c738 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c726:	4b0c      	ldr	r3, [pc, #48]	; (800c758 <prvInsertBlockIntoFreeList+0xb0>)
 800c728:	681a      	ldr	r2, [r3, #0]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	601a      	str	r2, [r3, #0]
 800c72e:	e003      	b.n	800c738 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681a      	ldr	r2, [r3, #0]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d002      	beq.n	800c746 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c746:	bf00      	nop
 800c748:	3714      	adds	r7, #20
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr
 800c752:	bf00      	nop
 800c754:	2000245c 	.word	0x2000245c
 800c758:	20002464 	.word	0x20002464

0800c75c <memset>:
 800c75c:	4402      	add	r2, r0
 800c75e:	4603      	mov	r3, r0
 800c760:	4293      	cmp	r3, r2
 800c762:	d100      	bne.n	800c766 <memset+0xa>
 800c764:	4770      	bx	lr
 800c766:	f803 1b01 	strb.w	r1, [r3], #1
 800c76a:	e7f9      	b.n	800c760 <memset+0x4>

0800c76c <__libc_init_array>:
 800c76c:	b570      	push	{r4, r5, r6, lr}
 800c76e:	4d0d      	ldr	r5, [pc, #52]	; (800c7a4 <__libc_init_array+0x38>)
 800c770:	4c0d      	ldr	r4, [pc, #52]	; (800c7a8 <__libc_init_array+0x3c>)
 800c772:	1b64      	subs	r4, r4, r5
 800c774:	10a4      	asrs	r4, r4, #2
 800c776:	2600      	movs	r6, #0
 800c778:	42a6      	cmp	r6, r4
 800c77a:	d109      	bne.n	800c790 <__libc_init_array+0x24>
 800c77c:	4d0b      	ldr	r5, [pc, #44]	; (800c7ac <__libc_init_array+0x40>)
 800c77e:	4c0c      	ldr	r4, [pc, #48]	; (800c7b0 <__libc_init_array+0x44>)
 800c780:	f000 f826 	bl	800c7d0 <_init>
 800c784:	1b64      	subs	r4, r4, r5
 800c786:	10a4      	asrs	r4, r4, #2
 800c788:	2600      	movs	r6, #0
 800c78a:	42a6      	cmp	r6, r4
 800c78c:	d105      	bne.n	800c79a <__libc_init_array+0x2e>
 800c78e:	bd70      	pop	{r4, r5, r6, pc}
 800c790:	f855 3b04 	ldr.w	r3, [r5], #4
 800c794:	4798      	blx	r3
 800c796:	3601      	adds	r6, #1
 800c798:	e7ee      	b.n	800c778 <__libc_init_array+0xc>
 800c79a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c79e:	4798      	blx	r3
 800c7a0:	3601      	adds	r6, #1
 800c7a2:	e7f2      	b.n	800c78a <__libc_init_array+0x1e>
 800c7a4:	0800c92c 	.word	0x0800c92c
 800c7a8:	0800c92c 	.word	0x0800c92c
 800c7ac:	0800c92c 	.word	0x0800c92c
 800c7b0:	0800c938 	.word	0x0800c938

0800c7b4 <memcpy>:
 800c7b4:	440a      	add	r2, r1
 800c7b6:	4291      	cmp	r1, r2
 800c7b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c7bc:	d100      	bne.n	800c7c0 <memcpy+0xc>
 800c7be:	4770      	bx	lr
 800c7c0:	b510      	push	{r4, lr}
 800c7c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7ca:	4291      	cmp	r1, r2
 800c7cc:	d1f9      	bne.n	800c7c2 <memcpy+0xe>
 800c7ce:	bd10      	pop	{r4, pc}

0800c7d0 <_init>:
 800c7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d2:	bf00      	nop
 800c7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7d6:	bc08      	pop	{r3}
 800c7d8:	469e      	mov	lr, r3
 800c7da:	4770      	bx	lr

0800c7dc <_fini>:
 800c7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7de:	bf00      	nop
 800c7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7e2:	bc08      	pop	{r3}
 800c7e4:	469e      	mov	lr, r3
 800c7e6:	4770      	bx	lr
