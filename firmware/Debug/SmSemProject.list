
SmSemProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007108  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08007244  08007244  00017244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007338  08007338  00017338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007340  08007340  00017340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007344  08007344  00017344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000008  08007348  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005bc  20000014  08007354  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200005d0  08007354  000205d0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 11 .debug_info   00024047  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004e6c  00000000  00000000  000440ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000023b8  00000000  00000000  00048f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001b61  00000000  00000000  0004b2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002783a  00000000  00000000  0004ce59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00026888  00000000  00000000  00074693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f6e70  00000000  00000000  0009af1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009800  00000000  00000000  00191d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  0019b58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	0800722c 	.word	0x0800722c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	0800722c 	.word	0x0800722c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b970 	b.w	8000474 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	460f      	mov	r7, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14a      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d965      	bls.n	800028e <__udivmoddi4+0xe2>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b143      	cbz	r3, 80001da <__udivmoddi4+0x2e>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	409f      	lsls	r7, r3
 80001d2:	fa20 f202 	lsr.w	r2, r0, r2
 80001d6:	4317      	orrs	r7, r2
 80001d8:	409c      	lsls	r4, r3
 80001da:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001de:	fa1f f58c 	uxth.w	r5, ip
 80001e2:	fbb7 f1fe 	udiv	r1, r7, lr
 80001e6:	0c22      	lsrs	r2, r4, #16
 80001e8:	fb0e 7711 	mls	r7, lr, r1, r7
 80001ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001f0:	fb01 f005 	mul.w	r0, r1, r5
 80001f4:	4290      	cmp	r0, r2
 80001f6:	d90a      	bls.n	800020e <__udivmoddi4+0x62>
 80001f8:	eb1c 0202 	adds.w	r2, ip, r2
 80001fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000200:	f080 811c 	bcs.w	800043c <__udivmoddi4+0x290>
 8000204:	4290      	cmp	r0, r2
 8000206:	f240 8119 	bls.w	800043c <__udivmoddi4+0x290>
 800020a:	3902      	subs	r1, #2
 800020c:	4462      	add	r2, ip
 800020e:	1a12      	subs	r2, r2, r0
 8000210:	b2a4      	uxth	r4, r4
 8000212:	fbb2 f0fe 	udiv	r0, r2, lr
 8000216:	fb0e 2210 	mls	r2, lr, r0, r2
 800021a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800021e:	fb00 f505 	mul.w	r5, r0, r5
 8000222:	42a5      	cmp	r5, r4
 8000224:	d90a      	bls.n	800023c <__udivmoddi4+0x90>
 8000226:	eb1c 0404 	adds.w	r4, ip, r4
 800022a:	f100 32ff 	add.w	r2, r0, #4294967295
 800022e:	f080 8107 	bcs.w	8000440 <__udivmoddi4+0x294>
 8000232:	42a5      	cmp	r5, r4
 8000234:	f240 8104 	bls.w	8000440 <__udivmoddi4+0x294>
 8000238:	4464      	add	r4, ip
 800023a:	3802      	subs	r0, #2
 800023c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000240:	1b64      	subs	r4, r4, r5
 8000242:	2100      	movs	r1, #0
 8000244:	b11e      	cbz	r6, 800024e <__udivmoddi4+0xa2>
 8000246:	40dc      	lsrs	r4, r3
 8000248:	2300      	movs	r3, #0
 800024a:	e9c6 4300 	strd	r4, r3, [r6]
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d908      	bls.n	8000268 <__udivmoddi4+0xbc>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80ed 	beq.w	8000436 <__udivmoddi4+0x28a>
 800025c:	2100      	movs	r1, #0
 800025e:	e9c6 0500 	strd	r0, r5, [r6]
 8000262:	4608      	mov	r0, r1
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	fab3 f183 	clz	r1, r3
 800026c:	2900      	cmp	r1, #0
 800026e:	d149      	bne.n	8000304 <__udivmoddi4+0x158>
 8000270:	42ab      	cmp	r3, r5
 8000272:	d302      	bcc.n	800027a <__udivmoddi4+0xce>
 8000274:	4282      	cmp	r2, r0
 8000276:	f200 80f8 	bhi.w	800046a <__udivmoddi4+0x2be>
 800027a:	1a84      	subs	r4, r0, r2
 800027c:	eb65 0203 	sbc.w	r2, r5, r3
 8000280:	2001      	movs	r0, #1
 8000282:	4617      	mov	r7, r2
 8000284:	2e00      	cmp	r6, #0
 8000286:	d0e2      	beq.n	800024e <__udivmoddi4+0xa2>
 8000288:	e9c6 4700 	strd	r4, r7, [r6]
 800028c:	e7df      	b.n	800024e <__udivmoddi4+0xa2>
 800028e:	b902      	cbnz	r2, 8000292 <__udivmoddi4+0xe6>
 8000290:	deff      	udf	#255	; 0xff
 8000292:	fab2 f382 	clz	r3, r2
 8000296:	2b00      	cmp	r3, #0
 8000298:	f040 8090 	bne.w	80003bc <__udivmoddi4+0x210>
 800029c:	1a8a      	subs	r2, r1, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f fe8c 	uxth.w	lr, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002ac:	fb07 2015 	mls	r0, r7, r5, r2
 80002b0:	0c22      	lsrs	r2, r4, #16
 80002b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b6:	fb0e f005 	mul.w	r0, lr, r5
 80002ba:	4290      	cmp	r0, r2
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0x124>
 80002be:	eb1c 0202 	adds.w	r2, ip, r2
 80002c2:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x122>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f200 80cb 	bhi.w	8000464 <__udivmoddi4+0x2b8>
 80002ce:	4645      	mov	r5, r8
 80002d0:	1a12      	subs	r2, r2, r0
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e0:	fb0e fe00 	mul.w	lr, lr, r0
 80002e4:	45a6      	cmp	lr, r4
 80002e6:	d908      	bls.n	80002fa <__udivmoddi4+0x14e>
 80002e8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x14c>
 80002f2:	45a6      	cmp	lr, r4
 80002f4:	f200 80bb 	bhi.w	800046e <__udivmoddi4+0x2c2>
 80002f8:	4610      	mov	r0, r2
 80002fa:	eba4 040e 	sub.w	r4, r4, lr
 80002fe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000302:	e79f      	b.n	8000244 <__udivmoddi4+0x98>
 8000304:	f1c1 0720 	rsb	r7, r1, #32
 8000308:	408b      	lsls	r3, r1
 800030a:	fa22 fc07 	lsr.w	ip, r2, r7
 800030e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000312:	fa05 f401 	lsl.w	r4, r5, r1
 8000316:	fa20 f307 	lsr.w	r3, r0, r7
 800031a:	40fd      	lsrs	r5, r7
 800031c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000320:	4323      	orrs	r3, r4
 8000322:	fbb5 f8f9 	udiv	r8, r5, r9
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	fb09 5518 	mls	r5, r9, r8, r5
 800032e:	0c1c      	lsrs	r4, r3, #16
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	fb08 f50e 	mul.w	r5, r8, lr
 8000338:	42a5      	cmp	r5, r4
 800033a:	fa02 f201 	lsl.w	r2, r2, r1
 800033e:	fa00 f001 	lsl.w	r0, r0, r1
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f108 3aff 	add.w	sl, r8, #4294967295
 800034c:	f080 8088 	bcs.w	8000460 <__udivmoddi4+0x2b4>
 8000350:	42a5      	cmp	r5, r4
 8000352:	f240 8085 	bls.w	8000460 <__udivmoddi4+0x2b4>
 8000356:	f1a8 0802 	sub.w	r8, r8, #2
 800035a:	4464      	add	r4, ip
 800035c:	1b64      	subs	r4, r4, r5
 800035e:	b29d      	uxth	r5, r3
 8000360:	fbb4 f3f9 	udiv	r3, r4, r9
 8000364:	fb09 4413 	mls	r4, r9, r3, r4
 8000368:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800036c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x1da>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f103 35ff 	add.w	r5, r3, #4294967295
 800037c:	d26c      	bcs.n	8000458 <__udivmoddi4+0x2ac>
 800037e:	45a6      	cmp	lr, r4
 8000380:	d96a      	bls.n	8000458 <__udivmoddi4+0x2ac>
 8000382:	3b02      	subs	r3, #2
 8000384:	4464      	add	r4, ip
 8000386:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800038a:	fba3 9502 	umull	r9, r5, r3, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	42ac      	cmp	r4, r5
 8000394:	46c8      	mov	r8, r9
 8000396:	46ae      	mov	lr, r5
 8000398:	d356      	bcc.n	8000448 <__udivmoddi4+0x29c>
 800039a:	d053      	beq.n	8000444 <__udivmoddi4+0x298>
 800039c:	b156      	cbz	r6, 80003b4 <__udivmoddi4+0x208>
 800039e:	ebb0 0208 	subs.w	r2, r0, r8
 80003a2:	eb64 040e 	sbc.w	r4, r4, lr
 80003a6:	fa04 f707 	lsl.w	r7, r4, r7
 80003aa:	40ca      	lsrs	r2, r1
 80003ac:	40cc      	lsrs	r4, r1
 80003ae:	4317      	orrs	r7, r2
 80003b0:	e9c6 7400 	strd	r7, r4, [r6]
 80003b4:	4618      	mov	r0, r3
 80003b6:	2100      	movs	r1, #0
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	f1c3 0120 	rsb	r1, r3, #32
 80003c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c4:	fa20 f201 	lsr.w	r2, r0, r1
 80003c8:	fa25 f101 	lsr.w	r1, r5, r1
 80003cc:	409d      	lsls	r5, r3
 80003ce:	432a      	orrs	r2, r5
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa1f fe8c 	uxth.w	lr, ip
 80003d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003dc:	fb07 1510 	mls	r5, r7, r0, r1
 80003e0:	0c11      	lsrs	r1, r2, #16
 80003e2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003e6:	fb00 f50e 	mul.w	r5, r0, lr
 80003ea:	428d      	cmp	r5, r1
 80003ec:	fa04 f403 	lsl.w	r4, r4, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x258>
 80003f2:	eb1c 0101 	adds.w	r1, ip, r1
 80003f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fa:	d22f      	bcs.n	800045c <__udivmoddi4+0x2b0>
 80003fc:	428d      	cmp	r5, r1
 80003fe:	d92d      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000400:	3802      	subs	r0, #2
 8000402:	4461      	add	r1, ip
 8000404:	1b49      	subs	r1, r1, r5
 8000406:	b292      	uxth	r2, r2
 8000408:	fbb1 f5f7 	udiv	r5, r1, r7
 800040c:	fb07 1115 	mls	r1, r7, r5, r1
 8000410:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000414:	fb05 f10e 	mul.w	r1, r5, lr
 8000418:	4291      	cmp	r1, r2
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x282>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f105 38ff 	add.w	r8, r5, #4294967295
 8000424:	d216      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 8000426:	4291      	cmp	r1, r2
 8000428:	d914      	bls.n	8000454 <__udivmoddi4+0x2a8>
 800042a:	3d02      	subs	r5, #2
 800042c:	4462      	add	r2, ip
 800042e:	1a52      	subs	r2, r2, r1
 8000430:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000434:	e738      	b.n	80002a8 <__udivmoddi4+0xfc>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e708      	b.n	800024e <__udivmoddi4+0xa2>
 800043c:	4639      	mov	r1, r7
 800043e:	e6e6      	b.n	800020e <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e6fb      	b.n	800023c <__udivmoddi4+0x90>
 8000444:	4548      	cmp	r0, r9
 8000446:	d2a9      	bcs.n	800039c <__udivmoddi4+0x1f0>
 8000448:	ebb9 0802 	subs.w	r8, r9, r2
 800044c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000450:	3b01      	subs	r3, #1
 8000452:	e7a3      	b.n	800039c <__udivmoddi4+0x1f0>
 8000454:	4645      	mov	r5, r8
 8000456:	e7ea      	b.n	800042e <__udivmoddi4+0x282>
 8000458:	462b      	mov	r3, r5
 800045a:	e794      	b.n	8000386 <__udivmoddi4+0x1da>
 800045c:	4640      	mov	r0, r8
 800045e:	e7d1      	b.n	8000404 <__udivmoddi4+0x258>
 8000460:	46d0      	mov	r8, sl
 8000462:	e77b      	b.n	800035c <__udivmoddi4+0x1b0>
 8000464:	3d02      	subs	r5, #2
 8000466:	4462      	add	r2, ip
 8000468:	e732      	b.n	80002d0 <__udivmoddi4+0x124>
 800046a:	4608      	mov	r0, r1
 800046c:	e70a      	b.n	8000284 <__udivmoddi4+0xd8>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	e742      	b.n	80002fa <__udivmoddi4+0x14e>

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000484:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000486:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4313      	orrs	r3, r2
 800048e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000494:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4013      	ands	r3, r2
 800049a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800049c:	68fb      	ldr	r3, [r7, #12]
}
 800049e:	bf00      	nop
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
	...

080004ac <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b086      	sub	sp, #24
 80004b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004b2:	463b      	mov	r3, r7
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
 80004be:	611a      	str	r2, [r3, #16]
 80004c0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004c2:	4b29      	ldr	r3, [pc, #164]	; (8000568 <MX_ADC1_Init+0xbc>)
 80004c4:	4a29      	ldr	r2, [pc, #164]	; (800056c <MX_ADC1_Init+0xc0>)
 80004c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004c8:	4b27      	ldr	r3, [pc, #156]	; (8000568 <MX_ADC1_Init+0xbc>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004ce:	4b26      	ldr	r3, [pc, #152]	; (8000568 <MX_ADC1_Init+0xbc>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004d4:	4b24      	ldr	r3, [pc, #144]	; (8000568 <MX_ADC1_Init+0xbc>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004da:	4b23      	ldr	r3, [pc, #140]	; (8000568 <MX_ADC1_Init+0xbc>)
 80004dc:	2200      	movs	r2, #0
 80004de:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004e0:	4b21      	ldr	r3, [pc, #132]	; (8000568 <MX_ADC1_Init+0xbc>)
 80004e2:	2204      	movs	r2, #4
 80004e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004e6:	4b20      	ldr	r3, [pc, #128]	; (8000568 <MX_ADC1_Init+0xbc>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004ec:	4b1e      	ldr	r3, [pc, #120]	; (8000568 <MX_ADC1_Init+0xbc>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80004f2:	4b1d      	ldr	r3, [pc, #116]	; (8000568 <MX_ADC1_Init+0xbc>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f8:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <MX_ADC1_Init+0xbc>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000500:	4b19      	ldr	r3, [pc, #100]	; (8000568 <MX_ADC1_Init+0xbc>)
 8000502:	2200      	movs	r2, #0
 8000504:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000506:	4b18      	ldr	r3, [pc, #96]	; (8000568 <MX_ADC1_Init+0xbc>)
 8000508:	2200      	movs	r2, #0
 800050a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800050c:	4b16      	ldr	r3, [pc, #88]	; (8000568 <MX_ADC1_Init+0xbc>)
 800050e:	2200      	movs	r2, #0
 8000510:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000514:	4b14      	ldr	r3, [pc, #80]	; (8000568 <MX_ADC1_Init+0xbc>)
 8000516:	2200      	movs	r2, #0
 8000518:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800051a:	4b13      	ldr	r3, [pc, #76]	; (8000568 <MX_ADC1_Init+0xbc>)
 800051c:	2200      	movs	r2, #0
 800051e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000522:	4811      	ldr	r0, [pc, #68]	; (8000568 <MX_ADC1_Init+0xbc>)
 8000524:	f001 fb46 	bl	8001bb4 <HAL_ADC_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800052e:	f000 fc7b 	bl	8000e28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <MX_ADC1_Init+0xc4>)
 8000534:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000536:	2306      	movs	r3, #6
 8000538:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800053e:	237f      	movs	r3, #127	; 0x7f
 8000540:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000542:	2304      	movs	r3, #4
 8000544:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800054a:	463b      	mov	r3, r7
 800054c:	4619      	mov	r1, r3
 800054e:	4806      	ldr	r0, [pc, #24]	; (8000568 <MX_ADC1_Init+0xbc>)
 8000550:	f001 fc7c 	bl	8001e4c <HAL_ADC_ConfigChannel>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800055a:	f000 fc65 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800055e:	bf00      	nop
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000030 	.word	0x20000030
 800056c:	50040000 	.word	0x50040000
 8000570:	0c900008 	.word	0x0c900008

08000574 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a0c      	ldr	r2, [pc, #48]	; (80005c4 <HAL_ADC_MspInit+0x50>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d112      	bne.n	80005bc <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000596:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800059a:	f7ff ff6d 	bl	8000478 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	2004      	movs	r0, #4
 80005a0:	f7ff ff6a 	bl	8000478 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005a4:	2304      	movs	r3, #4
 80005a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005a8:	2303      	movs	r3, #3
 80005aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	4619      	mov	r1, r3
 80005b6:	4804      	ldr	r0, [pc, #16]	; (80005c8 <HAL_ADC_MspInit+0x54>)
 80005b8:	f002 f8ee 	bl	8002798 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	50040000 	.word	0x50040000
 80005c8:	48000800 	.word	0x48000800

080005cc <LL_AHB2_GRP1_EnableClock>:
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4313      	orrs	r3, r2
 80005e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4013      	ands	r3, r2
 80005ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005f0:	68fb      	ldr	r3, [r7, #12]
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000600:	b480      	push	{r7}
 8000602:	b087      	sub	sp, #28
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x03U], (Line >> 16U), (Port << ((POSITION_VAL((Line >> 16U))) & 0x0000000FUL)));
 800060a:	4a18      	ldr	r2, [pc, #96]	; (800066c <LL_SYSCFG_SetEXTISource+0x6c>)
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	f003 0303 	and.w	r3, r3, #3
 8000612:	3302      	adds	r3, #2
 8000614:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	0c1b      	lsrs	r3, r3, #16
 800061c:	43db      	mvns	r3, r3
 800061e:	ea02 0103 	and.w	r1, r2, r3
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	0c1b      	lsrs	r3, r3, #16
 8000626:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000628:	693b      	ldr	r3, [r7, #16]
 800062a:	fa93 f3a3 	rbit	r3, r3
 800062e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d101      	bne.n	800063e <LL_SYSCFG_SetEXTISource+0x3e>
  {
    return 32U;
 800063a:	2320      	movs	r3, #32
 800063c:	e003      	b.n	8000646 <LL_SYSCFG_SetEXTISource+0x46>
  }
  return __builtin_clz(value);
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	fab3 f383 	clz	r3, r3
 8000644:	b2db      	uxtb	r3, r3
 8000646:	f003 030f 	and.w	r3, r3, #15
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	409a      	lsls	r2, r3
 800064e:	4807      	ldr	r0, [pc, #28]	; (800066c <LL_SYSCFG_SetEXTISource+0x6c>)
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	f003 0303 	and.w	r3, r3, #3
 8000656:	430a      	orrs	r2, r1
 8000658:	3302      	adds	r3, #2
 800065a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800065e:	bf00      	nop
 8000660:	371c      	adds	r7, #28
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40010000 	.word	0x40010000

08000670 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000670:	b480      	push	{r7}
 8000672:	b08b      	sub	sp, #44	; 0x2c
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	fa93 f3a3 	rbit	r3, r3
 800068a:	613b      	str	r3, [r7, #16]
  return result;
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d101      	bne.n	800069a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000696:	2320      	movs	r3, #32
 8000698:	e003      	b.n	80006a2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800069a:	69bb      	ldr	r3, [r7, #24]
 800069c:	fab3 f383 	clz	r3, r3
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	2103      	movs	r1, #3
 80006a6:	fa01 f303 	lsl.w	r3, r1, r3
 80006aa:	43db      	mvns	r3, r3
 80006ac:	401a      	ands	r2, r3
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006b2:	6a3b      	ldr	r3, [r7, #32]
 80006b4:	fa93 f3a3 	rbit	r3, r3
 80006b8:	61fb      	str	r3, [r7, #28]
  return result;
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80006be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d101      	bne.n	80006c8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80006c4:	2320      	movs	r3, #32
 80006c6:	e003      	b.n	80006d0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80006c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ca:	fab3 f383 	clz	r3, r3
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	6879      	ldr	r1, [r7, #4]
 80006d4:	fa01 f303 	lsl.w	r3, r1, r3
 80006d8:	431a      	orrs	r2, r3
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	601a      	str	r2, [r3, #0]
}
 80006de:	bf00      	nop
 80006e0:	372c      	adds	r7, #44	; 0x2c
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80006ea:	b480      	push	{r7}
 80006ec:	b08b      	sub	sp, #44	; 0x2c
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	60f8      	str	r0, [r7, #12]
 80006f2:	60b9      	str	r1, [r7, #8]
 80006f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	68da      	ldr	r2, [r3, #12]
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	fa93 f3a3 	rbit	r3, r3
 8000704:	613b      	str	r3, [r7, #16]
  return result;
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800070a:	69bb      	ldr	r3, [r7, #24]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d101      	bne.n	8000714 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000710:	2320      	movs	r3, #32
 8000712:	e003      	b.n	800071c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	fab3 f383 	clz	r3, r3
 800071a:	b2db      	uxtb	r3, r3
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	2103      	movs	r1, #3
 8000720:	fa01 f303 	lsl.w	r3, r1, r3
 8000724:	43db      	mvns	r3, r3
 8000726:	401a      	ands	r2, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800072c:	6a3b      	ldr	r3, [r7, #32]
 800072e:	fa93 f3a3 	rbit	r3, r3
 8000732:	61fb      	str	r3, [r7, #28]
  return result;
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073a:	2b00      	cmp	r3, #0
 800073c:	d101      	bne.n	8000742 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800073e:	2320      	movs	r3, #32
 8000740:	e003      	b.n	800074a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000744:	fab3 f383 	clz	r3, r3
 8000748:	b2db      	uxtb	r3, r3
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	6879      	ldr	r1, [r7, #4]
 800074e:	fa01 f303 	lsl.w	r3, r1, r3
 8000752:	431a      	orrs	r2, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	60da      	str	r2, [r3, #12]
}
 8000758:	bf00      	nop
 800075a:	372c      	adds	r7, #44	; 0x2c
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	683a      	ldr	r2, [r7, #0]
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
 80007a0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80007a2:	2004      	movs	r0, #4
 80007a4:	f7ff ff12 	bl	80005cc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 80007a8:	2080      	movs	r0, #128	; 0x80
 80007aa:	f7ff ff0f 	bl	80005cc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80007ae:	2002      	movs	r0, #2
 80007b0:	f7ff ff0c 	bl	80005cc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80007b4:	2001      	movs	r0, #1
 80007b6:	f7ff ff09 	bl	80005cc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 80007ba:	2010      	movs	r0, #16
 80007bc:	f7ff ff06 	bl	80005cc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80007c0:	2008      	movs	r0, #8
 80007c2:	f7ff ff03 	bl	80005cc <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LED1_Pin|LED2_Pin|M_LEFT_DIRECTION_Pin);
 80007c6:	f240 2103 	movw	r1, #515	; 0x203
 80007ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ce:	f7ff ffc9 	bl	8000764 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LED3_Pin|M_RIGHT_DIRECTION_Pin|SPI_EX_NCS1_Pin|SPI_EX_NCS2_Pin);
 80007d2:	f44f 6146 	mov.w	r1, #3168	; 0xc60
 80007d6:	4894      	ldr	r0, [pc, #592]	; (8000a28 <MX_GPIO_Init+0x2a8>)
 80007d8:	f7ff ffc4 	bl	8000764 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LED4_Pin|NM_SLEEP_Pin|SPI_IMU_NCS_Pin);
 80007dc:	2185      	movs	r1, #133	; 0x85
 80007de:	4893      	ldr	r0, [pc, #588]	; (8000a2c <MX_GPIO_Init+0x2ac>)
 80007e0:	f7ff ffc0 	bl	8000764 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_1
 80007e4:	f24e 0312 	movw	r3, #57362	; 0xe012
 80007e8:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80007ea:	2303      	movs	r3, #3
 80007ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	4619      	mov	r1, r3
 80007f6:	488c      	ldr	r0, [pc, #560]	; (8000a28 <MX_GPIO_Init+0x2a8>)
 80007f8:	f006 fc33 	bl	8007062 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80007fc:	2308      	movs	r3, #8
 80007fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000800:	2303      	movs	r3, #3
 8000802:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	4619      	mov	r1, r3
 800080c:	4888      	ldr	r0, [pc, #544]	; (8000a30 <MX_GPIO_Init+0x2b0>)
 800080e:	f006 fc28 	bl	8007062 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000812:	2303      	movs	r3, #3
 8000814:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000816:	2301      	movs	r3, #1
 8000818:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800081e:	2301      	movs	r3, #1
 8000820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	4619      	mov	r1, r3
 800082a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082e:	f006 fc18 	bl	8007062 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_15;
 8000832:	f248 0330 	movw	r3, #32816	; 0x8030
 8000836:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000838:	2303      	movs	r3, #3
 800083a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	4619      	mov	r1, r3
 8000844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000848:	f006 fc0b 	bl	8007062 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = M_LEFT_DIRECTION_Pin;
 800084c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000850:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000852:	2301      	movs	r3, #1
 8000854:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(M_LEFT_DIRECTION_GPIO_Port, &GPIO_InitStruct);
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	4619      	mov	r1, r3
 8000866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086a:	f006 fbfa 	bl	8007062 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED3_Pin;
 800086e:	2320      	movs	r3, #32
 8000870:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000872:	2301      	movs	r3, #1
 8000874:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800087a:	2301      	movs	r3, #1
 800087c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	4619      	mov	r1, r3
 8000886:	4868      	ldr	r0, [pc, #416]	; (8000a28 <MX_GPIO_Init+0x2a8>)
 8000888:	f006 fbeb 	bl	8007062 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED4_Pin;
 800088c:	2304      	movs	r3, #4
 800088e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000890:	2301      	movs	r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000898:	2301      	movs	r3, #1
 800089a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	4619      	mov	r1, r3
 80008a4:	4861      	ldr	r0, [pc, #388]	; (8000a2c <MX_GPIO_Init+0x2ac>)
 80008a6:	f006 fbdc 	bl	8007062 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = NM_SLEEP_Pin|SPI_IMU_NCS_Pin;
 80008aa:	2381      	movs	r3, #129	; 0x81
 80008ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008ae:	2301      	movs	r3, #1
 80008b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	4619      	mov	r1, r3
 80008c2:	485a      	ldr	r0, [pc, #360]	; (8000a2c <MX_GPIO_Init+0x2ac>)
 80008c4:	f006 fbcd 	bl	8007062 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
 80008c8:	f24f 0340 	movw	r3, #61504	; 0xf040
 80008cc:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_6;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80008ce:	2303      	movs	r3, #3
 80008d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	4619      	mov	r1, r3
 80008da:	4854      	ldr	r0, [pc, #336]	; (8000a2c <MX_GPIO_Init+0x2ac>)
 80008dc:	f006 fbc1 	bl	8007062 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = M_RIGHT_DIRECTION_Pin|SPI_EX_NCS1_Pin|SPI_EX_NCS2_Pin;
 80008e0:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 80008e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008e6:	2301      	movs	r3, #1
 80008e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	4619      	mov	r1, r3
 80008fa:	484b      	ldr	r0, [pc, #300]	; (8000a28 <MX_GPIO_Init+0x2a8>)
 80008fc:	f006 fbb1 	bl	8007062 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000900:	2302      	movs	r3, #2
 8000902:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000904:	2303      	movs	r3, #3
 8000906:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	4619      	mov	r1, r3
 8000910:	4848      	ldr	r0, [pc, #288]	; (8000a34 <MX_GPIO_Init+0x2b4>)
 8000912:	f006 fba6 	bl	8007062 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE3);
 8000916:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 800091a:	2002      	movs	r0, #2
 800091c:	f7ff fe70 	bl	8000600 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE4);
 8000920:	4945      	ldr	r1, [pc, #276]	; (8000a38 <MX_GPIO_Init+0x2b8>)
 8000922:	2004      	movs	r0, #4
 8000924:	f7ff fe6c 	bl	8000600 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE12);
 8000928:	4944      	ldr	r1, [pc, #272]	; (8000a3c <MX_GPIO_Init+0x2bc>)
 800092a:	2002      	movs	r0, #2
 800092c:	f7ff fe68 	bl	8000600 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE0);
 8000930:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000934:	2003      	movs	r0, #3
 8000936:	f7ff fe63 	bl	8000600 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 800093a:	2308      	movs	r3, #8
 800093c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000942:	2301      	movs	r3, #1
 8000944:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000948:	2300      	movs	r3, #0
 800094a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800094e:	2301      	movs	r3, #1
 8000950:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4618      	mov	r0, r3
 800095a:	f006 f947 	bl	8006bec <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 800095e:	2310      	movs	r3, #16
 8000960:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000966:	2301      	movs	r3, #1
 8000968:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800096c:	2300      	movs	r3, #0
 800096e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000972:	2301      	movs	r3, #1
 8000974:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4618      	mov	r0, r3
 800097e:	f006 f935 	bl	8006bec <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 8000982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000986:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800098c:	2301      	movs	r3, #1
 800098e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000992:	2300      	movs	r3, #0
 8000994:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000998:	2301      	movs	r3, #1
 800099a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4618      	mov	r0, r3
 80009a4:	f006 f922 	bl	8006bec <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80009a8:	2301      	movs	r3, #1
 80009aa:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80009b0:	2301      	movs	r3, #1
 80009b2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80009b6:	2300      	movs	r3, #0
 80009b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80009bc:	2301      	movs	r3, #1
 80009be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4618      	mov	r0, r3
 80009c8:	f006 f910 	bl	8006bec <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(IMU_INT1_GPIO_Port, IMU_INT1_Pin, LL_GPIO_PULL_NO);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2108      	movs	r1, #8
 80009d0:	4815      	ldr	r0, [pc, #84]	; (8000a28 <MX_GPIO_Init+0x2a8>)
 80009d2:	f7ff fe8a 	bl	80006ea <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(IMU_INT2_GPIO_Port, IMU_INT2_Pin, LL_GPIO_PULL_NO);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2110      	movs	r1, #16
 80009da:	4819      	ldr	r0, [pc, #100]	; (8000a40 <MX_GPIO_Init+0x2c0>)
 80009dc:	f7ff fe85 	bl	80006ea <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPI_EX_INT1_GPIO_Port, SPI_EX_INT1_Pin, LL_GPIO_PULL_NO);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e6:	4810      	ldr	r0, [pc, #64]	; (8000a28 <MX_GPIO_Init+0x2a8>)
 80009e8:	f7ff fe7f 	bl	80006ea <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPI_EX_INT2_GPIO_Port, SPI_EX_INT2_Pin, LL_GPIO_PULL_NO);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2101      	movs	r1, #1
 80009f0:	4810      	ldr	r0, [pc, #64]	; (8000a34 <MX_GPIO_Init+0x2b4>)
 80009f2:	f7ff fe7a 	bl	80006ea <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(IMU_INT1_GPIO_Port, IMU_INT1_Pin, LL_GPIO_MODE_INPUT);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2108      	movs	r1, #8
 80009fa:	480b      	ldr	r0, [pc, #44]	; (8000a28 <MX_GPIO_Init+0x2a8>)
 80009fc:	f7ff fe38 	bl	8000670 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(IMU_INT2_GPIO_Port, IMU_INT2_Pin, LL_GPIO_MODE_INPUT);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2110      	movs	r1, #16
 8000a04:	480e      	ldr	r0, [pc, #56]	; (8000a40 <MX_GPIO_Init+0x2c0>)
 8000a06:	f7ff fe33 	bl	8000670 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPI_EX_INT1_GPIO_Port, SPI_EX_INT1_Pin, LL_GPIO_MODE_INPUT);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_GPIO_Init+0x2a8>)
 8000a12:	f7ff fe2d 	bl	8000670 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPI_EX_INT2_GPIO_Port, SPI_EX_INT2_Pin, LL_GPIO_MODE_INPUT);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2101      	movs	r1, #1
 8000a1a:	4806      	ldr	r0, [pc, #24]	; (8000a34 <MX_GPIO_Init+0x2b4>)
 8000a1c:	f7ff fe28 	bl	8000670 <LL_GPIO_SetPinMode>

}
 8000a20:	bf00      	nop
 8000a22:	3728      	adds	r7, #40	; 0x28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	48000800 	.word	0x48000800
 8000a2c:	48000400 	.word	0x48000400
 8000a30:	48001c00 	.word	0x48001c00
 8000a34:	48000c00 	.word	0x48000c00
 8000a38:	000f0001 	.word	0x000f0001
 8000a3c:	000f0003 	.word	0x000f0003
 8000a40:	48001000 	.word	0x48001000

08000a44 <LL_AHB2_GRP1_EnableClock>:
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4013      	ands	r3, r2
 8000a66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a68:	68fb      	ldr	r3, [r7, #12]
}
 8000a6a:	bf00      	nop
 8000a6c:	3714      	adds	r7, #20
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b085      	sub	sp, #20
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a82:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4013      	ands	r3, r2
 8000a98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
}
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ab4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ab6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ac4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000acc:	68fb      	ldr	r3, [r7, #12]
}
 8000ace:	bf00      	nop
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <MX_LPTIM1_Init>:
LPTIM_HandleTypeDef hlptim1;
LPTIM_HandleTypeDef hlptim2;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <MX_LPTIM1_Init+0x60>)
 8000ae2:	4a17      	ldr	r2, [pc, #92]	; (8000b40 <MX_LPTIM1_Init+0x64>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_ULPTIM;
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <MX_LPTIM1_Init+0x60>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <MX_LPTIM1_Init+0x60>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <MX_LPTIM1_Init+0x60>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8000af8:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <MX_LPTIM1_Init+0x60>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <MX_LPTIM1_Init+0x60>)
 8000b00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b04:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <MX_LPTIM1_Init+0x60>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <MX_LPTIM1_Init+0x60>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <MX_LPTIM1_Init+0x60>)
 8000b14:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b18:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <MX_LPTIM1_Init+0x60>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <MX_LPTIM1_Init+0x60>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_LPTIM1_Init+0x60>)
 8000b28:	f001 ffa6 	bl	8002a78 <HAL_LPTIM_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 8000b32:	f000 f979 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000094 	.word	0x20000094
 8000b40:	40007c00 	.word	0x40007c00

08000b44 <MX_LPTIM2_Init>:
/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 8000b48:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_LPTIM2_Init+0x60>)
 8000b4a:	4a17      	ldr	r2, [pc, #92]	; (8000ba8 <MX_LPTIM2_Init+0x64>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_ULPTIM;
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <MX_LPTIM2_Init+0x60>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000b54:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MX_LPTIM2_Init+0x60>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  hlptim2.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_LPTIM2_Init+0x60>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60da      	str	r2, [r3, #12]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <MX_LPTIM2_Init+0x60>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_LPTIM2_Init+0x60>)
 8000b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b6c:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <MX_LPTIM2_Init+0x60>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <MX_LPTIM2_Init+0x60>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <MX_LPTIM2_Init+0x60>)
 8000b7c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b80:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <MX_LPTIM2_Init+0x60>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_LPTIM2_Init+0x60>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_LPTIM2_Init+0x60>)
 8000b90:	f001 ff72 	bl	8002a78 <HAL_LPTIM_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_LPTIM2_Init+0x5a>
  {
    Error_Handler();
 8000b9a:	f000 f945 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200000cc 	.word	0x200000cc
 8000ba8:	40009400 	.word	0x40009400

08000bac <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b09c      	sub	sp, #112	; 0x70
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bc4:	f107 030c 	add.w	r3, r7, #12
 8000bc8:	2250      	movs	r2, #80	; 0x50
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f006 fb01 	bl	80071d4 <memset>
  if(lptimHandle->Instance==LPTIM1)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a2c      	ldr	r2, [pc, #176]	; (8000c88 <HAL_LPTIM_MspInit+0xdc>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d126      	bne.n	8000c2a <HAL_LPTIM_MspInit+0x7e>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8000bdc:	2310      	movs	r3, #16
 8000bde:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 8000be0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000be4:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	4618      	mov	r0, r3
 8000bec:	f003 fd29 	bl	8004642 <HAL_RCCEx_PeriphCLKConfig>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 8000bf6:	f000 f917 	bl	8000e28 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000bfa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000bfe:	f7ff ff3a 	bl	8000a76 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c02:	2004      	movs	r0, #4
 8000c04:	f7ff ff1e 	bl	8000a44 <LL_AHB2_GRP1_EnableClock>
    /**LPTIM1 GPIO Configuration
    PC0     ------> LPTIM1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c20:	4619      	mov	r1, r3
 8000c22:	481a      	ldr	r0, [pc, #104]	; (8000c8c <HAL_LPTIM_MspInit+0xe0>)
 8000c24:	f001 fdb8 	bl	8002798 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }
}
 8000c28:	e029      	b.n	8000c7e <HAL_LPTIM_MspInit+0xd2>
  else if(lptimHandle->Instance==LPTIM2)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a18      	ldr	r2, [pc, #96]	; (8000c90 <HAL_LPTIM_MspInit+0xe4>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d124      	bne.n	8000c7e <HAL_LPTIM_MspInit+0xd2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 8000c34:	2320      	movs	r3, #32
 8000c36:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK;
 8000c38:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000c3c:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	4618      	mov	r0, r3
 8000c44:	f003 fcfd 	bl	8004642 <HAL_RCCEx_PeriphCLKConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_LPTIM_MspInit+0xa6>
      Error_Handler();
 8000c4e:	f000 f8eb 	bl	8000e28 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8000c52:	2020      	movs	r0, #32
 8000c54:	f7ff ff28 	bl	8000aa8 <LL_APB1_GRP2_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c58:	2002      	movs	r0, #2
 8000c5a:	f7ff fef3 	bl	8000a44 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 8000c6e:	230e      	movs	r3, #14
 8000c70:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c72:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c76:	4619      	mov	r1, r3
 8000c78:	4806      	ldr	r0, [pc, #24]	; (8000c94 <HAL_LPTIM_MspInit+0xe8>)
 8000c7a:	f001 fd8d 	bl	8002798 <HAL_GPIO_Init>
}
 8000c7e:	bf00      	nop
 8000c80:	3770      	adds	r7, #112	; 0x70
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40007c00 	.word	0x40007c00
 8000c8c:	48000800 	.word	0x48000800
 8000c90:	40009400 	.word	0x40009400
 8000c94:	48000400 	.word	0x48000400

08000c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c9c:	f000 fdb2 	bl	8001804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca0:	f000 f818 	bl	8000cd4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ca4:	f000 f87a 	bl	8000d9c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca8:	f7ff fd6a 	bl	8000780 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8000cac:	f000 f8f4 	bl	8000e98 <MX_QUADSPI_Init>
  MX_SPI1_Init();
 8000cb0:	f000 f998 	bl	8000fe4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000cb4:	f000 fb18 	bl	80012e8 <MX_TIM1_Init>
  MX_USB_PCD_Init();
 8000cb8:	f000 fd12 	bl	80016e0 <MX_USB_PCD_Init>
  MX_LPTIM1_Init();
 8000cbc:	f7ff ff0e 	bl	8000adc <MX_LPTIM1_Init>
  MX_ADC1_Init();
 8000cc0:	f7ff fbf4 	bl	80004ac <MX_ADC1_Init>
  MX_LPTIM2_Init();
 8000cc4:	f7ff ff3e 	bl	8000b44 <MX_LPTIM2_Init>
  MX_LPUART1_UART_Init();
 8000cc8:	f000 fc44 	bl	8001554 <MX_LPUART1_UART_Init>
  MX_RF_Init();
 8000ccc:	f000 f950 	bl	8000f70 <MX_RF_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <main+0x38>
	...

08000cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b09a      	sub	sp, #104	; 0x68
 8000cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cda:	f107 0320 	add.w	r3, r7, #32
 8000cde:	2248      	movs	r2, #72	; 0x48
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f006 fa76 	bl	80071d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	611a      	str	r2, [r3, #16]
 8000cf6:	615a      	str	r2, [r3, #20]
 8000cf8:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cfa:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <SystemClock_Config+0xc4>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d02:	4a25      	ldr	r2, [pc, #148]	; (8000d98 <SystemClock_Config+0xc4>)
 8000d04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d08:	6013      	str	r3, [r2, #0]
 8000d0a:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <SystemClock_Config+0xc4>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d16:	2303      	movs	r3, #3
 8000d18:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d26:	2340      	movs	r3, #64	; 0x40
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000d32:	2310      	movs	r3, #16
 8000d34:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000d36:	2308      	movs	r3, #8
 8000d38:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d3e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d40:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d44:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d4a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4c:	f107 0320 	add.w	r3, r7, #32
 8000d50:	4618      	mov	r0, r3
 8000d52:	f002 fc93 	bl	800367c <HAL_RCC_OscConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000d5c:	f000 f864 	bl	8000e28 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000d60:	236f      	movs	r3, #111	; 0x6f
 8000d62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d64:	2303      	movs	r3, #3
 8000d66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2103      	movs	r1, #3
 8000d80:	4618      	mov	r0, r3
 8000d82:	f002 ffef 	bl	8003d64 <HAL_RCC_ClockConfig>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000d8c:	f000 f84c 	bl	8000e28 <Error_Handler>
  }
}
 8000d90:	bf00      	nop
 8000d92:	3768      	adds	r7, #104	; 0x68
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	58000400 	.word	0x58000400

08000d9c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b094      	sub	sp, #80	; 0x50
 8000da0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da2:	463b      	mov	r3, r7
 8000da4:	2250      	movs	r2, #80	; 0x50
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f006 fa13 	bl	80071d4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8000dae:	f44f 5354 	mov.w	r3, #13568	; 0x3500
 8000db2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8000db4:	2306      	movs	r3, #6
 8000db6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000db8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dbc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000dbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dc2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000dc4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000dc8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8000dca:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8000dce:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000dd0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000dd4:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000dd6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8000ddc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000de0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000de2:	2300      	movs	r3, #0
 8000de4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000de6:	2310      	movs	r3, #16
 8000de8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dea:	463b      	mov	r3, r7
 8000dec:	4618      	mov	r0, r3
 8000dee:	f003 fc28 	bl	8004642 <HAL_RCCEx_PeriphCLKConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8000df8:	f000 f816 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000dfc:	bf00      	nop
 8000dfe:	3750      	adds	r7, #80	; 0x50
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d101      	bne.n	8000e1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e16:	f000 fd15 	bl	8001844 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40014800 	.word	0x40014800

08000e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e2c:	b672      	cpsid	i
}
 8000e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <Error_Handler+0x8>

08000e32 <LL_AHB2_GRP1_EnableClock>:
{
 8000e32:	b480      	push	{r7}
 8000e34:	b085      	sub	sp, #20
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4013      	ands	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e56:	68fb      	ldr	r3, [r7, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <LL_AHB3_GRP1_EnableClock>:
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4013      	ands	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e88:	68fb      	ldr	r3, [r7, #12]
}
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <MX_QUADSPI_Init+0x44>)
 8000e9e:	4a10      	ldr	r2, [pc, #64]	; (8000ee0 <MX_QUADSPI_Init+0x48>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <MX_QUADSPI_Init+0x44>)
 8000ea4:	22ff      	movs	r2, #255	; 0xff
 8000ea6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <MX_QUADSPI_Init+0x44>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <MX_QUADSPI_Init+0x44>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <MX_QUADSPI_Init+0x44>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <MX_QUADSPI_Init+0x44>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <MX_QUADSPI_Init+0x44>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_QUADSPI_Init+0x44>)
 8000ec8:	f001 ff9a 	bl	8002e00 <HAL_QSPI_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000ed2:	f7ff ffa9 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000104 	.word	0x20000104
 8000ee0:	a0001000 	.word	0xa0001000

08000ee4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <HAL_QSPI_MspInit+0x84>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d12b      	bne.n	8000f5e <HAL_QSPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000f06:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f0a:	f7ff ffab 	bl	8000e64 <LL_AHB3_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	2002      	movs	r0, #2
 8000f10:	f7ff ff8f 	bl	8000e32 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	2001      	movs	r0, #1
 8000f16:	f7ff ff8c 	bl	8000e32 <LL_AHB2_GRP1_EnableClock>
    PA2     ------> QUADSPI_BK1_NCS
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3
    PA7     ------> QUADSPI_BK1_IO2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f2c:	230a      	movs	r3, #10
 8000f2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	4619      	mov	r1, r3
 8000f36:	480d      	ldr	r0, [pc, #52]	; (8000f6c <HAL_QSPI_MspInit+0x88>)
 8000f38:	f001 fc2e 	bl	8002798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 8000f3c:	23cc      	movs	r3, #204	; 0xcc
 8000f3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f4c:	230a      	movs	r3, #10
 8000f4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	4619      	mov	r1, r3
 8000f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5a:	f001 fc1d 	bl	8002798 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000f5e:	bf00      	nop
 8000f60:	3720      	adds	r7, #32
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	a0001000 	.word	0xa0001000
 8000f6c:	48000400 	.word	0x48000400

08000f70 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <LL_AHB2_GRP1_EnableClock>:
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b085      	sub	sp, #20
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fcc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
}
 8000fd6:	bf00      	nop
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <MX_SPI1_Init+0x74>)
 8000fea:	4a1c      	ldr	r2, [pc, #112]	; (800105c <MX_SPI1_Init+0x78>)
 8000fec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fee:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <MX_SPI1_Init+0x74>)
 8000ff0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ff4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <MX_SPI1_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <MX_SPI1_Init+0x74>)
 8000ffe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001002:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <MX_SPI1_Init+0x74>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800100a:	4b13      	ldr	r3, [pc, #76]	; (8001058 <MX_SPI1_Init+0x74>)
 800100c:	2200      	movs	r2, #0
 800100e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_SPI1_Init+0x74>)
 8001012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001016:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_SPI1_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <MX_SPI1_Init+0x74>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_SPI1_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <MX_SPI1_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_SPI1_Init+0x74>)
 8001032:	2207      	movs	r2, #7
 8001034:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001036:	4b08      	ldr	r3, [pc, #32]	; (8001058 <MX_SPI1_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <MX_SPI1_Init+0x74>)
 800103e:	2208      	movs	r2, #8
 8001040:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_SPI1_Init+0x74>)
 8001044:	f003 fd84 	bl	8004b50 <HAL_SPI_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800104e:	f7ff feeb 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000148 	.word	0x20000148
 800105c:	40013000 	.word	0x40013000

08001060 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <HAL_SPI_MspInit+0x58>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d116      	bne.n	80010b0 <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001082:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001086:	f7ff ff93 	bl	8000fb0 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	2002      	movs	r0, #2
 800108c:	f7ff ff77 	bl	8000f7e <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001090:	2338      	movs	r3, #56	; 0x38
 8001092:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010a0:	2305      	movs	r3, #5
 80010a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	4619      	mov	r1, r3
 80010aa:	4804      	ldr	r0, [pc, #16]	; (80010bc <HAL_SPI_MspInit+0x5c>)
 80010ac:	f001 fb74 	bl	8002798 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010b0:	bf00      	nop
 80010b2:	3720      	adds	r7, #32
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40013000 	.word	0x40013000
 80010bc:	48000400 	.word	0x48000400

080010c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <LL_APB2_GRP1_EnableClock>:
{
 80010ce:	b480      	push	{r7}
 80010d0:	b085      	sub	sp, #20
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80010d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4013      	ands	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	; 0x30
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8001110:	2200      	movs	r2, #0
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	201a      	movs	r0, #26
 8001116:	f001 fb17 	bl	8002748 <HAL_NVIC_SetPriority>
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800111a:	201a      	movs	r0, #26
 800111c:	f001 fb2e 	bl	800277c <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001120:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001124:	f7ff ffd3 	bl	80010ce <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001128:	f107 0208 	add.w	r2, r7, #8
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f003 f802 	bl	800413c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001138:	f002 ffea 	bl	8004110 <HAL_RCC_GetPCLK2Freq>
 800113c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800113e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001140:	4a12      	ldr	r2, [pc, #72]	; (800118c <HAL_InitTick+0x8c>)
 8001142:	fba2 2303 	umull	r2, r3, r2, r3
 8001146:	0c9b      	lsrs	r3, r3, #18
 8001148:	3b01      	subs	r3, #1
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800114c:	4b10      	ldr	r3, [pc, #64]	; (8001190 <HAL_InitTick+0x90>)
 800114e:	4a11      	ldr	r2, [pc, #68]	; (8001194 <HAL_InitTick+0x94>)
 8001150:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <HAL_InitTick+0x90>)
 8001154:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001158:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800115a:	4a0d      	ldr	r2, [pc, #52]	; (8001190 <HAL_InitTick+0x90>)
 800115c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115e:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <HAL_InitTick+0x90>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_InitTick+0x90>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 800116c:	4808      	ldr	r0, [pc, #32]	; (8001190 <HAL_InitTick+0x90>)
 800116e:	f003 fd92 	bl	8004c96 <HAL_TIM_Base_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d104      	bne.n	8001182 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <HAL_InitTick+0x90>)
 800117a:	f003 fde3 	bl	8004d44 <HAL_TIM_Base_Start_IT>
 800117e:	4603      	mov	r3, r0
 8001180:	e000      	b.n	8001184 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3730      	adds	r7, #48	; 0x30
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	431bde83 	.word	0x431bde83
 8001190:	200001ac 	.word	0x200001ac
 8001194:	40014800 	.word	0x40014800

08001198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800119c:	e7fe      	b.n	800119c <NMI_Handler+0x4>

0800119e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <HardFault_Handler+0x4>

080011a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <MemManage_Handler+0x4>

080011aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <BusFault_Handler+0x4>

080011b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <UsageFault_Handler+0x4>

080011b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011c8:	4803      	ldr	r0, [pc, #12]	; (80011d8 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 80011ca:	f003 fe6a 	bl	8004ea2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80011ce:	4803      	ldr	r0, [pc, #12]	; (80011dc <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80011d0:	f003 fe67 	bl	8004ea2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200001f8 	.word	0x200001f8
 80011dc:	200001ac 	.word	0x200001ac

080011e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80011e4:	4b24      	ldr	r3, [pc, #144]	; (8001278 <SystemInit+0x98>)
 80011e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ea:	4a23      	ldr	r2, [pc, #140]	; (8001278 <SystemInit+0x98>)
 80011ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80011f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001208:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800120c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800120e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <SystemInit+0x9c>)
 800121a:	4013      	ands	r3, r2
 800121c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800121e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001226:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800122a:	f023 0305 	bic.w	r3, r3, #5
 800122e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001236:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800123a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800123e:	f023 0301 	bic.w	r3, r3, #1
 8001242:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800124a:	4a0d      	ldr	r2, [pc, #52]	; (8001280 <SystemInit+0xa0>)
 800124c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800124e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001252:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <SystemInit+0xa0>)
 8001254:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001260:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001264:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00
 800127c:	faf6fefb 	.word	0xfaf6fefb
 8001280:	22041000 	.word	0x22041000

08001284 <LL_AHB2_GRP1_EnableClock>:
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800128c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001290:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001292:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4313      	orrs	r3, r2
 800129a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800129c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4013      	ands	r3, r2
 80012a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012a8:	68fb      	ldr	r3, [r7, #12]
}
 80012aa:	bf00      	nop
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <LL_APB2_GRP1_EnableClock>:
{
 80012b6:	b480      	push	{r7}
 80012b8:	b085      	sub	sp, #20
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80012be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80012ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4013      	ands	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012da:	68fb      	ldr	r3, [r7, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b09c      	sub	sp, #112	; 0x70
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001308:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
 8001318:	615a      	str	r2, [r3, #20]
 800131a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2234      	movs	r2, #52	; 0x34
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f005 ff56 	bl	80071d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001328:	4b4b      	ldr	r3, [pc, #300]	; (8001458 <MX_TIM1_Init+0x170>)
 800132a:	4a4c      	ldr	r2, [pc, #304]	; (800145c <MX_TIM1_Init+0x174>)
 800132c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800132e:	4b4a      	ldr	r3, [pc, #296]	; (8001458 <MX_TIM1_Init+0x170>)
 8001330:	2200      	movs	r2, #0
 8001332:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001334:	4b48      	ldr	r3, [pc, #288]	; (8001458 <MX_TIM1_Init+0x170>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800133a:	4b47      	ldr	r3, [pc, #284]	; (8001458 <MX_TIM1_Init+0x170>)
 800133c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001340:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001342:	4b45      	ldr	r3, [pc, #276]	; (8001458 <MX_TIM1_Init+0x170>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001348:	4b43      	ldr	r3, [pc, #268]	; (8001458 <MX_TIM1_Init+0x170>)
 800134a:	2200      	movs	r2, #0
 800134c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134e:	4b42      	ldr	r3, [pc, #264]	; (8001458 <MX_TIM1_Init+0x170>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001354:	4840      	ldr	r0, [pc, #256]	; (8001458 <MX_TIM1_Init+0x170>)
 8001356:	f003 fc9e 	bl	8004c96 <HAL_TIM_Base_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001360:	f7ff fd62 	bl	8000e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001368:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800136a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800136e:	4619      	mov	r1, r3
 8001370:	4839      	ldr	r0, [pc, #228]	; (8001458 <MX_TIM1_Init+0x170>)
 8001372:	f003 ffc9 	bl	8005308 <HAL_TIM_ConfigClockSource>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800137c:	f7ff fd54 	bl	8000e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001380:	4835      	ldr	r0, [pc, #212]	; (8001458 <MX_TIM1_Init+0x170>)
 8001382:	f003 fd2d 	bl	8004de0 <HAL_TIM_PWM_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800138c:	f7ff fd4c 	bl	8000e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001390:	2300      	movs	r3, #0
 8001392:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800139c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013a0:	4619      	mov	r1, r3
 80013a2:	482d      	ldr	r0, [pc, #180]	; (8001458 <MX_TIM1_Init+0x170>)
 80013a4:	f004 fc20 	bl	8005be8 <HAL_TIMEx_MasterConfigSynchronization>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80013ae:	f7ff fd3b 	bl	8000e28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b2:	2360      	movs	r3, #96	; 0x60
 80013b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ba:	2300      	movs	r3, #0
 80013bc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013be:	2300      	movs	r3, #0
 80013c0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013d2:	2200      	movs	r2, #0
 80013d4:	4619      	mov	r1, r3
 80013d6:	4820      	ldr	r0, [pc, #128]	; (8001458 <MX_TIM1_Init+0x170>)
 80013d8:	f003 fe82 	bl	80050e0 <HAL_TIM_PWM_ConfigChannel>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80013e2:	f7ff fd21 	bl	8000e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013ea:	2208      	movs	r2, #8
 80013ec:	4619      	mov	r1, r3
 80013ee:	481a      	ldr	r0, [pc, #104]	; (8001458 <MX_TIM1_Init+0x170>)
 80013f0:	f003 fe76 	bl	80050e0 <HAL_TIM_PWM_ConfigChannel>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80013fa:	f7ff fd15 	bl	8000e28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001412:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001416:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001424:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800142e:	2300      	movs	r3, #0
 8001430:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	4619      	mov	r1, r3
 800143a:	4807      	ldr	r0, [pc, #28]	; (8001458 <MX_TIM1_Init+0x170>)
 800143c:	f004 fc34 	bl	8005ca8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8001446:	f7ff fcef 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800144a:	4803      	ldr	r0, [pc, #12]	; (8001458 <MX_TIM1_Init+0x170>)
 800144c:	f000 f824 	bl	8001498 <HAL_TIM_MspPostInit>

}
 8001450:	bf00      	nop
 8001452:	3770      	adds	r7, #112	; 0x70
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	200001f8 	.word	0x200001f8
 800145c:	40012c00 	.word	0x40012c00

08001460 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a09      	ldr	r2, [pc, #36]	; (8001494 <HAL_TIM_Base_MspInit+0x34>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d10b      	bne.n	800148a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001472:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001476:	f7ff ff1e 	bl	80012b6 <LL_APB2_GRP1_EnableClock>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 15, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	210f      	movs	r1, #15
 800147e:	201a      	movs	r0, #26
 8001480:	f001 f962 	bl	8002748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001484:	201a      	movs	r0, #26
 8001486:	f001 f979 	bl	800277c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40012c00 	.word	0x40012c00

08001498 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 030c 	add.w	r3, r7, #12
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a0d      	ldr	r2, [pc, #52]	; (80014ec <HAL_TIM_MspPostInit+0x54>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d114      	bne.n	80014e4 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	2001      	movs	r0, #1
 80014bc:	f7ff fee2 	bl	8001284 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80014c0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80014c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014d2:	2301      	movs	r3, #1
 80014d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	4619      	mov	r1, r3
 80014dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e0:	f001 f95a 	bl	8002798 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014e4:	bf00      	nop
 80014e6:	3720      	adds	r7, #32
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40012c00 	.word	0x40012c00

080014f0 <LL_AHB2_GRP1_EnableClock>:
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4313      	orrs	r3, r2
 8001506:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4013      	ands	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001514:	68fb      	ldr	r3, [r7, #12]
}
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <LL_APB1_GRP2_EnableClock>:
{
 8001522:	b480      	push	{r7}
 8001524:	b085      	sub	sp, #20
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 800152a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800152e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001530:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4313      	orrs	r3, r2
 8001538:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800153a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4013      	ands	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001546:	68fb      	ldr	r3, [r7, #12]
}
 8001548:	bf00      	nop
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001558:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <MX_LPUART1_UART_Init+0x90>)
 800155a:	4a23      	ldr	r2, [pc, #140]	; (80015e8 <MX_LPUART1_UART_Init+0x94>)
 800155c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800155e:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <MX_LPUART1_UART_Init+0x90>)
 8001560:	4a22      	ldr	r2, [pc, #136]	; (80015ec <MX_LPUART1_UART_Init+0x98>)
 8001562:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001564:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <MX_LPUART1_UART_Init+0x90>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800156a:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <MX_LPUART1_UART_Init+0x90>)
 800156c:	2200      	movs	r2, #0
 800156e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001570:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <MX_LPUART1_UART_Init+0x90>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001576:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <MX_LPUART1_UART_Init+0x90>)
 8001578:	220c      	movs	r2, #12
 800157a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <MX_LPUART1_UART_Init+0x90>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <MX_LPUART1_UART_Init+0x90>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001588:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <MX_LPUART1_UART_Init+0x90>)
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <MX_LPUART1_UART_Init+0x90>)
 8001590:	2200      	movs	r2, #0
 8001592:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <MX_LPUART1_UART_Init+0x90>)
 8001596:	2200      	movs	r2, #0
 8001598:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800159a:	4812      	ldr	r0, [pc, #72]	; (80015e4 <MX_LPUART1_UART_Init+0x90>)
 800159c:	f004 fc52 	bl	8005e44 <HAL_UART_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80015a6:	f7ff fc3f 	bl	8000e28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015aa:	2100      	movs	r1, #0
 80015ac:	480d      	ldr	r0, [pc, #52]	; (80015e4 <MX_LPUART1_UART_Init+0x90>)
 80015ae:	f005 f913 	bl	80067d8 <HAL_UARTEx_SetTxFifoThreshold>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80015b8:	f7ff fc36 	bl	8000e28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015bc:	2100      	movs	r1, #0
 80015be:	4809      	ldr	r0, [pc, #36]	; (80015e4 <MX_LPUART1_UART_Init+0x90>)
 80015c0:	f005 f948 	bl	8006854 <HAL_UARTEx_SetRxFifoThreshold>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80015ca:	f7ff fc2d 	bl	8000e28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_LPUART1_UART_Init+0x90>)
 80015d0:	f005 f8c9 	bl	8006766 <HAL_UARTEx_DisableFifoMode>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80015da:	f7ff fc25 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000244 	.word	0x20000244
 80015e8:	40008000 	.word	0x40008000
 80015ec:	00033324 	.word	0x00033324

080015f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b09c      	sub	sp, #112	; 0x70
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	2250      	movs	r2, #80	; 0x50
 800160e:	2100      	movs	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f005 fddf 	bl	80071d4 <memset>
  if(uartHandle->Instance==LPUART1)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a16      	ldr	r2, [pc, #88]	; (8001674 <HAL_UART_MspInit+0x84>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d124      	bne.n	800166a <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001620:	2302      	movs	r3, #2
 8001622:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001624:	2300      	movs	r3, #0
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	4618      	mov	r0, r3
 800162e:	f003 f808 	bl	8004642 <HAL_RCCEx_PeriphCLKConfig>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001638:	f7ff fbf6 	bl	8000e28 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800163c:	2001      	movs	r0, #1
 800163e:	f7ff ff70 	bl	8001522 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001642:	2002      	movs	r0, #2
 8001644:	f7ff ff54 	bl	80014f0 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001648:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800164c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001656:	2303      	movs	r3, #3
 8001658:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800165a:	2308      	movs	r3, #8
 800165c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001662:	4619      	mov	r1, r3
 8001664:	4804      	ldr	r0, [pc, #16]	; (8001678 <HAL_UART_MspInit+0x88>)
 8001666:	f001 f897 	bl	8002798 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800166a:	bf00      	nop
 800166c:	3770      	adds	r7, #112	; 0x70
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40008000 	.word	0x40008000
 8001678:	48000400 	.word	0x48000400

0800167c <LL_AHB2_GRP1_EnableClock>:
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001688:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800168a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4313      	orrs	r3, r2
 8001692:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001698:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4013      	ands	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016a0:	68fb      	ldr	r3, [r7, #12]
}
 80016a2:	bf00      	nop
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <LL_APB1_GRP1_EnableClock>:
{
 80016ae:	b480      	push	{r7}
 80016b0:	b085      	sub	sp, #20
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80016b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80016c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4013      	ands	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016d2:	68fb      	ldr	r3, [r7, #12]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80016e4:	4b10      	ldr	r3, [pc, #64]	; (8001728 <MX_USB_PCD_Init+0x48>)
 80016e6:	4a11      	ldr	r2, [pc, #68]	; (800172c <MX_USB_PCD_Init+0x4c>)
 80016e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <MX_USB_PCD_Init+0x48>)
 80016ec:	2208      	movs	r2, #8
 80016ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80016f0:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <MX_USB_PCD_Init+0x48>)
 80016f2:	2202      	movs	r2, #2
 80016f4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <MX_USB_PCD_Init+0x48>)
 80016f8:	2202      	movs	r2, #2
 80016fa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80016fc:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <MX_USB_PCD_Init+0x48>)
 80016fe:	2200      	movs	r2, #0
 8001700:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <MX_USB_PCD_Init+0x48>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <MX_USB_PCD_Init+0x48>)
 800170a:	2200      	movs	r2, #0
 800170c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <MX_USB_PCD_Init+0x48>)
 8001710:	2200      	movs	r2, #0
 8001712:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001714:	4804      	ldr	r0, [pc, #16]	; (8001728 <MX_USB_PCD_Init+0x48>)
 8001716:	f001 fa51 	bl	8002bbc <HAL_PCD_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001720:	f7ff fb82 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	200002d8 	.word	0x200002d8
 800172c:	40006800 	.word	0x40006800

08001730 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 030c 	add.w	r3, r7, #12
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0f      	ldr	r2, [pc, #60]	; (800178c <HAL_PCD_MspInit+0x5c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d118      	bne.n	8001784 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2001      	movs	r0, #1
 8001754:	f7ff ff92 	bl	800167c <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001758:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800175c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800176a:	230a      	movs	r3, #10
 800176c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 030c 	add.w	r3, r7, #12
 8001772:	4619      	mov	r1, r3
 8001774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001778:	f001 f80e 	bl	8002798 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800177c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001780:	f7ff ff95 	bl	80016ae <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8001784:	bf00      	nop
 8001786:	3720      	adds	r7, #32
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40006800 	.word	0x40006800

08001790 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001790:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001792:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001794:	3304      	adds	r3, #4

08001796 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001796:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001798:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800179a:	d3f9      	bcc.n	8001790 <CopyDataInit>
  bx lr
 800179c:	4770      	bx	lr

0800179e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800179e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80017a0:	3004      	adds	r0, #4

080017a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80017a2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80017a4:	d3fb      	bcc.n	800179e <FillZerobss>
  bx lr
 80017a6:	4770      	bx	lr

080017a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017a8:	480c      	ldr	r0, [pc, #48]	; (80017dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017ac:	f7ff fd18 	bl	80011e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80017b0:	480b      	ldr	r0, [pc, #44]	; (80017e0 <LoopForever+0x6>)
 80017b2:	490c      	ldr	r1, [pc, #48]	; (80017e4 <LoopForever+0xa>)
 80017b4:	4a0c      	ldr	r2, [pc, #48]	; (80017e8 <LoopForever+0xe>)
 80017b6:	2300      	movs	r3, #0
 80017b8:	f7ff ffed 	bl	8001796 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80017bc:	480b      	ldr	r0, [pc, #44]	; (80017ec <LoopForever+0x12>)
 80017be:	490c      	ldr	r1, [pc, #48]	; (80017f0 <LoopForever+0x16>)
 80017c0:	4a0c      	ldr	r2, [pc, #48]	; (80017f4 <LoopForever+0x1a>)
 80017c2:	2300      	movs	r3, #0
 80017c4:	f7ff ffe7 	bl	8001796 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80017c8:	480b      	ldr	r0, [pc, #44]	; (80017f8 <LoopForever+0x1e>)
 80017ca:	490c      	ldr	r1, [pc, #48]	; (80017fc <LoopForever+0x22>)
 80017cc:	2300      	movs	r3, #0
 80017ce:	f7ff ffe8 	bl	80017a2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017d2:	f005 fd07 	bl	80071e4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80017d6:	f7ff fa5f 	bl	8000c98 <main>

080017da <LoopForever>:

LoopForever:
  b LoopForever
 80017da:	e7fe      	b.n	80017da <LoopForever>
  ldr   r0, =_estack
 80017dc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80017e0:	20000008 	.word	0x20000008
 80017e4:	20000014 	.word	0x20000014
 80017e8:	08007348 	.word	0x08007348
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80017ec:	20030000 	.word	0x20030000
 80017f0:	20030000 	.word	0x20030000
 80017f4:	08007354 	.word	0x08007354
  INIT_BSS _sbss, _ebss
 80017f8:	20000014 	.word	0x20000014
 80017fc:	200005d0 	.word	0x200005d0

08001800 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001800:	e7fe      	b.n	8001800 <ADC1_IRQHandler>
	...

08001804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_Init+0x3c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <HAL_Init+0x3c>)
 8001814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001818:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181a:	2003      	movs	r0, #3
 800181c:	f000 ff89 	bl	8002732 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001820:	200f      	movs	r0, #15
 8001822:	f7ff fc6d 	bl	8001100 <HAL_InitTick>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d002      	beq.n	8001832 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	71fb      	strb	r3, [r7, #7]
 8001830:	e001      	b.n	8001836 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001832:	f7ff fc45 	bl	80010c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001836:	79fb      	ldrb	r3, [r7, #7]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	58004000 	.word	0x58004000

08001844 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_IncTick+0x20>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_IncTick+0x24>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4413      	add	r3, r2
 8001854:	4a04      	ldr	r2, [pc, #16]	; (8001868 <HAL_IncTick+0x24>)
 8001856:	6013      	str	r3, [r2, #0]
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20000010 	.word	0x20000010
 8001868:	200005cc 	.word	0x200005cc

0800186c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return uwTick;
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <HAL_GetTick+0x14>)
 8001872:	681b      	ldr	r3, [r3, #0]
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	200005cc 	.word	0x200005cc

08001884 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001888:	4b03      	ldr	r3, [pc, #12]	; (8001898 <HAL_GetTickPrio+0x14>)
 800188a:	681b      	ldr	r3, [r3, #0]
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	2000000c 	.word	0x2000000c

0800189c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	609a      	str	r2, [r3, #8]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001904:	b480      	push	{r7}
 8001906:	b087      	sub	sp, #28
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3360      	adds	r3, #96	; 0x60
 8001916:	461a      	mov	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <LL_ADC_SetOffset+0x44>)
 8001926:	4013      	ands	r3, r2
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	4313      	orrs	r3, r2
 8001934:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800193c:	bf00      	nop
 800193e:	371c      	adds	r7, #28
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	03fff000 	.word	0x03fff000

0800194c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3360      	adds	r3, #96	; 0x60
 800195a:	461a      	mov	r2, r3
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800196c:	4618      	mov	r0, r3
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001978:	b480      	push	{r7}
 800197a:	b087      	sub	sp, #28
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	3360      	adds	r3, #96	; 0x60
 8001988:	461a      	mov	r2, r3
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	431a      	orrs	r2, r3
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019a2:	bf00      	nop
 80019a4:	371c      	adds	r7, #28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b087      	sub	sp, #28
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	60f8      	str	r0, [r7, #12]
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	3330      	adds	r3, #48	; 0x30
 80019be:	461a      	mov	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	0a1b      	lsrs	r3, r3, #8
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	4413      	add	r3, r2
 80019cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f003 031f 	and.w	r3, r3, #31
 80019d8:	211f      	movs	r1, #31
 80019da:	fa01 f303 	lsl.w	r3, r1, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	401a      	ands	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	0e9b      	lsrs	r3, r3, #26
 80019e6:	f003 011f 	and.w	r1, r3, #31
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	f003 031f 	and.w	r3, r3, #31
 80019f0:	fa01 f303 	lsl.w	r3, r1, r3
 80019f4:	431a      	orrs	r2, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80019fa:	bf00      	nop
 80019fc:	371c      	adds	r7, #28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b087      	sub	sp, #28
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	3314      	adds	r3, #20
 8001a16:	461a      	mov	r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	0e5b      	lsrs	r3, r3, #25
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	0d1b      	lsrs	r3, r3, #20
 8001a2e:	f003 031f 	and.w	r3, r3, #31
 8001a32:	2107      	movs	r1, #7
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	0d1b      	lsrs	r3, r3, #20
 8001a40:	f003 031f 	and.w	r3, r3, #31
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001a50:	bf00      	nop
 8001a52:	371c      	adds	r7, #28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a74:	43db      	mvns	r3, r3
 8001a76:	401a      	ands	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f003 0318 	and.w	r3, r3, #24
 8001a7e:	4908      	ldr	r1, [pc, #32]	; (8001aa0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a80:	40d9      	lsrs	r1, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	400b      	ands	r3, r1
 8001a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a92:	bf00      	nop
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	0007ffff 	.word	0x0007ffff

08001aa4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ab4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6093      	str	r3, [r2, #8]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001adc:	d101      	bne.n	8001ae2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b2c:	d101      	bne.n	8001b32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <LL_ADC_IsEnabled+0x18>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <LL_ADC_IsEnabled+0x1a>
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d101      	bne.n	8001b7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d101      	bne.n	8001ba4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e12e      	b.n	8001e30 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d109      	bne.n	8001bf4 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7fe fcc7 	bl	8000574 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff65 	bl	8001ac8 <LL_ADC_IsDeepPowerDownEnabled>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d004      	beq.n	8001c0e <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff4b 	bl	8001aa4 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ff80 	bl	8001b18 <LL_ADC_IsInternalRegulatorEnabled>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d115      	bne.n	8001c4a <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff64 	bl	8001af0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c28:	4b83      	ldr	r3, [pc, #524]	; (8001e38 <HAL_ADC_Init+0x284>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	099b      	lsrs	r3, r3, #6
 8001c2e:	4a83      	ldr	r2, [pc, #524]	; (8001e3c <HAL_ADC_Init+0x288>)
 8001c30:	fba2 2303 	umull	r2, r3, r2, r3
 8001c34:	099b      	lsrs	r3, r3, #6
 8001c36:	3301      	adds	r3, #1
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c3c:	e002      	b.n	8001c44 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f9      	bne.n	8001c3e <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ff62 	bl	8001b18 <LL_ADC_IsInternalRegulatorEnabled>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10d      	bne.n	8001c76 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5e:	f043 0210 	orr.w	r2, r3, #16
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6a:	f043 0201 	orr.w	r2, r3, #1
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff ff73 	bl	8001b66 <LL_ADC_REG_IsConversionOngoing>
 8001c80:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f040 80c7 	bne.w	8001e1e <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f040 80c3 	bne.w	8001e1e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ca0:	f043 0202 	orr.w	r2, r3, #2
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff47 	bl	8001b40 <LL_ADC_IsEnabled>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10b      	bne.n	8001cd0 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cb8:	4861      	ldr	r0, [pc, #388]	; (8001e40 <HAL_ADC_Init+0x28c>)
 8001cba:	f7ff ff41 	bl	8001b40 <LL_ADC_IsEnabled>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d105      	bne.n	8001cd0 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	485e      	ldr	r0, [pc, #376]	; (8001e44 <HAL_ADC_Init+0x290>)
 8001ccc:	f7ff fde6 	bl	800189c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	7e5b      	ldrb	r3, [r3, #25]
 8001cd4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cda:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ce0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001ce6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cee:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8001cf0:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d106      	bne.n	8001d10 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	3b01      	subs	r3, #1
 8001d08:	045b      	lsls	r3, r3, #17
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d009      	beq.n	8001d2c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	4b45      	ldr	r3, [pc, #276]	; (8001e48 <HAL_ADC_Init+0x294>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	69b9      	ldr	r1, [r7, #24]
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff0e 	bl	8001b66 <LL_ADC_REG_IsConversionOngoing>
 8001d4a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff1b 	bl	8001b8c <LL_ADC_INJ_IsConversionOngoing>
 8001d56:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d13d      	bne.n	8001dda <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d13a      	bne.n	8001dda <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d68:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d70:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d80:	f023 0302 	bic.w	r3, r3, #2
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	69b9      	ldr	r1, [r7, #24]
 8001d8a:	430b      	orrs	r3, r1
 8001d8c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d118      	bne.n	8001dca <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001da2:	f023 0304 	bic.w	r3, r3, #4
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dae:	4311      	orrs	r1, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001db4:	4311      	orrs	r1, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	611a      	str	r2, [r3, #16]
 8001dc8:	e007      	b.n	8001dda <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0201 	bic.w	r2, r2, #1
 8001dd8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d10c      	bne.n	8001dfc <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	f023 010f 	bic.w	r1, r3, #15
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	1e5a      	subs	r2, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	631a      	str	r2, [r3, #48]	; 0x30
 8001dfa:	e007      	b.n	8001e0c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 020f 	bic.w	r2, r2, #15
 8001e0a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e10:	f023 0303 	bic.w	r3, r3, #3
 8001e14:	f043 0201 	orr.w	r2, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	655a      	str	r2, [r3, #84]	; 0x54
 8001e1c:	e007      	b.n	8001e2e <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e22:	f043 0210 	orr.w	r2, r3, #16
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3720      	adds	r7, #32
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20000008 	.word	0x20000008
 8001e3c:	053e2d63 	.word	0x053e2d63
 8001e40:	50040000 	.word	0x50040000
 8001e44:	50040300 	.word	0x50040300
 8001e48:	fff0c007 	.word	0xfff0c007

08001e4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b0b6      	sub	sp, #216	; 0xd8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d101      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x22>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e39f      	b.n	80025ae <HAL_ADC_ConfigChannel+0x762>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff fe73 	bl	8001b66 <LL_ADC_REG_IsConversionOngoing>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f040 8384 	bne.w	8002590 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	6859      	ldr	r1, [r3, #4]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	f7ff fd8a 	bl	80019ae <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fe61 	bl	8001b66 <LL_ADC_REG_IsConversionOngoing>
 8001ea4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fe6d 	bl	8001b8c <LL_ADC_INJ_IsConversionOngoing>
 8001eb2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eb6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f040 81a6 	bne.w	800220c <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ec0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f040 81a1 	bne.w	800220c <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	6819      	ldr	r1, [r3, #0]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	f7ff fd95 	bl	8001a06 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	695a      	ldr	r2, [r3, #20]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	08db      	lsrs	r3, r3, #3
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d00a      	beq.n	8001f14 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	6919      	ldr	r1, [r3, #16]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f0e:	f7ff fcf9 	bl	8001904 <LL_ADC_SetOffset>
 8001f12:	e17b      	b.n	800220c <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fd16 	bl	800194c <LL_ADC_GetOffsetChannel>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10a      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0xf4>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff fd0b 	bl	800194c <LL_ADC_GetOffsetChannel>
 8001f36:	4603      	mov	r3, r0
 8001f38:	0e9b      	lsrs	r3, r3, #26
 8001f3a:	f003 021f 	and.w	r2, r3, #31
 8001f3e:	e01e      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x132>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2100      	movs	r1, #0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fd00 	bl	800194c <LL_ADC_GetOffsetChannel>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8001f5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8001f66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8001f6e:	2320      	movs	r3, #32
 8001f70:	e004      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8001f72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d105      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x14a>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	0e9b      	lsrs	r3, r3, #26
 8001f90:	f003 031f 	and.w	r3, r3, #31
 8001f94:	e018      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x17c>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001faa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001fb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8001fba:	2320      	movs	r3, #32
 8001fbc:	e004      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8001fbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fc2:	fab3 f383 	clz	r3, r3
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d106      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff fccf 	bl	8001978 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2101      	movs	r1, #1
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fcb3 	bl	800194c <LL_ADC_GetOffsetChannel>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10a      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x1ba>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fca8 	bl	800194c <LL_ADC_GetOffsetChannel>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	0e9b      	lsrs	r3, r3, #26
 8002000:	f003 021f 	and.w	r2, r3, #31
 8002004:	e01e      	b.n	8002044 <HAL_ADC_ConfigChannel+0x1f8>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2101      	movs	r1, #1
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fc9d 	bl	800194c <LL_ADC_GetOffsetChannel>
 8002012:	4603      	mov	r3, r0
 8002014:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800201c:	fa93 f3a3 	rbit	r3, r3
 8002020:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002024:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002028:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800202c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002034:	2320      	movs	r3, #32
 8002036:	e004      	b.n	8002042 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002038:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800203c:	fab3 f383 	clz	r3, r3
 8002040:	b2db      	uxtb	r3, r3
 8002042:	461a      	mov	r2, r3
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800204c:	2b00      	cmp	r3, #0
 800204e:	d105      	bne.n	800205c <HAL_ADC_ConfigChannel+0x210>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	0e9b      	lsrs	r3, r3, #26
 8002056:	f003 031f 	and.w	r3, r3, #31
 800205a:	e018      	b.n	800208e <HAL_ADC_ConfigChannel+0x242>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002070:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002074:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002078:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002080:	2320      	movs	r3, #32
 8002082:	e004      	b.n	800208e <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002084:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002088:	fab3 f383 	clz	r3, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	429a      	cmp	r2, r3
 8002090:	d106      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2200      	movs	r2, #0
 8002098:	2101      	movs	r1, #1
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fc6c 	bl	8001978 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2102      	movs	r1, #2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fc50 	bl	800194c <LL_ADC_GetOffsetChannel>
 80020ac:	4603      	mov	r3, r0
 80020ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10a      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x280>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2102      	movs	r1, #2
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fc45 	bl	800194c <LL_ADC_GetOffsetChannel>
 80020c2:	4603      	mov	r3, r0
 80020c4:	0e9b      	lsrs	r3, r3, #26
 80020c6:	f003 021f 	and.w	r2, r3, #31
 80020ca:	e01e      	b.n	800210a <HAL_ADC_ConfigChannel+0x2be>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2102      	movs	r1, #2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff fc3a 	bl	800194c <LL_ADC_GetOffsetChannel>
 80020d8:	4603      	mov	r3, r0
 80020da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80020ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80020f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80020fa:	2320      	movs	r3, #32
 80020fc:	e004      	b.n	8002108 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80020fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002102:	fab3 f383 	clz	r3, r3
 8002106:	b2db      	uxtb	r3, r3
 8002108:	461a      	mov	r2, r3
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002112:	2b00      	cmp	r3, #0
 8002114:	d105      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x2d6>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	0e9b      	lsrs	r3, r3, #26
 800211c:	f003 031f 	and.w	r3, r3, #31
 8002120:	e016      	b.n	8002150 <HAL_ADC_ConfigChannel+0x304>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002134:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002136:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800213a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002142:	2320      	movs	r3, #32
 8002144:	e004      	b.n	8002150 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002146:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	429a      	cmp	r2, r3
 8002152:	d106      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2200      	movs	r2, #0
 800215a:	2102      	movs	r1, #2
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fc0b 	bl	8001978 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2103      	movs	r1, #3
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fbef 	bl	800194c <LL_ADC_GetOffsetChannel>
 800216e:	4603      	mov	r3, r0
 8002170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10a      	bne.n	800218e <HAL_ADC_ConfigChannel+0x342>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2103      	movs	r1, #3
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fbe4 	bl	800194c <LL_ADC_GetOffsetChannel>
 8002184:	4603      	mov	r3, r0
 8002186:	0e9b      	lsrs	r3, r3, #26
 8002188:	f003 021f 	and.w	r2, r3, #31
 800218c:	e017      	b.n	80021be <HAL_ADC_ConfigChannel+0x372>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2103      	movs	r1, #3
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fbd9 	bl	800194c <LL_ADC_GetOffsetChannel>
 800219a:	4603      	mov	r3, r0
 800219c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021a0:	fa93 f3a3 	rbit	r3, r3
 80021a4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80021a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021a8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80021aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80021b0:	2320      	movs	r3, #32
 80021b2:	e003      	b.n	80021bc <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80021b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021b6:	fab3 f383 	clz	r3, r3
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	461a      	mov	r2, r3
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d105      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x38a>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	0e9b      	lsrs	r3, r3, #26
 80021d0:	f003 031f 	and.w	r3, r3, #31
 80021d4:	e011      	b.n	80021fa <HAL_ADC_ConfigChannel+0x3ae>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021de:	fa93 f3a3 	rbit	r3, r3
 80021e2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80021e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80021e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80021ee:	2320      	movs	r3, #32
 80021f0:	e003      	b.n	80021fa <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80021f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021f4:	fab3 f383 	clz	r3, r3
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d106      	bne.n	800220c <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2200      	movs	r2, #0
 8002204:	2103      	movs	r1, #3
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fbb6 	bl	8001978 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fc95 	bl	8001b40 <LL_ADC_IsEnabled>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	f040 81c2 	bne.w	80025a2 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	6819      	ldr	r1, [r3, #0]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	461a      	mov	r2, r3
 800222c:	f7ff fc16 	bl	8001a5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4a8e      	ldr	r2, [pc, #568]	; (8002470 <HAL_ADC_ConfigChannel+0x624>)
 8002236:	4293      	cmp	r3, r2
 8002238:	f040 8130 	bne.w	800249c <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10b      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x418>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	0e9b      	lsrs	r3, r3, #26
 8002252:	3301      	adds	r3, #1
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	2b09      	cmp	r3, #9
 800225a:	bf94      	ite	ls
 800225c:	2301      	movls	r3, #1
 800225e:	2300      	movhi	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	e019      	b.n	8002298 <HAL_ADC_ConfigChannel+0x44c>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800226c:	fa93 f3a3 	rbit	r3, r3
 8002270:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002272:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002274:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002276:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 800227c:	2320      	movs	r3, #32
 800227e:	e003      	b.n	8002288 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002280:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002282:	fab3 f383 	clz	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	3301      	adds	r3, #1
 800228a:	f003 031f 	and.w	r3, r3, #31
 800228e:	2b09      	cmp	r3, #9
 8002290:	bf94      	ite	ls
 8002292:	2301      	movls	r3, #1
 8002294:	2300      	movhi	r3, #0
 8002296:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002298:	2b00      	cmp	r3, #0
 800229a:	d079      	beq.n	8002390 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d107      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x46c>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	0e9b      	lsrs	r3, r3, #26
 80022ae:	3301      	adds	r3, #1
 80022b0:	069b      	lsls	r3, r3, #26
 80022b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022b6:	e015      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x498>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022c0:	fa93 f3a3 	rbit	r3, r3
 80022c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80022c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80022ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80022d0:	2320      	movs	r3, #32
 80022d2:	e003      	b.n	80022dc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80022d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022d6:	fab3 f383 	clz	r3, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	3301      	adds	r3, #1
 80022de:	069b      	lsls	r3, r3, #26
 80022e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d109      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x4b8>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	0e9b      	lsrs	r3, r3, #26
 80022f6:	3301      	adds	r3, #1
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	2101      	movs	r1, #1
 80022fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002302:	e017      	b.n	8002334 <HAL_ADC_ConfigChannel+0x4e8>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800230c:	fa93 f3a3 	rbit	r3, r3
 8002310:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002314:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 800231c:	2320      	movs	r3, #32
 800231e:	e003      	b.n	8002328 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	3301      	adds	r3, #1
 800232a:	f003 031f 	and.w	r3, r3, #31
 800232e:	2101      	movs	r1, #1
 8002330:	fa01 f303 	lsl.w	r3, r1, r3
 8002334:	ea42 0103 	orr.w	r1, r2, r3
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10a      	bne.n	800235a <HAL_ADC_ConfigChannel+0x50e>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	0e9b      	lsrs	r3, r3, #26
 800234a:	3301      	adds	r3, #1
 800234c:	f003 021f 	and.w	r2, r3, #31
 8002350:	4613      	mov	r3, r2
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4413      	add	r3, r2
 8002356:	051b      	lsls	r3, r3, #20
 8002358:	e018      	b.n	800238c <HAL_ADC_ConfigChannel+0x540>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002362:	fa93 f3a3 	rbit	r3, r3
 8002366:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800236a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800236c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002372:	2320      	movs	r3, #32
 8002374:	e003      	b.n	800237e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002378:	fab3 f383 	clz	r3, r3
 800237c:	b2db      	uxtb	r3, r3
 800237e:	3301      	adds	r3, #1
 8002380:	f003 021f 	and.w	r2, r3, #31
 8002384:	4613      	mov	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800238c:	430b      	orrs	r3, r1
 800238e:	e080      	b.n	8002492 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002398:	2b00      	cmp	r3, #0
 800239a:	d107      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x560>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	0e9b      	lsrs	r3, r3, #26
 80023a2:	3301      	adds	r3, #1
 80023a4:	069b      	lsls	r3, r3, #26
 80023a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023aa:	e015      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x58c>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b4:	fa93 f3a3 	rbit	r3, r3
 80023b8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80023ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023bc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80023be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80023c4:	2320      	movs	r3, #32
 80023c6:	e003      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80023c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ca:	fab3 f383 	clz	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	3301      	adds	r3, #1
 80023d2:	069b      	lsls	r3, r3, #26
 80023d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d109      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x5ac>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	0e9b      	lsrs	r3, r3, #26
 80023ea:	3301      	adds	r3, #1
 80023ec:	f003 031f 	and.w	r3, r3, #31
 80023f0:	2101      	movs	r1, #1
 80023f2:	fa01 f303 	lsl.w	r3, r1, r3
 80023f6:	e017      	b.n	8002428 <HAL_ADC_ConfigChannel+0x5dc>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	fa93 f3a3 	rbit	r3, r3
 8002404:	61fb      	str	r3, [r7, #28]
  return result;
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002410:	2320      	movs	r3, #32
 8002412:	e003      	b.n	800241c <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	3301      	adds	r3, #1
 800241e:	f003 031f 	and.w	r3, r3, #31
 8002422:	2101      	movs	r1, #1
 8002424:	fa01 f303 	lsl.w	r3, r1, r3
 8002428:	ea42 0103 	orr.w	r1, r2, r3
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10d      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x608>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	0e9b      	lsrs	r3, r3, #26
 800243e:	3301      	adds	r3, #1
 8002440:	f003 021f 	and.w	r2, r3, #31
 8002444:	4613      	mov	r3, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4413      	add	r3, r2
 800244a:	3b1e      	subs	r3, #30
 800244c:	051b      	lsls	r3, r3, #20
 800244e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002452:	e01d      	b.n	8002490 <HAL_ADC_ConfigChannel+0x644>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	613b      	str	r3, [r7, #16]
  return result;
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d103      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 800246c:	2320      	movs	r3, #32
 800246e:	e005      	b.n	800247c <HAL_ADC_ConfigChannel+0x630>
 8002470:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	3301      	adds	r3, #1
 800247e:	f003 021f 	and.w	r2, r3, #31
 8002482:	4613      	mov	r3, r2
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4413      	add	r3, r2
 8002488:	3b1e      	subs	r3, #30
 800248a:	051b      	lsls	r3, r3, #20
 800248c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002490:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002496:	4619      	mov	r1, r3
 8002498:	f7ff fab5 	bl	8001a06 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4b45      	ldr	r3, [pc, #276]	; (80025b8 <HAL_ADC_ConfigChannel+0x76c>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d07c      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024a8:	4844      	ldr	r0, [pc, #272]	; (80025bc <HAL_ADC_ConfigChannel+0x770>)
 80024aa:	f7ff fa1d 	bl	80018e8 <LL_ADC_GetCommonPathInternalCh>
 80024ae:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024b2:	4843      	ldr	r0, [pc, #268]	; (80025c0 <HAL_ADC_ConfigChannel+0x774>)
 80024b4:	f7ff fb44 	bl	8001b40 <LL_ADC_IsEnabled>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d15e      	bne.n	800257c <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a40      	ldr	r2, [pc, #256]	; (80025c4 <HAL_ADC_ConfigChannel+0x778>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d127      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x6cc>
 80024c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d121      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a39      	ldr	r2, [pc, #228]	; (80025c0 <HAL_ADC_ConfigChannel+0x774>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d161      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80024de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024e6:	4619      	mov	r1, r3
 80024e8:	4834      	ldr	r0, [pc, #208]	; (80025bc <HAL_ADC_ConfigChannel+0x770>)
 80024ea:	f7ff f9ea 	bl	80018c2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024ee:	4b36      	ldr	r3, [pc, #216]	; (80025c8 <HAL_ADC_ConfigChannel+0x77c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	099b      	lsrs	r3, r3, #6
 80024f4:	4a35      	ldr	r2, [pc, #212]	; (80025cc <HAL_ADC_ConfigChannel+0x780>)
 80024f6:	fba2 2303 	umull	r2, r3, r2, r3
 80024fa:	099b      	lsrs	r3, r3, #6
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	4613      	mov	r3, r2
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002508:	e002      	b.n	8002510 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	3b01      	subs	r3, #1
 800250e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f9      	bne.n	800250a <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002516:	e044      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a2c      	ldr	r2, [pc, #176]	; (80025d0 <HAL_ADC_ConfigChannel+0x784>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d113      	bne.n	800254a <HAL_ADC_ConfigChannel+0x6fe>
 8002522:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002526:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10d      	bne.n	800254a <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a23      	ldr	r2, [pc, #140]	; (80025c0 <HAL_ADC_ConfigChannel+0x774>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d134      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002538:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800253c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002540:	4619      	mov	r1, r3
 8002542:	481e      	ldr	r0, [pc, #120]	; (80025bc <HAL_ADC_ConfigChannel+0x770>)
 8002544:	f7ff f9bd 	bl	80018c2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002548:	e02b      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a21      	ldr	r2, [pc, #132]	; (80025d4 <HAL_ADC_ConfigChannel+0x788>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d126      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x756>
 8002554:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002558:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d120      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a16      	ldr	r2, [pc, #88]	; (80025c0 <HAL_ADC_ConfigChannel+0x774>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d11b      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800256a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800256e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002572:	4619      	mov	r1, r3
 8002574:	4811      	ldr	r0, [pc, #68]	; (80025bc <HAL_ADC_ConfigChannel+0x770>)
 8002576:	f7ff f9a4 	bl	80018c2 <LL_ADC_SetCommonPathInternalCh>
 800257a:	e012      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002580:	f043 0220 	orr.w	r2, r3, #32
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800258e:	e008      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002594:	f043 0220 	orr.w	r2, r3, #32
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80025aa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	37d8      	adds	r7, #216	; 0xd8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	80080000 	.word	0x80080000
 80025bc:	50040300 	.word	0x50040300
 80025c0:	50040000 	.word	0x50040000
 80025c4:	c7520000 	.word	0xc7520000
 80025c8:	20000008 	.word	0x20000008
 80025cc:	053e2d63 	.word	0x053e2d63
 80025d0:	cb840000 	.word	0xcb840000
 80025d4:	80000001 	.word	0x80000001

080025d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <__NVIC_SetPriorityGrouping+0x44>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025f4:	4013      	ands	r3, r2
 80025f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002600:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800260a:	4a04      	ldr	r2, [pc, #16]	; (800261c <__NVIC_SetPriorityGrouping+0x44>)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	60d3      	str	r3, [r2, #12]
}
 8002610:	bf00      	nop
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002624:	4b04      	ldr	r3, [pc, #16]	; (8002638 <__NVIC_GetPriorityGrouping+0x18>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	0a1b      	lsrs	r3, r3, #8
 800262a:	f003 0307 	and.w	r3, r3, #7
}
 800262e:	4618      	mov	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	2b00      	cmp	r3, #0
 800264c:	db0b      	blt.n	8002666 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	f003 021f 	and.w	r2, r3, #31
 8002654:	4907      	ldr	r1, [pc, #28]	; (8002674 <__NVIC_EnableIRQ+0x38>)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	2001      	movs	r0, #1
 800265e:	fa00 f202 	lsl.w	r2, r0, r2
 8002662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000e100 	.word	0xe000e100

08002678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002688:	2b00      	cmp	r3, #0
 800268a:	db0a      	blt.n	80026a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	b2da      	uxtb	r2, r3
 8002690:	490c      	ldr	r1, [pc, #48]	; (80026c4 <__NVIC_SetPriority+0x4c>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	0112      	lsls	r2, r2, #4
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	440b      	add	r3, r1
 800269c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a0:	e00a      	b.n	80026b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4908      	ldr	r1, [pc, #32]	; (80026c8 <__NVIC_SetPriority+0x50>)
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3b04      	subs	r3, #4
 80026b0:	0112      	lsls	r2, r2, #4
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	440b      	add	r3, r1
 80026b6:	761a      	strb	r2, [r3, #24]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000e100 	.word	0xe000e100
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	; 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f1c3 0307 	rsb	r3, r3, #7
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	bf28      	it	cs
 80026ea:	2304      	movcs	r3, #4
 80026ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3304      	adds	r3, #4
 80026f2:	2b06      	cmp	r3, #6
 80026f4:	d902      	bls.n	80026fc <NVIC_EncodePriority+0x30>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3b03      	subs	r3, #3
 80026fa:	e000      	b.n	80026fe <NVIC_EncodePriority+0x32>
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	f04f 32ff 	mov.w	r2, #4294967295
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	401a      	ands	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002714:	f04f 31ff 	mov.w	r1, #4294967295
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	43d9      	mvns	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	4313      	orrs	r3, r2
         );
}
 8002726:	4618      	mov	r0, r3
 8002728:	3724      	adds	r7, #36	; 0x24
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ff4c 	bl	80025d8 <__NVIC_SetPriorityGrouping>
}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002756:	f7ff ff63 	bl	8002620 <__NVIC_GetPriorityGrouping>
 800275a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	68b9      	ldr	r1, [r7, #8]
 8002760:	6978      	ldr	r0, [r7, #20]
 8002762:	f7ff ffb3 	bl	80026cc <NVIC_EncodePriority>
 8002766:	4602      	mov	r2, r0
 8002768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff ff82 	bl	8002678 <__NVIC_SetPriority>
}
 8002774:	bf00      	nop
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff ff56 	bl	800263c <__NVIC_EnableIRQ>
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a6:	e14c      	b.n	8002a42 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	2101      	movs	r1, #1
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	fa01 f303 	lsl.w	r3, r1, r3
 80027b4:	4013      	ands	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 813e 	beq.w	8002a3c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d005      	beq.n	80027d8 <HAL_GPIO_Init+0x40>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 0303 	and.w	r3, r3, #3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d130      	bne.n	800283a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	2203      	movs	r2, #3
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4013      	ands	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800280e:	2201      	movs	r2, #1
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4013      	ands	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	091b      	lsrs	r3, r3, #4
 8002824:	f003 0201 	and.w	r2, r3, #1
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	2b03      	cmp	r3, #3
 8002844:	d017      	beq.n	8002876 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	2203      	movs	r2, #3
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4013      	ands	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d123      	bne.n	80028ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	08da      	lsrs	r2, r3, #3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3208      	adds	r2, #8
 800288a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800288e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	220f      	movs	r2, #15
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4013      	ands	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	691a      	ldr	r2, [r3, #16]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	08da      	lsrs	r2, r3, #3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3208      	adds	r2, #8
 80028c4:	6939      	ldr	r1, [r7, #16]
 80028c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	2203      	movs	r2, #3
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4013      	ands	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f003 0203 	and.w	r2, r3, #3
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 8098 	beq.w	8002a3c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800290c:	4a54      	ldr	r2, [pc, #336]	; (8002a60 <HAL_GPIO_Init+0x2c8>)
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	089b      	lsrs	r3, r3, #2
 8002912:	3302      	adds	r3, #2
 8002914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002918:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	220f      	movs	r2, #15
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002936:	d019      	beq.n	800296c <HAL_GPIO_Init+0x1d4>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a4a      	ldr	r2, [pc, #296]	; (8002a64 <HAL_GPIO_Init+0x2cc>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d013      	beq.n	8002968 <HAL_GPIO_Init+0x1d0>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a49      	ldr	r2, [pc, #292]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d00d      	beq.n	8002964 <HAL_GPIO_Init+0x1cc>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a48      	ldr	r2, [pc, #288]	; (8002a6c <HAL_GPIO_Init+0x2d4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d007      	beq.n	8002960 <HAL_GPIO_Init+0x1c8>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a47      	ldr	r2, [pc, #284]	; (8002a70 <HAL_GPIO_Init+0x2d8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d101      	bne.n	800295c <HAL_GPIO_Init+0x1c4>
 8002958:	2304      	movs	r3, #4
 800295a:	e008      	b.n	800296e <HAL_GPIO_Init+0x1d6>
 800295c:	2307      	movs	r3, #7
 800295e:	e006      	b.n	800296e <HAL_GPIO_Init+0x1d6>
 8002960:	2303      	movs	r3, #3
 8002962:	e004      	b.n	800296e <HAL_GPIO_Init+0x1d6>
 8002964:	2302      	movs	r3, #2
 8002966:	e002      	b.n	800296e <HAL_GPIO_Init+0x1d6>
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <HAL_GPIO_Init+0x1d6>
 800296c:	2300      	movs	r3, #0
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	f002 0203 	and.w	r2, r2, #3
 8002974:	0092      	lsls	r2, r2, #2
 8002976:	4093      	lsls	r3, r2
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800297e:	4938      	ldr	r1, [pc, #224]	; (8002a60 <HAL_GPIO_Init+0x2c8>)
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	089b      	lsrs	r3, r3, #2
 8002984:	3302      	adds	r3, #2
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800298c:	4b39      	ldr	r3, [pc, #228]	; (8002a74 <HAL_GPIO_Init+0x2dc>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	43db      	mvns	r3, r3
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4013      	ands	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029b0:	4a30      	ldr	r2, [pc, #192]	; (8002a74 <HAL_GPIO_Init+0x2dc>)
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029b6:	4b2f      	ldr	r3, [pc, #188]	; (8002a74 <HAL_GPIO_Init+0x2dc>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	43db      	mvns	r3, r3
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	4013      	ands	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029da:	4a26      	ldr	r2, [pc, #152]	; (8002a74 <HAL_GPIO_Init+0x2dc>)
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80029e0:	4b24      	ldr	r3, [pc, #144]	; (8002a74 <HAL_GPIO_Init+0x2dc>)
 80029e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a06:	4a1b      	ldr	r2, [pc, #108]	; (8002a74 <HAL_GPIO_Init+0x2dc>)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002a0e:	4b19      	ldr	r3, [pc, #100]	; (8002a74 <HAL_GPIO_Init+0x2dc>)
 8002a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a34:	4a0f      	ldr	r2, [pc, #60]	; (8002a74 <HAL_GPIO_Init+0x2dc>)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f47f aeab 	bne.w	80027a8 <HAL_GPIO_Init+0x10>
  }
}
 8002a52:	bf00      	nop
 8002a54:	bf00      	nop
 8002a56:	371c      	adds	r7, #28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	40010000 	.word	0x40010000
 8002a64:	48000400 	.word	0x48000400
 8002a68:	48000800 	.word	0x48000800
 8002a6c:	48000c00 	.word	0x48000c00
 8002a70:	48001000 	.word	0x48001000
 8002a74:	58000800 	.word	0x58000800

08002a78 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e08f      	b.n	8002baa <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d106      	bne.n	8002aaa <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7fe f881 	bl	8000bac <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2202      	movs	r2, #2
 8002aae:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d004      	beq.n	8002acc <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002aca:	d103      	bne.n	8002ad4 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f023 031e 	bic.w	r3, r3, #30
 8002ad2:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d005      	beq.n	8002aec <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002ae6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002aea:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4b31      	ldr	r3, [pc, #196]	; (8002bb4 <HAL_LPTIM_Init+0x13c>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002afc:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8002b02:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8002b08:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8002b0e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d107      	bne.n	8002b2e <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8002b26:	4313      	orrs	r3, r2
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d004      	beq.n	8002b40 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b3e:	d107      	bne.n	8002b50 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d00a      	beq.n	8002b72 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002b64:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8002b6a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a0e      	ldr	r2, [pc, #56]	; (8002bb8 <HAL_LPTIM_Init+0x140>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d108      	bne.n	8002b96 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	621a      	str	r2, [r3, #32]
 8002b94:	e004      	b.n	8002ba0 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b9e:	621a      	str	r2, [r3, #32]
  }
#endif /* LPTIM_OR_OR */

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	ff19f1fe 	.word	0xff19f1fe
 8002bb8:	40007c00 	.word	0x40007c00

08002bbc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bbe:	b08b      	sub	sp, #44	; 0x2c
 8002bc0:	af06      	add	r7, sp, #24
 8002bc2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e0cb      	b.n	8002d66 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d106      	bne.n	8002be8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7fe fda4 	bl	8001730 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2203      	movs	r2, #3
 8002bec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f004 fab1 	bl	800715c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	73fb      	strb	r3, [r7, #15]
 8002bfe:	e040      	b.n	8002c82 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	440b      	add	r3, r1
 8002c10:	3301      	adds	r3, #1
 8002c12:	2201      	movs	r2, #1
 8002c14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	440b      	add	r3, r1
 8002c26:	7bfa      	ldrb	r2, [r7, #15]
 8002c28:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	440b      	add	r3, r1
 8002c3a:	3303      	adds	r3, #3
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3338      	adds	r3, #56	; 0x38
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c54:	7bfa      	ldrb	r2, [r7, #15]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	440b      	add	r3, r1
 8002c62:	333c      	adds	r3, #60	; 0x3c
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c68:	7bfa      	ldrb	r2, [r7, #15]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	440b      	add	r3, r1
 8002c76:	3340      	adds	r3, #64	; 0x40
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	73fb      	strb	r3, [r7, #15]
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d3b9      	bcc.n	8002c00 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	73fb      	strb	r3, [r7, #15]
 8002c90:	e044      	b.n	8002d1c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c92:	7bfa      	ldrb	r2, [r7, #15]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	440b      	add	r3, r1
 8002ca0:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ca8:	7bfa      	ldrb	r2, [r7, #15]
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	440b      	add	r3, r1
 8002cb6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cbe:	7bfa      	ldrb	r2, [r7, #15]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	440b      	add	r3, r1
 8002ccc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cd4:	7bfa      	ldrb	r2, [r7, #15]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	440b      	add	r3, r1
 8002ce2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cea:	7bfa      	ldrb	r2, [r7, #15]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	440b      	add	r3, r1
 8002cf8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	440b      	add	r3, r1
 8002d0e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
 8002d1c:	7bfa      	ldrb	r2, [r7, #15]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d3b5      	bcc.n	8002c92 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	687e      	ldr	r6, [r7, #4]
 8002d2e:	466d      	mov	r5, sp
 8002d30:	f106 0410 	add.w	r4, r6, #16
 8002d34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d38:	6823      	ldr	r3, [r4, #0]
 8002d3a:	602b      	str	r3, [r5, #0]
 8002d3c:	1d33      	adds	r3, r6, #4
 8002d3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d40:	6838      	ldr	r0, [r7, #0]
 8002d42:	f004 fa26 	bl	8007192 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d102      	bne.n	8002d64 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f805 	bl	8002d6e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d6e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b085      	sub	sp, #20
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	f043 0302 	orr.w	r3, r3, #2
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
	...

08002dc4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dc8:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a04      	ldr	r2, [pc, #16]	; (8002de0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd2:	6013      	str	r3, [r2, #0]
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	58000400 	.word	0x58000400

08002de4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002de8:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <HAL_PWREx_GetVoltageRange+0x18>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	58000400 	.word	0x58000400

08002e00 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002e08:	f7fe fd30 	bl	800186c <HAL_GetTick>
 8002e0c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e063      	b.n	8002ee0 <HAL_QSPI_Init+0xe0>
  assert_param(IS_QSPI_SSHIFT(hqspi->Init.SampleShifting));
  assert_param(IS_QSPI_FLASH_SIZE(hqspi->Init.FlashSize));
  assert_param(IS_QSPI_CS_HIGH_TIME(hqspi->Init.ChipSelectHighTime));
  assert_param(IS_QSPI_CLOCK_MODE(hqspi->Init.ClockMode));

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10b      	bne.n	8002e3c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7fe f859 	bl	8000ee4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002e32:	f241 3188 	movw	r1, #5000	; 0x1388
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f858 	bl	8002eec <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	021a      	lsls	r2, r3, #8
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2120      	movs	r1, #32
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f850 	bl	8002f08 <QSPI_WaitFlagStateUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002e6c:	7afb      	ldrb	r3, [r7, #11]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d131      	bne.n	8002ed6 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e7c:	f023 0310 	bic.w	r3, r3, #16
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6852      	ldr	r2, [r2, #4]
 8002e84:	0611      	lsls	r1, r2, #24
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	68d2      	ldr	r2, [r2, #12]
 8002e8a:	4311      	orrs	r1, r2
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	430b      	orrs	r3, r1
 8002e92:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <HAL_QSPI_Init+0xe8>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6912      	ldr	r2, [r2, #16]
 8002ea2:	0411      	lsls	r1, r2, #16
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6952      	ldr	r2, [r2, #20]
 8002ea8:	4311      	orrs	r1, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6992      	ldr	r2, [r2, #24]
 8002eae:	4311      	orrs	r1, r2
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0201 	orr.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002ede:	7afb      	ldrb	r3, [r7, #11]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	ffe0f8fe 	.word	0xffe0f8fe

08002eec <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	603b      	str	r3, [r7, #0]
 8002f14:	4613      	mov	r3, r2
 8002f16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002f18:	e01a      	b.n	8002f50 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f20:	d016      	beq.n	8002f50 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f22:	f7fe fca3 	bl	800186c <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d302      	bcc.n	8002f38 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10b      	bne.n	8002f50 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2204      	movs	r2, #4
 8002f3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f44:	f043 0201 	orr.w	r2, r3, #1
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e00e      	b.n	8002f6e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	bf14      	ite	ne
 8002f5e:	2301      	movne	r3, #1
 8002f60:	2300      	moveq	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	461a      	mov	r2, r3
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d1d6      	bne.n	8002f1a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002f76:	b480      	push	{r7}
 8002f78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f88:	d101      	bne.n	8002f8e <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fac:	6013      	str	r3, [r2, #0]
}
 8002fae:	bf00      	nop
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fca:	6013      	str	r3, [r2, #0]
}
 8002fcc:	bf00      	nop
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fe8:	d101      	bne.n	8002fee <LL_RCC_HSE_IsReady+0x18>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <LL_RCC_HSE_IsReady+0x1a>
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300c:	6013      	str	r3, [r2, #0]
}
 800300e:	bf00      	nop
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800301c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003026:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800302a:	6013      	str	r3, [r2, #0]
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003036:	b480      	push	{r7}
 8003038:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800303a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003048:	d101      	bne.n	800304e <LL_RCC_HSI_IsReady+0x18>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <LL_RCC_HSI_IsReady+0x1a>
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	061b      	lsls	r3, r3, #24
 8003070:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003074:	4313      	orrs	r3, r2
 8003076:	604b      	str	r3, [r1, #4]
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800308c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80030a6:	b480      	push	{r7}
 80030a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030b6:	f023 0301 	bic.w	r3, r3, #1
 80030ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80030be:	bf00      	nop
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80030cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d101      	bne.n	80030e0 <LL_RCC_HSI48_IsReady+0x18>
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <LL_RCC_HSI48_IsReady+0x1a>
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003104:	bf00      	nop
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800310e:	b480      	push	{r7}
 8003110:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800311e:	f023 0301 	bic.w	r3, r3, #1
 8003122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003126:	bf00      	nop
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003140:	f043 0304 	orr.w	r3, r3, #4
 8003144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003148:	bf00      	nop
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8003152:	b480      	push	{r7}
 8003154:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800315a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003162:	f023 0304 	bic.w	r3, r3, #4
 8003166:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800316a:	bf00      	nop
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800317c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b02      	cmp	r3, #2
 8003186:	d101      	bne.n	800318c <LL_RCC_LSE_IsReady+0x18>
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <LL_RCC_LSE_IsReady+0x1a>
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800319c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80031b0:	bf00      	nop
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80031ba:	b480      	push	{r7}
 80031bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80031be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031ca:	f023 0301 	bic.w	r3, r3, #1
 80031ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80031d2:	bf00      	nop
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80031e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d101      	bne.n	80031f4 <LL_RCC_LSI1_IsReady+0x18>
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <LL_RCC_LSI1_IsReady+0x1a>
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800320c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003210:	f043 0304 	orr.w	r3, r3, #4
 8003214:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8003222:	b480      	push	{r7}
 8003224:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800322a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800322e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003232:	f023 0304 	bic.w	r3, r3, #4
 8003236:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800323a:	bf00      	nop
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800324c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b08      	cmp	r3, #8
 8003256:	d101      	bne.n	800325c <LL_RCC_LSI2_IsReady+0x18>
 8003258:	2301      	movs	r3, #1
 800325a:	e000      	b.n	800325e <LL_RCC_LSI2_IsReady+0x1a>
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003278:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	021b      	lsls	r3, r3, #8
 8003280:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003296:	b480      	push	{r7}
 8003298:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800329a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	6013      	str	r3, [r2, #0]
}
 80032aa:	bf00      	nop
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80032b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032c2:	f023 0301 	bic.w	r3, r3, #1
 80032c6:	6013      	str	r3, [r2, #0]
}
 80032c8:	bf00      	nop
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80032d2:	b480      	push	{r7}
 80032d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80032d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d101      	bne.n	80032e8 <LL_RCC_MSI_IsReady+0x16>
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <LL_RCC_MSI_IsReady+0x18>
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80032fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003306:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4313      	orrs	r3, r2
 800330e:	600b      	str	r3, [r1, #0]
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800332c:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2bb0      	cmp	r3, #176	; 0xb0
 8003332:	d901      	bls.n	8003338 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8003334:	23b0      	movs	r3, #176	; 0xb0
 8003336:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8003338:	687b      	ldr	r3, [r7, #4]
}
 800333a:	4618      	mov	r0, r3
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800334e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	021b      	lsls	r3, r3, #8
 800335c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003360:	4313      	orrs	r3, r2
 8003362:	604b      	str	r3, [r1, #4]
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f023 0203 	bic.w	r2, r3, #3
 8003382:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4313      	orrs	r3, r2
 800338a:	608b      	str	r3, [r1, #8]
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800339c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80033b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	608b      	str	r3, [r1, #8]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80033e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80033e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800340c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003410:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003414:	f023 020f 	bic.w	r2, r3, #15
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	091b      	lsrs	r3, r3, #4
 800341c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800343a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003444:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4313      	orrs	r3, r2
 800344c:	608b      	str	r3, [r1, #8]
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800346c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4313      	orrs	r3, r2
 8003474:	608b      	str	r3, [r1, #8]
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003482:	b480      	push	{r7}
 8003484:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003490:	4618      	mov	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 800349a:	b480      	push	{r7}
 800349c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 800349e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80034a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80034b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80034d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80034de:	4618      	mov	r0, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80034ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800350e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003512:	6013      	str	r3, [r2, #0]
}
 8003514:	bf00      	nop
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800351e:	b480      	push	{r7}
 8003520:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800352c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003530:	6013      	str	r3, [r2, #0]
}
 8003532:	bf00      	nop
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800354e:	d101      	bne.n	8003554 <LL_RCC_PLL_IsReady+0x18>
 8003550:	2301      	movs	r3, #1
 8003552:	e000      	b.n	8003556 <LL_RCC_PLL_IsReady+0x1a>
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	0a1b      	lsrs	r3, r3, #8
 800356c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003570:	4618      	mov	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800357a:	b480      	push	{r7}
 800357c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800357e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003588:	4618      	mov	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003592:	b480      	push	{r7}
 8003594:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80035aa:	b480      	push	{r7}
 80035ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80035ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0303 	and.w	r3, r3, #3
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80035c2:	b480      	push	{r7}
 80035c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80035c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d4:	d101      	bne.n	80035da <LL_RCC_IsActiveFlag_HPRE+0x18>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80035e6:	b480      	push	{r7}
 80035e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80035ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035fa:	d101      	bne.n	8003600 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80035fc:	2301      	movs	r3, #1
 80035fe:	e000      	b.n	8003602 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003614:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003620:	d101      	bne.n	8003626 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003632:	b480      	push	{r7}
 8003634:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003640:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003644:	d101      	bne.n	800364a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003656:	b480      	push	{r7}
 8003658:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800365a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003664:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003668:	d101      	bne.n	800366e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
	...

0800367c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800367c:	b590      	push	{r4, r7, lr}
 800367e:	b08d      	sub	sp, #52	; 0x34
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e363      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 808d 	beq.w	80037b6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800369c:	f7ff fe7c 	bl	8003398 <LL_RCC_GetSysClkSource>
 80036a0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036a2:	f7ff ff82 	bl	80035aa <LL_RCC_PLL_GetMainSource>
 80036a6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80036a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d005      	beq.n	80036ba <HAL_RCC_OscConfig+0x3e>
 80036ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b0:	2b0c      	cmp	r3, #12
 80036b2:	d147      	bne.n	8003744 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80036b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d144      	bne.n	8003744 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e347      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80036ca:	f7ff fe27 	bl	800331c <LL_RCC_MSI_GetRange>
 80036ce:	4603      	mov	r3, r0
 80036d0:	429c      	cmp	r4, r3
 80036d2:	d914      	bls.n	80036fe <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 fd61 	bl	80041a0 <RCC_SetFlashLatencyFromMSIRange>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e336      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff fe01 	bl	80032f4 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff fe25 	bl	8003346 <LL_RCC_MSI_SetCalibTrimming>
 80036fc:	e013      	b.n	8003726 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fdf6 	bl	80032f4 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fe1a 	bl	8003346 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	4618      	mov	r0, r3
 8003718:	f000 fd42 	bl	80041a0 <RCC_SetFlashLatencyFromMSIRange>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e317      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003726:	f000 fcc9 	bl	80040bc <HAL_RCC_GetHCLKFreq>
 800372a:	4603      	mov	r3, r0
 800372c:	4aa4      	ldr	r2, [pc, #656]	; (80039c0 <HAL_RCC_OscConfig+0x344>)
 800372e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003730:	4ba4      	ldr	r3, [pc, #656]	; (80039c4 <HAL_RCC_OscConfig+0x348>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f7fd fce3 	bl	8001100 <HAL_InitTick>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d039      	beq.n	80037b4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e308      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d01e      	beq.n	800378a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800374c:	f7ff fda3 	bl	8003296 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003750:	f7fe f88c 	bl	800186c <HAL_GetTick>
 8003754:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003758:	f7fe f888 	bl	800186c <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e2f5      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800376a:	f7ff fdb2 	bl	80032d2 <LL_RCC_MSI_IsReady>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0f1      	beq.n	8003758 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff fdbb 	bl	80032f4 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fddf 	bl	8003346 <LL_RCC_MSI_SetCalibTrimming>
 8003788:	e015      	b.n	80037b6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800378a:	f7ff fd93 	bl	80032b4 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800378e:	f7fe f86d 	bl	800186c <HAL_GetTick>
 8003792:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003796:	f7fe f869 	bl	800186c <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e2d6      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80037a8:	f7ff fd93 	bl	80032d2 <LL_RCC_MSI_IsReady>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f1      	bne.n	8003796 <HAL_RCC_OscConfig+0x11a>
 80037b2:	e000      	b.n	80037b6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80037b4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d047      	beq.n	8003852 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037c2:	f7ff fde9 	bl	8003398 <LL_RCC_GetSysClkSource>
 80037c6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037c8:	f7ff feef 	bl	80035aa <LL_RCC_PLL_GetMainSource>
 80037cc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d005      	beq.n	80037e0 <HAL_RCC_OscConfig+0x164>
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	2b0c      	cmp	r3, #12
 80037d8:	d108      	bne.n	80037ec <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	2b03      	cmp	r3, #3
 80037de:	d105      	bne.n	80037ec <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d134      	bne.n	8003852 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e2b4      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f4:	d102      	bne.n	80037fc <HAL_RCC_OscConfig+0x180>
 80037f6:	f7ff fbd0 	bl	8002f9a <LL_RCC_HSE_Enable>
 80037fa:	e001      	b.n	8003800 <HAL_RCC_OscConfig+0x184>
 80037fc:	f7ff fbdc 	bl	8002fb8 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d012      	beq.n	800382e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003808:	f7fe f830 	bl	800186c <HAL_GetTick>
 800380c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003810:	f7fe f82c 	bl	800186c <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b64      	cmp	r3, #100	; 0x64
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e299      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003822:	f7ff fbd8 	bl	8002fd6 <LL_RCC_HSE_IsReady>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f1      	beq.n	8003810 <HAL_RCC_OscConfig+0x194>
 800382c:	e011      	b.n	8003852 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382e:	f7fe f81d 	bl	800186c <HAL_GetTick>
 8003832:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003836:	f7fe f819 	bl	800186c <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b64      	cmp	r3, #100	; 0x64
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e286      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003848:	f7ff fbc5 	bl	8002fd6 <LL_RCC_HSE_IsReady>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f1      	bne.n	8003836 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d04c      	beq.n	80038f8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800385e:	f7ff fd9b 	bl	8003398 <LL_RCC_GetSysClkSource>
 8003862:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003864:	f7ff fea1 	bl	80035aa <LL_RCC_PLL_GetMainSource>
 8003868:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	2b04      	cmp	r3, #4
 800386e:	d005      	beq.n	800387c <HAL_RCC_OscConfig+0x200>
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	2b0c      	cmp	r3, #12
 8003874:	d10e      	bne.n	8003894 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2b02      	cmp	r3, #2
 800387a:	d10b      	bne.n	8003894 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e266      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff fbe4 	bl	800305a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003892:	e031      	b.n	80038f8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d019      	beq.n	80038d0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800389c:	f7ff fbad 	bl	8002ffa <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a0:	f7fd ffe4 	bl	800186c <HAL_GetTick>
 80038a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038a8:	f7fd ffe0 	bl	800186c <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e24d      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80038ba:	f7ff fbbc 	bl	8003036 <LL_RCC_HSI_IsReady>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f1      	beq.n	80038a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fbc6 	bl	800305a <LL_RCC_HSI_SetCalibTrimming>
 80038ce:	e013      	b.n	80038f8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038d0:	f7ff fba2 	bl	8003018 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fd ffca 	bl	800186c <HAL_GetTick>
 80038d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038dc:	f7fd ffc6 	bl	800186c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e233      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80038ee:	f7ff fba2 	bl	8003036 <LL_RCC_HSI_IsReady>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1f1      	bne.n	80038dc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d106      	bne.n	8003912 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 80a3 	beq.w	8003a58 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d076      	beq.n	8003a08 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b00      	cmp	r3, #0
 8003924:	d046      	beq.n	80039b4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003926:	f7ff fc59 	bl	80031dc <LL_RCC_LSI1_IsReady>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d113      	bne.n	8003958 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003930:	f7ff fc32 	bl	8003198 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003934:	f7fd ff9a 	bl	800186c <HAL_GetTick>
 8003938:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800393c:	f7fd ff96 	bl	800186c <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e203      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800394e:	f7ff fc45 	bl	80031dc <LL_RCC_LSI1_IsReady>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f1      	beq.n	800393c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003958:	f7ff fc52 	bl	8003200 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395c:	f7fd ff86 	bl	800186c <HAL_GetTick>
 8003960:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003964:	f7fd ff82 	bl	800186c <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b03      	cmp	r3, #3
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e1ef      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003976:	f7ff fc65 	bl	8003244 <LL_RCC_LSI2_IsReady>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0f1      	beq.n	8003964 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff fc6f 	bl	8003268 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800398a:	f7ff fc16 	bl	80031ba <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398e:	f7fd ff6d 	bl	800186c <HAL_GetTick>
 8003992:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003996:	f7fd ff69 	bl	800186c <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e1d6      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80039a8:	f7ff fc18 	bl	80031dc <LL_RCC_LSI1_IsReady>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f1      	bne.n	8003996 <HAL_RCC_OscConfig+0x31a>
 80039b2:	e051      	b.n	8003a58 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80039b4:	f7ff fbf0 	bl	8003198 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b8:	f7fd ff58 	bl	800186c <HAL_GetTick>
 80039bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80039be:	e00c      	b.n	80039da <HAL_RCC_OscConfig+0x35e>
 80039c0:	20000008 	.word	0x20000008
 80039c4:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80039c8:	f7fd ff50 	bl	800186c <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e1bd      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80039da:	f7ff fbff 	bl	80031dc <LL_RCC_LSI1_IsReady>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0f1      	beq.n	80039c8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80039e4:	f7ff fc1d 	bl	8003222 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80039ea:	f7fd ff3f 	bl	800186c <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e1ac      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80039fc:	f7ff fc22 	bl	8003244 <LL_RCC_LSI2_IsReady>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f1      	bne.n	80039ea <HAL_RCC_OscConfig+0x36e>
 8003a06:	e027      	b.n	8003a58 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003a08:	f7ff fc0b 	bl	8003222 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a0c:	f7fd ff2e 	bl	800186c <HAL_GetTick>
 8003a10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003a14:	f7fd ff2a 	bl	800186c <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e197      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003a26:	f7ff fc0d 	bl	8003244 <LL_RCC_LSI2_IsReady>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1f1      	bne.n	8003a14 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003a30:	f7ff fbc3 	bl	80031ba <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a34:	f7fd ff1a 	bl	800186c <HAL_GetTick>
 8003a38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003a3c:	f7fd ff16 	bl	800186c <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e183      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003a4e:	f7ff fbc5 	bl	80031dc <LL_RCC_LSI1_IsReady>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1f1      	bne.n	8003a3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d05b      	beq.n	8003b1c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a64:	4ba7      	ldr	r3, [pc, #668]	; (8003d04 <HAL_RCC_OscConfig+0x688>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d114      	bne.n	8003a9a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003a70:	f7ff f9a8 	bl	8002dc4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a74:	f7fd fefa 	bl	800186c <HAL_GetTick>
 8003a78:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7c:	f7fd fef6 	bl	800186c <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e163      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a8e:	4b9d      	ldr	r3, [pc, #628]	; (8003d04 <HAL_RCC_OscConfig+0x688>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f0      	beq.n	8003a7c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d102      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x42c>
 8003aa2:	f7ff fb23 	bl	80030ec <LL_RCC_LSE_Enable>
 8003aa6:	e00c      	b.n	8003ac2 <HAL_RCC_OscConfig+0x446>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b05      	cmp	r3, #5
 8003aae:	d104      	bne.n	8003aba <HAL_RCC_OscConfig+0x43e>
 8003ab0:	f7ff fb3e 	bl	8003130 <LL_RCC_LSE_EnableBypass>
 8003ab4:	f7ff fb1a 	bl	80030ec <LL_RCC_LSE_Enable>
 8003ab8:	e003      	b.n	8003ac2 <HAL_RCC_OscConfig+0x446>
 8003aba:	f7ff fb28 	bl	800310e <LL_RCC_LSE_Disable>
 8003abe:	f7ff fb48 	bl	8003152 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d014      	beq.n	8003af4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aca:	f7fd fecf 	bl	800186c <HAL_GetTick>
 8003ace:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003ad0:	e00a      	b.n	8003ae8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad2:	f7fd fecb 	bl	800186c <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e136      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003ae8:	f7ff fb44 	bl	8003174 <LL_RCC_LSE_IsReady>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0ef      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x456>
 8003af2:	e013      	b.n	8003b1c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af4:	f7fd feba 	bl	800186c <HAL_GetTick>
 8003af8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003afa:	e00a      	b.n	8003b12 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afc:	f7fd feb6 	bl	800186c <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e121      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003b12:	f7ff fb2f 	bl	8003174 <LL_RCC_LSE_IsReady>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1ef      	bne.n	8003afc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d02c      	beq.n	8003b82 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d014      	beq.n	8003b5a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b30:	f7ff faa8 	bl	8003084 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b34:	f7fd fe9a 	bl	800186c <HAL_GetTick>
 8003b38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b3c:	f7fd fe96 	bl	800186c <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e103      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003b4e:	f7ff fabb 	bl	80030c8 <LL_RCC_HSI48_IsReady>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0f1      	beq.n	8003b3c <HAL_RCC_OscConfig+0x4c0>
 8003b58:	e013      	b.n	8003b82 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b5a:	f7ff faa4 	bl	80030a6 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5e:	f7fd fe85 	bl	800186c <HAL_GetTick>
 8003b62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b66:	f7fd fe81 	bl	800186c <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e0ee      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003b78:	f7ff faa6 	bl	80030c8 <LL_RCC_HSI48_IsReady>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f1      	bne.n	8003b66 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 80e4 	beq.w	8003d54 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b8c:	f7ff fc04 	bl	8003398 <LL_RCC_GetSysClkSource>
 8003b90:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	f040 80b4 	bne.w	8003d0c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f003 0203 	and.w	r2, r3, #3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d123      	bne.n	8003bfa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d11c      	bne.n	8003bfa <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	0a1b      	lsrs	r3, r3, #8
 8003bc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d114      	bne.n	8003bfa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d10d      	bne.n	8003bfa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d106      	bne.n	8003bfa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d05d      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	2b0c      	cmp	r3, #12
 8003bfe:	d058      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e0a1      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c12:	f7ff fc84 	bl	800351e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c16:	f7fd fe29 	bl	800186c <HAL_GetTick>
 8003c1a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c1e:	f7fd fe25 	bl	800186c <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e092      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1ef      	bne.n	8003c1e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	4b30      	ldr	r3, [pc, #192]	; (8003d08 <HAL_RCC_OscConfig+0x68c>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c50:	4311      	orrs	r1, r2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c56:	0212      	lsls	r2, r2, #8
 8003c58:	4311      	orrs	r1, r2
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c5e:	4311      	orrs	r1, r2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c64:	4311      	orrs	r1, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c74:	f7ff fc44 	bl	8003500 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c88:	f7fd fdf0 	bl	800186c <HAL_GetTick>
 8003c8c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c90:	f7fd fdec 	bl	800186c <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e059      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0ef      	beq.n	8003c90 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cb0:	e050      	b.n	8003d54 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e04f      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d147      	bne.n	8003d54 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cc4:	f7ff fc1c 	bl	8003500 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cd8:	f7fd fdc8 	bl	800186c <HAL_GetTick>
 8003cdc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce0:	f7fd fdc4 	bl	800186c <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e031      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0ef      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x664>
 8003d00:	e028      	b.n	8003d54 <HAL_RCC_OscConfig+0x6d8>
 8003d02:	bf00      	nop
 8003d04:	58000400 	.word	0x58000400
 8003d08:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	2b0c      	cmp	r3, #12
 8003d10:	d01e      	beq.n	8003d50 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d12:	f7ff fc04 	bl	800351e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d16:	f7fd fda9 	bl	800186c <HAL_GetTick>
 8003d1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d1e:	f7fd fda5 	bl	800186c <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e012      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1ef      	bne.n	8003d1e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <HAL_RCC_OscConfig+0x6e4>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	60cb      	str	r3, [r1, #12]
 8003d4e:	e001      	b.n	8003d54 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e000      	b.n	8003d56 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3734      	adds	r7, #52	; 0x34
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd90      	pop	{r4, r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	eefefffc 	.word	0xeefefffc

08003d64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e12d      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d78:	4b98      	ldr	r3, [pc, #608]	; (8003fdc <HAL_RCC_ClockConfig+0x278>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d91b      	bls.n	8003dbe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d86:	4b95      	ldr	r3, [pc, #596]	; (8003fdc <HAL_RCC_ClockConfig+0x278>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f023 0207 	bic.w	r2, r3, #7
 8003d8e:	4993      	ldr	r1, [pc, #588]	; (8003fdc <HAL_RCC_ClockConfig+0x278>)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d96:	f7fd fd69 	bl	800186c <HAL_GetTick>
 8003d9a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003d9e:	f7fd fd65 	bl	800186c <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e111      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db0:	4b8a      	ldr	r3, [pc, #552]	; (8003fdc <HAL_RCC_ClockConfig+0x278>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d1ef      	bne.n	8003d9e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d016      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff faee 	bl	80033b0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003dd4:	f7fd fd4a 	bl	800186c <HAL_GetTick>
 8003dd8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ddc:	f7fd fd46 	bl	800186c <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e0f2      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003dee:	f7ff fbe8 	bl	80035c2 <LL_RCC_IsActiveFlag_HPRE>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0f1      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d016      	beq.n	8003e32 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff fae5 	bl	80033d8 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003e0e:	f7fd fd2d 	bl	800186c <HAL_GetTick>
 8003e12:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003e16:	f7fd fd29 	bl	800186c <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e0d5      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003e28:	f7ff fbdd 	bl	80035e6 <LL_RCC_IsActiveFlag_C2HPRE>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f1      	beq.n	8003e16 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d016      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff fade 	bl	8003404 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003e48:	f7fd fd10 	bl	800186c <HAL_GetTick>
 8003e4c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003e50:	f7fd fd0c 	bl	800186c <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e0b8      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003e62:	f7ff fbd3 	bl	800360c <LL_RCC_IsActiveFlag_SHDHPRE>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0f1      	beq.n	8003e50 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d016      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff fad8 	bl	8003432 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003e82:	f7fd fcf3 	bl	800186c <HAL_GetTick>
 8003e86:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003e8a:	f7fd fcef 	bl	800186c <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e09b      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003e9c:	f7ff fbc9 	bl	8003632 <LL_RCC_IsActiveFlag_PPRE1>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f1      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d017      	beq.n	8003ee2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff face 	bl	800345a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ebe:	f7fd fcd5 	bl	800186c <HAL_GetTick>
 8003ec2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ec6:	f7fd fcd1 	bl	800186c <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e07d      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003ed8:	f7ff fbbd 	bl	8003656 <LL_RCC_IsActiveFlag_PPRE2>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f1      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d043      	beq.n	8003f76 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d106      	bne.n	8003f04 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003ef6:	f7ff f86e 	bl	8002fd6 <LL_RCC_HSE_IsReady>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d11e      	bne.n	8003f3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e067      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d106      	bne.n	8003f1a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003f0c:	f7ff fb16 	bl	800353c <LL_RCC_PLL_IsReady>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d113      	bne.n	8003f3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e05c      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003f22:	f7ff f9d6 	bl	80032d2 <LL_RCC_MSI_IsReady>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d108      	bne.n	8003f3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e051      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003f30:	f7ff f881 	bl	8003036 <LL_RCC_HSI_IsReady>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e04a      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff fa14 	bl	8003370 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f48:	f7fd fc90 	bl	800186c <HAL_GetTick>
 8003f4c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4e:	e00a      	b.n	8003f66 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f50:	f7fd fc8c 	bl	800186c <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e036      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f66:	f7ff fa17 	bl	8003398 <LL_RCC_GetSysClkSource>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d1ec      	bne.n	8003f50 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f76:	4b19      	ldr	r3, [pc, #100]	; (8003fdc <HAL_RCC_ClockConfig+0x278>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d21b      	bcs.n	8003fbc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f84:	4b15      	ldr	r3, [pc, #84]	; (8003fdc <HAL_RCC_ClockConfig+0x278>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f023 0207 	bic.w	r2, r3, #7
 8003f8c:	4913      	ldr	r1, [pc, #76]	; (8003fdc <HAL_RCC_ClockConfig+0x278>)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f94:	f7fd fc6a 	bl	800186c <HAL_GetTick>
 8003f98:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003f9c:	f7fd fc66 	bl	800186c <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e012      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fae:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <HAL_RCC_ClockConfig+0x278>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d1ef      	bne.n	8003f9c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003fbc:	f000 f87e 	bl	80040bc <HAL_RCC_GetHCLKFreq>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	4a07      	ldr	r2, [pc, #28]	; (8003fe0 <HAL_RCC_ClockConfig+0x27c>)
 8003fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003fc6:	f7fd fc5d 	bl	8001884 <HAL_GetTickPrio>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fd f897 	bl	8001100 <HAL_InitTick>
 8003fd2:	4603      	mov	r3, r0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	58004000 	.word	0x58004000
 8003fe0:	20000008 	.word	0x20000008

08003fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fe4:	b590      	push	{r4, r7, lr}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fea:	f7ff f9d5 	bl	8003398 <LL_RCC_GetSysClkSource>
 8003fee:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10a      	bne.n	800400c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003ff6:	f7ff f991 	bl	800331c <LL_RCC_MSI_GetRange>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	091b      	lsrs	r3, r3, #4
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	4a2b      	ldr	r2, [pc, #172]	; (80040b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	e04b      	b.n	80040a4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b04      	cmp	r3, #4
 8004010:	d102      	bne.n	8004018 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004012:	4b28      	ldr	r3, [pc, #160]	; (80040b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	e045      	b.n	80040a4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b08      	cmp	r3, #8
 800401c:	d10a      	bne.n	8004034 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800401e:	f7fe ffaa 	bl	8002f76 <LL_RCC_HSE_IsEnabledDiv2>
 8004022:	4603      	mov	r3, r0
 8004024:	2b01      	cmp	r3, #1
 8004026:	d102      	bne.n	800402e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004028:	4b22      	ldr	r3, [pc, #136]	; (80040b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	e03a      	b.n	80040a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800402e:	4b22      	ldr	r3, [pc, #136]	; (80040b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	e037      	b.n	80040a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004034:	f7ff fab9 	bl	80035aa <LL_RCC_PLL_GetMainSource>
 8004038:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b02      	cmp	r3, #2
 800403e:	d003      	beq.n	8004048 <HAL_RCC_GetSysClockFreq+0x64>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2b03      	cmp	r3, #3
 8004044:	d003      	beq.n	800404e <HAL_RCC_GetSysClockFreq+0x6a>
 8004046:	e00d      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004048:	4b1a      	ldr	r3, [pc, #104]	; (80040b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800404a:	60bb      	str	r3, [r7, #8]
        break;
 800404c:	e015      	b.n	800407a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800404e:	f7fe ff92 	bl	8002f76 <LL_RCC_HSE_IsEnabledDiv2>
 8004052:	4603      	mov	r3, r0
 8004054:	2b01      	cmp	r3, #1
 8004056:	d102      	bne.n	800405e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004058:	4b16      	ldr	r3, [pc, #88]	; (80040b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800405a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800405c:	e00d      	b.n	800407a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800405e:	4b16      	ldr	r3, [pc, #88]	; (80040b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004060:	60bb      	str	r3, [r7, #8]
        break;
 8004062:	e00a      	b.n	800407a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004064:	f7ff f95a 	bl	800331c <LL_RCC_MSI_GetRange>
 8004068:	4603      	mov	r3, r0
 800406a:	091b      	lsrs	r3, r3, #4
 800406c:	f003 030f 	and.w	r3, r3, #15
 8004070:	4a0f      	ldr	r2, [pc, #60]	; (80040b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004076:	60bb      	str	r3, [r7, #8]
        break;
 8004078:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800407a:	f7ff fa71 	bl	8003560 <LL_RCC_PLL_GetN>
 800407e:	4602      	mov	r2, r0
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	fb03 f402 	mul.w	r4, r3, r2
 8004086:	f7ff fa84 	bl	8003592 <LL_RCC_PLL_GetDivider>
 800408a:	4603      	mov	r3, r0
 800408c:	091b      	lsrs	r3, r3, #4
 800408e:	3301      	adds	r3, #1
 8004090:	fbb4 f4f3 	udiv	r4, r4, r3
 8004094:	f7ff fa71 	bl	800357a <LL_RCC_PLL_GetR>
 8004098:	4603      	mov	r3, r0
 800409a:	0f5b      	lsrs	r3, r3, #29
 800409c:	3301      	adds	r3, #1
 800409e:	fbb4 f3f3 	udiv	r3, r4, r3
 80040a2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80040a4:	68fb      	ldr	r3, [r7, #12]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd90      	pop	{r4, r7, pc}
 80040ae:	bf00      	nop
 80040b0:	080072d0 	.word	0x080072d0
 80040b4:	00f42400 	.word	0x00f42400
 80040b8:	01e84800 	.word	0x01e84800

080040bc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040bc:	b598      	push	{r3, r4, r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80040c0:	f7ff ff90 	bl	8003fe4 <HAL_RCC_GetSysClockFreq>
 80040c4:	4604      	mov	r4, r0
 80040c6:	f7ff f9dc 	bl	8003482 <LL_RCC_GetAHBPrescaler>
 80040ca:	4603      	mov	r3, r0
 80040cc:	091b      	lsrs	r3, r3, #4
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	4a03      	ldr	r2, [pc, #12]	; (80040e0 <HAL_RCC_GetHCLKFreq+0x24>)
 80040d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040d8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80040dc:	4618      	mov	r0, r3
 80040de:	bd98      	pop	{r3, r4, r7, pc}
 80040e0:	08007270 	.word	0x08007270

080040e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e4:	b598      	push	{r3, r4, r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80040e8:	f7ff ffe8 	bl	80040bc <HAL_RCC_GetHCLKFreq>
 80040ec:	4604      	mov	r4, r0
 80040ee:	f7ff f9ef 	bl	80034d0 <LL_RCC_GetAPB1Prescaler>
 80040f2:	4603      	mov	r3, r0
 80040f4:	0a1b      	lsrs	r3, r3, #8
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	4a04      	ldr	r2, [pc, #16]	; (800410c <HAL_RCC_GetPCLK1Freq+0x28>)
 80040fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004108:	4618      	mov	r0, r3
 800410a:	bd98      	pop	{r3, r4, r7, pc}
 800410c:	080072b0 	.word	0x080072b0

08004110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004110:	b598      	push	{r3, r4, r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004114:	f7ff ffd2 	bl	80040bc <HAL_RCC_GetHCLKFreq>
 8004118:	4604      	mov	r4, r0
 800411a:	f7ff f9e5 	bl	80034e8 <LL_RCC_GetAPB2Prescaler>
 800411e:	4603      	mov	r3, r0
 8004120:	0adb      	lsrs	r3, r3, #11
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	4a04      	ldr	r2, [pc, #16]	; (8004138 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800412c:	f003 031f 	and.w	r3, r3, #31
 8004130:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004134:	4618      	mov	r0, r3
 8004136:	bd98      	pop	{r3, r4, r7, pc}
 8004138:	080072b0 	.word	0x080072b0

0800413c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	226f      	movs	r2, #111	; 0x6f
 800414a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800414c:	f7ff f924 	bl	8003398 <LL_RCC_GetSysClkSource>
 8004150:	4602      	mov	r2, r0
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8004156:	f7ff f994 	bl	8003482 <LL_RCC_GetAHBPrescaler>
 800415a:	4602      	mov	r2, r0
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8004160:	f7ff f9b6 	bl	80034d0 <LL_RCC_GetAPB1Prescaler>
 8004164:	4602      	mov	r2, r0
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800416a:	f7ff f9bd 	bl	80034e8 <LL_RCC_GetAPB2Prescaler>
 800416e:	4602      	mov	r2, r0
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8004174:	f7ff f991 	bl	800349a <LL_C2_RCC_GetAHBPrescaler>
 8004178:	4602      	mov	r2, r0
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800417e:	f7ff f999 	bl	80034b4 <LL_RCC_GetAHB4Prescaler>
 8004182:	4602      	mov	r2, r0
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004188:	4b04      	ldr	r3, [pc, #16]	; (800419c <HAL_RCC_GetClockConfig+0x60>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0207 	and.w	r2, r3, #7
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	601a      	str	r2, [r3, #0]
}
 8004194:	bf00      	nop
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	58004000 	.word	0x58004000

080041a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80041a0:	b590      	push	{r4, r7, lr}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2bb0      	cmp	r3, #176	; 0xb0
 80041ac:	d903      	bls.n	80041b6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80041ae:	4b15      	ldr	r3, [pc, #84]	; (8004204 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	e007      	b.n	80041c6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	091b      	lsrs	r3, r3, #4
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	4a11      	ldr	r2, [pc, #68]	; (8004204 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80041c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041c4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80041c6:	f7ff f975 	bl	80034b4 <LL_RCC_GetAHB4Prescaler>
 80041ca:	4603      	mov	r3, r0
 80041cc:	091b      	lsrs	r3, r3, #4
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	4a0d      	ldr	r2, [pc, #52]	; (8004208 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80041d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	fbb2 f3f3 	udiv	r3, r2, r3
 80041de:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	4a0a      	ldr	r2, [pc, #40]	; (800420c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80041e4:	fba2 2303 	umull	r2, r3, r2, r3
 80041e8:	0c9c      	lsrs	r4, r3, #18
 80041ea:	f7fe fdfb 	bl	8002de4 <HAL_PWREx_GetVoltageRange>
 80041ee:	4603      	mov	r3, r0
 80041f0:	4619      	mov	r1, r3
 80041f2:	4620      	mov	r0, r4
 80041f4:	f000 f80c 	bl	8004210 <RCC_SetFlashLatency>
 80041f8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd90      	pop	{r4, r7, pc}
 8004202:	bf00      	nop
 8004204:	080072d0 	.word	0x080072d0
 8004208:	08007270 	.word	0x08007270
 800420c:	431bde83 	.word	0x431bde83

08004210 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004210:	b590      	push	{r4, r7, lr}
 8004212:	b093      	sub	sp, #76	; 0x4c
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800421a:	4b37      	ldr	r3, [pc, #220]	; (80042f8 <RCC_SetFlashLatency+0xe8>)
 800421c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004220:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004222:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004226:	4a35      	ldr	r2, [pc, #212]	; (80042fc <RCC_SetFlashLatency+0xec>)
 8004228:	f107 031c 	add.w	r3, r7, #28
 800422c:	ca07      	ldmia	r2, {r0, r1, r2}
 800422e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004232:	4b33      	ldr	r3, [pc, #204]	; (8004300 <RCC_SetFlashLatency+0xf0>)
 8004234:	f107 040c 	add.w	r4, r7, #12
 8004238:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800423a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800423e:	2300      	movs	r3, #0
 8004240:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004248:	d11a      	bne.n	8004280 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800424a:	2300      	movs	r3, #0
 800424c:	643b      	str	r3, [r7, #64]	; 0x40
 800424e:	e013      	b.n	8004278 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	3348      	adds	r3, #72	; 0x48
 8004256:	443b      	add	r3, r7
 8004258:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	429a      	cmp	r2, r3
 8004260:	d807      	bhi.n	8004272 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	3348      	adds	r3, #72	; 0x48
 8004268:	443b      	add	r3, r7
 800426a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800426e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004270:	e020      	b.n	80042b4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004274:	3301      	adds	r3, #1
 8004276:	643b      	str	r3, [r7, #64]	; 0x40
 8004278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800427a:	2b03      	cmp	r3, #3
 800427c:	d9e8      	bls.n	8004250 <RCC_SetFlashLatency+0x40>
 800427e:	e019      	b.n	80042b4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004280:	2300      	movs	r3, #0
 8004282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004284:	e013      	b.n	80042ae <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	3348      	adds	r3, #72	; 0x48
 800428c:	443b      	add	r3, r7
 800428e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	429a      	cmp	r2, r3
 8004296:	d807      	bhi.n	80042a8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	3348      	adds	r3, #72	; 0x48
 800429e:	443b      	add	r3, r7
 80042a0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80042a4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80042a6:	e005      	b.n	80042b4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80042a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042aa:	3301      	adds	r3, #1
 80042ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d9e8      	bls.n	8004286 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80042b4:	4b13      	ldr	r3, [pc, #76]	; (8004304 <RCC_SetFlashLatency+0xf4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f023 0207 	bic.w	r2, r3, #7
 80042bc:	4911      	ldr	r1, [pc, #68]	; (8004304 <RCC_SetFlashLatency+0xf4>)
 80042be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c0:	4313      	orrs	r3, r2
 80042c2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80042c4:	f7fd fad2 	bl	800186c <HAL_GetTick>
 80042c8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80042ca:	e008      	b.n	80042de <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80042cc:	f7fd face 	bl	800186c <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e007      	b.n	80042ee <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80042de:	4b09      	ldr	r3, [pc, #36]	; (8004304 <RCC_SetFlashLatency+0xf4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d1ef      	bne.n	80042cc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	374c      	adds	r7, #76	; 0x4c
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd90      	pop	{r4, r7, pc}
 80042f6:	bf00      	nop
 80042f8:	08007244 	.word	0x08007244
 80042fc:	08007254 	.word	0x08007254
 8004300:	08007260 	.word	0x08007260
 8004304:	58004000 	.word	0x58004000

08004308 <LL_RCC_LSE_IsEnabled>:
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800430c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <LL_RCC_LSE_IsEnabled+0x18>
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <LL_RCC_LSE_IsEnabled+0x1a>
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <LL_RCC_LSE_IsReady>:
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b02      	cmp	r3, #2
 800433e:	d101      	bne.n	8004344 <LL_RCC_LSE_IsReady+0x18>
 8004340:	2301      	movs	r3, #1
 8004342:	e000      	b.n	8004346 <LL_RCC_LSE_IsReady+0x1a>
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <LL_RCC_SetRFWKPClockSource>:
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800435c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004360:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004364:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4313      	orrs	r3, r2
 800436c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <LL_RCC_SetSMPSClockSource>:
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	f023 0203 	bic.w	r2, r3, #3
 800438e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4313      	orrs	r3, r2
 8004396:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <LL_RCC_SetSMPSPrescaler>:
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80043ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4313      	orrs	r3, r2
 80043be:	624b      	str	r3, [r1, #36]	; 0x24
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <LL_RCC_SetUSARTClockSource>:
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80043d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043dc:	f023 0203 	bic.w	r2, r3, #3
 80043e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <LL_RCC_SetLPUARTClockSource>:
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004408:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800440c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <LL_RCC_SetI2CClockSource>:
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800442c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004430:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	091b      	lsrs	r3, r3, #4
 8004438:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800443c:	43db      	mvns	r3, r3
 800443e:	401a      	ands	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004448:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <LL_RCC_SetLPTIMClockSource>:
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800446a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	0c1b      	lsrs	r3, r3, #16
 8004472:	041b      	lsls	r3, r3, #16
 8004474:	43db      	mvns	r3, r3
 8004476:	401a      	ands	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	041b      	lsls	r3, r3, #16
 800447c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <LL_RCC_SetSAIClockSource>:
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800449a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <LL_RCC_SetRNGClockSource>:
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80044c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ce:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80044d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4313      	orrs	r3, r2
 80044da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <LL_RCC_SetCLK48ClockSource>:
{
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80044f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <LL_RCC_SetUSBClockSource>:
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b082      	sub	sp, #8
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff ffe3 	bl	80044ea <LL_RCC_SetCLK48ClockSource>
}
 8004524:	bf00      	nop
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <LL_RCC_SetADCClockSource>:
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004540:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4313      	orrs	r3, r2
 8004548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <LL_RCC_SetRTCClockSource>:
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004568:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800456c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <LL_RCC_GetRTCClockSource>:
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004590:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004594:	4618      	mov	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <LL_RCC_ForceBackupDomainReset>:
{
 800459e:	b480      	push	{r7}
 80045a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80045a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80045b6:	bf00      	nop
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <LL_RCC_ReleaseBackupDomainReset>:
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80045c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80045d8:	bf00      	nop
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <LL_RCC_PLLSAI1_Enable>:
{
 80045e2:	b480      	push	{r7}
 80045e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80045e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045f4:	6013      	str	r3, [r2, #0]
}
 80045f6:	bf00      	nop
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <LL_RCC_PLLSAI1_Disable>:
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800460e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004612:	6013      	str	r3, [r2, #0]
}
 8004614:	bf00      	nop
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <LL_RCC_PLLSAI1_IsReady>:
{
 800461e:	b480      	push	{r7}
 8004620:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800462c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004630:	d101      	bne.n	8004636 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004632:	2301      	movs	r3, #1
 8004634:	e000      	b.n	8004638 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b088      	sub	sp, #32
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800464a:	2300      	movs	r3, #0
 800464c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800464e:	2300      	movs	r3, #0
 8004650:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465a:	2b00      	cmp	r3, #0
 800465c:	d034      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004666:	d021      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004668:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800466c:	d81b      	bhi.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800466e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004672:	d01d      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004674:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004678:	d815      	bhi.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00b      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800467e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004682:	d110      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800468e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004692:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004694:	e00d      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3304      	adds	r3, #4
 800469a:	4618      	mov	r0, r3
 800469c:	f000 f947 	bl	800492e <RCCEx_PLLSAI1_ConfigNP>
 80046a0:	4603      	mov	r3, r0
 80046a2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80046a4:	e005      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	77fb      	strb	r3, [r7, #31]
        break;
 80046aa:	e002      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80046ac:	bf00      	nop
 80046ae:	e000      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80046b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046b2:	7ffb      	ldrb	r3, [r7, #31]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d105      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff fee8 	bl	8004492 <LL_RCC_SetSAIClockSource>
 80046c2:	e001      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c4:	7ffb      	ldrb	r3, [r7, #31]
 80046c6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d046      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80046d4:	f7ff ff56 	bl	8004584 <LL_RCC_GetRTCClockSource>
 80046d8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d03c      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80046e4:	f7fe fb6e 	bl	8002dc4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d105      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff ff30 	bl	8004558 <LL_RCC_SetRTCClockSource>
 80046f8:	e02e      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80046fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004702:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004704:	f7ff ff4b 	bl	800459e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004708:	f7ff ff5a 	bl	80045c0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	4313      	orrs	r3, r2
 8004718:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800471a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004724:	f7ff fdf0 	bl	8004308 <LL_RCC_LSE_IsEnabled>
 8004728:	4603      	mov	r3, r0
 800472a:	2b01      	cmp	r3, #1
 800472c:	d114      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800472e:	f7fd f89d 	bl	800186c <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004734:	e00b      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004736:	f7fd f899 	bl	800186c <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	f241 3288 	movw	r2, #5000	; 0x1388
 8004744:	4293      	cmp	r3, r2
 8004746:	d902      	bls.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	77fb      	strb	r3, [r7, #31]
              break;
 800474c:	e004      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800474e:	f7ff fded 	bl	800432c <LL_RCC_LSE_IsReady>
 8004752:	4603      	mov	r3, r0
 8004754:	2b01      	cmp	r3, #1
 8004756:	d1ee      	bne.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004758:	7ffb      	ldrb	r3, [r7, #31]
 800475a:	77bb      	strb	r3, [r7, #30]
 800475c:	e001      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475e:	7ffb      	ldrb	r3, [r7, #31]
 8004760:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d004      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	4618      	mov	r0, r3
 8004774:	f7ff fe2a 	bl	80043cc <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d004      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff fe35 	bl	80043f8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0310 	and.w	r3, r3, #16
 8004796:	2b00      	cmp	r3, #0
 8004798:	d004      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff fe5d 	bl	800445e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d004      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff fe52 	bl	800445e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0304 	and.w	r3, r3, #4
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d004      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff fe2a 	bl	8004424 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d004      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff fe1f 	bl	8004424 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d022      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff fe8d 	bl	8004516 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004800:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004804:	d107      	bne.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004810:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004814:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800481e:	d10b      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3304      	adds	r3, #4
 8004824:	4618      	mov	r0, r3
 8004826:	f000 f8dd 	bl	80049e4 <RCCEx_PLLSAI1_ConfigNQ>
 800482a:	4603      	mov	r3, r0
 800482c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800482e:	7ffb      	ldrb	r3, [r7, #31]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004834:	7ffb      	ldrb	r3, [r7, #31]
 8004836:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004840:	2b00      	cmp	r3, #0
 8004842:	d02b      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484c:	d008      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004852:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004856:	d003      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	2b00      	cmp	r3, #0
 800485e:	d105      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004864:	4618      	mov	r0, r3
 8004866:	f7ff fe2a 	bl	80044be <LL_RCC_SetRNGClockSource>
 800486a:	e00a      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	2000      	movs	r0, #0
 8004878:	f7ff fe21 	bl	80044be <LL_RCC_SetRNGClockSource>
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f7ff fe34 	bl	80044ea <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004886:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800488a:	d107      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800488c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800489a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d022      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7ff fe3d 	bl	800452c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048ba:	d107      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80048bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ca:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048d4:	d10b      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3304      	adds	r3, #4
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 f8dd 	bl	8004a9a <RCCEx_PLLSAI1_ConfigNR>
 80048e0:	4603      	mov	r3, r0
 80048e2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80048e4:	7ffb      	ldrb	r3, [r7, #31]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80048ea:	7ffb      	ldrb	r3, [r7, #31]
 80048ec:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d004      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fe:	4618      	mov	r0, r3
 8004900:	f7ff fd26 	bl	8004350 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d009      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff fd45 	bl	80043a4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff fd2c 	bl	800437c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004924:	7fbb      	ldrb	r3, [r7, #30]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3720      	adds	r7, #32
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b084      	sub	sp, #16
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800493a:	f7ff fe61 	bl	8004600 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800493e:	f7fc ff95 	bl	800186c <HAL_GetTick>
 8004942:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004944:	e009      	b.n	800495a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004946:	f7fc ff91 	bl	800186c <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d902      	bls.n	800495a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	73fb      	strb	r3, [r7, #15]
      break;
 8004958:	e004      	b.n	8004964 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800495a:	f7ff fe60 	bl	800461e <LL_RCC_PLLSAI1_IsReady>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1f0      	bne.n	8004946 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d137      	bne.n	80049da <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800496a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	021b      	lsls	r3, r3, #8
 800497a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800497e:	4313      	orrs	r3, r2
 8004980:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004994:	4313      	orrs	r3, r2
 8004996:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004998:	f7ff fe23 	bl	80045e2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800499c:	f7fc ff66 	bl	800186c <HAL_GetTick>
 80049a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80049a2:	e009      	b.n	80049b8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049a4:	f7fc ff62 	bl	800186c <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d902      	bls.n	80049b8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	73fb      	strb	r3, [r7, #15]
        break;
 80049b6:	e004      	b.n	80049c2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80049b8:	f7ff fe31 	bl	800461e <LL_RCC_PLLSAI1_IsReady>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d1f0      	bne.n	80049a4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d108      	bne.n	80049da <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80049c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049cc:	691a      	ldr	r2, [r3, #16]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049d6:	4313      	orrs	r3, r2
 80049d8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80049da:	7bfb      	ldrb	r3, [r7, #15]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80049f0:	f7ff fe06 	bl	8004600 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80049f4:	f7fc ff3a 	bl	800186c <HAL_GetTick>
 80049f8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80049fa:	e009      	b.n	8004a10 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049fc:	f7fc ff36 	bl	800186c <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d902      	bls.n	8004a10 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	73fb      	strb	r3, [r7, #15]
      break;
 8004a0e:	e004      	b.n	8004a1a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004a10:	f7ff fe05 	bl	800461e <LL_RCC_PLLSAI1_IsReady>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f0      	bne.n	80049fc <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d137      	bne.n	8004a90 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	021b      	lsls	r3, r3, #8
 8004a30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a34:	4313      	orrs	r3, r2
 8004a36:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004a4e:	f7ff fdc8 	bl	80045e2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a52:	f7fc ff0b 	bl	800186c <HAL_GetTick>
 8004a56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004a58:	e009      	b.n	8004a6e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a5a:	f7fc ff07 	bl	800186c <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d902      	bls.n	8004a6e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	73fb      	strb	r3, [r7, #15]
        break;
 8004a6c:	e004      	b.n	8004a78 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004a6e:	f7ff fdd6 	bl	800461e <LL_RCC_PLLSAI1_IsReady>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d1f0      	bne.n	8004a5a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d108      	bne.n	8004a90 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b084      	sub	sp, #16
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004aa6:	f7ff fdab 	bl	8004600 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004aaa:	f7fc fedf 	bl	800186c <HAL_GetTick>
 8004aae:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004ab0:	e009      	b.n	8004ac6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ab2:	f7fc fedb 	bl	800186c <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d902      	bls.n	8004ac6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ac4:	e004      	b.n	8004ad0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004ac6:	f7ff fdaa 	bl	800461e <LL_RCC_PLLSAI1_IsReady>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1f0      	bne.n	8004ab2 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d137      	bne.n	8004b46 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	021b      	lsls	r3, r3, #8
 8004ae6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aea:	4313      	orrs	r3, r2
 8004aec:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b00:	4313      	orrs	r3, r2
 8004b02:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004b04:	f7ff fd6d 	bl	80045e2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b08:	f7fc feb0 	bl	800186c <HAL_GetTick>
 8004b0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004b0e:	e009      	b.n	8004b24 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b10:	f7fc feac 	bl	800186c <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d902      	bls.n	8004b24 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	73fb      	strb	r3, [r7, #15]
        break;
 8004b22:	e004      	b.n	8004b2e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004b24:	f7ff fd7b 	bl	800461e <LL_RCC_PLLSAI1_IsReady>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d1f0      	bne.n	8004b10 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004b2e:	7bfb      	ldrb	r3, [r7, #15]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d108      	bne.n	8004b46 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b38:	691a      	ldr	r2, [r3, #16]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b42:	4313      	orrs	r3, r2
 8004b44:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e095      	b.n	8004c8e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d108      	bne.n	8004b7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b72:	d009      	beq.n	8004b88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	61da      	str	r2, [r3, #28]
 8004b7a:	e005      	b.n	8004b88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d106      	bne.n	8004ba8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7fc fa5c 	bl	8001060 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bc8:	d902      	bls.n	8004bd0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	e002      	b.n	8004bd6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bd4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004bde:	d007      	beq.n	8004bf0 <HAL_SPI_Init+0xa0>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004be8:	d002      	beq.n	8004bf0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c32:	ea42 0103 	orr.w	r1, r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	0c1b      	lsrs	r3, r3, #16
 8004c4c:	f003 0204 	and.w	r2, r3, #4
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	f003 0310 	and.w	r3, r3, #16
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5e:	f003 0308 	and.w	r3, r3, #8
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c6c:	ea42 0103 	orr.w	r1, r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b082      	sub	sp, #8
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e049      	b.n	8004d3c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d106      	bne.n	8004cc2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7fc fbcf 	bl	8001460 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2202      	movs	r2, #2
 8004cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	f000 fc09 	bl	80054ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d001      	beq.n	8004d5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e036      	b.n	8004dca <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0201 	orr.w	r2, r2, #1
 8004d72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a17      	ldr	r2, [pc, #92]	; (8004dd8 <HAL_TIM_Base_Start_IT+0x94>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d004      	beq.n	8004d88 <HAL_TIM_Base_Start_IT+0x44>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d86:	d115      	bne.n	8004db4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	4b13      	ldr	r3, [pc, #76]	; (8004ddc <HAL_TIM_Base_Start_IT+0x98>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b06      	cmp	r3, #6
 8004d98:	d015      	beq.n	8004dc6 <HAL_TIM_Base_Start_IT+0x82>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da0:	d011      	beq.n	8004dc6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f042 0201 	orr.w	r2, r2, #1
 8004db0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db2:	e008      	b.n	8004dc6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0201 	orr.w	r2, r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	e000      	b.n	8004dc8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	40012c00 	.word	0x40012c00
 8004ddc:	00010007 	.word	0x00010007

08004de0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e049      	b.n	8004e86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d106      	bne.n	8004e0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f841 	bl	8004e8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4610      	mov	r0, r2
 8004e20:	f000 fb64 	bl	80054ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b082      	sub	sp, #8
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d122      	bne.n	8004efe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d11b      	bne.n	8004efe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f06f 0202 	mvn.w	r2, #2
 8004ece:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	f003 0303 	and.w	r3, r3, #3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 fae2 	bl	80054ae <HAL_TIM_IC_CaptureCallback>
 8004eea:	e005      	b.n	8004ef8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fad4 	bl	800549a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fae5 	bl	80054c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d122      	bne.n	8004f52 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f003 0304 	and.w	r3, r3, #4
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d11b      	bne.n	8004f52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f06f 0204 	mvn.w	r2, #4
 8004f22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 fab8 	bl	80054ae <HAL_TIM_IC_CaptureCallback>
 8004f3e:	e005      	b.n	8004f4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 faaa 	bl	800549a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fabb 	bl	80054c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	f003 0308 	and.w	r3, r3, #8
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d122      	bne.n	8004fa6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d11b      	bne.n	8004fa6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f06f 0208 	mvn.w	r2, #8
 8004f76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2204      	movs	r2, #4
 8004f7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	f003 0303 	and.w	r3, r3, #3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 fa8e 	bl	80054ae <HAL_TIM_IC_CaptureCallback>
 8004f92:	e005      	b.n	8004fa0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 fa80 	bl	800549a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 fa91 	bl	80054c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	f003 0310 	and.w	r3, r3, #16
 8004fb0:	2b10      	cmp	r3, #16
 8004fb2:	d122      	bne.n	8004ffa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f003 0310 	and.w	r3, r3, #16
 8004fbe:	2b10      	cmp	r3, #16
 8004fc0:	d11b      	bne.n	8004ffa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f06f 0210 	mvn.w	r2, #16
 8004fca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2208      	movs	r2, #8
 8004fd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 fa64 	bl	80054ae <HAL_TIM_IC_CaptureCallback>
 8004fe6:	e005      	b.n	8004ff4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 fa56 	bl	800549a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fa67 	bl	80054c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b01      	cmp	r3, #1
 8005006:	d10e      	bne.n	8005026 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b01      	cmp	r3, #1
 8005014:	d107      	bne.n	8005026 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f06f 0201 	mvn.w	r2, #1
 800501e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7fb feef 	bl	8000e04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005030:	2b80      	cmp	r3, #128	; 0x80
 8005032:	d10e      	bne.n	8005052 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503e:	2b80      	cmp	r3, #128	; 0x80
 8005040:	d107      	bne.n	8005052 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800504a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 fec5 	bl	8005ddc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005060:	d10e      	bne.n	8005080 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506c:	2b80      	cmp	r3, #128	; 0x80
 800506e:	d107      	bne.n	8005080 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 feb8 	bl	8005df0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508a:	2b40      	cmp	r3, #64	; 0x40
 800508c:	d10e      	bne.n	80050ac <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005098:	2b40      	cmp	r3, #64	; 0x40
 800509a:	d107      	bne.n	80050ac <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 fa15 	bl	80054d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	2b20      	cmp	r3, #32
 80050b8:	d10e      	bne.n	80050d8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f003 0320 	and.w	r3, r3, #32
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d107      	bne.n	80050d8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f06f 0220 	mvn.w	r2, #32
 80050d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fe78 	bl	8005dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050d8:	bf00      	nop
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e0ff      	b.n	80052fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b14      	cmp	r3, #20
 800510a:	f200 80f0 	bhi.w	80052ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800510e:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005114:	08005169 	.word	0x08005169
 8005118:	080052ef 	.word	0x080052ef
 800511c:	080052ef 	.word	0x080052ef
 8005120:	080052ef 	.word	0x080052ef
 8005124:	080051a9 	.word	0x080051a9
 8005128:	080052ef 	.word	0x080052ef
 800512c:	080052ef 	.word	0x080052ef
 8005130:	080052ef 	.word	0x080052ef
 8005134:	080051eb 	.word	0x080051eb
 8005138:	080052ef 	.word	0x080052ef
 800513c:	080052ef 	.word	0x080052ef
 8005140:	080052ef 	.word	0x080052ef
 8005144:	0800522b 	.word	0x0800522b
 8005148:	080052ef 	.word	0x080052ef
 800514c:	080052ef 	.word	0x080052ef
 8005150:	080052ef 	.word	0x080052ef
 8005154:	0800526d 	.word	0x0800526d
 8005158:	080052ef 	.word	0x080052ef
 800515c:	080052ef 	.word	0x080052ef
 8005160:	080052ef 	.word	0x080052ef
 8005164:	080052ad 	.word	0x080052ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68b9      	ldr	r1, [r7, #8]
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fa20 	bl	80055b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699a      	ldr	r2, [r3, #24]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0208 	orr.w	r2, r2, #8
 8005182:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699a      	ldr	r2, [r3, #24]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0204 	bic.w	r2, r2, #4
 8005192:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6999      	ldr	r1, [r3, #24]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	619a      	str	r2, [r3, #24]
      break;
 80051a6:	e0a5      	b.n	80052f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68b9      	ldr	r1, [r7, #8]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fa7c 	bl	80056ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699a      	ldr	r2, [r3, #24]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6999      	ldr	r1, [r3, #24]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	021a      	lsls	r2, r3, #8
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	619a      	str	r2, [r3, #24]
      break;
 80051e8:	e084      	b.n	80052f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68b9      	ldr	r1, [r7, #8]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 fad5 	bl	80057a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	69da      	ldr	r2, [r3, #28]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f042 0208 	orr.w	r2, r2, #8
 8005204:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	69da      	ldr	r2, [r3, #28]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 0204 	bic.w	r2, r2, #4
 8005214:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69d9      	ldr	r1, [r3, #28]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	691a      	ldr	r2, [r3, #16]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	61da      	str	r2, [r3, #28]
      break;
 8005228:	e064      	b.n	80052f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68b9      	ldr	r1, [r7, #8]
 8005230:	4618      	mov	r0, r3
 8005232:	f000 fb2d 	bl	8005890 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69da      	ldr	r2, [r3, #28]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69da      	ldr	r2, [r3, #28]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69d9      	ldr	r1, [r3, #28]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	021a      	lsls	r2, r3, #8
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	61da      	str	r2, [r3, #28]
      break;
 800526a:	e043      	b.n	80052f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68b9      	ldr	r1, [r7, #8]
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fb6a 	bl	800594c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0208 	orr.w	r2, r2, #8
 8005286:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0204 	bic.w	r2, r2, #4
 8005296:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	691a      	ldr	r2, [r3, #16]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052aa:	e023      	b.n	80052f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68b9      	ldr	r1, [r7, #8]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fba2 	bl	80059fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	021a      	lsls	r2, r3, #8
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052ec:	e002      	b.n	80052f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	75fb      	strb	r3, [r7, #23]
      break;
 80052f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop

08005308 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800531c:	2b01      	cmp	r3, #1
 800531e:	d101      	bne.n	8005324 <HAL_TIM_ConfigClockSource+0x1c>
 8005320:	2302      	movs	r3, #2
 8005322:	e0b6      	b.n	8005492 <HAL_TIM_ConfigClockSource+0x18a>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005342:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800534e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005360:	d03e      	beq.n	80053e0 <HAL_TIM_ConfigClockSource+0xd8>
 8005362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005366:	f200 8087 	bhi.w	8005478 <HAL_TIM_ConfigClockSource+0x170>
 800536a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800536e:	f000 8086 	beq.w	800547e <HAL_TIM_ConfigClockSource+0x176>
 8005372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005376:	d87f      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x170>
 8005378:	2b70      	cmp	r3, #112	; 0x70
 800537a:	d01a      	beq.n	80053b2 <HAL_TIM_ConfigClockSource+0xaa>
 800537c:	2b70      	cmp	r3, #112	; 0x70
 800537e:	d87b      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x170>
 8005380:	2b60      	cmp	r3, #96	; 0x60
 8005382:	d050      	beq.n	8005426 <HAL_TIM_ConfigClockSource+0x11e>
 8005384:	2b60      	cmp	r3, #96	; 0x60
 8005386:	d877      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x170>
 8005388:	2b50      	cmp	r3, #80	; 0x50
 800538a:	d03c      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0xfe>
 800538c:	2b50      	cmp	r3, #80	; 0x50
 800538e:	d873      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x170>
 8005390:	2b40      	cmp	r3, #64	; 0x40
 8005392:	d058      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0x13e>
 8005394:	2b40      	cmp	r3, #64	; 0x40
 8005396:	d86f      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x170>
 8005398:	2b30      	cmp	r3, #48	; 0x30
 800539a:	d064      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x15e>
 800539c:	2b30      	cmp	r3, #48	; 0x30
 800539e:	d86b      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x170>
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	d060      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x15e>
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d867      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x170>
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d05c      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x15e>
 80053ac:	2b10      	cmp	r3, #16
 80053ae:	d05a      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x15e>
 80053b0:	e062      	b.n	8005478 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053c2:	f000 fbf1 	bl	8005ba8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	609a      	str	r2, [r3, #8]
      break;
 80053de:	e04f      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053f0:	f000 fbda 	bl	8005ba8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689a      	ldr	r2, [r3, #8]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005402:	609a      	str	r2, [r3, #8]
      break;
 8005404:	e03c      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005412:	461a      	mov	r2, r3
 8005414:	f000 fb4c 	bl	8005ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2150      	movs	r1, #80	; 0x50
 800541e:	4618      	mov	r0, r3
 8005420:	f000 fba5 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 8005424:	e02c      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005432:	461a      	mov	r2, r3
 8005434:	f000 fb6b 	bl	8005b0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2160      	movs	r1, #96	; 0x60
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fb95 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 8005444:	e01c      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005452:	461a      	mov	r2, r3
 8005454:	f000 fb2c 	bl	8005ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2140      	movs	r1, #64	; 0x40
 800545e:	4618      	mov	r0, r3
 8005460:	f000 fb85 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 8005464:	e00c      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4619      	mov	r1, r3
 8005470:	4610      	mov	r0, r2
 8005472:	f000 fb7c 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 8005476:	e003      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	73fb      	strb	r3, [r7, #15]
      break;
 800547c:	e000      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800547e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005490:	7bfb      	ldrb	r3, [r7, #15]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
	...

080054ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a2a      	ldr	r2, [pc, #168]	; (80055a8 <TIM_Base_SetConfig+0xbc>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d003      	beq.n	800550c <TIM_Base_SetConfig+0x20>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550a:	d108      	bne.n	800551e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a21      	ldr	r2, [pc, #132]	; (80055a8 <TIM_Base_SetConfig+0xbc>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00b      	beq.n	800553e <TIM_Base_SetConfig+0x52>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552c:	d007      	beq.n	800553e <TIM_Base_SetConfig+0x52>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a1e      	ldr	r2, [pc, #120]	; (80055ac <TIM_Base_SetConfig+0xc0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d003      	beq.n	800553e <TIM_Base_SetConfig+0x52>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a1d      	ldr	r2, [pc, #116]	; (80055b0 <TIM_Base_SetConfig+0xc4>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d108      	bne.n	8005550 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	4313      	orrs	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a0c      	ldr	r2, [pc, #48]	; (80055a8 <TIM_Base_SetConfig+0xbc>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d007      	beq.n	800558c <TIM_Base_SetConfig+0xa0>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a0b      	ldr	r2, [pc, #44]	; (80055ac <TIM_Base_SetConfig+0xc0>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d003      	beq.n	800558c <TIM_Base_SetConfig+0xa0>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a0a      	ldr	r2, [pc, #40]	; (80055b0 <TIM_Base_SetConfig+0xc4>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d103      	bne.n	8005594 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	691a      	ldr	r2, [r3, #16]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	615a      	str	r2, [r3, #20]
}
 800559a:	bf00      	nop
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	40012c00 	.word	0x40012c00
 80055ac:	40014400 	.word	0x40014400
 80055b0:	40014800 	.word	0x40014800

080055b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	f023 0201 	bic.w	r2, r3, #1
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0303 	bic.w	r3, r3, #3
 80055ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f023 0302 	bic.w	r3, r3, #2
 8005600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	4313      	orrs	r3, r2
 800560a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a24      	ldr	r2, [pc, #144]	; (80056a0 <TIM_OC1_SetConfig+0xec>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d007      	beq.n	8005624 <TIM_OC1_SetConfig+0x70>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a23      	ldr	r2, [pc, #140]	; (80056a4 <TIM_OC1_SetConfig+0xf0>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d003      	beq.n	8005624 <TIM_OC1_SetConfig+0x70>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a22      	ldr	r2, [pc, #136]	; (80056a8 <TIM_OC1_SetConfig+0xf4>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d10c      	bne.n	800563e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f023 0308 	bic.w	r3, r3, #8
 800562a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	4313      	orrs	r3, r2
 8005634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f023 0304 	bic.w	r3, r3, #4
 800563c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a17      	ldr	r2, [pc, #92]	; (80056a0 <TIM_OC1_SetConfig+0xec>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d007      	beq.n	8005656 <TIM_OC1_SetConfig+0xa2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a17      	ldr	r2, [pc, #92]	; (80056a8 <TIM_OC1_SetConfig+0xf4>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d003      	beq.n	8005656 <TIM_OC1_SetConfig+0xa2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a14      	ldr	r2, [pc, #80]	; (80056a4 <TIM_OC1_SetConfig+0xf0>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d111      	bne.n	800567a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800565c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	4313      	orrs	r3, r2
 800566e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	4313      	orrs	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	621a      	str	r2, [r3, #32]
}
 8005694:	bf00      	nop
 8005696:	371c      	adds	r7, #28
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	40012c00 	.word	0x40012c00
 80056a4:	40014800 	.word	0x40014800
 80056a8:	40014400 	.word	0x40014400

080056ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	f023 0210 	bic.w	r2, r3, #16
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	021b      	lsls	r3, r3, #8
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f023 0320 	bic.w	r3, r3, #32
 80056fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	011b      	lsls	r3, r3, #4
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4313      	orrs	r3, r2
 8005706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a22      	ldr	r2, [pc, #136]	; (8005794 <TIM_OC2_SetConfig+0xe8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d10d      	bne.n	800572c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	011b      	lsls	r3, r3, #4
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4313      	orrs	r3, r2
 8005722:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800572a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a19      	ldr	r2, [pc, #100]	; (8005794 <TIM_OC2_SetConfig+0xe8>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d007      	beq.n	8005744 <TIM_OC2_SetConfig+0x98>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a18      	ldr	r2, [pc, #96]	; (8005798 <TIM_OC2_SetConfig+0xec>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d003      	beq.n	8005744 <TIM_OC2_SetConfig+0x98>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a17      	ldr	r2, [pc, #92]	; (800579c <TIM_OC2_SetConfig+0xf0>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d113      	bne.n	800576c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800574a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005752:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	4313      	orrs	r3, r2
 800575e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	4313      	orrs	r3, r2
 800576a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	621a      	str	r2, [r3, #32]
}
 8005786:	bf00      	nop
 8005788:	371c      	adds	r7, #28
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	40012c00 	.word	0x40012c00
 8005798:	40014400 	.word	0x40014400
 800579c:	40014800 	.word	0x40014800

080057a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f023 0303 	bic.w	r3, r3, #3
 80057da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	021b      	lsls	r3, r3, #8
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a21      	ldr	r2, [pc, #132]	; (8005884 <TIM_OC3_SetConfig+0xe4>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d10d      	bne.n	800581e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005808:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	021b      	lsls	r3, r3, #8
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	4313      	orrs	r3, r2
 8005814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800581c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a18      	ldr	r2, [pc, #96]	; (8005884 <TIM_OC3_SetConfig+0xe4>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d007      	beq.n	8005836 <TIM_OC3_SetConfig+0x96>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a17      	ldr	r2, [pc, #92]	; (8005888 <TIM_OC3_SetConfig+0xe8>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d003      	beq.n	8005836 <TIM_OC3_SetConfig+0x96>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a16      	ldr	r2, [pc, #88]	; (800588c <TIM_OC3_SetConfig+0xec>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d113      	bne.n	800585e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800583c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	4313      	orrs	r3, r2
 8005850:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	011b      	lsls	r3, r3, #4
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	4313      	orrs	r3, r2
 800585c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	621a      	str	r2, [r3, #32]
}
 8005878:	bf00      	nop
 800587a:	371c      	adds	r7, #28
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	40012c00 	.word	0x40012c00
 8005888:	40014400 	.word	0x40014400
 800588c:	40014800 	.word	0x40014800

08005890 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	021b      	lsls	r3, r3, #8
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	031b      	lsls	r3, r3, #12
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a14      	ldr	r2, [pc, #80]	; (8005940 <TIM_OC4_SetConfig+0xb0>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d007      	beq.n	8005904 <TIM_OC4_SetConfig+0x74>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a13      	ldr	r2, [pc, #76]	; (8005944 <TIM_OC4_SetConfig+0xb4>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d003      	beq.n	8005904 <TIM_OC4_SetConfig+0x74>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a12      	ldr	r2, [pc, #72]	; (8005948 <TIM_OC4_SetConfig+0xb8>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d109      	bne.n	8005918 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800590a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	019b      	lsls	r3, r3, #6
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	621a      	str	r2, [r3, #32]
}
 8005932:	bf00      	nop
 8005934:	371c      	adds	r7, #28
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	40012c00 	.word	0x40012c00
 8005944:	40014400 	.word	0x40014400
 8005948:	40014800 	.word	0x40014800

0800594c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800594c:	b480      	push	{r7}
 800594e:	b087      	sub	sp, #28
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800597a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005990:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	041b      	lsls	r3, r3, #16
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	4313      	orrs	r3, r2
 800599c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a13      	ldr	r2, [pc, #76]	; (80059f0 <TIM_OC5_SetConfig+0xa4>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d007      	beq.n	80059b6 <TIM_OC5_SetConfig+0x6a>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a12      	ldr	r2, [pc, #72]	; (80059f4 <TIM_OC5_SetConfig+0xa8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d003      	beq.n	80059b6 <TIM_OC5_SetConfig+0x6a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a11      	ldr	r2, [pc, #68]	; (80059f8 <TIM_OC5_SetConfig+0xac>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d109      	bne.n	80059ca <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	021b      	lsls	r3, r3, #8
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	621a      	str	r2, [r3, #32]
}
 80059e4:	bf00      	nop
 80059e6:	371c      	adds	r7, #28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	40012c00 	.word	0x40012c00
 80059f4:	40014400 	.word	0x40014400
 80059f8:	40014800 	.word	0x40014800

080059fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	021b      	lsls	r3, r3, #8
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	051b      	lsls	r3, r3, #20
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a14      	ldr	r2, [pc, #80]	; (8005aa4 <TIM_OC6_SetConfig+0xa8>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d007      	beq.n	8005a68 <TIM_OC6_SetConfig+0x6c>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a13      	ldr	r2, [pc, #76]	; (8005aa8 <TIM_OC6_SetConfig+0xac>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d003      	beq.n	8005a68 <TIM_OC6_SetConfig+0x6c>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a12      	ldr	r2, [pc, #72]	; (8005aac <TIM_OC6_SetConfig+0xb0>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d109      	bne.n	8005a7c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	029b      	lsls	r3, r3, #10
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	621a      	str	r2, [r3, #32]
}
 8005a96:	bf00      	nop
 8005a98:	371c      	adds	r7, #28
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	40012c00 	.word	0x40012c00
 8005aa8:	40014400 	.word	0x40014400
 8005aac:	40014800 	.word	0x40014800

08005ab0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	f023 0201 	bic.w	r2, r3, #1
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f023 030a 	bic.w	r3, r3, #10
 8005aec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	621a      	str	r2, [r3, #32]
}
 8005b02:	bf00      	nop
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b087      	sub	sp, #28
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	f023 0210 	bic.w	r2, r3, #16
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	031b      	lsls	r3, r3, #12
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	011b      	lsls	r3, r3, #4
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	621a      	str	r2, [r3, #32]
}
 8005b62:	bf00      	nop
 8005b64:	371c      	adds	r7, #28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b085      	sub	sp, #20
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	f043 0307 	orr.w	r3, r3, #7
 8005b94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	609a      	str	r2, [r3, #8]
}
 8005b9c:	bf00      	nop
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	021a      	lsls	r2, r3, #8
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	609a      	str	r2, [r3, #8]
}
 8005bdc:	bf00      	nop
 8005bde:	371c      	adds	r7, #28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d101      	bne.n	8005c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	e04a      	b.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a1f      	ldr	r2, [pc, #124]	; (8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d108      	bne.n	8005c3c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c30:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a12      	ldr	r2, [pc, #72]	; (8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d004      	beq.n	8005c6a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c68:	d10c      	bne.n	8005c84 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	40012c00 	.word	0x40012c00

08005ca8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d101      	bne.n	8005cc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e078      	b.n	8005db6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	041b      	lsls	r3, r3, #16
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a20      	ldr	r2, [pc, #128]	; (8005dc4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d106      	bne.n	8005d56 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a1a      	ldr	r2, [pc, #104]	; (8005dc4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d121      	bne.n	8005da4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6a:	051b      	lsls	r3, r3, #20
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a0c      	ldr	r2, [pc, #48]	; (8005dc4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d106      	bne.n	8005da4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	40012c00 	.word	0x40012c00

08005dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <LL_RCC_GetUSARTClockSource>:
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e10:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4013      	ands	r3, r2
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <LL_RCC_GetLPUARTClockSource>:
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e30:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4013      	ands	r3, r2
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e042      	b.n	8005edc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d106      	bne.n	8005e6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7fb fbc1 	bl	80015f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2224      	movs	r2, #36	; 0x24
 8005e72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 0201 	bic.w	r2, r2, #1
 8005e84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f82c 	bl	8005ee4 <UART_SetConfig>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d101      	bne.n	8005e96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e022      	b.n	8005edc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fa48 	bl	8006334 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ec2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0201 	orr.w	r2, r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 facf 	bl	8006478 <UART_CheckIdleState>
 8005eda:	4603      	mov	r3, r0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ee8:	b08c      	sub	sp, #48	; 0x30
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	431a      	orrs	r2, r3
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	431a      	orrs	r2, r3
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	4baf      	ldr	r3, [pc, #700]	; (80061d0 <UART_SetConfig+0x2ec>)
 8005f14:	4013      	ands	r3, r2
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	6812      	ldr	r2, [r2, #0]
 8005f1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f1c:	430b      	orrs	r3, r1
 8005f1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4aa4      	ldr	r2, [pc, #656]	; (80061d4 <UART_SetConfig+0x2f0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d004      	beq.n	8005f50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005f5a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	6812      	ldr	r2, [r2, #0]
 8005f62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f64:	430b      	orrs	r3, r1
 8005f66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6e:	f023 010f 	bic.w	r1, r3, #15
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a95      	ldr	r2, [pc, #596]	; (80061d8 <UART_SetConfig+0x2f4>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d125      	bne.n	8005fd4 <UART_SetConfig+0xf0>
 8005f88:	2003      	movs	r0, #3
 8005f8a:	f7ff ff3b 	bl	8005e04 <LL_RCC_GetUSARTClockSource>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d81b      	bhi.n	8005fcc <UART_SetConfig+0xe8>
 8005f94:	a201      	add	r2, pc, #4	; (adr r2, 8005f9c <UART_SetConfig+0xb8>)
 8005f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9a:	bf00      	nop
 8005f9c:	08005fad 	.word	0x08005fad
 8005fa0:	08005fbd 	.word	0x08005fbd
 8005fa4:	08005fb5 	.word	0x08005fb5
 8005fa8:	08005fc5 	.word	0x08005fc5
 8005fac:	2301      	movs	r3, #1
 8005fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fb2:	e042      	b.n	800603a <UART_SetConfig+0x156>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fba:	e03e      	b.n	800603a <UART_SetConfig+0x156>
 8005fbc:	2304      	movs	r3, #4
 8005fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fc2:	e03a      	b.n	800603a <UART_SetConfig+0x156>
 8005fc4:	2308      	movs	r3, #8
 8005fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fca:	e036      	b.n	800603a <UART_SetConfig+0x156>
 8005fcc:	2310      	movs	r3, #16
 8005fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fd2:	e032      	b.n	800603a <UART_SetConfig+0x156>
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a7e      	ldr	r2, [pc, #504]	; (80061d4 <UART_SetConfig+0x2f0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d12a      	bne.n	8006034 <UART_SetConfig+0x150>
 8005fde:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005fe2:	f7ff ff1f 	bl	8005e24 <LL_RCC_GetLPUARTClockSource>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fec:	d01a      	beq.n	8006024 <UART_SetConfig+0x140>
 8005fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ff2:	d81b      	bhi.n	800602c <UART_SetConfig+0x148>
 8005ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ff8:	d00c      	beq.n	8006014 <UART_SetConfig+0x130>
 8005ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ffe:	d815      	bhi.n	800602c <UART_SetConfig+0x148>
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <UART_SetConfig+0x128>
 8006004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006008:	d008      	beq.n	800601c <UART_SetConfig+0x138>
 800600a:	e00f      	b.n	800602c <UART_SetConfig+0x148>
 800600c:	2300      	movs	r3, #0
 800600e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006012:	e012      	b.n	800603a <UART_SetConfig+0x156>
 8006014:	2302      	movs	r3, #2
 8006016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800601a:	e00e      	b.n	800603a <UART_SetConfig+0x156>
 800601c:	2304      	movs	r3, #4
 800601e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006022:	e00a      	b.n	800603a <UART_SetConfig+0x156>
 8006024:	2308      	movs	r3, #8
 8006026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800602a:	e006      	b.n	800603a <UART_SetConfig+0x156>
 800602c:	2310      	movs	r3, #16
 800602e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006032:	e002      	b.n	800603a <UART_SetConfig+0x156>
 8006034:	2310      	movs	r3, #16
 8006036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a65      	ldr	r2, [pc, #404]	; (80061d4 <UART_SetConfig+0x2f0>)
 8006040:	4293      	cmp	r3, r2
 8006042:	f040 8097 	bne.w	8006174 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006046:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800604a:	2b08      	cmp	r3, #8
 800604c:	d823      	bhi.n	8006096 <UART_SetConfig+0x1b2>
 800604e:	a201      	add	r2, pc, #4	; (adr r2, 8006054 <UART_SetConfig+0x170>)
 8006050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006054:	08006079 	.word	0x08006079
 8006058:	08006097 	.word	0x08006097
 800605c:	08006081 	.word	0x08006081
 8006060:	08006097 	.word	0x08006097
 8006064:	08006087 	.word	0x08006087
 8006068:	08006097 	.word	0x08006097
 800606c:	08006097 	.word	0x08006097
 8006070:	08006097 	.word	0x08006097
 8006074:	0800608f 	.word	0x0800608f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006078:	f7fe f834 	bl	80040e4 <HAL_RCC_GetPCLK1Freq>
 800607c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800607e:	e010      	b.n	80060a2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006080:	4b56      	ldr	r3, [pc, #344]	; (80061dc <UART_SetConfig+0x2f8>)
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006084:	e00d      	b.n	80060a2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006086:	f7fd ffad 	bl	8003fe4 <HAL_RCC_GetSysClockFreq>
 800608a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800608c:	e009      	b.n	80060a2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800608e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006094:	e005      	b.n	80060a2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80060a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 812b 	beq.w	8006300 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	4a4c      	ldr	r2, [pc, #304]	; (80061e0 <UART_SetConfig+0x2fc>)
 80060b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060b4:	461a      	mov	r2, r3
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80060bc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	4613      	mov	r3, r2
 80060c4:	005b      	lsls	r3, r3, #1
 80060c6:	4413      	add	r3, r2
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d305      	bcc.n	80060da <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d903      	bls.n	80060e2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80060e0:	e10e      	b.n	8006300 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	2200      	movs	r2, #0
 80060e6:	60bb      	str	r3, [r7, #8]
 80060e8:	60fa      	str	r2, [r7, #12]
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	4a3c      	ldr	r2, [pc, #240]	; (80061e0 <UART_SetConfig+0x2fc>)
 80060f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2200      	movs	r2, #0
 80060f8:	603b      	str	r3, [r7, #0]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006100:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006104:	f7fa f83a 	bl	800017c <__aeabi_uldivmod>
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	4610      	mov	r0, r2
 800610e:	4619      	mov	r1, r3
 8006110:	f04f 0200 	mov.w	r2, #0
 8006114:	f04f 0300 	mov.w	r3, #0
 8006118:	020b      	lsls	r3, r1, #8
 800611a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800611e:	0202      	lsls	r2, r0, #8
 8006120:	6979      	ldr	r1, [r7, #20]
 8006122:	6849      	ldr	r1, [r1, #4]
 8006124:	0849      	lsrs	r1, r1, #1
 8006126:	2000      	movs	r0, #0
 8006128:	460c      	mov	r4, r1
 800612a:	4605      	mov	r5, r0
 800612c:	eb12 0804 	adds.w	r8, r2, r4
 8006130:	eb43 0905 	adc.w	r9, r3, r5
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	469a      	mov	sl, r3
 800613c:	4693      	mov	fp, r2
 800613e:	4652      	mov	r2, sl
 8006140:	465b      	mov	r3, fp
 8006142:	4640      	mov	r0, r8
 8006144:	4649      	mov	r1, r9
 8006146:	f7fa f819 	bl	800017c <__aeabi_uldivmod>
 800614a:	4602      	mov	r2, r0
 800614c:	460b      	mov	r3, r1
 800614e:	4613      	mov	r3, r2
 8006150:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006152:	6a3b      	ldr	r3, [r7, #32]
 8006154:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006158:	d308      	bcc.n	800616c <UART_SetConfig+0x288>
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006160:	d204      	bcs.n	800616c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6a3a      	ldr	r2, [r7, #32]
 8006168:	60da      	str	r2, [r3, #12]
 800616a:	e0c9      	b.n	8006300 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006172:	e0c5      	b.n	8006300 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800617c:	d16d      	bne.n	800625a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800617e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006182:	3b01      	subs	r3, #1
 8006184:	2b07      	cmp	r3, #7
 8006186:	d82d      	bhi.n	80061e4 <UART_SetConfig+0x300>
 8006188:	a201      	add	r2, pc, #4	; (adr r2, 8006190 <UART_SetConfig+0x2ac>)
 800618a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618e:	bf00      	nop
 8006190:	080061b1 	.word	0x080061b1
 8006194:	080061b9 	.word	0x080061b9
 8006198:	080061e5 	.word	0x080061e5
 800619c:	080061bf 	.word	0x080061bf
 80061a0:	080061e5 	.word	0x080061e5
 80061a4:	080061e5 	.word	0x080061e5
 80061a8:	080061e5 	.word	0x080061e5
 80061ac:	080061c7 	.word	0x080061c7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061b0:	f7fd ffae 	bl	8004110 <HAL_RCC_GetPCLK2Freq>
 80061b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061b6:	e01b      	b.n	80061f0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061b8:	4b08      	ldr	r3, [pc, #32]	; (80061dc <UART_SetConfig+0x2f8>)
 80061ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061bc:	e018      	b.n	80061f0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061be:	f7fd ff11 	bl	8003fe4 <HAL_RCC_GetSysClockFreq>
 80061c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061c4:	e014      	b.n	80061f0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061cc:	e010      	b.n	80061f0 <UART_SetConfig+0x30c>
 80061ce:	bf00      	nop
 80061d0:	cfff69f3 	.word	0xcfff69f3
 80061d4:	40008000 	.word	0x40008000
 80061d8:	40013800 	.word	0x40013800
 80061dc:	00f42400 	.word	0x00f42400
 80061e0:	08007310 	.word	0x08007310
      default:
        pclk = 0U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80061ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 8084 	beq.w	8006300 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fc:	4a4b      	ldr	r2, [pc, #300]	; (800632c <UART_SetConfig+0x448>)
 80061fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006202:	461a      	mov	r2, r3
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	fbb3 f3f2 	udiv	r3, r3, r2
 800620a:	005a      	lsls	r2, r3, #1
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	085b      	lsrs	r3, r3, #1
 8006212:	441a      	add	r2, r3
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	fbb2 f3f3 	udiv	r3, r2, r3
 800621c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	2b0f      	cmp	r3, #15
 8006222:	d916      	bls.n	8006252 <UART_SetConfig+0x36e>
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800622a:	d212      	bcs.n	8006252 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	b29b      	uxth	r3, r3
 8006230:	f023 030f 	bic.w	r3, r3, #15
 8006234:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	085b      	lsrs	r3, r3, #1
 800623a:	b29b      	uxth	r3, r3
 800623c:	f003 0307 	and.w	r3, r3, #7
 8006240:	b29a      	uxth	r2, r3
 8006242:	8bfb      	ldrh	r3, [r7, #30]
 8006244:	4313      	orrs	r3, r2
 8006246:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	8bfa      	ldrh	r2, [r7, #30]
 800624e:	60da      	str	r2, [r3, #12]
 8006250:	e056      	b.n	8006300 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006258:	e052      	b.n	8006300 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800625a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800625e:	3b01      	subs	r3, #1
 8006260:	2b07      	cmp	r3, #7
 8006262:	d822      	bhi.n	80062aa <UART_SetConfig+0x3c6>
 8006264:	a201      	add	r2, pc, #4	; (adr r2, 800626c <UART_SetConfig+0x388>)
 8006266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626a:	bf00      	nop
 800626c:	0800628d 	.word	0x0800628d
 8006270:	08006295 	.word	0x08006295
 8006274:	080062ab 	.word	0x080062ab
 8006278:	0800629b 	.word	0x0800629b
 800627c:	080062ab 	.word	0x080062ab
 8006280:	080062ab 	.word	0x080062ab
 8006284:	080062ab 	.word	0x080062ab
 8006288:	080062a3 	.word	0x080062a3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800628c:	f7fd ff40 	bl	8004110 <HAL_RCC_GetPCLK2Freq>
 8006290:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006292:	e010      	b.n	80062b6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006294:	4b26      	ldr	r3, [pc, #152]	; (8006330 <UART_SetConfig+0x44c>)
 8006296:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006298:	e00d      	b.n	80062b6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800629a:	f7fd fea3 	bl	8003fe4 <HAL_RCC_GetSysClockFreq>
 800629e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062a0:	e009      	b.n	80062b6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062a8:	e005      	b.n	80062b6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80062b4:	bf00      	nop
    }

    if (pclk != 0U)
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d021      	beq.n	8006300 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	4a1a      	ldr	r2, [pc, #104]	; (800632c <UART_SetConfig+0x448>)
 80062c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062c6:	461a      	mov	r2, r3
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	085b      	lsrs	r3, r3, #1
 80062d4:	441a      	add	r2, r3
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	fbb2 f3f3 	udiv	r3, r2, r3
 80062de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	2b0f      	cmp	r3, #15
 80062e4:	d909      	bls.n	80062fa <UART_SetConfig+0x416>
 80062e6:	6a3b      	ldr	r3, [r7, #32]
 80062e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062ec:	d205      	bcs.n	80062fa <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	60da      	str	r2, [r3, #12]
 80062f8:	e002      	b.n	8006300 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	2201      	movs	r2, #1
 8006304:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	2201      	movs	r2, #1
 800630c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	2200      	movs	r2, #0
 8006314:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2200      	movs	r2, #0
 800631a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800631c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006320:	4618      	mov	r0, r3
 8006322:	3730      	adds	r7, #48	; 0x30
 8006324:	46bd      	mov	sp, r7
 8006326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800632a:	bf00      	nop
 800632c:	08007310 	.word	0x08007310
 8006330:	00f42400 	.word	0x00f42400

08006334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00a      	beq.n	800635e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00a      	beq.n	80063a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a6:	f003 0308 	and.w	r3, r3, #8
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c8:	f003 0310 	and.w	r3, r3, #16
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00a      	beq.n	80063e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	f003 0320 	and.w	r3, r3, #32
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00a      	beq.n	8006408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006410:	2b00      	cmp	r3, #0
 8006412:	d01a      	beq.n	800644a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006432:	d10a      	bne.n	800644a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00a      	beq.n	800646c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	605a      	str	r2, [r3, #4]
  }
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b098      	sub	sp, #96	; 0x60
 800647c:	af02      	add	r7, sp, #8
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006488:	f7fb f9f0 	bl	800186c <HAL_GetTick>
 800648c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0308 	and.w	r3, r3, #8
 8006498:	2b08      	cmp	r3, #8
 800649a:	d12f      	bne.n	80064fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800649c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064a4:	2200      	movs	r2, #0
 80064a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f88e 	bl	80065cc <UART_WaitOnFlagUntilTimeout>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d022      	beq.n	80064fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064be:	e853 3f00 	ldrex	r3, [r3]
 80064c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ca:	653b      	str	r3, [r7, #80]	; 0x50
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	461a      	mov	r2, r3
 80064d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064d4:	647b      	str	r3, [r7, #68]	; 0x44
 80064d6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064dc:	e841 2300 	strex	r3, r2, [r1]
 80064e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e6      	bne.n	80064b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2220      	movs	r2, #32
 80064ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e063      	b.n	80065c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0304 	and.w	r3, r3, #4
 8006506:	2b04      	cmp	r3, #4
 8006508:	d149      	bne.n	800659e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800650a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006512:	2200      	movs	r2, #0
 8006514:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f857 	bl	80065cc <UART_WaitOnFlagUntilTimeout>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d03c      	beq.n	800659e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	e853 3f00 	ldrex	r3, [r3]
 8006530:	623b      	str	r3, [r7, #32]
   return(result);
 8006532:	6a3b      	ldr	r3, [r7, #32]
 8006534:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006538:	64fb      	str	r3, [r7, #76]	; 0x4c
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	461a      	mov	r2, r3
 8006540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006542:	633b      	str	r3, [r7, #48]	; 0x30
 8006544:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006546:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800654a:	e841 2300 	strex	r3, r2, [r1]
 800654e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1e6      	bne.n	8006524 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3308      	adds	r3, #8
 800655c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	e853 3f00 	ldrex	r3, [r3]
 8006564:	60fb      	str	r3, [r7, #12]
   return(result);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f023 0301 	bic.w	r3, r3, #1
 800656c:	64bb      	str	r3, [r7, #72]	; 0x48
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3308      	adds	r3, #8
 8006574:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006576:	61fa      	str	r2, [r7, #28]
 8006578:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657a:	69b9      	ldr	r1, [r7, #24]
 800657c:	69fa      	ldr	r2, [r7, #28]
 800657e:	e841 2300 	strex	r3, r2, [r1]
 8006582:	617b      	str	r3, [r7, #20]
   return(result);
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1e5      	bne.n	8006556 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2220      	movs	r2, #32
 800658e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e012      	b.n	80065c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2220      	movs	r2, #32
 80065a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3758      	adds	r7, #88	; 0x58
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	603b      	str	r3, [r7, #0]
 80065d8:	4613      	mov	r3, r2
 80065da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065dc:	e049      	b.n	8006672 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e4:	d045      	beq.n	8006672 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065e6:	f7fb f941 	bl	800186c <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d302      	bcc.n	80065fc <UART_WaitOnFlagUntilTimeout+0x30>
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e048      	b.n	8006692 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0304 	and.w	r3, r3, #4
 800660a:	2b00      	cmp	r3, #0
 800660c:	d031      	beq.n	8006672 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	f003 0308 	and.w	r3, r3, #8
 8006618:	2b08      	cmp	r3, #8
 800661a:	d110      	bne.n	800663e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2208      	movs	r2, #8
 8006622:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 f838 	bl	800669a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2208      	movs	r2, #8
 800662e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e029      	b.n	8006692 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	69db      	ldr	r3, [r3, #28]
 8006644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800664c:	d111      	bne.n	8006672 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006656:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f000 f81e 	bl	800669a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2220      	movs	r2, #32
 8006662:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e00f      	b.n	8006692 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	69da      	ldr	r2, [r3, #28]
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	4013      	ands	r3, r2
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	429a      	cmp	r2, r3
 8006680:	bf0c      	ite	eq
 8006682:	2301      	moveq	r3, #1
 8006684:	2300      	movne	r3, #0
 8006686:	b2db      	uxtb	r3, r3
 8006688:	461a      	mov	r2, r3
 800668a:	79fb      	ldrb	r3, [r7, #7]
 800668c:	429a      	cmp	r2, r3
 800668e:	d0a6      	beq.n	80065de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800669a:	b480      	push	{r7}
 800669c:	b095      	sub	sp, #84	; 0x54
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066aa:	e853 3f00 	ldrex	r3, [r3]
 80066ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	461a      	mov	r2, r3
 80066be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c0:	643b      	str	r3, [r7, #64]	; 0x40
 80066c2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066c8:	e841 2300 	strex	r3, r2, [r1]
 80066cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1e6      	bne.n	80066a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3308      	adds	r3, #8
 80066da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	e853 3f00 	ldrex	r3, [r3]
 80066e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066ea:	f023 0301 	bic.w	r3, r3, #1
 80066ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	3308      	adds	r3, #8
 80066f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006700:	e841 2300 	strex	r3, r2, [r1]
 8006704:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1e3      	bne.n	80066d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006710:	2b01      	cmp	r3, #1
 8006712:	d118      	bne.n	8006746 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	60bb      	str	r3, [r7, #8]
   return(result);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	f023 0310 	bic.w	r3, r3, #16
 8006728:	647b      	str	r3, [r7, #68]	; 0x44
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	461a      	mov	r2, r3
 8006730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006732:	61bb      	str	r3, [r7, #24]
 8006734:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006736:	6979      	ldr	r1, [r7, #20]
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	e841 2300 	strex	r3, r2, [r1]
 800673e:	613b      	str	r3, [r7, #16]
   return(result);
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1e6      	bne.n	8006714 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2220      	movs	r2, #32
 800674a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	675a      	str	r2, [r3, #116]	; 0x74
}
 800675a:	bf00      	nop
 800675c:	3754      	adds	r7, #84	; 0x54
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006766:	b480      	push	{r7}
 8006768:	b085      	sub	sp, #20
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006774:	2b01      	cmp	r3, #1
 8006776:	d101      	bne.n	800677c <HAL_UARTEx_DisableFifoMode+0x16>
 8006778:	2302      	movs	r3, #2
 800677a:	e027      	b.n	80067cc <HAL_UARTEx_DisableFifoMode+0x66>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2224      	movs	r2, #36	; 0x24
 8006788:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 0201 	bic.w	r2, r2, #1
 80067a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80067aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2220      	movs	r2, #32
 80067be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d101      	bne.n	80067f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80067ec:	2302      	movs	r3, #2
 80067ee:	e02d      	b.n	800684c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2224      	movs	r2, #36	; 0x24
 80067fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f022 0201 	bic.w	r2, r2, #1
 8006816:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 f84f 	bl	80068d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2220      	movs	r2, #32
 800683e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006864:	2b01      	cmp	r3, #1
 8006866:	d101      	bne.n	800686c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006868:	2302      	movs	r3, #2
 800686a:	e02d      	b.n	80068c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2224      	movs	r2, #36	; 0x24
 8006878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 0201 	bic.w	r2, r2, #1
 8006892:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f811 	bl	80068d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2220      	movs	r2, #32
 80068ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d108      	bne.n	80068f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80068f0:	e031      	b.n	8006956 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80068f2:	2308      	movs	r3, #8
 80068f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80068f6:	2308      	movs	r3, #8
 80068f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	0e5b      	lsrs	r3, r3, #25
 8006902:	b2db      	uxtb	r3, r3
 8006904:	f003 0307 	and.w	r3, r3, #7
 8006908:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	0f5b      	lsrs	r3, r3, #29
 8006912:	b2db      	uxtb	r3, r3
 8006914:	f003 0307 	and.w	r3, r3, #7
 8006918:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800691a:	7bbb      	ldrb	r3, [r7, #14]
 800691c:	7b3a      	ldrb	r2, [r7, #12]
 800691e:	4911      	ldr	r1, [pc, #68]	; (8006964 <UARTEx_SetNbDataToProcess+0x94>)
 8006920:	5c8a      	ldrb	r2, [r1, r2]
 8006922:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006926:	7b3a      	ldrb	r2, [r7, #12]
 8006928:	490f      	ldr	r1, [pc, #60]	; (8006968 <UARTEx_SetNbDataToProcess+0x98>)
 800692a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800692c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006930:	b29a      	uxth	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006938:	7bfb      	ldrb	r3, [r7, #15]
 800693a:	7b7a      	ldrb	r2, [r7, #13]
 800693c:	4909      	ldr	r1, [pc, #36]	; (8006964 <UARTEx_SetNbDataToProcess+0x94>)
 800693e:	5c8a      	ldrb	r2, [r1, r2]
 8006940:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006944:	7b7a      	ldrb	r2, [r7, #13]
 8006946:	4908      	ldr	r1, [pc, #32]	; (8006968 <UARTEx_SetNbDataToProcess+0x98>)
 8006948:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800694a:	fb93 f3f2 	sdiv	r3, r3, r2
 800694e:	b29a      	uxth	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006956:	bf00      	nop
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	08007328 	.word	0x08007328
 8006968:	08007330 	.word	0x08007330

0800696c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006974:	4b06      	ldr	r3, [pc, #24]	; (8006990 <LL_EXTI_EnableIT_0_31+0x24>)
 8006976:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800697a:	4905      	ldr	r1, [pc, #20]	; (8006990 <LL_EXTI_EnableIT_0_31+0x24>)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4313      	orrs	r3, r2
 8006980:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	58000800 	.word	0x58000800

08006994 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800699c:	4b06      	ldr	r3, [pc, #24]	; (80069b8 <LL_EXTI_EnableIT_32_63+0x24>)
 800699e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80069a2:	4905      	ldr	r1, [pc, #20]	; (80069b8 <LL_EXTI_EnableIT_32_63+0x24>)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	58000800 	.word	0x58000800

080069bc <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80069c4:	4b07      	ldr	r3, [pc, #28]	; (80069e4 <LL_EXTI_DisableIT_0_31+0x28>)
 80069c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	43db      	mvns	r3, r3
 80069ce:	4905      	ldr	r1, [pc, #20]	; (80069e4 <LL_EXTI_DisableIT_0_31+0x28>)
 80069d0:	4013      	ands	r3, r2
 80069d2:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80069d6:	bf00      	nop
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	58000800 	.word	0x58000800

080069e8 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80069f0:	4b07      	ldr	r3, [pc, #28]	; (8006a10 <LL_EXTI_DisableIT_32_63+0x28>)
 80069f2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	43db      	mvns	r3, r3
 80069fa:	4905      	ldr	r1, [pc, #20]	; (8006a10 <LL_EXTI_DisableIT_32_63+0x28>)
 80069fc:	4013      	ands	r3, r2
 80069fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006a02:	bf00      	nop
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	58000800 	.word	0x58000800

08006a14 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_21 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006a1c:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <LL_EXTI_EnableEvent_0_31+0x24>)
 8006a1e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006a22:	4905      	ldr	r1, [pc, #20]	; (8006a38 <LL_EXTI_EnableEvent_0_31+0x24>)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	58000800 	.word	0x58000800

08006a3c <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8006a44:	4b06      	ldr	r3, [pc, #24]	; (8006a60 <LL_EXTI_EnableEvent_32_63+0x24>)
 8006a46:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8006a4a:	4905      	ldr	r1, [pc, #20]	; (8006a60 <LL_EXTI_EnableEvent_32_63+0x24>)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	58000800 	.word	0x58000800

08006a64 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_20 (*)
  *         @arg @ref LL_EXTI_LINE_21 (*)
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006a6c:	4b07      	ldr	r3, [pc, #28]	; (8006a8c <LL_EXTI_DisableEvent_0_31+0x28>)
 8006a6e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	43db      	mvns	r3, r3
 8006a76:	4905      	ldr	r1, [pc, #20]	; (8006a8c <LL_EXTI_DisableEvent_0_31+0x28>)
 8006a78:	4013      	ands	r3, r2
 8006a7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8006a7e:	bf00      	nop
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	58000800 	.word	0x58000800

08006a90 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8006a98:	4b07      	ldr	r3, [pc, #28]	; (8006ab8 <LL_EXTI_DisableEvent_32_63+0x28>)
 8006a9a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	43db      	mvns	r3, r3
 8006aa2:	4905      	ldr	r1, [pc, #20]	; (8006ab8 <LL_EXTI_DisableEvent_32_63+0x28>)
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006aaa:	bf00      	nop
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	58000800 	.word	0x58000800

08006abc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006ac4:	4b05      	ldr	r3, [pc, #20]	; (8006adc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	4904      	ldr	r1, [pc, #16]	; (8006adc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	600b      	str	r3, [r1, #0]

}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr
 8006adc:	58000800 	.word	0x58000800

08006ae0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8006ae8:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006aea:	6a1a      	ldr	r2, [r3, #32]
 8006aec:	4904      	ldr	r1, [pc, #16]	; (8006b00 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	620b      	str	r3, [r1, #32]
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	58000800 	.word	0x58000800

08006b04 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006b0c:	4b06      	ldr	r3, [pc, #24]	; (8006b28 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	43db      	mvns	r3, r3
 8006b14:	4904      	ldr	r1, [pc, #16]	; (8006b28 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006b16:	4013      	ands	r3, r2
 8006b18:	600b      	str	r3, [r1, #0]

}
 8006b1a:	bf00      	nop
 8006b1c:	370c      	adds	r7, #12
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	58000800 	.word	0x58000800

08006b2c <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8006b34:	4b06      	ldr	r3, [pc, #24]	; (8006b50 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006b36:	6a1a      	ldr	r2, [r3, #32]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	43db      	mvns	r3, r3
 8006b3c:	4904      	ldr	r1, [pc, #16]	; (8006b50 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006b3e:	4013      	ands	r3, r2
 8006b40:	620b      	str	r3, [r1, #32]
}
 8006b42:	bf00      	nop
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	58000800 	.word	0x58000800

08006b54 <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006b5c:	4b05      	ldr	r3, [pc, #20]	; (8006b74 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	4904      	ldr	r1, [pc, #16]	; (8006b74 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	604b      	str	r3, [r1, #4]
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	58000800 	.word	0x58000800

08006b78 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8006b80:	4b05      	ldr	r3, [pc, #20]	; (8006b98 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006b82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b84:	4904      	ldr	r1, [pc, #16]	; (8006b98 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	58000800 	.word	0x58000800

08006b9c <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006ba4:	4b06      	ldr	r3, [pc, #24]	; (8006bc0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	43db      	mvns	r3, r3
 8006bac:	4904      	ldr	r1, [pc, #16]	; (8006bc0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006bae:	4013      	ands	r3, r2
 8006bb0:	604b      	str	r3, [r1, #4]
}
 8006bb2:	bf00      	nop
 8006bb4:	370c      	adds	r7, #12
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	58000800 	.word	0x58000800

08006bc4 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8006bcc:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8006bce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	43db      	mvns	r3, r3
 8006bd4:	4904      	ldr	r1, [pc, #16]	; (8006be8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006bda:	bf00      	nop
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	58000800 	.word	0x58000800

08006bec <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	7a1b      	ldrb	r3, [r3, #8]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f000 80cc 	beq.w	8006d9a <LL_EXTI_Init+0x1ae>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d061      	beq.n	8006cce <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	7a5b      	ldrb	r3, [r3, #9]
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d01c      	beq.n	8006c4c <LL_EXTI_Init+0x60>
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	dc25      	bgt.n	8006c62 <LL_EXTI_Init+0x76>
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d002      	beq.n	8006c20 <LL_EXTI_Init+0x34>
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d00b      	beq.n	8006c36 <LL_EXTI_Init+0x4a>
 8006c1e:	e020      	b.n	8006c62 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7ff ff1d 	bl	8006a64 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7ff fe9c 	bl	800696c <LL_EXTI_EnableIT_0_31>
          break;
 8006c34:	e018      	b.n	8006c68 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7ff febe 	bl	80069bc <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7ff fee5 	bl	8006a14 <LL_EXTI_EnableEvent_0_31>
          break;
 8006c4a:	e00d      	b.n	8006c68 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7ff fe8b 	bl	800696c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7ff feda 	bl	8006a14 <LL_EXTI_EnableEvent_0_31>
          break;
 8006c60:	e002      	b.n	8006c68 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	73fb      	strb	r3, [r7, #15]
          break;
 8006c66:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	7a9b      	ldrb	r3, [r3, #10]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d02e      	beq.n	8006cce <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	7a9b      	ldrb	r3, [r3, #10]
 8006c74:	2b03      	cmp	r3, #3
 8006c76:	d01c      	beq.n	8006cb2 <LL_EXTI_Init+0xc6>
 8006c78:	2b03      	cmp	r3, #3
 8006c7a:	dc25      	bgt.n	8006cc8 <LL_EXTI_Init+0xdc>
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d002      	beq.n	8006c86 <LL_EXTI_Init+0x9a>
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d00b      	beq.n	8006c9c <LL_EXTI_Init+0xb0>
 8006c84:	e020      	b.n	8006cc8 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7ff ff86 	bl	8006b9c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7ff ff11 	bl	8006abc <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8006c9a:	e018      	b.n	8006cce <LL_EXTI_Init+0xe2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7ff ff2f 	bl	8006b04 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7ff ff52 	bl	8006b54 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8006cb0:	e00d      	b.n	8006cce <LL_EXTI_Init+0xe2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7ff ff00 	bl	8006abc <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7ff ff47 	bl	8006b54 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8006cc6:	e002      	b.n	8006cce <LL_EXTI_Init+0xe2>
          default:
            status = ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	73fb      	strb	r3, [r7, #15]
            break;
 8006ccc:	bf00      	nop
        }
      }
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d075      	beq.n	8006dc2 <LL_EXTI_Init+0x1d6>
    {
      switch (EXTI_InitStruct->Mode)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	7a5b      	ldrb	r3, [r3, #9]
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d01c      	beq.n	8006d18 <LL_EXTI_Init+0x12c>
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	dc25      	bgt.n	8006d2e <LL_EXTI_Init+0x142>
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d002      	beq.n	8006cec <LL_EXTI_Init+0x100>
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d00b      	beq.n	8006d02 <LL_EXTI_Init+0x116>
 8006cea:	e020      	b.n	8006d2e <LL_EXTI_Init+0x142>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7ff fecd 	bl	8006a90 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7ff fe4a 	bl	8006994 <LL_EXTI_EnableIT_32_63>
          break;
 8006d00:	e018      	b.n	8006d34 <LL_EXTI_Init+0x148>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7ff fe6e 	bl	80069e8 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7ff fe93 	bl	8006a3c <LL_EXTI_EnableEvent_32_63>
          break;
 8006d16:	e00d      	b.n	8006d34 <LL_EXTI_Init+0x148>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7ff fe39 	bl	8006994 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7ff fe88 	bl	8006a3c <LL_EXTI_EnableEvent_32_63>
          break;
 8006d2c:	e002      	b.n	8006d34 <LL_EXTI_Init+0x148>
        default:
          status = ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	73fb      	strb	r3, [r7, #15]
          break;
 8006d32:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	7a9b      	ldrb	r3, [r3, #10]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d042      	beq.n	8006dc2 <LL_EXTI_Init+0x1d6>
      {
        switch (EXTI_InitStruct->Trigger)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	7a9b      	ldrb	r3, [r3, #10]
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	d01c      	beq.n	8006d7e <LL_EXTI_Init+0x192>
 8006d44:	2b03      	cmp	r3, #3
 8006d46:	dc25      	bgt.n	8006d94 <LL_EXTI_Init+0x1a8>
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d002      	beq.n	8006d52 <LL_EXTI_Init+0x166>
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d00b      	beq.n	8006d68 <LL_EXTI_Init+0x17c>
 8006d50:	e020      	b.n	8006d94 <LL_EXTI_Init+0x1a8>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7ff ff34 	bl	8006bc4 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7ff febd 	bl	8006ae0 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8006d66:	e02c      	b.n	8006dc2 <LL_EXTI_Init+0x1d6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7ff fedd 	bl	8006b2c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7ff fefe 	bl	8006b78 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8006d7c:	e021      	b.n	8006dc2 <LL_EXTI_Init+0x1d6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7ff feac 	bl	8006ae0 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7ff fef3 	bl	8006b78 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8006d92:	e016      	b.n	8006dc2 <LL_EXTI_Init+0x1d6>
          default:
            status = ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	73fb      	strb	r3, [r7, #15]
            break;
 8006d98:	e013      	b.n	8006dc2 <LL_EXTI_Init+0x1d6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff fe0c 	bl	80069bc <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7ff fe5b 	bl	8006a64 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7ff fe18 	bl	80069e8 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7ff fe67 	bl	8006a90 <LL_EXTI_DisableEvent_32_63>
  }
  return status;
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <LL_GPIO_SetPinMode>:
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b08b      	sub	sp, #44	; 0x2c
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	fa93 f3a3 	rbit	r3, r3
 8006de6:	613b      	str	r3, [r7, #16]
  return result;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8006df2:	2320      	movs	r3, #32
 8006df4:	e003      	b.n	8006dfe <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	fab3 f383 	clz	r3, r3
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	2103      	movs	r1, #3
 8006e02:	fa01 f303 	lsl.w	r3, r1, r3
 8006e06:	43db      	mvns	r3, r3
 8006e08:	401a      	ands	r2, r3
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	fa93 f3a3 	rbit	r3, r3
 8006e14:	61fb      	str	r3, [r7, #28]
  return result;
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006e20:	2320      	movs	r3, #32
 8006e22:	e003      	b.n	8006e2c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	fab3 f383 	clz	r3, r3
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	005b      	lsls	r3, r3, #1
 8006e2e:	6879      	ldr	r1, [r7, #4]
 8006e30:	fa01 f303 	lsl.w	r3, r1, r3
 8006e34:	431a      	orrs	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	601a      	str	r2, [r3, #0]
}
 8006e3a:	bf00      	nop
 8006e3c:	372c      	adds	r7, #44	; 0x2c
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <LL_GPIO_SetPinOutputType>:
{
 8006e46:	b480      	push	{r7}
 8006e48:	b085      	sub	sp, #20
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	60f8      	str	r0, [r7, #12]
 8006e4e:	60b9      	str	r1, [r7, #8]
 8006e50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	43db      	mvns	r3, r3
 8006e5a:	401a      	ands	r2, r3
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	6879      	ldr	r1, [r7, #4]
 8006e60:	fb01 f303 	mul.w	r3, r1, r3
 8006e64:	431a      	orrs	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	605a      	str	r2, [r3, #4]
}
 8006e6a:	bf00      	nop
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <LL_GPIO_SetPinSpeed>:
{
 8006e76:	b480      	push	{r7}
 8006e78:	b08b      	sub	sp, #44	; 0x2c
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	60f8      	str	r0, [r7, #12]
 8006e7e:	60b9      	str	r1, [r7, #8]
 8006e80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	689a      	ldr	r2, [r3, #8]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	fa93 f3a3 	rbit	r3, r3
 8006e90:	613b      	str	r3, [r7, #16]
  return result;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006e9c:	2320      	movs	r3, #32
 8006e9e:	e003      	b.n	8006ea8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	fab3 f383 	clz	r3, r3
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	2103      	movs	r1, #3
 8006eac:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb0:	43db      	mvns	r3, r3
 8006eb2:	401a      	ands	r2, r3
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	fa93 f3a3 	rbit	r3, r3
 8006ebe:	61fb      	str	r3, [r7, #28]
  return result;
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006eca:	2320      	movs	r3, #32
 8006ecc:	e003      	b.n	8006ed6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	fab3 f383 	clz	r3, r3
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	005b      	lsls	r3, r3, #1
 8006ed8:	6879      	ldr	r1, [r7, #4]
 8006eda:	fa01 f303 	lsl.w	r3, r1, r3
 8006ede:	431a      	orrs	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	609a      	str	r2, [r3, #8]
}
 8006ee4:	bf00      	nop
 8006ee6:	372c      	adds	r7, #44	; 0x2c
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <LL_GPIO_SetPinPull>:
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b08b      	sub	sp, #44	; 0x2c
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	68da      	ldr	r2, [r3, #12]
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	fa93 f3a3 	rbit	r3, r3
 8006f0a:	613b      	str	r3, [r7, #16]
  return result;
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006f16:	2320      	movs	r3, #32
 8006f18:	e003      	b.n	8006f22 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	fab3 f383 	clz	r3, r3
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	005b      	lsls	r3, r3, #1
 8006f24:	2103      	movs	r1, #3
 8006f26:	fa01 f303 	lsl.w	r3, r1, r3
 8006f2a:	43db      	mvns	r3, r3
 8006f2c:	401a      	ands	r2, r3
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	fa93 f3a3 	rbit	r3, r3
 8006f38:	61fb      	str	r3, [r7, #28]
  return result;
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006f44:	2320      	movs	r3, #32
 8006f46:	e003      	b.n	8006f50 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4a:	fab3 f383 	clz	r3, r3
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	6879      	ldr	r1, [r7, #4]
 8006f54:	fa01 f303 	lsl.w	r3, r1, r3
 8006f58:	431a      	orrs	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	60da      	str	r2, [r3, #12]
}
 8006f5e:	bf00      	nop
 8006f60:	372c      	adds	r7, #44	; 0x2c
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <LL_GPIO_SetAFPin_0_7>:
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b08b      	sub	sp, #44	; 0x2c
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	60f8      	str	r0, [r7, #12]
 8006f72:	60b9      	str	r1, [r7, #8]
 8006f74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6a1a      	ldr	r2, [r3, #32]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	fa93 f3a3 	rbit	r3, r3
 8006f84:	613b      	str	r3, [r7, #16]
  return result;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006f90:	2320      	movs	r3, #32
 8006f92:	e003      	b.n	8006f9c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	fab3 f383 	clz	r3, r3
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	210f      	movs	r1, #15
 8006fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8006fa4:	43db      	mvns	r3, r3
 8006fa6:	401a      	ands	r2, r3
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fac:	6a3b      	ldr	r3, [r7, #32]
 8006fae:	fa93 f3a3 	rbit	r3, r3
 8006fb2:	61fb      	str	r3, [r7, #28]
  return result;
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006fbe:	2320      	movs	r3, #32
 8006fc0:	e003      	b.n	8006fca <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	fab3 f383 	clz	r3, r3
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	6879      	ldr	r1, [r7, #4]
 8006fce:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd2:	431a      	orrs	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	621a      	str	r2, [r3, #32]
}
 8006fd8:	bf00      	nop
 8006fda:	372c      	adds	r7, #44	; 0x2c
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <LL_GPIO_SetAFPin_8_15>:
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b08b      	sub	sp, #44	; 0x2c
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	0a1b      	lsrs	r3, r3, #8
 8006ff8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	fa93 f3a3 	rbit	r3, r3
 8007000:	613b      	str	r3, [r7, #16]
  return result;
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d101      	bne.n	8007010 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800700c:	2320      	movs	r3, #32
 800700e:	e003      	b.n	8007018 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	fab3 f383 	clz	r3, r3
 8007016:	b2db      	uxtb	r3, r3
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	210f      	movs	r1, #15
 800701c:	fa01 f303 	lsl.w	r3, r1, r3
 8007020:	43db      	mvns	r3, r3
 8007022:	401a      	ands	r2, r3
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	0a1b      	lsrs	r3, r3, #8
 8007028:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800702a:	6a3b      	ldr	r3, [r7, #32]
 800702c:	fa93 f3a3 	rbit	r3, r3
 8007030:	61fb      	str	r3, [r7, #28]
  return result;
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800703c:	2320      	movs	r3, #32
 800703e:	e003      	b.n	8007048 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	fab3 f383 	clz	r3, r3
 8007046:	b2db      	uxtb	r3, r3
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	6879      	ldr	r1, [r7, #4]
 800704c:	fa01 f303 	lsl.w	r3, r1, r3
 8007050:	431a      	orrs	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007056:	bf00      	nop
 8007058:	372c      	adds	r7, #44	; 0x2c
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b08a      	sub	sp, #40	; 0x28
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	fa93 f3a3 	rbit	r3, r3
 8007078:	617b      	str	r3, [r7, #20]
  return result;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <LL_GPIO_Init+0x26>
    return 32U;
 8007084:	2320      	movs	r3, #32
 8007086:	e003      	b.n	8007090 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	fab3 f383 	clz	r3, r3
 800708e:	b2db      	uxtb	r3, r3
 8007090:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8007092:	e057      	b.n	8007144 <LL_GPIO_Init+0xe2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	2101      	movs	r1, #1
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	fa01 f303 	lsl.w	r3, r1, r3
 80070a0:	4013      	ands	r3, r2
 80070a2:	623b      	str	r3, [r7, #32]

    if (currentpin != 0x00u)
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d049      	beq.n	800713e <LL_GPIO_Init+0xdc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d003      	beq.n	80070ba <LL_GPIO_Init+0x58>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d10d      	bne.n	80070d6 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	461a      	mov	r2, r3
 80070c0:	6a39      	ldr	r1, [r7, #32]
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7ff fed7 	bl	8006e76 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	461a      	mov	r2, r3
 80070ce:	6a39      	ldr	r1, [r7, #32]
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7ff feb8 	bl	8006e46 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	461a      	mov	r2, r3
 80070dc:	6a39      	ldr	r1, [r7, #32]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7ff ff06 	bl	8006ef0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d121      	bne.n	8007130 <LL_GPIO_Init+0xce>
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	fa93 f3a3 	rbit	r3, r3
 80070f6:	60bb      	str	r3, [r7, #8]
  return result;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <LL_GPIO_Init+0xa4>
    return 32U;
 8007102:	2320      	movs	r3, #32
 8007104:	e003      	b.n	800710e <LL_GPIO_Init+0xac>
  return __builtin_clz(value);
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	fab3 f383 	clz	r3, r3
 800710c:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008uL)
 800710e:	2b07      	cmp	r3, #7
 8007110:	d807      	bhi.n	8007122 <LL_GPIO_Init+0xc0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	461a      	mov	r2, r3
 8007118:	6a39      	ldr	r1, [r7, #32]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7ff ff25 	bl	8006f6a <LL_GPIO_SetAFPin_0_7>
 8007120:	e006      	b.n	8007130 <LL_GPIO_Init+0xce>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	461a      	mov	r2, r3
 8007128:	6a39      	ldr	r1, [r7, #32]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7ff ff5a 	bl	8006fe4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	461a      	mov	r2, r3
 8007136:	6a39      	ldr	r1, [r7, #32]
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7ff fe47 	bl	8006dcc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800713e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007140:	3301      	adds	r3, #1
 8007142:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714a:	fa22 f303 	lsr.w	r3, r2, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1a0      	bne.n	8007094 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3728      	adds	r7, #40	; 0x28
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007164:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007168:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007170:	b29a      	uxth	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	b29b      	uxth	r3, r3
 8007176:	43db      	mvns	r3, r3
 8007178:	b29b      	uxth	r3, r3
 800717a:	4013      	ands	r3, r2
 800717c:	b29a      	uxth	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007192:	b084      	sub	sp, #16
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	f107 0014 	add.w	r0, r7, #20
 80071a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	b004      	add	sp, #16
 80071d2:	4770      	bx	lr

080071d4 <memset>:
 80071d4:	4402      	add	r2, r0
 80071d6:	4603      	mov	r3, r0
 80071d8:	4293      	cmp	r3, r2
 80071da:	d100      	bne.n	80071de <memset+0xa>
 80071dc:	4770      	bx	lr
 80071de:	f803 1b01 	strb.w	r1, [r3], #1
 80071e2:	e7f9      	b.n	80071d8 <memset+0x4>

080071e4 <__libc_init_array>:
 80071e4:	b570      	push	{r4, r5, r6, lr}
 80071e6:	4d0d      	ldr	r5, [pc, #52]	; (800721c <__libc_init_array+0x38>)
 80071e8:	4c0d      	ldr	r4, [pc, #52]	; (8007220 <__libc_init_array+0x3c>)
 80071ea:	1b64      	subs	r4, r4, r5
 80071ec:	10a4      	asrs	r4, r4, #2
 80071ee:	2600      	movs	r6, #0
 80071f0:	42a6      	cmp	r6, r4
 80071f2:	d109      	bne.n	8007208 <__libc_init_array+0x24>
 80071f4:	4d0b      	ldr	r5, [pc, #44]	; (8007224 <__libc_init_array+0x40>)
 80071f6:	4c0c      	ldr	r4, [pc, #48]	; (8007228 <__libc_init_array+0x44>)
 80071f8:	f000 f818 	bl	800722c <_init>
 80071fc:	1b64      	subs	r4, r4, r5
 80071fe:	10a4      	asrs	r4, r4, #2
 8007200:	2600      	movs	r6, #0
 8007202:	42a6      	cmp	r6, r4
 8007204:	d105      	bne.n	8007212 <__libc_init_array+0x2e>
 8007206:	bd70      	pop	{r4, r5, r6, pc}
 8007208:	f855 3b04 	ldr.w	r3, [r5], #4
 800720c:	4798      	blx	r3
 800720e:	3601      	adds	r6, #1
 8007210:	e7ee      	b.n	80071f0 <__libc_init_array+0xc>
 8007212:	f855 3b04 	ldr.w	r3, [r5], #4
 8007216:	4798      	blx	r3
 8007218:	3601      	adds	r6, #1
 800721a:	e7f2      	b.n	8007202 <__libc_init_array+0x1e>
 800721c:	08007340 	.word	0x08007340
 8007220:	08007340 	.word	0x08007340
 8007224:	08007340 	.word	0x08007340
 8007228:	08007344 	.word	0x08007344

0800722c <_init>:
 800722c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800722e:	bf00      	nop
 8007230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007232:	bc08      	pop	{r3}
 8007234:	469e      	mov	lr, r3
 8007236:	4770      	bx	lr

08007238 <_fini>:
 8007238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723a:	bf00      	nop
 800723c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800723e:	bc08      	pop	{r3}
 8007240:	469e      	mov	lr, r3
 8007242:	4770      	bx	lr
