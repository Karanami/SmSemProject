
SmSemProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015704  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  08015844  08015844  00025844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015d8c  08015d8c  00025d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000010  08015d94  08015d94  00025d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015da4  08015da4  00025da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000d8  20000008  08015da8  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 MB_MEM2       00000883  200000e0  08015e80  000300e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000041  20000964  08016703  00030964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  200009a8  08016744  000309a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002a0c  200009bc  08016755  000309bc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200033c8  08016755  000333c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000309b9  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00040000  2**2
                  ALLOC
 15 .comment      000000bc  00000000  00000000  000309e9  2**0
                  CONTENTS, READONLY
 16 .debug_info   000687f7  00000000  00000000  00030aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000d722  00000000  00000000  0009929c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00004568  00000000  00000000  000a69c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000034e8  00000000  00000000  000aaf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000411db  00000000  00000000  000ae410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00061cbe  00000000  00000000  000ef5eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00135fd4  00000000  00000000  001512a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00012734  00000000  00000000  00287280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000068  00000000  00000000  002999b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_ranges 00000010  00000000  00000000  00299a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200009bc 	.word	0x200009bc
 800015c:	00000000 	.word	0x00000000
 8000160:	0801582c 	.word	0x0801582c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200009c0 	.word	0x200009c0
 800017c:	0801582c 	.word	0x0801582c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	; 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_d2uiz>:
 80007fc:	004a      	lsls	r2, r1, #1
 80007fe:	d211      	bcs.n	8000824 <__aeabi_d2uiz+0x28>
 8000800:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000804:	d211      	bcs.n	800082a <__aeabi_d2uiz+0x2e>
 8000806:	d50d      	bpl.n	8000824 <__aeabi_d2uiz+0x28>
 8000808:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800080c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000810:	d40e      	bmi.n	8000830 <__aeabi_d2uiz+0x34>
 8000812:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000816:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800081a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800081e:	fa23 f002 	lsr.w	r0, r3, r2
 8000822:	4770      	bx	lr
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	4770      	bx	lr
 800082a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800082e:	d102      	bne.n	8000836 <__aeabi_d2uiz+0x3a>
 8000830:	f04f 30ff 	mov.w	r0, #4294967295
 8000834:	4770      	bx	lr
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	4770      	bx	lr

0800083c <__aeabi_uldivmod>:
 800083c:	b953      	cbnz	r3, 8000854 <__aeabi_uldivmod+0x18>
 800083e:	b94a      	cbnz	r2, 8000854 <__aeabi_uldivmod+0x18>
 8000840:	2900      	cmp	r1, #0
 8000842:	bf08      	it	eq
 8000844:	2800      	cmpeq	r0, #0
 8000846:	bf1c      	itt	ne
 8000848:	f04f 31ff 	movne.w	r1, #4294967295
 800084c:	f04f 30ff 	movne.w	r0, #4294967295
 8000850:	f000 b970 	b.w	8000b34 <__aeabi_idiv0>
 8000854:	f1ad 0c08 	sub.w	ip, sp, #8
 8000858:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800085c:	f000 f806 	bl	800086c <__udivmoddi4>
 8000860:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000864:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000868:	b004      	add	sp, #16
 800086a:	4770      	bx	lr

0800086c <__udivmoddi4>:
 800086c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000870:	9e08      	ldr	r6, [sp, #32]
 8000872:	460d      	mov	r5, r1
 8000874:	4604      	mov	r4, r0
 8000876:	460f      	mov	r7, r1
 8000878:	2b00      	cmp	r3, #0
 800087a:	d14a      	bne.n	8000912 <__udivmoddi4+0xa6>
 800087c:	428a      	cmp	r2, r1
 800087e:	4694      	mov	ip, r2
 8000880:	d965      	bls.n	800094e <__udivmoddi4+0xe2>
 8000882:	fab2 f382 	clz	r3, r2
 8000886:	b143      	cbz	r3, 800089a <__udivmoddi4+0x2e>
 8000888:	fa02 fc03 	lsl.w	ip, r2, r3
 800088c:	f1c3 0220 	rsb	r2, r3, #32
 8000890:	409f      	lsls	r7, r3
 8000892:	fa20 f202 	lsr.w	r2, r0, r2
 8000896:	4317      	orrs	r7, r2
 8000898:	409c      	lsls	r4, r3
 800089a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800089e:	fa1f f58c 	uxth.w	r5, ip
 80008a2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008a6:	0c22      	lsrs	r2, r4, #16
 80008a8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008ac:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008b0:	fb01 f005 	mul.w	r0, r1, r5
 80008b4:	4290      	cmp	r0, r2
 80008b6:	d90a      	bls.n	80008ce <__udivmoddi4+0x62>
 80008b8:	eb1c 0202 	adds.w	r2, ip, r2
 80008bc:	f101 37ff 	add.w	r7, r1, #4294967295
 80008c0:	f080 811c 	bcs.w	8000afc <__udivmoddi4+0x290>
 80008c4:	4290      	cmp	r0, r2
 80008c6:	f240 8119 	bls.w	8000afc <__udivmoddi4+0x290>
 80008ca:	3902      	subs	r1, #2
 80008cc:	4462      	add	r2, ip
 80008ce:	1a12      	subs	r2, r2, r0
 80008d0:	b2a4      	uxth	r4, r4
 80008d2:	fbb2 f0fe 	udiv	r0, r2, lr
 80008d6:	fb0e 2210 	mls	r2, lr, r0, r2
 80008da:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008de:	fb00 f505 	mul.w	r5, r0, r5
 80008e2:	42a5      	cmp	r5, r4
 80008e4:	d90a      	bls.n	80008fc <__udivmoddi4+0x90>
 80008e6:	eb1c 0404 	adds.w	r4, ip, r4
 80008ea:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ee:	f080 8107 	bcs.w	8000b00 <__udivmoddi4+0x294>
 80008f2:	42a5      	cmp	r5, r4
 80008f4:	f240 8104 	bls.w	8000b00 <__udivmoddi4+0x294>
 80008f8:	4464      	add	r4, ip
 80008fa:	3802      	subs	r0, #2
 80008fc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000900:	1b64      	subs	r4, r4, r5
 8000902:	2100      	movs	r1, #0
 8000904:	b11e      	cbz	r6, 800090e <__udivmoddi4+0xa2>
 8000906:	40dc      	lsrs	r4, r3
 8000908:	2300      	movs	r3, #0
 800090a:	e9c6 4300 	strd	r4, r3, [r6]
 800090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000912:	428b      	cmp	r3, r1
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0xbc>
 8000916:	2e00      	cmp	r6, #0
 8000918:	f000 80ed 	beq.w	8000af6 <__udivmoddi4+0x28a>
 800091c:	2100      	movs	r1, #0
 800091e:	e9c6 0500 	strd	r0, r5, [r6]
 8000922:	4608      	mov	r0, r1
 8000924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000928:	fab3 f183 	clz	r1, r3
 800092c:	2900      	cmp	r1, #0
 800092e:	d149      	bne.n	80009c4 <__udivmoddi4+0x158>
 8000930:	42ab      	cmp	r3, r5
 8000932:	d302      	bcc.n	800093a <__udivmoddi4+0xce>
 8000934:	4282      	cmp	r2, r0
 8000936:	f200 80f8 	bhi.w	8000b2a <__udivmoddi4+0x2be>
 800093a:	1a84      	subs	r4, r0, r2
 800093c:	eb65 0203 	sbc.w	r2, r5, r3
 8000940:	2001      	movs	r0, #1
 8000942:	4617      	mov	r7, r2
 8000944:	2e00      	cmp	r6, #0
 8000946:	d0e2      	beq.n	800090e <__udivmoddi4+0xa2>
 8000948:	e9c6 4700 	strd	r4, r7, [r6]
 800094c:	e7df      	b.n	800090e <__udivmoddi4+0xa2>
 800094e:	b902      	cbnz	r2, 8000952 <__udivmoddi4+0xe6>
 8000950:	deff      	udf	#255	; 0xff
 8000952:	fab2 f382 	clz	r3, r2
 8000956:	2b00      	cmp	r3, #0
 8000958:	f040 8090 	bne.w	8000a7c <__udivmoddi4+0x210>
 800095c:	1a8a      	subs	r2, r1, r2
 800095e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000962:	fa1f fe8c 	uxth.w	lr, ip
 8000966:	2101      	movs	r1, #1
 8000968:	fbb2 f5f7 	udiv	r5, r2, r7
 800096c:	fb07 2015 	mls	r0, r7, r5, r2
 8000970:	0c22      	lsrs	r2, r4, #16
 8000972:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000976:	fb0e f005 	mul.w	r0, lr, r5
 800097a:	4290      	cmp	r0, r2
 800097c:	d908      	bls.n	8000990 <__udivmoddi4+0x124>
 800097e:	eb1c 0202 	adds.w	r2, ip, r2
 8000982:	f105 38ff 	add.w	r8, r5, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x122>
 8000988:	4290      	cmp	r0, r2
 800098a:	f200 80cb 	bhi.w	8000b24 <__udivmoddi4+0x2b8>
 800098e:	4645      	mov	r5, r8
 8000990:	1a12      	subs	r2, r2, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb2 f0f7 	udiv	r0, r2, r7
 8000998:	fb07 2210 	mls	r2, r7, r0, r2
 800099c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009a0:	fb0e fe00 	mul.w	lr, lr, r0
 80009a4:	45a6      	cmp	lr, r4
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x14e>
 80009a8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80009b0:	d202      	bcs.n	80009b8 <__udivmoddi4+0x14c>
 80009b2:	45a6      	cmp	lr, r4
 80009b4:	f200 80bb 	bhi.w	8000b2e <__udivmoddi4+0x2c2>
 80009b8:	4610      	mov	r0, r2
 80009ba:	eba4 040e 	sub.w	r4, r4, lr
 80009be:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009c2:	e79f      	b.n	8000904 <__udivmoddi4+0x98>
 80009c4:	f1c1 0720 	rsb	r7, r1, #32
 80009c8:	408b      	lsls	r3, r1
 80009ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80009d2:	fa05 f401 	lsl.w	r4, r5, r1
 80009d6:	fa20 f307 	lsr.w	r3, r0, r7
 80009da:	40fd      	lsrs	r5, r7
 80009dc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009e0:	4323      	orrs	r3, r4
 80009e2:	fbb5 f8f9 	udiv	r8, r5, r9
 80009e6:	fa1f fe8c 	uxth.w	lr, ip
 80009ea:	fb09 5518 	mls	r5, r9, r8, r5
 80009ee:	0c1c      	lsrs	r4, r3, #16
 80009f0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009f4:	fb08 f50e 	mul.w	r5, r8, lr
 80009f8:	42a5      	cmp	r5, r4
 80009fa:	fa02 f201 	lsl.w	r2, r2, r1
 80009fe:	fa00 f001 	lsl.w	r0, r0, r1
 8000a02:	d90b      	bls.n	8000a1c <__udivmoddi4+0x1b0>
 8000a04:	eb1c 0404 	adds.w	r4, ip, r4
 8000a08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a0c:	f080 8088 	bcs.w	8000b20 <__udivmoddi4+0x2b4>
 8000a10:	42a5      	cmp	r5, r4
 8000a12:	f240 8085 	bls.w	8000b20 <__udivmoddi4+0x2b4>
 8000a16:	f1a8 0802 	sub.w	r8, r8, #2
 8000a1a:	4464      	add	r4, ip
 8000a1c:	1b64      	subs	r4, r4, r5
 8000a1e:	b29d      	uxth	r5, r3
 8000a20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a24:	fb09 4413 	mls	r4, r9, r3, r4
 8000a28:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a2c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a30:	45a6      	cmp	lr, r4
 8000a32:	d908      	bls.n	8000a46 <__udivmoddi4+0x1da>
 8000a34:	eb1c 0404 	adds.w	r4, ip, r4
 8000a38:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a3c:	d26c      	bcs.n	8000b18 <__udivmoddi4+0x2ac>
 8000a3e:	45a6      	cmp	lr, r4
 8000a40:	d96a      	bls.n	8000b18 <__udivmoddi4+0x2ac>
 8000a42:	3b02      	subs	r3, #2
 8000a44:	4464      	add	r4, ip
 8000a46:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a4a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a4e:	eba4 040e 	sub.w	r4, r4, lr
 8000a52:	42ac      	cmp	r4, r5
 8000a54:	46c8      	mov	r8, r9
 8000a56:	46ae      	mov	lr, r5
 8000a58:	d356      	bcc.n	8000b08 <__udivmoddi4+0x29c>
 8000a5a:	d053      	beq.n	8000b04 <__udivmoddi4+0x298>
 8000a5c:	b156      	cbz	r6, 8000a74 <__udivmoddi4+0x208>
 8000a5e:	ebb0 0208 	subs.w	r2, r0, r8
 8000a62:	eb64 040e 	sbc.w	r4, r4, lr
 8000a66:	fa04 f707 	lsl.w	r7, r4, r7
 8000a6a:	40ca      	lsrs	r2, r1
 8000a6c:	40cc      	lsrs	r4, r1
 8000a6e:	4317      	orrs	r7, r2
 8000a70:	e9c6 7400 	strd	r7, r4, [r6]
 8000a74:	4618      	mov	r0, r3
 8000a76:	2100      	movs	r1, #0
 8000a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7c:	f1c3 0120 	rsb	r1, r3, #32
 8000a80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a84:	fa20 f201 	lsr.w	r2, r0, r1
 8000a88:	fa25 f101 	lsr.w	r1, r5, r1
 8000a8c:	409d      	lsls	r5, r3
 8000a8e:	432a      	orrs	r2, r5
 8000a90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a94:	fa1f fe8c 	uxth.w	lr, ip
 8000a98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a9c:	fb07 1510 	mls	r5, r7, r0, r1
 8000aa0:	0c11      	lsrs	r1, r2, #16
 8000aa2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000aa6:	fb00 f50e 	mul.w	r5, r0, lr
 8000aaa:	428d      	cmp	r5, r1
 8000aac:	fa04 f403 	lsl.w	r4, r4, r3
 8000ab0:	d908      	bls.n	8000ac4 <__udivmoddi4+0x258>
 8000ab2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ab6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aba:	d22f      	bcs.n	8000b1c <__udivmoddi4+0x2b0>
 8000abc:	428d      	cmp	r5, r1
 8000abe:	d92d      	bls.n	8000b1c <__udivmoddi4+0x2b0>
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	4461      	add	r1, ip
 8000ac4:	1b49      	subs	r1, r1, r5
 8000ac6:	b292      	uxth	r2, r2
 8000ac8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000acc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ad0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ad4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ad8:	4291      	cmp	r1, r2
 8000ada:	d908      	bls.n	8000aee <__udivmoddi4+0x282>
 8000adc:	eb1c 0202 	adds.w	r2, ip, r2
 8000ae0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ae4:	d216      	bcs.n	8000b14 <__udivmoddi4+0x2a8>
 8000ae6:	4291      	cmp	r1, r2
 8000ae8:	d914      	bls.n	8000b14 <__udivmoddi4+0x2a8>
 8000aea:	3d02      	subs	r5, #2
 8000aec:	4462      	add	r2, ip
 8000aee:	1a52      	subs	r2, r2, r1
 8000af0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000af4:	e738      	b.n	8000968 <__udivmoddi4+0xfc>
 8000af6:	4631      	mov	r1, r6
 8000af8:	4630      	mov	r0, r6
 8000afa:	e708      	b.n	800090e <__udivmoddi4+0xa2>
 8000afc:	4639      	mov	r1, r7
 8000afe:	e6e6      	b.n	80008ce <__udivmoddi4+0x62>
 8000b00:	4610      	mov	r0, r2
 8000b02:	e6fb      	b.n	80008fc <__udivmoddi4+0x90>
 8000b04:	4548      	cmp	r0, r9
 8000b06:	d2a9      	bcs.n	8000a5c <__udivmoddi4+0x1f0>
 8000b08:	ebb9 0802 	subs.w	r8, r9, r2
 8000b0c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b10:	3b01      	subs	r3, #1
 8000b12:	e7a3      	b.n	8000a5c <__udivmoddi4+0x1f0>
 8000b14:	4645      	mov	r5, r8
 8000b16:	e7ea      	b.n	8000aee <__udivmoddi4+0x282>
 8000b18:	462b      	mov	r3, r5
 8000b1a:	e794      	b.n	8000a46 <__udivmoddi4+0x1da>
 8000b1c:	4640      	mov	r0, r8
 8000b1e:	e7d1      	b.n	8000ac4 <__udivmoddi4+0x258>
 8000b20:	46d0      	mov	r8, sl
 8000b22:	e77b      	b.n	8000a1c <__udivmoddi4+0x1b0>
 8000b24:	3d02      	subs	r5, #2
 8000b26:	4462      	add	r2, ip
 8000b28:	e732      	b.n	8000990 <__udivmoddi4+0x124>
 8000b2a:	4608      	mov	r0, r1
 8000b2c:	e70a      	b.n	8000944 <__udivmoddi4+0xd8>
 8000b2e:	4464      	add	r4, ip
 8000b30:	3802      	subs	r0, #2
 8000b32:	e742      	b.n	80009ba <__udivmoddi4+0x14e>

08000b34 <__aeabi_idiv0>:
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
}
 8000b5e:	bf00      	nop
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
	...

08000b6c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b72:	463b      	mov	r3, r7
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
 8000b80:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b82:	4b29      	ldr	r3, [pc, #164]	; (8000c28 <MX_ADC1_Init+0xbc>)
 8000b84:	4a29      	ldr	r2, [pc, #164]	; (8000c2c <MX_ADC1_Init+0xc0>)
 8000b86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b88:	4b27      	ldr	r3, [pc, #156]	; (8000c28 <MX_ADC1_Init+0xbc>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b8e:	4b26      	ldr	r3, [pc, #152]	; (8000c28 <MX_ADC1_Init+0xbc>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b94:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <MX_ADC1_Init+0xbc>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b9a:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <MX_ADC1_Init+0xbc>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ba0:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <MX_ADC1_Init+0xbc>)
 8000ba2:	2204      	movs	r2, #4
 8000ba4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ba6:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <MX_ADC1_Init+0xbc>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bac:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <MX_ADC1_Init+0xbc>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <MX_ADC1_Init+0xbc>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <MX_ADC1_Init+0xbc>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bc0:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <MX_ADC1_Init+0xbc>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <MX_ADC1_Init+0xbc>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <MX_ADC1_Init+0xbc>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_ADC1_Init+0xbc>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <MX_ADC1_Init+0xbc>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000be2:	4811      	ldr	r0, [pc, #68]	; (8000c28 <MX_ADC1_Init+0xbc>)
 8000be4:	f004 faf6 	bl	80051d4 <HAL_ADC_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000bee:	f002 fb05 	bl	80031fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <MX_ADC1_Init+0xc4>)
 8000bf4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bf6:	2306      	movs	r3, #6
 8000bf8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bfe:	237f      	movs	r3, #127	; 0x7f
 8000c00:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c02:	2304      	movs	r3, #4
 8000c04:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4806      	ldr	r0, [pc, #24]	; (8000c28 <MX_ADC1_Init+0xbc>)
 8000c10:	f004 fc2c 	bl	800546c <HAL_ADC_ConfigChannel>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000c1a:	f002 faef 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200009d8 	.word	0x200009d8
 8000c2c:	50040000 	.word	0x50040000
 8000c30:	0c900008 	.word	0x0c900008

08000c34 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0c      	ldr	r2, [pc, #48]	; (8000c84 <HAL_ADC_MspInit+0x50>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d112      	bne.n	8000c7c <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c56:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c5a:	f7ff ff6d 	bl	8000b38 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	2004      	movs	r0, #4
 8000c60:	f7ff ff6a 	bl	8000b38 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c64:	2304      	movs	r3, #4
 8000c66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	4619      	mov	r1, r3
 8000c76:	4804      	ldr	r0, [pc, #16]	; (8000c88 <HAL_ADC_MspInit+0x54>)
 8000c78:	f005 fc5a 	bl	8006530 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	50040000 	.word	0x50040000
 8000c88:	48000800 	.word	0x48000800

08000c8c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000c8c:	b5b0      	push	{r4, r5, r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <APPD_EnableCPU2+0x34>)
 8000c94:	1d3c      	adds	r4, r7, #4
 8000c96:	461d      	mov	r5, r3
 8000c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ca0:	c403      	stmia	r4!, {r0, r1}
 8000ca2:	8022      	strh	r2, [r4, #0]
 8000ca4:	3402      	adds	r4, #2
 8000ca6:	0c13      	lsrs	r3, r2, #16
 8000ca8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000caa:	f00e ff75 	bl	800fb98 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f00e fa06 	bl	800f0c2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000cb6:	bf00      	nop
}
 8000cb8:	3720      	adds	r7, #32
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	08015844 	.word	0x08015844

08000cc4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <LL_C2_PWR_SetPowerMode+0x28>)
 8000cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000cd2:	f023 0207 	bic.w	r2, r3, #7
 8000cd6:	4905      	ldr	r1, [pc, #20]	; (8000cec <LL_C2_PWR_SetPowerMode+0x28>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	58000400 	.word	0x58000400

08000cf0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <LL_EXTI_EnableIT_32_63+0x24>)
 8000cfa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000cfe:	4905      	ldr	r1, [pc, #20]	; (8000d14 <LL_EXTI_EnableIT_32_63+0x24>)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	58000800 	.word	0x58000800

08000d18 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d24:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000d26:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d32:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	021b      	lsls	r3, r3, #8
 8000d3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	cafecafe 	.word	0xcafecafe

08000d54 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000d66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	608b      	str	r3, [r1, #8]
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <LL_DBGMCU_GetDeviceID+0x18>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e0042000 	.word	0xe0042000

08000d98 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <LL_DBGMCU_GetRevisionID+0x18>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	0c1b      	lsrs	r3, r3, #16
 8000da2:	b29b      	uxth	r3, r3
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e0042000 	.word	0xe0042000

08000db4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	22ff      	movs	r2, #255	; 0xff
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	22ca      	movs	r2, #202	; 0xca
 8000dda:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2253      	movs	r2, #83	; 0x53
 8000de0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	f023 0207 	bic.w	r2, r3, #7
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	431a      	orrs	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	609a      	str	r2, [r3, #8]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <MX_APPE_Config+0x18>)
 8000e1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e1e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000e20:	f000 f824 	bl	8000e6c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000e24:	f000 f829 	bl	8000e7a <Config_HSE>

  return;
 8000e28:	bf00      	nop
}
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	58004000 	.word	0x58004000

08000e30 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000e34:	f000 f835 	bl	8000ea2 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000e38:	f000 f84e 	bl	8000ed8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000e3c:	4903      	ldr	r1, [pc, #12]	; (8000e4c <MX_APPE_Init+0x1c>)
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f001 fce8 	bl	8002814 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000e44:	f000 f856 	bl	8000ef4 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000e48:	bf00      	nop
}
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	200010f4 	.word	0x200010f4

08000e50 <Init_Smps>:

void Init_Smps(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000e54:	bf00      	nop
}
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <Init_Exti>:

void Init_Exti(void)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000e62:	2050      	movs	r0, #80	; 0x50
 8000e64:	f7ff ff44 	bl	8000cf0 <LL_EXTI_EnableIT_32_63>

  return;
 8000e68:	bf00      	nop
}
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000e70:	bf00      	nop
}
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000e80:	2000      	movs	r0, #0
 8000e82:	f00e ff15 	bl	800fcb0 <OTP_Read>
 8000e86:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d005      	beq.n	8000e9a <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	799b      	ldrb	r3, [r3, #6]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff40 	bl	8000d18 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
}
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <System_Init>:

static void System_Init(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
  Init_Smps();
 8000ea6:	f7ff ffd3 	bl	8000e50 <Init_Smps>

  Init_Exti();
 8000eaa:	f7ff ffd8 	bl	8000e5e <Init_Exti>

  Init_Rtc();
 8000eae:	f000 f803 	bl	8000eb8 <Init_Rtc>

  return;
 8000eb2:	bf00      	nop
}
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <Init_Rtc+0x1c>)
 8000ebe:	f7ff ff86 	bl	8000dce <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <Init_Rtc+0x1c>)
 8000ec6:	f7ff ff92 	bl	8000dee <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000eca:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <Init_Rtc+0x1c>)
 8000ecc:	f7ff ff72 	bl	8000db4 <LL_RTC_EnableWriteProtection>

  return;
 8000ed0:	bf00      	nop
}
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40002800 	.word	0x40002800

08000ed8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000edc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ee0:	f7ff ff38 	bl	8000d54 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000ee4:	f013 ff10 	bl	8014d08 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000ee8:	2004      	movs	r0, #4
 8000eea:	f7ff feeb 	bl	8000cc4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000eee:	bf00      	nop
}
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 8000efa:	f00e fc97 	bl	800f82c <TL_Init>

  MtxShciId = osMutexNew(NULL);
 8000efe:	2000      	movs	r0, #0
 8000f00:	f00f fa3c 	bl	801037c <osMutexNew>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4a17      	ldr	r2, [pc, #92]	; (8000f64 <appe_Tl_Init+0x70>)
 8000f08:	6013      	str	r3, [r2, #0]
  SemShciId = osSemaphoreNew(1, 0, NULL); /*< Create the semaphore and make it busy at initialization */
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2001      	movs	r0, #1
 8000f10:	f00f fb42 	bl	8010598 <osSemaphoreNew>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4a14      	ldr	r2, [pc, #80]	; (8000f68 <appe_Tl_Init+0x74>)
 8000f18:	6013      	str	r3, [r2, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 8000f1a:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <appe_Tl_Init+0x78>)
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4814      	ldr	r0, [pc, #80]	; (8000f70 <appe_Tl_Init+0x7c>)
 8000f20:	f00f f83a 	bl	800ff98 <osThreadNew>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4a13      	ldr	r2, [pc, #76]	; (8000f74 <appe_Tl_Init+0x80>)
 8000f28:	6013      	str	r3, [r2, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <appe_Tl_Init+0x84>)
 8000f2c:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <appe_Tl_Init+0x88>)
 8000f30:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	4812      	ldr	r0, [pc, #72]	; (8000f80 <appe_Tl_Init+0x8c>)
 8000f38:	f00e fb3a 	bl	800f5b0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <appe_Tl_Init+0x90>)
 8000f3e:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <appe_Tl_Init+0x94>)
 8000f42:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <appe_Tl_Init+0x98>)
 8000f46:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000f48:	f240 533c 	movw	r3, #1340	; 0x53c
 8000f4c:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000f4e:	f107 0308 	add.w	r3, r7, #8
 8000f52:	4618      	mov	r0, r3
 8000f54:	f00e fdac 	bl	800fab0 <TL_MM_Init>

  TL_Enable();
 8000f58:	f00e fc62 	bl	800f820 <TL_Enable>

  return;
 8000f5c:	bf00      	nop
}
 8000f5e:	3720      	adds	r7, #32
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000a3c 	.word	0x20000a3c
 8000f68:	20000a40 	.word	0x20000a40
 8000f6c:	08015a9c 	.word	0x08015a9c
 8000f70:	080010e3 	.word	0x080010e3
 8000f74:	20000a44 	.word	0x20000a44
 8000f78:	20000630 	.word	0x20000630
 8000f7c:	08000f91 	.word	0x08000f91
 8000f80:	08000fd1 	.word	0x08000fd1
 8000f84:	20000848 	.word	0x20000848
 8000f88:	2000073c 	.word	0x2000073c
 8000f8c:	200000f4 	.word	0x200000f4

08000f90 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
  switch (status)
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d002      	beq.n	8000fa6 <APPE_SysStatusNot+0x16>
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d008      	beq.n	8000fb6 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease(MtxShciId);
      break;

    default:
      break;
 8000fa4:	e00d      	b.n	8000fc2 <APPE_SysStatusNot+0x32>
      osMutexAcquire(MtxShciId, osWaitForever);
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <APPE_SysStatusNot+0x3c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f04f 31ff 	mov.w	r1, #4294967295
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f00f fa6a 	bl	8010488 <osMutexAcquire>
      break;
 8000fb4:	e005      	b.n	8000fc2 <APPE_SysStatusNot+0x32>
      osMutexRelease(MtxShciId);
 8000fb6:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <APPE_SysStatusNot+0x3c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f00f faaf 	bl	801051e <osMutexRelease>
      break;
 8000fc0:	bf00      	nop
  }
  return;
 8000fc2:	bf00      	nop
}
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000a3c 	.word	0x20000a3c

08000fd0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	330b      	adds	r3, #11
 8000fde:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000fea:	2b07      	cmp	r3, #7
 8000fec:	d81f      	bhi.n	800102e <APPE_SysUserEvtRx+0x5e>
 8000fee:	a201      	add	r2, pc, #4	; (adr r2, 8000ff4 <APPE_SysUserEvtRx+0x24>)
 8000ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff4:	08001015 	.word	0x08001015
 8000ff8:	08001027 	.word	0x08001027
 8000ffc:	0800102f 	.word	0x0800102f
 8001000:	0800102f 	.word	0x0800102f
 8001004:	0800102f 	.word	0x0800102f
 8001008:	0800102f 	.word	0x0800102f
 800100c:	0800102f 	.word	0x0800102f
 8001010:	0800102f 	.word	0x0800102f
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	4618      	mov	r0, r3
 800101a:	f00e f87f 	bl	800f11c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f000 f81b 	bl	800105a <APPE_SysEvtReadyProcessing>
    break;
 8001024:	e004      	b.n	8001030 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f806 	bl	8001038 <APPE_SysEvtError>
    break;
 800102c:	e000      	b.n	8001030 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 800102e:	bf00      	nop
  }

  return;
 8001030:	bf00      	nop
}
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	330b      	adds	r3, #11
 8001046:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	3302      	adds	r3, #2
 800104c:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800104e:	bf00      	nop
}
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b08a      	sub	sp, #40	; 0x28
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001062:	f107 0308 	add.w	r3, r7, #8
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	330b      	adds	r3, #11
 800107e:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	3302      	adds	r3, #2
 8001084:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d11d      	bne.n	80010ca <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800108e:	f7ff fdfd 	bl	8000c8c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001092:	230f      	movs	r3, #15
 8001094:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001096:	237f      	movs	r3, #127	; 0x7f
 8001098:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800109a:	f7ff fe7d 	bl	8000d98 <LL_DBGMCU_GetRevisionID>
 800109e:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80010a6:	f7ff fe69 	bl	8000d7c <LL_DBGMCU_GetDeviceID>
 80010aa:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80010ac:	6a3b      	ldr	r3, [r7, #32]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80010b2:	f107 0308 	add.w	r3, r7, #8
 80010b6:	4618      	mov	r0, r3
 80010b8:	f00e f81a 	bl	800f0f0 <SHCI_C2_Config>

    APP_BLE_Init();
 80010bc:	f013 f81a 	bl	80140f4 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80010c0:	2100      	movs	r1, #0
 80010c2:	2001      	movs	r0, #1
 80010c4:	f013 fe32 	bl	8014d2c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80010c8:	e007      	b.n	80010da <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d103      	bne.n	80010da <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
  return;
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
}
 80010dc:	3728      	adds	r7, #40	; 0x28
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80010ea:	f04f 32ff 	mov.w	r2, #4294967295
 80010ee:	2100      	movs	r1, #0
 80010f0:	2001      	movs	r0, #1
 80010f2:	f00f f831 	bl	8010158 <osThreadFlagsWait>
     shci_user_evt_proc();
 80010f6:	f00e fa77 	bl	800f5e8 <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80010fa:	e7f6      	b.n	80010ea <ShciUserEvtProcess+0x8>

080010fc <shci_notify_asynch_evt>:
    __WFI();
  }
}

void shci_notify_asynch_evt(void* pdata)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId, 1);
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <shci_notify_asynch_evt+0x1c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2101      	movs	r1, #1
 800110a:	4618      	mov	r0, r3
 800110c:	f00e ffd6 	bl	80100bc <osThreadFlagsSet>
  return;
 8001110:	bf00      	nop
}
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000a44 	.word	0x20000a44

0800111c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease(SemShciId);
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <shci_cmd_resp_release+0x1c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f00f fb11 	bl	8010750 <osSemaphoreRelease>
  return;
 800112e:	bf00      	nop
}
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000a40 	.word	0x20000a40

0800113c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire(SemShciId, osWaitForever);
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <shci_cmd_resp_wait+0x20>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f04f 31ff 	mov.w	r1, #4294967295
 800114c:	4618      	mov	r0, r3
 800114e:	f00f faad 	bl	80106ac <osSemaphoreAcquire>
  return;
 8001152:	bf00      	nop
}
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000a40 	.word	0x20000a40

08001160 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af02      	add	r7, sp, #8
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of dspTimer */
  dspTimerHandle = osTimerNew(dspTimerCallback, osTimerPeriodic, NULL, &dspTimer_attributes);
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <MX_FREERTOS_Init+0x44>)
 8001168:	2200      	movs	r2, #0
 800116a:	2101      	movs	r1, #1
 800116c:	480e      	ldr	r0, [pc, #56]	; (80011a8 <MX_FREERTOS_Init+0x48>)
 800116e:	f00f f889 	bl	8010284 <osTimerNew>
 8001172:	4603      	mov	r3, r0
 8001174:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <MX_FREERTOS_Init+0x4c>)
 8001176:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  //xTimerStop(dspTimerHandle, 10);
  /* dspTimer change period to 100ms (block is ignored but set 10
   * either way */
  xTimerChangePeriod(dspTimerHandle, dsp_timer_period, 10);
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_FREERTOS_Init+0x4c>)
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_FREERTOS_Init+0x50>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	230a      	movs	r3, #10
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2300      	movs	r3, #0
 8001186:	2104      	movs	r1, #4
 8001188:	f012 f834 	bl	80131f4 <xTimerGenericCommand>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(mainTaskEntry, NULL, &mainTask_attributes);
 800118c:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <MX_FREERTOS_Init+0x54>)
 800118e:	2100      	movs	r1, #0
 8001190:	4809      	ldr	r0, [pc, #36]	; (80011b8 <MX_FREERTOS_Init+0x58>)
 8001192:	f00e ff01 	bl	800ff98 <osThreadNew>
 8001196:	4603      	mov	r3, r0
 8001198:	4a08      	ldr	r2, [pc, #32]	; (80011bc <MX_FREERTOS_Init+0x5c>)
 800119a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	08015ae4 	.word	0x08015ae4
 80011a8:	08001631 	.word	0x08001631
 80011ac:	20000ca8 	.word	0x20000ca8
 80011b0:	20000008 	.word	0x20000008
 80011b4:	08015ac0 	.word	0x08015ac0
 80011b8:	08003399 	.word	0x08003399
 80011bc:	20000a48 	.word	0x20000a48

080011c0 <LL_LPTIM_Enable>:
  * @rmtoll CR           ENABLE        LL_LPTIM_Enable
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_Enable(LPTIM_TypeDef *LPTIMx)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	f043 0201 	orr.w	r2, r3, #1
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	611a      	str	r2, [r3, #16]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <LL_LPTIM_StartCounter>:
  *         @arg @ref LL_LPTIM_OPERATING_MODE_CONTINUOUS
  *         @arg @ref LL_LPTIM_OPERATING_MODE_ONESHOT
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_StartCounter(LPTIM_TypeDef *LPTIMx, uint32_t OperatingMode)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	f023 0206 	bic.w	r2, r3, #6
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	611a      	str	r2, [r3, #16]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_LPTIM_EnableResetAfterRead>:
  * @rmtoll CR           RSTARE        LL_LPTIM_EnableResetAfterRead
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableResetAfterRead(LPTIM_TypeDef *LPTIMx)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_RSTARE);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	f043 0210 	orr.w	r2, r3, #16
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	611a      	str	r2, [r3, #16]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <_ZN6GpioInC1EP12GPIO_TypeDeftb>:
//	┗┛┣┛┗┗┛┻┛┗
//	  ┛

GpioIn::GpioIn(GPIO_TypeDef *gpio, uint16_t pin) : gpio(gpio), pin(pin), inv(0) { }

GpioIn::GpioIn(GPIO_TypeDef *gpio, uint16_t pin, bool inv) : gpio(gpio), pin(pin), inv(inv ? pin : 0) { }
 8001226:	b480      	push	{r7}
 8001228:	b085      	sub	sp, #20
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	4611      	mov	r1, r2
 8001232:	461a      	mov	r2, r3
 8001234:	460b      	mov	r3, r1
 8001236:	80fb      	strh	r3, [r7, #6]
 8001238:	4613      	mov	r3, r2
 800123a:	717b      	strb	r3, [r7, #5]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	809a      	strh	r2, [r3, #4]
 8001248:	797b      	ldrb	r3, [r7, #5]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <_ZN6GpioInC1EP12GPIO_TypeDeftb+0x2c>
 800124e:	88fa      	ldrh	r2, [r7, #6]
 8001250:	e000      	b.n	8001254 <_ZN6GpioInC1EP12GPIO_TypeDeftb+0x2e>
 8001252:	2200      	movs	r2, #0
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	80da      	strh	r2, [r3, #6]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4618      	mov	r0, r3
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <_ZN7GpioOutC1EP12GPIO_TypeDeftb>:
//	┗┛┣┛┗┗┛┗┛┗┻┗
//	  ┛         

GpioOut::GpioOut(GPIO_TypeDef *gpio, uint16_t pin) : gpio(gpio), pin(pin), inv(0) { }

GpioOut::GpioOut(GPIO_TypeDef *gpio, uint16_t pin, bool inv) : gpio(gpio), pin(pin), inv(inv ? pin : 0) { }
 8001266:	b480      	push	{r7}
 8001268:	b085      	sub	sp, #20
 800126a:	af00      	add	r7, sp, #0
 800126c:	60f8      	str	r0, [r7, #12]
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	4611      	mov	r1, r2
 8001272:	461a      	mov	r2, r3
 8001274:	460b      	mov	r3, r1
 8001276:	80fb      	strh	r3, [r7, #6]
 8001278:	4613      	mov	r3, r2
 800127a:	717b      	strb	r3, [r7, #5]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	88fa      	ldrh	r2, [r7, #6]
 8001286:	809a      	strh	r2, [r3, #4]
 8001288:	797b      	ldrb	r3, [r7, #5]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <_ZN7GpioOutC1EP12GPIO_TypeDeftb+0x2c>
 800128e:	88fa      	ldrh	r2, [r7, #6]
 8001290:	e000      	b.n	8001294 <_ZN7GpioOutC1EP12GPIO_TypeDeftb+0x2e>
 8001292:	2200      	movs	r2, #0
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	80da      	strh	r2, [r3, #6]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4618      	mov	r0, r3
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <_ZN7GpioOut2onEv>:

void GpioOut::on()
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
	gpio->ODR = (gpio->ODR & ~inv) | (pin ^ inv);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	88d2      	ldrh	r2, [r2, #6]
 80012b8:	43d2      	mvns	r2, r2
 80012ba:	401a      	ands	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	8899      	ldrh	r1, [r3, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	88db      	ldrh	r3, [r3, #6]
 80012c4:	404b      	eors	r3, r1
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	4619      	mov	r1, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	615a      	str	r2, [r3, #20]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <_ZN7GpioOut3offEv>:

void GpioOut::off()
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
	gpio->ODR = (gpio->ODR & ~(pin ^ inv)) | inv;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	8891      	ldrh	r1, [r2, #4]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	88d2      	ldrh	r2, [r2, #6]
 80012f4:	404a      	eors	r2, r1
 80012f6:	b292      	uxth	r2, r2
 80012f8:	43d2      	mvns	r2, r2
 80012fa:	401a      	ands	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	88db      	ldrh	r3, [r3, #6]
 8001300:	4619      	mov	r1, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	430a      	orrs	r2, r1
 8001308:	615a      	str	r2, [r3, #20]
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <_ZN7GpioOut6toggleEv>:

void GpioOut::toggle()
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
	gpio->ODR = gpio->ODR ^ pin;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	695a      	ldr	r2, [r3, #20]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	889b      	ldrh	r3, [r3, #4]
 8001328:	4619      	mov	r1, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	404a      	eors	r2, r1
 8001330:	615a      	str	r2, [r3, #20]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <_ZN7EncoderC1EP19LPTIM_HandleTypeDeff>:
//	┏┓      ┓
//	┣ ┏┓┏┏┓┏┫┏┓┏┓
//	┗┛┛┗┗┗┛┗┻┗ ┛
//

Encoder::Encoder(LPTIM_HandleTypeDef *hlptim, float ratio) : hlptim(hlptim), ratio(ratio) { }
 800133e:	b480      	push	{r7}
 8001340:	b085      	sub	sp, #20
 8001342:	af00      	add	r7, sp, #0
 8001344:	60f8      	str	r0, [r7, #12]
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	ed87 0a01 	vstr	s0, [r7, #4]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4618      	mov	r0, r3
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <_ZN7Encoder4initEv>:

//Encoder::Encoder(LPTIM_HandleTypeDef *hlptim, float gear_ratio, float encoder_ratio) : hlptim(hlptim), ratio(gear_ratio * encoder_ratio) { }

void Encoder::init()
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	HAL_LPTIM_Counter_Start(hlptim, 0xffff);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001376:	4618      	mov	r0, r3
 8001378:	f005 fb96 	bl	8006aa8 <HAL_LPTIM_Counter_Start>
	LL_LPTIM_EnableResetAfterRead(hlptim->Instance);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ff3f 	bl	8001206 <LL_LPTIM_EnableResetAfterRead>
	LL_LPTIM_Enable(hlptim->Instance);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ff16 	bl	80011c0 <LL_LPTIM_Enable>
	LL_LPTIM_StartCounter(hlptim->Instance, LL_LPTIM_OPERATING_MODE_CONTINUOUS);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2104      	movs	r1, #4
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff1f 	bl	80011e0 <LL_LPTIM_StartCounter>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <_ZN7Encoder13getAngleSpeedEf>:

float Encoder::getAngleSpeed(float dt)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	ed87 0a00 	vstr	s0, [r7]
	return float(HAL_LPTIM_ReadCounter(hlptim)) * ratio / dt * 60.f;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f005 fbb7 	bl	8006b30 <HAL_LPTIM_ReadCounter>
 80013c2:	ee07 0a90 	vmov	s15, r0
 80013c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80013d0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80013d4:	ed97 7a00 	vldr	s14, [r7]
 80013d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013dc:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80013f0 <_ZN7Encoder13getAngleSpeedEf+0x44>
 80013e0:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80013e4:	eeb0 0a67 	vmov.f32	s0, s15
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	42700000 	.word	0x42700000

080013f4 <_ZN6PwmOutC1EP17TIM_HandleTypeDef8PwmOutCh>:
//	┏┓      ┏┓
//	┃┃┓┏┏┏┳┓┃┃┓┏╋
//	┣┛┗┻┛┛┗┗┗┛┗┻┗
//

PwmOut::PwmOut(TIM_HandleTypeDef *tim, PwmOutCh channel) : htim(tim)
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	605a      	str	r2, [r3, #4]
{
	switch (channel)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b14      	cmp	r3, #20
 800140a:	d845      	bhi.n	8001498 <_ZN6PwmOutC1EP17TIM_HandleTypeDef8PwmOutCh+0xa4>
 800140c:	a201      	add	r2, pc, #4	; (adr r2, 8001414 <_ZN6PwmOutC1EP17TIM_HandleTypeDef8PwmOutCh+0x20>)
 800140e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001412:	bf00      	nop
 8001414:	08001469 	.word	0x08001469
 8001418:	08001499 	.word	0x08001499
 800141c:	08001499 	.word	0x08001499
 8001420:	08001499 	.word	0x08001499
 8001424:	08001471 	.word	0x08001471
 8001428:	08001499 	.word	0x08001499
 800142c:	08001499 	.word	0x08001499
 8001430:	08001499 	.word	0x08001499
 8001434:	08001479 	.word	0x08001479
 8001438:	08001499 	.word	0x08001499
 800143c:	08001499 	.word	0x08001499
 8001440:	08001499 	.word	0x08001499
 8001444:	08001481 	.word	0x08001481
 8001448:	08001499 	.word	0x08001499
 800144c:	08001499 	.word	0x08001499
 8001450:	08001499 	.word	0x08001499
 8001454:	08001489 	.word	0x08001489
 8001458:	08001499 	.word	0x08001499
 800145c:	08001499 	.word	0x08001499
 8001460:	08001499 	.word	0x08001499
 8001464:	08001491 	.word	0x08001491
	{
	case PwmOutCh::_1:
		this->channel_cmp_reg = &TIM_TypeDef::CCR1;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2234      	movs	r2, #52	; 0x34
 800146c:	60da      	str	r2, [r3, #12]
		break;
 800146e:	e013      	b.n	8001498 <_ZN6PwmOutC1EP17TIM_HandleTypeDef8PwmOutCh+0xa4>
	case PwmOutCh::_2:
		this->channel_cmp_reg = &TIM_TypeDef::CCR2;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2238      	movs	r2, #56	; 0x38
 8001474:	60da      	str	r2, [r3, #12]
		break;
 8001476:	e00f      	b.n	8001498 <_ZN6PwmOutC1EP17TIM_HandleTypeDef8PwmOutCh+0xa4>
	case PwmOutCh::_3:
		this->channel_cmp_reg = &TIM_TypeDef::CCR3;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	223c      	movs	r2, #60	; 0x3c
 800147c:	60da      	str	r2, [r3, #12]
		break;
 800147e:	e00b      	b.n	8001498 <_ZN6PwmOutC1EP17TIM_HandleTypeDef8PwmOutCh+0xa4>
	case PwmOutCh::_4:
		this->channel_cmp_reg = &TIM_TypeDef::CCR4;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2240      	movs	r2, #64	; 0x40
 8001484:	60da      	str	r2, [r3, #12]
		break;
 8001486:	e007      	b.n	8001498 <_ZN6PwmOutC1EP17TIM_HandleTypeDef8PwmOutCh+0xa4>
	case PwmOutCh::_5:
		this->channel_cmp_reg = &TIM_TypeDef::CCR5;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2258      	movs	r2, #88	; 0x58
 800148c:	60da      	str	r2, [r3, #12]
		break;
 800148e:	e003      	b.n	8001498 <_ZN6PwmOutC1EP17TIM_HandleTypeDef8PwmOutCh+0xa4>
	case PwmOutCh::_6:
		this->channel_cmp_reg = &TIM_TypeDef::CCR6;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	225c      	movs	r2, #92	; 0x5c
 8001494:	60da      	str	r2, [r3, #12]
		break;
 8001496:	bf00      	nop
	}
	this->channel = uint32_t(channel);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	609a      	str	r2, [r3, #8]
	arr = 10000.f;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <_ZN6PwmOutC1EP17TIM_HandleTypeDef8PwmOutCh+0xc0>)
 80014a2:	601a      	str	r2, [r3, #0]
	//HAL_TIM_PWM_Start(tim, uint32_t(channel));
}
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4618      	mov	r0, r3
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	461c4000 	.word	0x461c4000

080014b8 <_ZN6PwmOut4initEv>:

void PwmOut::init()
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(htim, uint32_t(channel));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	4619      	mov	r1, r3
 80014ca:	4610      	mov	r0, r2
 80014cc:	f008 fd5c 	bl	8009f88 <HAL_TIM_PWM_Start>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <_ZN6PwmOut7setDutyEf>:
void PwmOut::setDuty(float duty)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	ed87 0a00 	vstr	s0, [r7]
	duty = std::clamp(duty, 0.f, 100.f);
 80014e4:	f04f 0300 	mov.w	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <_ZN6PwmOut7setDutyEf+0x80>)
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	f107 0210 	add.w	r2, r7, #16
 80014f2:	f107 010c 	add.w	r1, r7, #12
 80014f6:	463b      	mov	r3, r7
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 f82f 	bl	800155c <_ZSt5clampIfERKT_S2_S2_S2_>
 80014fe:	4603      	mov	r3, r0
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	603b      	str	r3, [r7, #0]
	uint32_t cmp = uint32_t(arr * duty * 0.01);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	ed93 7a00 	vldr	s14, [r3]
 800150a:	edd7 7a00 	vldr	s15, [r7]
 800150e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001512:	ee17 0a90 	vmov	r0, s15
 8001516:	f7ff f919 	bl	800074c <__aeabi_f2d>
 800151a:	a30d      	add	r3, pc, #52	; (adr r3, 8001550 <_ZN6PwmOut7setDutyEf+0x78>)
 800151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001520:	f7fe fe86 	bl	8000230 <__aeabi_dmul>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4610      	mov	r0, r2
 800152a:	4619      	mov	r1, r3
 800152c:	f7ff f966 	bl	80007fc <__aeabi_d2uiz>
 8001530:	4603      	mov	r3, r0
 8001532:	617b      	str	r3, [r7, #20]
	htim->Instance->*channel_cmp_reg = cmp;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	68d2      	ldr	r2, [r2, #12]
 800153e:	4413      	add	r3, r2
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	601a      	str	r2, [r3, #0]
}
 8001544:	bf00      	nop
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	f3af 8000 	nop.w
 8001550:	47ae147b 	.word	0x47ae147b
 8001554:	3f847ae1 	.word	0x3f847ae1
 8001558:	42c80000 	.word	0x42c80000

0800155c <_ZSt5clampIfERKT_S2_S2_S2_>:
   *  @param  __hi   An upper limit of arbitrary type.
   *  @return max(__val, __lo) if __val < __hi or min(__val, __hi) otherwise.
   */
  template<typename _Tp>
    constexpr const _Tp&
    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
    {
      __glibcxx_assert(!(__hi < __lo));
      return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	ed93 7a00 	vldr	s14, [r3]
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157c:	d501      	bpl.n	8001582 <_ZSt5clampIfERKT_S2_S2_S2_+0x26>
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	e00d      	b.n	800159e <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	ed93 7a00 	vldr	s14, [r3]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001596:	d501      	bpl.n	800159c <_ZSt5clampIfERKT_S2_S2_S2_+0x40>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	e000      	b.n	800159e <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 800159c:	68fb      	ldr	r3, [r7, #12]
    }
 800159e:	4618      	mov	r0, r3
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <LL_AHB1_GRP1_EnableClock>:
{
 80015aa:	b480      	push	{r7}
 80015ac:	b085      	sub	sp, #20
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80015b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4313      	orrs	r3, r2
 80015c0:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80015c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4013      	ands	r3, r2
 80015cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015ce:	68fb      	ldr	r3, [r7, #12]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80015e0:	2004      	movs	r0, #4
 80015e2:	f7ff ffe2 	bl	80015aa <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015e6:	2001      	movs	r0, #1
 80015e8:	f7ff ffdf 	bl	80015aa <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2105      	movs	r1, #5
 80015f0:	200b      	movs	r0, #11
 80015f2:	f004 fc19 	bl	8005e28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015f6:	200b      	movs	r0, #11
 80015f8:	f004 fc30 	bl	8005e5c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2105      	movs	r1, #5
 8001600:	200c      	movs	r0, #12
 8001602:	f004 fc11 	bl	8005e28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001606:	200c      	movs	r0, #12
 8001608:	f004 fc28 	bl	8005e5c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800160c:	2200      	movs	r2, #0
 800160e:	2105      	movs	r1, #5
 8001610:	200d      	movs	r0, #13
 8001612:	f004 fc09 	bl	8005e28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001616:	200d      	movs	r0, #13
 8001618:	f004 fc20 	bl	8005e5c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800161c:	2200      	movs	r2, #0
 800161e:	2105      	movs	r1, #5
 8001620:	200e      	movs	r0, #14
 8001622:	f004 fc01 	bl	8005e28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001626:	200e      	movs	r0, #14
 8001628:	f004 fc18 	bl	8005e5c <HAL_NVIC_EnableIRQ>

}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}

08001630 <dspTimerCallback>:

float right_spd;
float left_spd;

void dspTimerCallback(void* arguments)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	float right_speed = right_encoder.getAngleSpeed(period);
 8001638:	4b53      	ldr	r3, [pc, #332]	; (8001788 <dspTimerCallback+0x158>)
 800163a:	edd3 7a00 	vldr	s15, [r3]
 800163e:	eeb0 0a67 	vmov.f32	s0, s15
 8001642:	4852      	ldr	r0, [pc, #328]	; (800178c <dspTimerCallback+0x15c>)
 8001644:	f7ff feb2 	bl	80013ac <_ZN7Encoder13getAngleSpeedEf>
 8001648:	ed87 0a07 	vstr	s0, [r7, #28]
	float left_speed = left_encoder.getAngleSpeed(period);
 800164c:	4b4e      	ldr	r3, [pc, #312]	; (8001788 <dspTimerCallback+0x158>)
 800164e:	edd3 7a00 	vldr	s15, [r3]
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	484e      	ldr	r0, [pc, #312]	; (8001790 <dspTimerCallback+0x160>)
 8001658:	f7ff fea8 	bl	80013ac <_ZN7Encoder13getAngleSpeedEf>
 800165c:	ed87 0a06 	vstr	s0, [r7, #24]

	right_speed = speed_filter_right_lp.update(right_speed);
 8001660:	ed97 0a07 	vldr	s0, [r7, #28]
 8001664:	484b      	ldr	r0, [pc, #300]	; (8001794 <dspTimerCallback+0x164>)
 8001666:	f000 fa4b 	bl	8001b00 <_ZN10EmaLowPass6updateEf>
 800166a:	ed87 0a07 	vstr	s0, [r7, #28]
	left_speed = speed_filter_left_lp.update(left_speed);
 800166e:	ed97 0a06 	vldr	s0, [r7, #24]
 8001672:	4849      	ldr	r0, [pc, #292]	; (8001798 <dspTimerCallback+0x168>)
 8001674:	f000 fa44 	bl	8001b00 <_ZN10EmaLowPass6updateEf>
 8001678:	ed87 0a06 	vstr	s0, [r7, #24]
	speed_filter_right.predict(0.f);
 800167c:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800179c <dspTimerCallback+0x16c>
 8001680:	4847      	ldr	r0, [pc, #284]	; (80017a0 <dspTimerCallback+0x170>)
 8001682:	f000 f96e 	bl	8001962 <_ZN14KalmanFilter1D7predictEf>
	speed_filter_left.predict(0.f);
 8001686:	ed9f 0a45 	vldr	s0, [pc, #276]	; 800179c <dspTimerCallback+0x16c>
 800168a:	4846      	ldr	r0, [pc, #280]	; (80017a4 <dspTimerCallback+0x174>)
 800168c:	f000 f969 	bl	8001962 <_ZN14KalmanFilter1D7predictEf>
	speed_filter_right.correct(right_speed);
 8001690:	ed97 0a07 	vldr	s0, [r7, #28]
 8001694:	4842      	ldr	r0, [pc, #264]	; (80017a0 <dspTimerCallback+0x170>)
 8001696:	f000 f999 	bl	80019cc <_ZN14KalmanFilter1D7correctEf>
	speed_filter_left.correct(left_speed);
 800169a:	ed97 0a06 	vldr	s0, [r7, #24]
 800169e:	4841      	ldr	r0, [pc, #260]	; (80017a4 <dspTimerCallback+0x174>)
 80016a0:	f000 f994 	bl	80019cc <_ZN14KalmanFilter1D7correctEf>
	right_spd = right_speed = speed_filter_right.getPredition();
 80016a4:	483e      	ldr	r0, [pc, #248]	; (80017a0 <dspTimerCallback+0x170>)
 80016a6:	f000 f9f7 	bl	8001a98 <_ZN14KalmanFilter1D12getPreditionEv>
 80016aa:	ed87 0a07 	vstr	s0, [r7, #28]
 80016ae:	4a3e      	ldr	r2, [pc, #248]	; (80017a8 <dspTimerCallback+0x178>)
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	6013      	str	r3, [r2, #0]
	left_spd = left_speed	= speed_filter_left.getPredition();
 80016b4:	483b      	ldr	r0, [pc, #236]	; (80017a4 <dspTimerCallback+0x174>)
 80016b6:	f000 f9ef 	bl	8001a98 <_ZN14KalmanFilter1D12getPreditionEv>
 80016ba:	ed87 0a06 	vstr	s0, [r7, #24]
 80016be:	4a3b      	ldr	r2, [pc, #236]	; (80017ac <dspTimerCallback+0x17c>)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	6013      	str	r3, [r2, #0]

	speed = right_speed;//(right_speed + left_speed) / 2;
 80016c4:	4a3a      	ldr	r2, [pc, #232]	; (80017b0 <dspTimerCallback+0x180>)
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	6013      	str	r3, [r2, #0]

//	float speed_error 		= set_speed - speed;
	float follow_error 		= set_follow - follow_deviation;
 80016ca:	4b3a      	ldr	r3, [pc, #232]	; (80017b4 <dspTimerCallback+0x184>)
 80016cc:	ed93 7a00 	vldr	s14, [r3]
 80016d0:	4b39      	ldr	r3, [pc, #228]	; (80017b8 <dspTimerCallback+0x188>)
 80016d2:	edd3 7a00 	vldr	s15, [r3]
 80016d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016da:	edc7 7a05 	vstr	s15, [r7, #20]

	float duty_diff	 		= follow_pid.update(follow_error);
 80016de:	ed97 0a05 	vldr	s0, [r7, #20]
 80016e2:	4836      	ldr	r0, [pc, #216]	; (80017bc <dspTimerCallback+0x18c>)
 80016e4:	f002 fa5a 	bl	8003b9c <_ZN3Pid6updateEf>
 80016e8:	ed87 0a04 	vstr	s0, [r7, #16]

	float left_speed_error 	= set_speed - left_speed;
 80016ec:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <dspTimerCallback+0x190>)
 80016ee:	ed93 7a00 	vldr	s14, [r3]
 80016f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80016f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016fa:	edc7 7a03 	vstr	s15, [r7, #12]
	float right_speed_error = set_speed - right_speed;
 80016fe:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <dspTimerCallback+0x190>)
 8001700:	ed93 7a00 	vldr	s14, [r3]
 8001704:	edd7 7a07 	vldr	s15, [r7, #28]
 8001708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170c:	edc7 7a02 	vstr	s15, [r7, #8]

	left_speed_duty 	= speed_left_pid.update(left_speed_error);
 8001710:	ed97 0a03 	vldr	s0, [r7, #12]
 8001714:	482b      	ldr	r0, [pc, #172]	; (80017c4 <dspTimerCallback+0x194>)
 8001716:	f002 fa41 	bl	8003b9c <_ZN3Pid6updateEf>
 800171a:	eef0 7a40 	vmov.f32	s15, s0
 800171e:	4b2a      	ldr	r3, [pc, #168]	; (80017c8 <dspTimerCallback+0x198>)
 8001720:	edc3 7a00 	vstr	s15, [r3]
	right_speed_duty 	= speed_right_pid.update(right_speed_error);
 8001724:	ed97 0a02 	vldr	s0, [r7, #8]
 8001728:	4828      	ldr	r0, [pc, #160]	; (80017cc <dspTimerCallback+0x19c>)
 800172a:	f002 fa37 	bl	8003b9c <_ZN3Pid6updateEf>
 800172e:	eef0 7a40 	vmov.f32	s15, s0
 8001732:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <dspTimerCallback+0x1a0>)
 8001734:	edc3 7a00 	vstr	s15, [r3]

	left_speed_duty 	+= duty_diff;
 8001738:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <dspTimerCallback+0x198>)
 800173a:	ed93 7a00 	vldr	s14, [r3]
 800173e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001746:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <dspTimerCallback+0x198>)
 8001748:	edc3 7a00 	vstr	s15, [r3]
	right_speed_duty 	-= duty_diff;
 800174c:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <dspTimerCallback+0x1a0>)
 800174e:	ed93 7a00 	vldr	s14, [r3]
 8001752:	edd7 7a04 	vldr	s15, [r7, #16]
 8001756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800175a:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <dspTimerCallback+0x1a0>)
 800175c:	edc3 7a00 	vstr	s15, [r3]

	left_speed_ctrl.setDuty(left_speed_duty);
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <dspTimerCallback+0x198>)
 8001762:	edd3 7a00 	vldr	s15, [r3]
 8001766:	eeb0 0a67 	vmov.f32	s0, s15
 800176a:	481a      	ldr	r0, [pc, #104]	; (80017d4 <dspTimerCallback+0x1a4>)
 800176c:	f7ff feb4 	bl	80014d8 <_ZN6PwmOut7setDutyEf>
	right_speed_ctrl.setDuty(right_speed_duty);
 8001770:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <dspTimerCallback+0x1a0>)
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	eeb0 0a67 	vmov.f32	s0, s15
 800177a:	4817      	ldr	r0, [pc, #92]	; (80017d8 <dspTimerCallback+0x1a8>)
 800177c:	f7ff feac 	bl	80014d8 <_ZN6PwmOut7setDutyEf>
}
 8001780:	bf00      	nop
 8001782:	3720      	adds	r7, #32
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000cd8 	.word	0x20000cd8
 800178c:	20000fa8 	.word	0x20000fa8
 8001790:	20000fa0 	.word	0x20000fa0
 8001794:	20000dbc 	.word	0x20000dbc
 8001798:	20000dc8 	.word	0x20000dc8
 800179c:	00000000 	.word	0x00000000
 80017a0:	20000d7c 	.word	0x20000d7c
 80017a4:	20000d9c 	.word	0x20000d9c
 80017a8:	20000de4 	.word	0x20000de4
 80017ac:	20000de8 	.word	0x20000de8
 80017b0:	20000dd4 	.word	0x20000dd4
 80017b4:	20000cdc 	.word	0x20000cdc
 80017b8:	20000de0 	.word	0x20000de0
 80017bc:	20000d48 	.word	0x20000d48
 80017c0:	2000000c 	.word	0x2000000c
 80017c4:	20000d14 	.word	0x20000d14
 80017c8:	20000dd8 	.word	0x20000dd8
 80017cc:	20000ce0 	.word	0x20000ce0
 80017d0:	20000ddc 	.word	0x20000ddc
 80017d4:	20000010 	.word	0x20000010
 80017d8:	20000020 	.word	0x20000020

080017dc <_Z41__static_initialization_and_destruction_0ii>:
 80017dc:	b5b0      	push	{r4, r5, r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d15c      	bne.n	80018a6 <_Z41__static_initialization_and_destruction_0ii+0xca>
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d157      	bne.n	80018a6 <_Z41__static_initialization_and_destruction_0ii+0xca>
static float period = (float)dsp_timer_period / 1000.f;
 80017f6:	4b2e      	ldr	r3, [pc, #184]	; (80018b0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	ee07 3a90 	vmov	s15, r3
 80017fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001802:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80018b4 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 8001806:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800180a:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 800180c:	edc3 7a00 	vstr	s15, [r3]
static Pid speed_right_pid(0.10f, 0.02f, 0.004f, period);
 8001810:	4b29      	ldr	r3, [pc, #164]	; (80018b8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8001812:	edd3 7a00 	vldr	s15, [r3]
 8001816:	eef0 1a67 	vmov.f32	s3, s15
 800181a:	ed9f 1a28 	vldr	s2, [pc, #160]	; 80018bc <_Z41__static_initialization_and_destruction_0ii+0xe0>
 800181e:	eddf 0a28 	vldr	s1, [pc, #160]	; 80018c0 <_Z41__static_initialization_and_destruction_0ii+0xe4>
 8001822:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80018c4 <_Z41__static_initialization_and_destruction_0ii+0xe8>
 8001826:	4828      	ldr	r0, [pc, #160]	; (80018c8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8001828:	f002 f98d 	bl	8003b46 <_ZN3PidC1Effff>
static Pid speed_left_pid(speed_right_pid);
 800182c:	4a27      	ldr	r2, [pc, #156]	; (80018cc <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 800182e:	4b26      	ldr	r3, [pc, #152]	; (80018c8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8001830:	4614      	mov	r4, r2
 8001832:	461d      	mov	r5, r3
 8001834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001838:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800183a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800183c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800183e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001840:	682b      	ldr	r3, [r5, #0]
 8001842:	6023      	str	r3, [r4, #0]
static Pid follow_pid(0.10f, 0.02f, 0.004f, period);
 8001844:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8001846:	edd3 7a00 	vldr	s15, [r3]
 800184a:	eef0 1a67 	vmov.f32	s3, s15
 800184e:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 80018bc <_Z41__static_initialization_and_destruction_0ii+0xe0>
 8001852:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80018c0 <_Z41__static_initialization_and_destruction_0ii+0xe4>
 8001856:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 80018c4 <_Z41__static_initialization_and_destruction_0ii+0xe8>
 800185a:	481d      	ldr	r0, [pc, #116]	; (80018d0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 800185c:	f002 f973 	bl	8003b46 <_ZN3PidC1Effff>
KalmanFilter1D speed_filter_right(1.f, 0.f, 100.f, 100.f, 9.f, 1); //period
 8001860:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8001864:	eeb2 2a02 	vmov.f32	s4, #34	; 0x41100000  9.0
 8001868:	eddf 1a1a 	vldr	s3, [pc, #104]	; 80018d4 <_Z41__static_initialization_and_destruction_0ii+0xf8>
 800186c:	ed9f 1a19 	vldr	s2, [pc, #100]	; 80018d4 <_Z41__static_initialization_and_destruction_0ii+0xf8>
 8001870:	eddf 0a19 	vldr	s1, [pc, #100]	; 80018d8 <_Z41__static_initialization_and_destruction_0ii+0xfc>
 8001874:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001878:	4818      	ldr	r0, [pc, #96]	; (80018dc <_Z41__static_initialization_and_destruction_0ii+0x100>)
 800187a:	f000 f841 	bl	8001900 <_ZN14KalmanFilter1DC1Effffff>
KalmanFilter1D speed_filter_left(speed_filter_right);
 800187e:	4a18      	ldr	r2, [pc, #96]	; (80018e0 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8001880:	4b16      	ldr	r3, [pc, #88]	; (80018dc <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8001882:	4614      	mov	r4, r2
 8001884:	461d      	mov	r5, r3
 8001886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800188a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800188e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
EmaLowPass speed_filter_right_lp(0.45f);
 8001892:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80018e4 <_Z41__static_initialization_and_destruction_0ii+0x108>
 8001896:	4814      	ldr	r0, [pc, #80]	; (80018e8 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8001898:	f000 f90d 	bl	8001ab6 <_ZN10EmaLowPassC1Ef>
EmaLowPass speed_filter_left_lp(speed_filter_right_lp);
 800189c:	4b13      	ldr	r3, [pc, #76]	; (80018ec <_Z41__static_initialization_and_destruction_0ii+0x110>)
 800189e:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 80018a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80018a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bdb0      	pop	{r4, r5, r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000008 	.word	0x20000008
 80018b4:	447a0000 	.word	0x447a0000
 80018b8:	20000cd8 	.word	0x20000cd8
 80018bc:	3b83126f 	.word	0x3b83126f
 80018c0:	3ca3d70a 	.word	0x3ca3d70a
 80018c4:	3dcccccd 	.word	0x3dcccccd
 80018c8:	20000ce0 	.word	0x20000ce0
 80018cc:	20000d14 	.word	0x20000d14
 80018d0:	20000d48 	.word	0x20000d48
 80018d4:	42c80000 	.word	0x42c80000
 80018d8:	00000000 	.word	0x00000000
 80018dc:	20000d7c 	.word	0x20000d7c
 80018e0:	20000d9c 	.word	0x20000d9c
 80018e4:	3ee66666 	.word	0x3ee66666
 80018e8:	20000dbc 	.word	0x20000dbc
 80018ec:	20000dc8 	.word	0x20000dc8

080018f0 <_GLOBAL__sub_I_speed_filter_right>:
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80018f8:	2001      	movs	r0, #1
 80018fa:	f7ff ff6f 	bl	80017dc <_Z41__static_initialization_and_destruction_0ii>
 80018fe:	bd80      	pop	{r7, pc}

08001900 <_ZN14KalmanFilter1DC1Effffff>:
  ******************************************************************************
  */

#include <filters.hpp>

KalmanFilter1D::KalmanFilter1D(float A, float B, float P, float Q, float R, float H) : A(A), B(B), P(P), Q(Q), R(R), H(H) { }
 8001900:	b480      	push	{r7}
 8001902:	b089      	sub	sp, #36	; 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	61f8      	str	r0, [r7, #28]
 8001908:	ed87 0a06 	vstr	s0, [r7, #24]
 800190c:	edc7 0a05 	vstr	s1, [r7, #20]
 8001910:	ed87 1a04 	vstr	s2, [r7, #16]
 8001914:	edc7 1a03 	vstr	s3, [r7, #12]
 8001918:	ed87 2a02 	vstr	s4, [r7, #8]
 800191c:	edc7 2a01 	vstr	s5, [r7, #4]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	68fa      	ldr	r2, [r7, #12]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	611a      	str	r2, [r3, #16]
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	615a      	str	r2, [r3, #20]
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	61da      	str	r2, [r3, #28]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	4618      	mov	r0, r3
 8001958:	3724      	adds	r7, #36	; 0x24
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <_ZN14KalmanFilter1D7predictEf>:

void KalmanFilter1D::predict(float u)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	ed87 0a00 	vstr	s0, [r7]
	xp = A * x + B * u;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	ed93 7a00 	vldr	s14, [r3]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	edd3 7a06 	vldr	s15, [r3, #24]
 800197a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	edd3 6a01 	vldr	s13, [r3, #4]
 8001984:	edd7 7a00 	vldr	s15, [r7]
 8001988:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800198c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	edc3 7a07 	vstr	s15, [r3, #28]
	P = A * P * A + Q;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	ed93 7a00 	vldr	s14, [r3]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	edd3 7a02 	vldr	s15, [r3, #8]
 80019a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	edd3 7a00 	vldr	s15, [r3]
 80019ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80019b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <_ZN14KalmanFilter1D7correctEf>:

void KalmanFilter1D::correct(float y)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	ed87 0a00 	vstr	s0, [r7]
	float e = H * xp;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	ed93 7a05 	vldr	s14, [r3, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	edd3 7a07 	vldr	s15, [r3, #28]
 80019e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e8:	edc7 7a07 	vstr	s15, [r7, #28]
	float E = H * P * H;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	ed93 7a05 	vldr	s14, [r3, #20]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80019f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a06:	edc7 7a06 	vstr	s15, [r7, #24]
	float z = y - e;
 8001a0a:	ed97 7a00 	vldr	s14, [r7]
 8001a0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a16:	edc7 7a05 	vstr	s15, [r7, #20]
	float Z = R + E;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a20:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a28:	edc7 7a04 	vstr	s15, [r7, #16]
	float K = P * H / Z;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a38:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001a3c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a44:	edc7 7a03 	vstr	s15, [r7, #12]

	x = xp + K * z;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	ed93 7a07 	vldr	s14, [r3, #28]
 8001a4e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001a52:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	edc3 7a06 	vstr	s15, [r3, #24]
	P = P - K * H * P;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	edd3 6a05 	vldr	s13, [r3, #20]
 8001a70:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a74:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001a8c:	bf00      	nop
 8001a8e:	3724      	adds	r7, #36	; 0x24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <_ZN14KalmanFilter1D12getPreditionEv>:

float KalmanFilter1D::getPredition()
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	return x;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	ee07 3a90 	vmov	s15, r3
}
 8001aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <_ZN10EmaLowPassC1Ef>:

EmaLowPass::EmaLowPass(float alpha)
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	ed87 0a00 	vstr	s0, [r7]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001ad8:	609a      	str	r2, [r3, #8]
{
	this->alpha = alpha;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	605a      	str	r2, [r3, #4]
	this->beta = 1 - alpha;
 8001ae0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ae4:	edd7 7a00 	vldr	s15, [r7]
 8001ae8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <_ZN10EmaLowPass6updateEf>:

float EmaLowPass::update(float x)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	ed87 0a00 	vstr	s0, [r7]
	y = alpha * x + beta * y;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b12:	edd7 7a00 	vldr	s15, [r7]
 8001b16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	edd3 7a00 	vldr	s15, [r3]
 8001b26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	edc3 7a00 	vstr	s15, [r3]
	return y;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	ee07 3a90 	vmov	s15, r3
}
 8001b3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <LL_AHB2_GRP1_EnableClock>:
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b085      	sub	sp, #20
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
}
 8001b70:	bf00      	nop
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <LL_SYSCFG_SetEXTISource>:
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x03U], (Line >> 16U), (Port << ((POSITION_VAL((Line >> 16U))) & 0x0000000FUL)));
 8001b86:	4a18      	ldr	r2, [pc, #96]	; (8001be8 <LL_SYSCFG_SetEXTISource+0x6c>)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	3302      	adds	r3, #2
 8001b90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	0c1b      	lsrs	r3, r3, #16
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	ea02 0103 	and.w	r1, r2, r3
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	0c1b      	lsrs	r3, r3, #16
 8001ba2:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <LL_SYSCFG_SetEXTISource+0x3e>
  {
    return 32U;
 8001bb6:	2320      	movs	r3, #32
 8001bb8:	e003      	b.n	8001bc2 <LL_SYSCFG_SetEXTISource+0x46>
  }
  return __builtin_clz(value);
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	fab3 f383 	clz	r3, r3
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	4807      	ldr	r0, [pc, #28]	; (8001be8 <LL_SYSCFG_SetEXTISource+0x6c>)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001bda:	bf00      	nop
 8001bdc:	371c      	adds	r7, #28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40010000 	.word	0x40010000

08001bec <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b08b      	sub	sp, #44	; 0x2c
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa93 f3a3 	rbit	r3, r3
 8001c06:	613b      	str	r3, [r7, #16]
  return result;
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001c12:	2320      	movs	r3, #32
 8001c14:	e003      	b.n	8001c1e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	fab3 f383 	clz	r3, r3
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	2103      	movs	r1, #3
 8001c22:	fa01 f303 	lsl.w	r3, r1, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	401a      	ands	r2, r3
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	fa93 f3a3 	rbit	r3, r3
 8001c34:	61fb      	str	r3, [r7, #28]
  return result;
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001c40:	2320      	movs	r3, #32
 8001c42:	e003      	b.n	8001c4c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	fab3 f383 	clz	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	fa01 f303 	lsl.w	r3, r1, r3
 8001c54:	431a      	orrs	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	601a      	str	r2, [r3, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	372c      	adds	r7, #44	; 0x2c
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b08b      	sub	sp, #44	; 0x2c
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	60f8      	str	r0, [r7, #12]
 8001c6e:	60b9      	str	r1, [r7, #8]
 8001c70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	fa93 f3a3 	rbit	r3, r3
 8001c80:	613b      	str	r3, [r7, #16]
  return result;
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001c8c:	2320      	movs	r3, #32
 8001c8e:	e003      	b.n	8001c98 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	fab3 f383 	clz	r3, r3
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	2103      	movs	r1, #3
 8001c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca8:	6a3b      	ldr	r3, [r7, #32]
 8001caa:	fa93 f3a3 	rbit	r3, r3
 8001cae:	61fb      	str	r3, [r7, #28]
  return result;
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001cba:	2320      	movs	r3, #32
 8001cbc:	e003      	b.n	8001cc6 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	fab3 f383 	clz	r3, r3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	60da      	str	r2, [r3, #12]
}
 8001cd4:	bf00      	nop
 8001cd6:	372c      	adds	r7, #44	; 0x2c
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	619a      	str	r2, [r3, #24]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	; 0x28
 8001d1c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001d1e:	f107 031c 	add.w	r3, r7, #28
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
 8001d38:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001d3a:	2004      	movs	r0, #4
 8001d3c:	f7ff ff05 	bl	8001b4a <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8001d40:	2080      	movs	r0, #128	; 0x80
 8001d42:	f7ff ff02 	bl	8001b4a <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001d46:	2002      	movs	r0, #2
 8001d48:	f7ff feff 	bl	8001b4a <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f7ff fefc 	bl	8001b4a <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8001d52:	2010      	movs	r0, #16
 8001d54:	f7ff fef9 	bl	8001b4a <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8001d58:	2008      	movs	r0, #8
 8001d5a:	f7ff fef6 	bl	8001b4a <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LED1_Pin|LED2_Pin|M_LEFT_DIRECTION_Pin);
 8001d5e:	f240 2103 	movw	r1, #515	; 0x203
 8001d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d66:	f7ff ffc9 	bl	8001cfc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LED3_Pin|M_RIGHT_DIRECTION_Pin);
 8001d6a:	2160      	movs	r1, #96	; 0x60
 8001d6c:	4898      	ldr	r0, [pc, #608]	; (8001fd0 <MX_GPIO_Init+0x2b8>)
 8001d6e:	f7ff ffc5 	bl	8001cfc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LED4_Pin|NM_SLEEP_Pin);
 8001d72:	2105      	movs	r1, #5
 8001d74:	4897      	ldr	r0, [pc, #604]	; (8001fd4 <MX_GPIO_Init+0x2bc>)
 8001d76:	f7ff ffc1 	bl	8001cfc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, SPI_EX_NCS1_Pin|SPI_EX_NCS2_Pin);
 8001d7a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001d7e:	4894      	ldr	r0, [pc, #592]	; (8001fd0 <MX_GPIO_Init+0x2b8>)
 8001d80:	f7ff ffae 	bl	8001ce0 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPI_IMU_NCS_GPIO_Port, SPI_IMU_NCS_Pin);
 8001d84:	2180      	movs	r1, #128	; 0x80
 8001d86:	4893      	ldr	r0, [pc, #588]	; (8001fd4 <MX_GPIO_Init+0x2bc>)
 8001d88:	f7ff ffaa 	bl	8001ce0 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_1
 8001d8c:	f24e 0312 	movw	r3, #57362	; 0xe012
 8001d90:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001d92:	2303      	movs	r3, #3
 8001d94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	488c      	ldr	r0, [pc, #560]	; (8001fd0 <MX_GPIO_Init+0x2b8>)
 8001da0:	f00b fd81 	bl	800d8a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001da4:	2308      	movs	r3, #8
 8001da6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001da8:	2303      	movs	r3, #3
 8001daa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	4619      	mov	r1, r3
 8001db4:	4888      	ldr	r0, [pc, #544]	; (8001fd8 <MX_GPIO_Init+0x2c0>)
 8001db6:	f00b fd76 	bl	800d8a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd6:	f00b fd66 	bl	800d8a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_15;
 8001dda:	f248 0330 	movw	r3, #32816	; 0x8030
 8001dde:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001de0:	2303      	movs	r3, #3
 8001de2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	4619      	mov	r1, r3
 8001dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df0:	f00b fd59 	bl	800d8a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = M_LEFT_DIRECTION_Pin;
 8001df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001df8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(M_LEFT_DIRECTION_GPIO_Port, &GPIO_InitStruct);
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e12:	f00b fd48 	bl	800d8a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED3_Pin;
 8001e16:	2320      	movs	r3, #32
 8001e18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001e22:	2301      	movs	r3, #1
 8001e24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4868      	ldr	r0, [pc, #416]	; (8001fd0 <MX_GPIO_Init+0x2b8>)
 8001e30:	f00b fd39 	bl	800d8a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED4_Pin;
 8001e34:	2304      	movs	r3, #4
 8001e36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001e40:	2301      	movs	r3, #1
 8001e42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4861      	ldr	r0, [pc, #388]	; (8001fd4 <MX_GPIO_Init+0x2bc>)
 8001e4e:	f00b fd2a 	bl	800d8a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = NM_SLEEP_Pin|SPI_IMU_NCS_Pin;
 8001e52:	2381      	movs	r3, #129	; 0x81
 8001e54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e56:	2301      	movs	r3, #1
 8001e58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	4619      	mov	r1, r3
 8001e6a:	485a      	ldr	r0, [pc, #360]	; (8001fd4 <MX_GPIO_Init+0x2bc>)
 8001e6c:	f00b fd1b 	bl	800d8a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
 8001e70:	f24f 0340 	movw	r3, #61504	; 0xf040
 8001e74:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_6;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001e76:	2303      	movs	r3, #3
 8001e78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7e:	1d3b      	adds	r3, r7, #4
 8001e80:	4619      	mov	r1, r3
 8001e82:	4854      	ldr	r0, [pc, #336]	; (8001fd4 <MX_GPIO_Init+0x2bc>)
 8001e84:	f00b fd0f 	bl	800d8a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = M_RIGHT_DIRECTION_Pin|SPI_EX_NCS1_Pin|SPI_EX_NCS2_Pin;
 8001e88:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 8001e8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	484b      	ldr	r0, [pc, #300]	; (8001fd0 <MX_GPIO_Init+0x2b8>)
 8001ea4:	f00b fcff 	bl	800d8a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001eac:	2303      	movs	r3, #3
 8001eae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4848      	ldr	r0, [pc, #288]	; (8001fdc <MX_GPIO_Init+0x2c4>)
 8001eba:	f00b fcf4 	bl	800d8a6 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE3);
 8001ebe:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8001ec2:	2002      	movs	r0, #2
 8001ec4:	f7ff fe5a 	bl	8001b7c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE4);
 8001ec8:	4945      	ldr	r1, [pc, #276]	; (8001fe0 <MX_GPIO_Init+0x2c8>)
 8001eca:	2004      	movs	r0, #4
 8001ecc:	f7ff fe56 	bl	8001b7c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE12);
 8001ed0:	4944      	ldr	r1, [pc, #272]	; (8001fe4 <MX_GPIO_Init+0x2cc>)
 8001ed2:	2002      	movs	r0, #2
 8001ed4:	f7ff fe52 	bl	8001b7c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE0);
 8001ed8:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8001edc:	2003      	movs	r0, #3
 8001ede:	f7ff fe4d 	bl	8001b7c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8001ee2:	2308      	movs	r3, #8
 8001ee4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001eea:	2301      	movs	r3, #1
 8001eec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001efc:	f107 031c 	add.w	r3, r7, #28
 8001f00:	4618      	mov	r0, r3
 8001f02:	f00b fa95 	bl	800d430 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 8001f06:	2310      	movs	r3, #16
 8001f08:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001f20:	f107 031c 	add.w	r3, r7, #28
 8001f24:	4618      	mov	r0, r3
 8001f26:	f00b fa83 	bl	800d430 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 8001f2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f2e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001f34:	2301      	movs	r3, #1
 8001f36:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001f40:	2301      	movs	r3, #1
 8001f42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001f46:	f107 031c 	add.w	r3, r7, #28
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f00b fa70 	bl	800d430 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8001f50:	2301      	movs	r3, #1
 8001f52:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001f64:	2301      	movs	r3, #1
 8001f66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001f6a:	f107 031c 	add.w	r3, r7, #28
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f00b fa5e 	bl	800d430 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(SPI_IMU_INT1_GPIO_Port, SPI_IMU_INT1_Pin, LL_GPIO_PULL_NO);
 8001f74:	2200      	movs	r2, #0
 8001f76:	2108      	movs	r1, #8
 8001f78:	4815      	ldr	r0, [pc, #84]	; (8001fd0 <MX_GPIO_Init+0x2b8>)
 8001f7a:	f7ff fe74 	bl	8001c66 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPI_IMU_INT2_GPIO_Port, SPI_IMU_INT2_Pin, LL_GPIO_PULL_NO);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2110      	movs	r1, #16
 8001f82:	4819      	ldr	r0, [pc, #100]	; (8001fe8 <MX_GPIO_Init+0x2d0>)
 8001f84:	f7ff fe6f 	bl	8001c66 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPI_EX_INT1_GPIO_Port, SPI_EX_INT1_Pin, LL_GPIO_PULL_NO);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f8e:	4810      	ldr	r0, [pc, #64]	; (8001fd0 <MX_GPIO_Init+0x2b8>)
 8001f90:	f7ff fe69 	bl	8001c66 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPI_EX_INT2_GPIO_Port, SPI_EX_INT2_Pin, LL_GPIO_PULL_NO);
 8001f94:	2200      	movs	r2, #0
 8001f96:	2101      	movs	r1, #1
 8001f98:	4810      	ldr	r0, [pc, #64]	; (8001fdc <MX_GPIO_Init+0x2c4>)
 8001f9a:	f7ff fe64 	bl	8001c66 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(SPI_IMU_INT1_GPIO_Port, SPI_IMU_INT1_Pin, LL_GPIO_MODE_INPUT);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2108      	movs	r1, #8
 8001fa2:	480b      	ldr	r0, [pc, #44]	; (8001fd0 <MX_GPIO_Init+0x2b8>)
 8001fa4:	f7ff fe22 	bl	8001bec <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPI_IMU_INT2_GPIO_Port, SPI_IMU_INT2_Pin, LL_GPIO_MODE_INPUT);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2110      	movs	r1, #16
 8001fac:	480e      	ldr	r0, [pc, #56]	; (8001fe8 <MX_GPIO_Init+0x2d0>)
 8001fae:	f7ff fe1d 	bl	8001bec <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPI_EX_INT1_GPIO_Port, SPI_EX_INT1_Pin, LL_GPIO_MODE_INPUT);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb8:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <MX_GPIO_Init+0x2b8>)
 8001fba:	f7ff fe17 	bl	8001bec <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPI_EX_INT2_GPIO_Port, SPI_EX_INT2_Pin, LL_GPIO_MODE_INPUT);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	4806      	ldr	r0, [pc, #24]	; (8001fdc <MX_GPIO_Init+0x2c4>)
 8001fc4:	f7ff fe12 	bl	8001bec <LL_GPIO_SetPinMode>

}
 8001fc8:	bf00      	nop
 8001fca:	3728      	adds	r7, #40	; 0x28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	48000800 	.word	0x48000800
 8001fd4:	48000400 	.word	0x48000400
 8001fd8:	48001c00 	.word	0x48001c00
 8001fdc:	48000c00 	.word	0x48000c00
 8001fe0:	000f0001 	.word	0x000f0001
 8001fe4:	000f0003 	.word	0x000f0003
 8001fe8:	48001000 	.word	0x48001000

08001fec <LL_EXTI_EnableIT_0_31>:
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <LL_EXTI_EnableIT_0_31+0x24>)
 8001ff6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001ffa:	4905      	ldr	r1, [pc, #20]	; (8002010 <LL_EXTI_EnableIT_0_31+0x24>)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	58000800 	.word	0x58000800

08002014 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800201c:	4b05      	ldr	r3, [pc, #20]	; (8002034 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4904      	ldr	r1, [pc, #16]	; (8002034 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]

}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	58000800 	.word	0x58000800

08002038 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800203e:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <ReadRtcSsrValue+0x3c>)
 8002040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002042:	b29b      	uxth	r3, r3
 8002044:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <ReadRtcSsrValue+0x3c>)
 8002048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204a:	b29b      	uxth	r3, r3
 800204c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800204e:	e005      	b.n	800205c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <ReadRtcSsrValue+0x3c>)
 8002056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002058:	b29b      	uxth	r3, r3
 800205a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d1f5      	bne.n	8002050 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002064:	683b      	ldr	r3, [r7, #0]
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40002800 	.word	0x40002800

08002078 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	460a      	mov	r2, r1
 8002082:	71fb      	strb	r3, [r7, #7]
 8002084:	4613      	mov	r3, r2
 8002086:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002088:	79ba      	ldrb	r2, [r7, #6]
 800208a:	491d      	ldr	r1, [pc, #116]	; (8002100 <LinkTimerAfter+0x88>)
 800208c:	4613      	mov	r3, r2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4413      	add	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	440b      	add	r3, r1
 8002096:	3315      	adds	r3, #21
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	2b06      	cmp	r3, #6
 80020a0:	d009      	beq.n	80020b6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80020a2:	7bfa      	ldrb	r2, [r7, #15]
 80020a4:	4916      	ldr	r1, [pc, #88]	; (8002100 <LinkTimerAfter+0x88>)
 80020a6:	4613      	mov	r3, r2
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	4413      	add	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	440b      	add	r3, r1
 80020b0:	3314      	adds	r3, #20
 80020b2:	79fa      	ldrb	r2, [r7, #7]
 80020b4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80020b6:	79fa      	ldrb	r2, [r7, #7]
 80020b8:	4911      	ldr	r1, [pc, #68]	; (8002100 <LinkTimerAfter+0x88>)
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	440b      	add	r3, r1
 80020c4:	3315      	adds	r3, #21
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80020ca:	79fa      	ldrb	r2, [r7, #7]
 80020cc:	490c      	ldr	r1, [pc, #48]	; (8002100 <LinkTimerAfter+0x88>)
 80020ce:	4613      	mov	r3, r2
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	4413      	add	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	440b      	add	r3, r1
 80020d8:	3314      	adds	r3, #20
 80020da:	79ba      	ldrb	r2, [r7, #6]
 80020dc:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80020de:	79ba      	ldrb	r2, [r7, #6]
 80020e0:	4907      	ldr	r1, [pc, #28]	; (8002100 <LinkTimerAfter+0x88>)
 80020e2:	4613      	mov	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	440b      	add	r3, r1
 80020ec:	3315      	adds	r3, #21
 80020ee:	79fa      	ldrb	r2, [r7, #7]
 80020f0:	701a      	strb	r2, [r3, #0]

  return;
 80020f2:	bf00      	nop
}
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000dec 	.word	0x20000dec

08002104 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	460a      	mov	r2, r1
 800210e:	71fb      	strb	r3, [r7, #7]
 8002110:	4613      	mov	r3, r2
 8002112:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002114:	4b29      	ldr	r3, [pc, #164]	; (80021bc <LinkTimerBefore+0xb8>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	79ba      	ldrb	r2, [r7, #6]
 800211c:	429a      	cmp	r2, r3
 800211e:	d032      	beq.n	8002186 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002120:	79ba      	ldrb	r2, [r7, #6]
 8002122:	4927      	ldr	r1, [pc, #156]	; (80021c0 <LinkTimerBefore+0xbc>)
 8002124:	4613      	mov	r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4413      	add	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	440b      	add	r3, r1
 800212e:	3314      	adds	r3, #20
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002134:	7bfa      	ldrb	r2, [r7, #15]
 8002136:	4922      	ldr	r1, [pc, #136]	; (80021c0 <LinkTimerBefore+0xbc>)
 8002138:	4613      	mov	r3, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4413      	add	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	440b      	add	r3, r1
 8002142:	3315      	adds	r3, #21
 8002144:	79fa      	ldrb	r2, [r7, #7]
 8002146:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002148:	79fa      	ldrb	r2, [r7, #7]
 800214a:	491d      	ldr	r1, [pc, #116]	; (80021c0 <LinkTimerBefore+0xbc>)
 800214c:	4613      	mov	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4413      	add	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	440b      	add	r3, r1
 8002156:	3315      	adds	r3, #21
 8002158:	79ba      	ldrb	r2, [r7, #6]
 800215a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800215c:	79fa      	ldrb	r2, [r7, #7]
 800215e:	4918      	ldr	r1, [pc, #96]	; (80021c0 <LinkTimerBefore+0xbc>)
 8002160:	4613      	mov	r3, r2
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	4413      	add	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	440b      	add	r3, r1
 800216a:	3314      	adds	r3, #20
 800216c:	7bfa      	ldrb	r2, [r7, #15]
 800216e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002170:	79ba      	ldrb	r2, [r7, #6]
 8002172:	4913      	ldr	r1, [pc, #76]	; (80021c0 <LinkTimerBefore+0xbc>)
 8002174:	4613      	mov	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4413      	add	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	440b      	add	r3, r1
 800217e:	3314      	adds	r3, #20
 8002180:	79fa      	ldrb	r2, [r7, #7]
 8002182:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002184:	e014      	b.n	80021b0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002186:	79fa      	ldrb	r2, [r7, #7]
 8002188:	490d      	ldr	r1, [pc, #52]	; (80021c0 <LinkTimerBefore+0xbc>)
 800218a:	4613      	mov	r3, r2
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	440b      	add	r3, r1
 8002194:	3315      	adds	r3, #21
 8002196:	79ba      	ldrb	r2, [r7, #6]
 8002198:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800219a:	79ba      	ldrb	r2, [r7, #6]
 800219c:	4908      	ldr	r1, [pc, #32]	; (80021c0 <LinkTimerBefore+0xbc>)
 800219e:	4613      	mov	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4413      	add	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	440b      	add	r3, r1
 80021a8:	3314      	adds	r3, #20
 80021aa:	79fa      	ldrb	r2, [r7, #7]
 80021ac:	701a      	strb	r2, [r3, #0]
  return;
 80021ae:	bf00      	nop
}
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	20000e7c 	.word	0x20000e7c
 80021c0:	20000dec 	.word	0x20000dec

080021c4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80021ce:	4b4e      	ldr	r3, [pc, #312]	; (8002308 <linkTimer+0x144>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b06      	cmp	r3, #6
 80021d6:	d118      	bne.n	800220a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80021d8:	4b4b      	ldr	r3, [pc, #300]	; (8002308 <linkTimer+0x144>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4b4b      	ldr	r3, [pc, #300]	; (800230c <linkTimer+0x148>)
 80021e0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80021e2:	4a49      	ldr	r2, [pc, #292]	; (8002308 <linkTimer+0x144>)
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80021e8:	79fa      	ldrb	r2, [r7, #7]
 80021ea:	4949      	ldr	r1, [pc, #292]	; (8002310 <linkTimer+0x14c>)
 80021ec:	4613      	mov	r3, r2
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4413      	add	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	440b      	add	r3, r1
 80021f6:	3315      	adds	r3, #21
 80021f8:	2206      	movs	r2, #6
 80021fa:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80021fc:	4b45      	ldr	r3, [pc, #276]	; (8002314 <linkTimer+0x150>)
 80021fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002202:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	81fb      	strh	r3, [r7, #14]
 8002208:	e078      	b.n	80022fc <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800220a:	f000 f909 	bl	8002420 <ReturnTimeElapsed>
 800220e:	4603      	mov	r3, r0
 8002210:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002212:	79fa      	ldrb	r2, [r7, #7]
 8002214:	493e      	ldr	r1, [pc, #248]	; (8002310 <linkTimer+0x14c>)
 8002216:	4613      	mov	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	4413      	add	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	440b      	add	r3, r1
 8002220:	3308      	adds	r3, #8
 8002222:	6819      	ldr	r1, [r3, #0]
 8002224:	89fb      	ldrh	r3, [r7, #14]
 8002226:	79fa      	ldrb	r2, [r7, #7]
 8002228:	4419      	add	r1, r3
 800222a:	4839      	ldr	r0, [pc, #228]	; (8002310 <linkTimer+0x14c>)
 800222c:	4613      	mov	r3, r2
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4413      	add	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4403      	add	r3, r0
 8002236:	3308      	adds	r3, #8
 8002238:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800223a:	79fa      	ldrb	r2, [r7, #7]
 800223c:	4934      	ldr	r1, [pc, #208]	; (8002310 <linkTimer+0x14c>)
 800223e:	4613      	mov	r3, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	440b      	add	r3, r1
 8002248:	3308      	adds	r3, #8
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800224e:	4b2e      	ldr	r3, [pc, #184]	; (8002308 <linkTimer+0x144>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	4619      	mov	r1, r3
 8002256:	4a2e      	ldr	r2, [pc, #184]	; (8002310 <linkTimer+0x14c>)
 8002258:	460b      	mov	r3, r1
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	440b      	add	r3, r1
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4413      	add	r3, r2
 8002262:	3308      	adds	r3, #8
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	429a      	cmp	r2, r3
 800226a:	d337      	bcc.n	80022dc <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800226c:	4b26      	ldr	r3, [pc, #152]	; (8002308 <linkTimer+0x144>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002272:	7b7a      	ldrb	r2, [r7, #13]
 8002274:	4926      	ldr	r1, [pc, #152]	; (8002310 <linkTimer+0x14c>)
 8002276:	4613      	mov	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4413      	add	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	440b      	add	r3, r1
 8002280:	3315      	adds	r3, #21
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002286:	e013      	b.n	80022b0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002288:	7b7a      	ldrb	r2, [r7, #13]
 800228a:	4921      	ldr	r1, [pc, #132]	; (8002310 <linkTimer+0x14c>)
 800228c:	4613      	mov	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4413      	add	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	440b      	add	r3, r1
 8002296:	3315      	adds	r3, #21
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800229c:	7b7a      	ldrb	r2, [r7, #13]
 800229e:	491c      	ldr	r1, [pc, #112]	; (8002310 <linkTimer+0x14c>)
 80022a0:	4613      	mov	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	440b      	add	r3, r1
 80022aa:	3315      	adds	r3, #21
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80022b0:	7b3b      	ldrb	r3, [r7, #12]
 80022b2:	2b06      	cmp	r3, #6
 80022b4:	d00b      	beq.n	80022ce <linkTimer+0x10a>
 80022b6:	7b3a      	ldrb	r2, [r7, #12]
 80022b8:	4915      	ldr	r1, [pc, #84]	; (8002310 <linkTimer+0x14c>)
 80022ba:	4613      	mov	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4413      	add	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	440b      	add	r3, r1
 80022c4:	3308      	adds	r3, #8
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d2dc      	bcs.n	8002288 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80022ce:	7b7a      	ldrb	r2, [r7, #13]
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	4611      	mov	r1, r2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fecf 	bl	8002078 <LinkTimerAfter>
 80022da:	e00f      	b.n	80022fc <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <linkTimer+0x144>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	4611      	mov	r1, r2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff ff0c 	bl	8002104 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <linkTimer+0x144>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <linkTimer+0x148>)
 80022f4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80022f6:	4a04      	ldr	r2, [pc, #16]	; (8002308 <linkTimer+0x144>)
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80022fc:	89fb      	ldrh	r3, [r7, #14]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000e7c 	.word	0x20000e7c
 800230c:	20000e7d 	.word	0x20000e7d
 8002310:	20000dec 	.word	0x20000dec
 8002314:	20000e80 	.word	0x20000e80

08002318 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	460a      	mov	r2, r1
 8002322:	71fb      	strb	r3, [r7, #7]
 8002324:	4613      	mov	r3, r2
 8002326:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002328:	4b39      	ldr	r3, [pc, #228]	; (8002410 <UnlinkTimer+0xf8>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	79fa      	ldrb	r2, [r7, #7]
 8002330:	429a      	cmp	r2, r3
 8002332:	d111      	bne.n	8002358 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002334:	4b36      	ldr	r3, [pc, #216]	; (8002410 <UnlinkTimer+0xf8>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4b36      	ldr	r3, [pc, #216]	; (8002414 <UnlinkTimer+0xfc>)
 800233c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800233e:	79fa      	ldrb	r2, [r7, #7]
 8002340:	4935      	ldr	r1, [pc, #212]	; (8002418 <UnlinkTimer+0x100>)
 8002342:	4613      	mov	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	4413      	add	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	440b      	add	r3, r1
 800234c:	3315      	adds	r3, #21
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4b2f      	ldr	r3, [pc, #188]	; (8002410 <UnlinkTimer+0xf8>)
 8002354:	701a      	strb	r2, [r3, #0]
 8002356:	e03e      	b.n	80023d6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002358:	79fa      	ldrb	r2, [r7, #7]
 800235a:	492f      	ldr	r1, [pc, #188]	; (8002418 <UnlinkTimer+0x100>)
 800235c:	4613      	mov	r3, r2
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	4413      	add	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	440b      	add	r3, r1
 8002366:	3314      	adds	r3, #20
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800236c:	79fa      	ldrb	r2, [r7, #7]
 800236e:	492a      	ldr	r1, [pc, #168]	; (8002418 <UnlinkTimer+0x100>)
 8002370:	4613      	mov	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	440b      	add	r3, r1
 800237a:	3315      	adds	r3, #21
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002380:	79f9      	ldrb	r1, [r7, #7]
 8002382:	7bfa      	ldrb	r2, [r7, #15]
 8002384:	4824      	ldr	r0, [pc, #144]	; (8002418 <UnlinkTimer+0x100>)
 8002386:	460b      	mov	r3, r1
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	440b      	add	r3, r1
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	4403      	add	r3, r0
 8002390:	3315      	adds	r3, #21
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	b2d8      	uxtb	r0, r3
 8002396:	4920      	ldr	r1, [pc, #128]	; (8002418 <UnlinkTimer+0x100>)
 8002398:	4613      	mov	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	440b      	add	r3, r1
 80023a2:	3315      	adds	r3, #21
 80023a4:	4602      	mov	r2, r0
 80023a6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80023a8:	7bbb      	ldrb	r3, [r7, #14]
 80023aa:	2b06      	cmp	r3, #6
 80023ac:	d013      	beq.n	80023d6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80023ae:	79f9      	ldrb	r1, [r7, #7]
 80023b0:	7bba      	ldrb	r2, [r7, #14]
 80023b2:	4819      	ldr	r0, [pc, #100]	; (8002418 <UnlinkTimer+0x100>)
 80023b4:	460b      	mov	r3, r1
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	440b      	add	r3, r1
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4403      	add	r3, r0
 80023be:	3314      	adds	r3, #20
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	b2d8      	uxtb	r0, r3
 80023c4:	4914      	ldr	r1, [pc, #80]	; (8002418 <UnlinkTimer+0x100>)
 80023c6:	4613      	mov	r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	4413      	add	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	440b      	add	r3, r1
 80023d0:	3314      	adds	r3, #20
 80023d2:	4602      	mov	r2, r0
 80023d4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80023d6:	79fa      	ldrb	r2, [r7, #7]
 80023d8:	490f      	ldr	r1, [pc, #60]	; (8002418 <UnlinkTimer+0x100>)
 80023da:	4613      	mov	r3, r2
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	4413      	add	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	440b      	add	r3, r1
 80023e4:	330c      	adds	r3, #12
 80023e6:	2201      	movs	r2, #1
 80023e8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <UnlinkTimer+0xf8>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b06      	cmp	r3, #6
 80023f2:	d107      	bne.n	8002404 <UnlinkTimer+0xec>
 80023f4:	79bb      	ldrb	r3, [r7, #6]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d104      	bne.n	8002404 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <UnlinkTimer+0x104>)
 80023fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002400:	601a      	str	r2, [r3, #0]
  }

  return;
 8002402:	bf00      	nop
 8002404:	bf00      	nop
}
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	20000e7c 	.word	0x20000e7c
 8002414:	20000e7d 	.word	0x20000e7d
 8002418:	20000dec 	.word	0x20000dec
 800241c:	20000e80 	.word	0x20000e80

08002420 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002426:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <ReturnTimeElapsed+0x70>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242e:	d026      	beq.n	800247e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002430:	f7ff fe02 	bl	8002038 <ReadRtcSsrValue>
 8002434:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002436:	4b16      	ldr	r3, [pc, #88]	; (8002490 <ReturnTimeElapsed+0x70>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	429a      	cmp	r2, r3
 800243e:	d805      	bhi.n	800244c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002440:	4b13      	ldr	r3, [pc, #76]	; (8002490 <ReturnTimeElapsed+0x70>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	607b      	str	r3, [r7, #4]
 800244a:	e00a      	b.n	8002462 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <ReturnTimeElapsed+0x74>)
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002458:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <ReturnTimeElapsed+0x70>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	4413      	add	r3, r2
 8002460:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002462:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <ReturnTimeElapsed+0x78>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	461a      	mov	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	fb02 f303 	mul.w	r3, r2, r3
 800246e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002470:	4b0a      	ldr	r3, [pc, #40]	; (800249c <ReturnTimeElapsed+0x7c>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	40d3      	lsrs	r3, r2
 800247a:	607b      	str	r3, [r7, #4]
 800247c:	e001      	b.n	8002482 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	b29b      	uxth	r3, r3
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000e80 	.word	0x20000e80
 8002494:	20000e88 	.word	0x20000e88
 8002498:	20000e86 	.word	0x20000e86
 800249c:	20000e85 	.word	0x20000e85

080024a0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d108      	bne.n	80024c2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80024b0:	f7ff fdc2 	bl	8002038 <ReadRtcSsrValue>
 80024b4:	4603      	mov	r3, r0
 80024b6:	4a21      	ldr	r2, [pc, #132]	; (800253c <RestartWakeupCounter+0x9c>)
 80024b8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80024ba:	2003      	movs	r0, #3
 80024bc:	f003 fcea 	bl	8005e94 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80024c0:	e039      	b.n	8002536 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80024c2:	88fb      	ldrh	r3, [r7, #6]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d803      	bhi.n	80024d0 <RestartWakeupCounter+0x30>
 80024c8:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <RestartWakeupCounter+0xa0>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d002      	beq.n	80024d6 <RestartWakeupCounter+0x36>
      Value -= 1;
 80024d0:	88fb      	ldrh	r3, [r7, #6]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80024d6:	bf00      	nop
 80024d8:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <RestartWakeupCounter+0xa4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f8      	beq.n	80024d8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80024e6:	4b17      	ldr	r3, [pc, #92]	; (8002544 <RestartWakeupCounter+0xa4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4b15      	ldr	r3, [pc, #84]	; (8002544 <RestartWakeupCounter+0xa4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80024f6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80024f8:	4b13      	ldr	r3, [pc, #76]	; (8002548 <RestartWakeupCounter+0xa8>)
 80024fa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80024fe:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002500:	2003      	movs	r0, #3
 8002502:	f003 fcd5 	bl	8005eb0 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002506:	4b11      	ldr	r3, [pc, #68]	; (800254c <RestartWakeupCounter+0xac>)
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	0c1b      	lsrs	r3, r3, #16
 800250c:	041b      	lsls	r3, r3, #16
 800250e:	88fa      	ldrh	r2, [r7, #6]
 8002510:	490e      	ldr	r1, [pc, #56]	; (800254c <RestartWakeupCounter+0xac>)
 8002512:	4313      	orrs	r3, r2
 8002514:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002516:	f7ff fd8f 	bl	8002038 <ReadRtcSsrValue>
 800251a:	4603      	mov	r3, r0
 800251c:	4a07      	ldr	r2, [pc, #28]	; (800253c <RestartWakeupCounter+0x9c>)
 800251e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <RestartWakeupCounter+0xa4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	4b07      	ldr	r3, [pc, #28]	; (8002544 <RestartWakeupCounter+0xa4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800252e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002530:	f3af 8000 	nop.w
  return ;
 8002534:	bf00      	nop
}
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000e80 	.word	0x20000e80
 8002540:	20000e85 	.word	0x20000e85
 8002544:	200010f4 	.word	0x200010f4
 8002548:	58000800 	.word	0x58000800
 800254c:	40002800 	.word	0x40002800

08002550 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002556:	4b45      	ldr	r3, [pc, #276]	; (800266c <RescheduleTimerList+0x11c>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002562:	d107      	bne.n	8002574 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002564:	bf00      	nop
 8002566:	4b42      	ldr	r3, [pc, #264]	; (8002670 <RescheduleTimerList+0x120>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f8      	bne.n	8002566 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002574:	4b3e      	ldr	r3, [pc, #248]	; (8002670 <RescheduleTimerList+0x120>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	4b3d      	ldr	r3, [pc, #244]	; (8002670 <RescheduleTimerList+0x120>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002582:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002584:	4b3b      	ldr	r3, [pc, #236]	; (8002674 <RescheduleTimerList+0x124>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	493a      	ldr	r1, [pc, #232]	; (8002678 <RescheduleTimerList+0x128>)
 800258e:	4613      	mov	r3, r2
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	4413      	add	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	440b      	add	r3, r1
 8002598:	3308      	adds	r3, #8
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800259e:	f7ff ff3f 	bl	8002420 <ReturnTimeElapsed>
 80025a2:	4603      	mov	r3, r0
 80025a4:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d205      	bcs.n	80025ba <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80025b2:	4b32      	ldr	r3, [pc, #200]	; (800267c <RescheduleTimerList+0x12c>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
 80025b8:	e04d      	b.n	8002656 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	4a30      	ldr	r2, [pc, #192]	; (8002680 <RescheduleTimerList+0x130>)
 80025be:	8812      	ldrh	r2, [r2, #0]
 80025c0:	b292      	uxth	r2, r2
 80025c2:	4413      	add	r3, r2
 80025c4:	461a      	mov	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d906      	bls.n	80025da <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80025cc:	4b2c      	ldr	r3, [pc, #176]	; (8002680 <RescheduleTimerList+0x130>)
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80025d2:	4b2a      	ldr	r3, [pc, #168]	; (800267c <RescheduleTimerList+0x12c>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]
 80025d8:	e03d      	b.n	8002656 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	b29a      	uxth	r2, r3
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80025e4:	4b25      	ldr	r3, [pc, #148]	; (800267c <RescheduleTimerList+0x12c>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80025ea:	e034      	b.n	8002656 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	4922      	ldr	r1, [pc, #136]	; (8002678 <RescheduleTimerList+0x128>)
 80025f0:	4613      	mov	r3, r2
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4413      	add	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	440b      	add	r3, r1
 80025fa:	3308      	adds	r3, #8
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	429a      	cmp	r2, r3
 8002602:	d20a      	bcs.n	800261a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002604:	7bfa      	ldrb	r2, [r7, #15]
 8002606:	491c      	ldr	r1, [pc, #112]	; (8002678 <RescheduleTimerList+0x128>)
 8002608:	4613      	mov	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4413      	add	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	440b      	add	r3, r1
 8002612:	3308      	adds	r3, #8
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	e013      	b.n	8002642 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800261a:	7bfa      	ldrb	r2, [r7, #15]
 800261c:	4916      	ldr	r1, [pc, #88]	; (8002678 <RescheduleTimerList+0x128>)
 800261e:	4613      	mov	r3, r2
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4413      	add	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	440b      	add	r3, r1
 8002628:	3308      	adds	r3, #8
 800262a:	6819      	ldr	r1, [r3, #0]
 800262c:	88fb      	ldrh	r3, [r7, #6]
 800262e:	7bfa      	ldrb	r2, [r7, #15]
 8002630:	1ac9      	subs	r1, r1, r3
 8002632:	4811      	ldr	r0, [pc, #68]	; (8002678 <RescheduleTimerList+0x128>)
 8002634:	4613      	mov	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4413      	add	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4403      	add	r3, r0
 800263e:	3308      	adds	r3, #8
 8002640:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8002642:	7bfa      	ldrb	r2, [r7, #15]
 8002644:	490c      	ldr	r1, [pc, #48]	; (8002678 <RescheduleTimerList+0x128>)
 8002646:	4613      	mov	r3, r2
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	4413      	add	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	440b      	add	r3, r1
 8002650:	3315      	adds	r3, #21
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	2b06      	cmp	r3, #6
 800265a:	d1c7      	bne.n	80025ec <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800265c:	89bb      	ldrh	r3, [r7, #12]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff ff1e 	bl	80024a0 <RestartWakeupCounter>

  return ;
 8002664:	bf00      	nop
}
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40002800 	.word	0x40002800
 8002670:	200010f4 	.word	0x200010f4
 8002674:	20000e7c 	.word	0x20000e7c
 8002678:	20000dec 	.word	0x20000dec
 800267c:	20000e84 	.word	0x20000e84
 8002680:	20000e8a 	.word	0x20000e8a

08002684 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800268a:	f3ef 8310 	mrs	r3, PRIMASK
 800268e:	617b      	str	r3, [r7, #20]
  return(result);
 8002690:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002694:	b672      	cpsid	i
}
 8002696:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002698:	4b59      	ldr	r3, [pc, #356]	; (8002800 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	22ca      	movs	r2, #202	; 0xca
 800269e:	625a      	str	r2, [r3, #36]	; 0x24
 80026a0:	4b57      	ldr	r3, [pc, #348]	; (8002800 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2253      	movs	r2, #83	; 0x53
 80026a6:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80026a8:	4b55      	ldr	r3, [pc, #340]	; (8002800 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	4b54      	ldr	r3, [pc, #336]	; (8002800 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b6:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80026b8:	4b52      	ldr	r3, [pc, #328]	; (8002804 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80026c0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80026c4:	4950      	ldr	r1, [pc, #320]	; (8002808 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80026c6:	4613      	mov	r3, r2
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	4413      	add	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	440b      	add	r3, r1
 80026d0:	330c      	adds	r3, #12
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d16e      	bne.n	80027b8 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80026da:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80026de:	494a      	ldr	r1, [pc, #296]	; (8002808 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80026e0:	4613      	mov	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	440b      	add	r3, r1
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80026ee:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80026f2:	4945      	ldr	r1, [pc, #276]	; (8002808 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80026f4:	4613      	mov	r3, r2
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4413      	add	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	440b      	add	r3, r1
 80026fe:	3310      	adds	r3, #16
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002704:	4b41      	ldr	r3, [pc, #260]	; (800280c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d04c      	beq.n	80027a8 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800270e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002712:	493d      	ldr	r1, [pc, #244]	; (8002808 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002714:	4613      	mov	r3, r2
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4413      	add	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	440b      	add	r3, r1
 800271e:	330d      	adds	r3, #13
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b01      	cmp	r3, #1
 8002726:	d124      	bne.n	8002772 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002728:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800272c:	2101      	movs	r1, #1
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fdf2 	bl	8002318 <UnlinkTimer>
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	f383 8810 	msr	PRIMASK, r3
}
 800273e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002740:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002744:	4930      	ldr	r1, [pc, #192]	; (8002808 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002746:	4613      	mov	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4413      	add	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	440b      	add	r3, r1
 8002750:	3304      	adds	r3, #4
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002758:	4611      	mov	r1, r2
 800275a:	4618      	mov	r0, r3
 800275c:	f000 fa32 	bl	8002bc4 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002760:	4b27      	ldr	r3, [pc, #156]	; (8002800 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	22ca      	movs	r2, #202	; 0xca
 8002766:	625a      	str	r2, [r3, #36]	; 0x24
 8002768:	4b25      	ldr	r3, [pc, #148]	; (8002800 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2253      	movs	r2, #83	; 0x53
 800276e:	625a      	str	r2, [r3, #36]	; 0x24
 8002770:	e012      	b.n	8002798 <HW_TS_RTC_Wakeup_Handler+0x114>
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f383 8810 	msr	PRIMASK, r3
}
 800277c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800277e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002782:	4618      	mov	r0, r3
 8002784:	f000 f99a 	bl	8002abc <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002788:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	22ca      	movs	r2, #202	; 0xca
 800278e:	625a      	str	r2, [r3, #36]	; 0x24
 8002790:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2253      	movs	r2, #83	; 0x53
 8002796:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002798:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	4619      	mov	r1, r3
 80027a0:	69b8      	ldr	r0, [r7, #24]
 80027a2:	f000 fa95 	bl	8002cd0 <HW_TS_RTC_Int_AppNot>
 80027a6:	e022      	b.n	80027ee <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80027a8:	f7ff fed2 	bl	8002550 <RescheduleTimerList>
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f383 8810 	msr	PRIMASK, r3
}
 80027b6:	e01a      	b.n	80027ee <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80027b8:	bf00      	nop
 80027ba:	4b11      	ldr	r3, [pc, #68]	; (8002800 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f8      	beq.n	80027ba <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80027c8:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80027d8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80027da:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80027dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f383 8810 	msr	PRIMASK, r3
}
 80027ec:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80027ee:	4b04      	ldr	r3, [pc, #16]	; (8002800 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	22ff      	movs	r2, #255	; 0xff
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80027f6:	bf00      	nop
}
 80027f8:	3728      	adds	r7, #40	; 0x28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	200010f4 	.word	0x200010f4
 8002804:	20000e7c 	.word	0x20000e7c
 8002808:	20000dec 	.word	0x20000dec
 800280c:	20000e84 	.word	0x20000e84
 8002810:	58000800 	.word	0x58000800

08002814 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	6039      	str	r1, [r7, #0]
 800281e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002820:	4b5e      	ldr	r3, [pc, #376]	; (800299c <HW_TS_Init+0x188>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	22ca      	movs	r2, #202	; 0xca
 8002826:	625a      	str	r2, [r3, #36]	; 0x24
 8002828:	4b5c      	ldr	r3, [pc, #368]	; (800299c <HW_TS_Init+0x188>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2253      	movs	r2, #83	; 0x53
 800282e:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002830:	4b5b      	ldr	r3, [pc, #364]	; (80029a0 <HW_TS_Init+0x18c>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	4a5a      	ldr	r2, [pc, #360]	; (80029a0 <HW_TS_Init+0x18c>)
 8002836:	f043 0320 	orr.w	r3, r3, #32
 800283a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800283c:	4b58      	ldr	r3, [pc, #352]	; (80029a0 <HW_TS_Init+0x18c>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	b2db      	uxtb	r3, r3
 8002848:	f1c3 0304 	rsb	r3, r3, #4
 800284c:	b2da      	uxtb	r2, r3
 800284e:	4b55      	ldr	r3, [pc, #340]	; (80029a4 <HW_TS_Init+0x190>)
 8002850:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002852:	4b53      	ldr	r3, [pc, #332]	; (80029a0 <HW_TS_Init+0x18c>)
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800285a:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800285e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	fa92 f2a2 	rbit	r2, r2
 8002866:	60fa      	str	r2, [r7, #12]
  return result;
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	617a      	str	r2, [r7, #20]
  if (value == 0U)
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	2a00      	cmp	r2, #0
 8002870:	d101      	bne.n	8002876 <HW_TS_Init+0x62>
    return 32U;
 8002872:	2220      	movs	r2, #32
 8002874:	e003      	b.n	800287e <HW_TS_Init+0x6a>
  return __builtin_clz(value);
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	fab2 f282 	clz	r2, r2
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	40d3      	lsrs	r3, r2
 8002880:	b2db      	uxtb	r3, r3
 8002882:	3301      	adds	r3, #1
 8002884:	b2da      	uxtb	r2, r3
 8002886:	4b48      	ldr	r3, [pc, #288]	; (80029a8 <HW_TS_Init+0x194>)
 8002888:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800288a:	4b45      	ldr	r3, [pc, #276]	; (80029a0 <HW_TS_Init+0x18c>)
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	b29b      	uxth	r3, r3
 8002890:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002894:	b29b      	uxth	r3, r3
 8002896:	3301      	adds	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	4b44      	ldr	r3, [pc, #272]	; (80029ac <HW_TS_Init+0x198>)
 800289c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800289e:	4b43      	ldr	r3, [pc, #268]	; (80029ac <HW_TS_Init+0x198>)
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	4a40      	ldr	r2, [pc, #256]	; (80029a8 <HW_TS_Init+0x194>)
 80028a6:	7812      	ldrb	r2, [r2, #0]
 80028a8:	fb02 f303 	mul.w	r3, r2, r3
 80028ac:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80028b0:	4a3c      	ldr	r2, [pc, #240]	; (80029a4 <HW_TS_Init+0x190>)
 80028b2:	7812      	ldrb	r2, [r2, #0]
 80028b4:	40d3      	lsrs	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80028be:	4293      	cmp	r3, r2
 80028c0:	d904      	bls.n	80028cc <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80028c2:	4b3b      	ldr	r3, [pc, #236]	; (80029b0 <HW_TS_Init+0x19c>)
 80028c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028c8:	801a      	strh	r2, [r3, #0]
 80028ca:	e003      	b.n	80028d4 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	4b37      	ldr	r3, [pc, #220]	; (80029b0 <HW_TS_Init+0x19c>)
 80028d2:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80028d4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80028d8:	f7ff fb9c 	bl	8002014 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80028dc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80028e0:	f7ff fb84 	bl	8001fec <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d13d      	bne.n	8002966 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80028ea:	4b32      	ldr	r3, [pc, #200]	; (80029b4 <HW_TS_Init+0x1a0>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80028f0:	4b31      	ldr	r3, [pc, #196]	; (80029b8 <HW_TS_Init+0x1a4>)
 80028f2:	f04f 32ff 	mov.w	r2, #4294967295
 80028f6:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80028f8:	2300      	movs	r3, #0
 80028fa:	77fb      	strb	r3, [r7, #31]
 80028fc:	e00c      	b.n	8002918 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80028fe:	7ffa      	ldrb	r2, [r7, #31]
 8002900:	492e      	ldr	r1, [pc, #184]	; (80029bc <HW_TS_Init+0x1a8>)
 8002902:	4613      	mov	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4413      	add	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	440b      	add	r3, r1
 800290c:	330c      	adds	r3, #12
 800290e:	2200      	movs	r2, #0
 8002910:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002912:	7ffb      	ldrb	r3, [r7, #31]
 8002914:	3301      	adds	r3, #1
 8002916:	77fb      	strb	r3, [r7, #31]
 8002918:	7ffb      	ldrb	r3, [r7, #31]
 800291a:	2b05      	cmp	r3, #5
 800291c:	d9ef      	bls.n	80028fe <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800291e:	4b28      	ldr	r3, [pc, #160]	; (80029c0 <HW_TS_Init+0x1ac>)
 8002920:	2206      	movs	r2, #6
 8002922:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002924:	4b1d      	ldr	r3, [pc, #116]	; (800299c <HW_TS_Init+0x188>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	4b1c      	ldr	r3, [pc, #112]	; (800299c <HW_TS_Init+0x188>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002932:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002934:	4b19      	ldr	r3, [pc, #100]	; (800299c <HW_TS_Init+0x188>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	b2da      	uxtb	r2, r3
 800293c:	4b17      	ldr	r3, [pc, #92]	; (800299c <HW_TS_Init+0x188>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002944:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002946:	4b1f      	ldr	r3, [pc, #124]	; (80029c4 <HW_TS_Init+0x1b0>)
 8002948:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800294c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800294e:	2003      	movs	r0, #3
 8002950:	f003 faae 	bl	8005eb0 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002954:	4b11      	ldr	r3, [pc, #68]	; (800299c <HW_TS_Init+0x188>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	4b10      	ldr	r3, [pc, #64]	; (800299c <HW_TS_Init+0x188>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	e009      	b.n	800297a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002966:	4b0d      	ldr	r3, [pc, #52]	; (800299c <HW_TS_Init+0x188>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002974:	2003      	movs	r0, #3
 8002976:	f003 fa8d 	bl	8005e94 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800297a:	4b08      	ldr	r3, [pc, #32]	; (800299c <HW_TS_Init+0x188>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	22ff      	movs	r2, #255	; 0xff
 8002980:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002982:	2200      	movs	r2, #0
 8002984:	2106      	movs	r1, #6
 8002986:	2003      	movs	r0, #3
 8002988:	f003 fa4e 	bl	8005e28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800298c:	2003      	movs	r0, #3
 800298e:	f003 fa65 	bl	8005e5c <HAL_NVIC_EnableIRQ>

  return;
 8002992:	bf00      	nop
}
 8002994:	3720      	adds	r7, #32
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	200010f4 	.word	0x200010f4
 80029a0:	40002800 	.word	0x40002800
 80029a4:	20000e85 	.word	0x20000e85
 80029a8:	20000e86 	.word	0x20000e86
 80029ac:	20000e88 	.word	0x20000e88
 80029b0:	20000e8a 	.word	0x20000e8a
 80029b4:	20000e84 	.word	0x20000e84
 80029b8:	20000e80 	.word	0x20000e80
 80029bc:	20000dec 	.word	0x20000dec
 80029c0:	20000e7c 	.word	0x20000e7c
 80029c4:	58000800 	.word	0x58000800

080029c8 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b08b      	sub	sp, #44	; 0x2c
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	4613      	mov	r3, r2
 80029d6:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029de:	f3ef 8310 	mrs	r3, PRIMASK
 80029e2:	61fb      	str	r3, [r7, #28]
  return(result);
 80029e4:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80029e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80029e8:	b672      	cpsid	i
}
 80029ea:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80029ec:	e004      	b.n	80029f8 <HW_TS_Create+0x30>
  {
    loop++;
 80029ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80029f2:	3301      	adds	r3, #1
 80029f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80029f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80029fc:	2b05      	cmp	r3, #5
 80029fe:	d80c      	bhi.n	8002a1a <HW_TS_Create+0x52>
 8002a00:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002a04:	492c      	ldr	r1, [pc, #176]	; (8002ab8 <HW_TS_Create+0xf0>)
 8002a06:	4613      	mov	r3, r2
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	4413      	add	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	440b      	add	r3, r1
 8002a10:	330c      	adds	r3, #12
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1e9      	bne.n	80029ee <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002a1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002a1e:	2b06      	cmp	r3, #6
 8002a20:	d038      	beq.n	8002a94 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8002a22:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002a26:	4924      	ldr	r1, [pc, #144]	; (8002ab8 <HW_TS_Create+0xf0>)
 8002a28:	4613      	mov	r3, r2
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4413      	add	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	440b      	add	r3, r1
 8002a32:	330c      	adds	r3, #12
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	f383 8810 	msr	PRIMASK, r3
}
 8002a42:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8002a44:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002a48:	491b      	ldr	r1, [pc, #108]	; (8002ab8 <HW_TS_Create+0xf0>)
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4413      	add	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	440b      	add	r3, r1
 8002a54:	3310      	adds	r3, #16
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8002a5a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002a5e:	4916      	ldr	r1, [pc, #88]	; (8002ab8 <HW_TS_Create+0xf0>)
 8002a60:	4613      	mov	r3, r2
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4413      	add	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	440b      	add	r3, r1
 8002a6a:	330d      	adds	r3, #13
 8002a6c:	79fa      	ldrb	r2, [r7, #7]
 8002a6e:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002a70:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002a74:	4910      	ldr	r1, [pc, #64]	; (8002ab8 <HW_TS_Create+0xf0>)
 8002a76:	4613      	mov	r3, r2
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	440b      	add	r3, r1
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002a8a:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002a92:	e008      	b.n	8002aa6 <HW_TS_Create+0xde>
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f383 8810 	msr	PRIMASK, r3
}
 8002a9e:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8002aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	372c      	adds	r7, #44	; 0x2c
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	20000dec 	.word	0x20000dec

08002abc <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8002aca:	60fb      	str	r3, [r7, #12]
  return(result);
 8002acc:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002ace:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ad0:	b672      	cpsid	i
}
 8002ad2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002ad4:	2003      	movs	r0, #3
 8002ad6:	f003 f9cf 	bl	8005e78 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002ada:	4b34      	ldr	r3, [pc, #208]	; (8002bac <HW_TS_Stop+0xf0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	22ca      	movs	r2, #202	; 0xca
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24
 8002ae2:	4b32      	ldr	r3, [pc, #200]	; (8002bac <HW_TS_Stop+0xf0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2253      	movs	r2, #83	; 0x53
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002aea:	79fa      	ldrb	r2, [r7, #7]
 8002aec:	4930      	ldr	r1, [pc, #192]	; (8002bb0 <HW_TS_Stop+0xf4>)
 8002aee:	4613      	mov	r3, r2
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	4413      	add	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	440b      	add	r3, r1
 8002af8:	330c      	adds	r3, #12
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d142      	bne.n	8002b88 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	2100      	movs	r1, #0
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff fc06 	bl	8002318 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002b0c:	4b29      	ldr	r3, [pc, #164]	; (8002bb4 <HW_TS_Stop+0xf8>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002b12:	7cfb      	ldrb	r3, [r7, #19]
 8002b14:	2b06      	cmp	r3, #6
 8002b16:	d12f      	bne.n	8002b78 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002b18:	4b27      	ldr	r3, [pc, #156]	; (8002bb8 <HW_TS_Stop+0xfc>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b24:	d107      	bne.n	8002b36 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002b26:	bf00      	nop
 8002b28:	4b20      	ldr	r3, [pc, #128]	; (8002bac <HW_TS_Stop+0xf0>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f8      	bne.n	8002b28 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002b36:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <HW_TS_Stop+0xf0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <HW_TS_Stop+0xf0>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b44:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002b46:	bf00      	nop
 8002b48:	4b18      	ldr	r3, [pc, #96]	; (8002bac <HW_TS_Stop+0xf0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f8      	beq.n	8002b48 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002b56:	4b15      	ldr	r3, [pc, #84]	; (8002bac <HW_TS_Stop+0xf0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	4b13      	ldr	r3, [pc, #76]	; (8002bac <HW_TS_Stop+0xf0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002b66:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002b68:	4b14      	ldr	r3, [pc, #80]	; (8002bbc <HW_TS_Stop+0x100>)
 8002b6a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002b6e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002b70:	2003      	movs	r0, #3
 8002b72:	f003 f99d 	bl	8005eb0 <HAL_NVIC_ClearPendingIRQ>
 8002b76:	e007      	b.n	8002b88 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002b78:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <HW_TS_Stop+0x104>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	7cfa      	ldrb	r2, [r7, #19]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d001      	beq.n	8002b88 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002b84:	f7ff fce4 	bl	8002550 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002b88:	4b08      	ldr	r3, [pc, #32]	; (8002bac <HW_TS_Stop+0xf0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	22ff      	movs	r2, #255	; 0xff
 8002b8e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002b90:	2003      	movs	r0, #3
 8002b92:	f003 f963 	bl	8005e5c <HAL_NVIC_EnableIRQ>
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f383 8810 	msr	PRIMASK, r3
}
 8002ba0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002ba2:	bf00      	nop
}
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	200010f4 	.word	0x200010f4
 8002bb0:	20000dec 	.word	0x20000dec
 8002bb4:	20000e7c 	.word	0x20000e7c
 8002bb8:	40002800 	.word	0x40002800
 8002bbc:	58000800 	.word	0x58000800
 8002bc0:	20000e7d 	.word	0x20000e7d

08002bc4 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	6039      	str	r1, [r7, #0]
 8002bce:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002bd0:	79fa      	ldrb	r2, [r7, #7]
 8002bd2:	493b      	ldr	r1, [pc, #236]	; (8002cc0 <HW_TS_Start+0xfc>)
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4413      	add	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	440b      	add	r3, r1
 8002bde:	330c      	adds	r3, #12
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d103      	bne.n	8002bf0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002be8:	79fb      	ldrb	r3, [r7, #7]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff ff66 	bl	8002abc <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8002bf4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002bf8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bfa:	b672      	cpsid	i
}
 8002bfc:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002bfe:	2003      	movs	r0, #3
 8002c00:	f003 f93a 	bl	8005e78 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002c04:	4b2f      	ldr	r3, [pc, #188]	; (8002cc4 <HW_TS_Start+0x100>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	22ca      	movs	r2, #202	; 0xca
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24
 8002c0c:	4b2d      	ldr	r3, [pc, #180]	; (8002cc4 <HW_TS_Start+0x100>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2253      	movs	r2, #83	; 0x53
 8002c12:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002c14:	79fa      	ldrb	r2, [r7, #7]
 8002c16:	492a      	ldr	r1, [pc, #168]	; (8002cc0 <HW_TS_Start+0xfc>)
 8002c18:	4613      	mov	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4413      	add	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	440b      	add	r3, r1
 8002c22:	330c      	adds	r3, #12
 8002c24:	2202      	movs	r2, #2
 8002c26:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002c28:	79fa      	ldrb	r2, [r7, #7]
 8002c2a:	4925      	ldr	r1, [pc, #148]	; (8002cc0 <HW_TS_Start+0xfc>)
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	4413      	add	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	440b      	add	r3, r1
 8002c36:	3308      	adds	r3, #8
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002c3c:	79fa      	ldrb	r2, [r7, #7]
 8002c3e:	4920      	ldr	r1, [pc, #128]	; (8002cc0 <HW_TS_Start+0xfc>)
 8002c40:	4613      	mov	r3, r2
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	4413      	add	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	440b      	add	r3, r1
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fab6 	bl	80021c4 <linkTimer>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002c5c:	4b1a      	ldr	r3, [pc, #104]	; (8002cc8 <HW_TS_Start+0x104>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002c62:	4b1a      	ldr	r3, [pc, #104]	; (8002ccc <HW_TS_Start+0x108>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	7c7a      	ldrb	r2, [r7, #17]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d002      	beq.n	8002c74 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002c6e:	f7ff fc6f 	bl	8002550 <RescheduleTimerList>
 8002c72:	e013      	b.n	8002c9c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002c74:	79fa      	ldrb	r2, [r7, #7]
 8002c76:	4912      	ldr	r1, [pc, #72]	; (8002cc0 <HW_TS_Start+0xfc>)
 8002c78:	4613      	mov	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	4413      	add	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	440b      	add	r3, r1
 8002c82:	3308      	adds	r3, #8
 8002c84:	6819      	ldr	r1, [r3, #0]
 8002c86:	8a7b      	ldrh	r3, [r7, #18]
 8002c88:	79fa      	ldrb	r2, [r7, #7]
 8002c8a:	1ac9      	subs	r1, r1, r3
 8002c8c:	480c      	ldr	r0, [pc, #48]	; (8002cc0 <HW_TS_Start+0xfc>)
 8002c8e:	4613      	mov	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4413      	add	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	4403      	add	r3, r0
 8002c98:	3308      	adds	r3, #8
 8002c9a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002c9c:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <HW_TS_Start+0x100>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	22ff      	movs	r2, #255	; 0xff
 8002ca2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002ca4:	2003      	movs	r0, #3
 8002ca6:	f003 f8d9 	bl	8005e5c <HAL_NVIC_EnableIRQ>
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f383 8810 	msr	PRIMASK, r3
}
 8002cb4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002cb6:	bf00      	nop
}
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000dec 	.word	0x20000dec
 8002cc4:	200010f4 	.word	0x200010f4
 8002cc8:	20000e7c 	.word	0x20000e7c
 8002ccc:	20000e7d 	.word	0x20000e7d

08002cd0 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	607a      	str	r2, [r7, #4]
 8002cdc:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4798      	blx	r3

  return;
 8002ce2:	bf00      	nop
}
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b085      	sub	sp, #20
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cf8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <MX_IPCC_Init+0x20>)
 8002d22:	4a07      	ldr	r2, [pc, #28]	; (8002d40 <MX_IPCC_Init+0x24>)
 8002d24:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002d26:	4805      	ldr	r0, [pc, #20]	; (8002d3c <MX_IPCC_Init+0x20>)
 8002d28:	f003 fd96 	bl	8006858 <HAL_IPCC_Init>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002d32:	f000 fa63 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000e8c 	.word	0x20000e8c
 8002d40:	58000c00 	.word	0x58000c00

08002d44 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a0d      	ldr	r2, [pc, #52]	; (8002d88 <HAL_IPCC_MspInit+0x44>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d113      	bne.n	8002d7e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002d56:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002d5a:	f7ff ffc6 	bl	8002cea <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 5, 0);
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2105      	movs	r1, #5
 8002d62:	202c      	movs	r0, #44	; 0x2c
 8002d64:	f003 f860 	bl	8005e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002d68:	202c      	movs	r0, #44	; 0x2c
 8002d6a:	f003 f877 	bl	8005e5c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 5, 0);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2105      	movs	r1, #5
 8002d72:	202d      	movs	r0, #45	; 0x2d
 8002d74:	f003 f858 	bl	8005e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002d78:	202d      	movs	r0, #45	; 0x2d
 8002d7a:	f003 f86f 	bl	8005e5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	58000c00 	.word	0x58000c00

08002d8c <LL_AHB2_GRP1_EnableClock>:
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4013      	ands	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002db0:	68fb      	ldr	r3, [r7, #12]
}
 8002db2:	bf00      	nop
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b085      	sub	sp, #20
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002dcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4013      	ands	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002de2:	68fb      	ldr	r3, [r7, #12]
}
 8002de4:	bf00      	nop
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4013      	ands	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e14:	68fb      	ldr	r3, [r7, #12]
}
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <MX_LPTIM1_Init>:
LPTIM_HandleTypeDef hlptim1;
LPTIM_HandleTypeDef hlptim2;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8002e28:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <MX_LPTIM1_Init+0x60>)
 8002e2a:	4a17      	ldr	r2, [pc, #92]	; (8002e88 <MX_LPTIM1_Init+0x64>)
 8002e2c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_ULPTIM;
 8002e2e:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <MX_LPTIM1_Init+0x60>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8002e34:	4b13      	ldr	r3, [pc, #76]	; (8002e84 <MX_LPTIM1_Init+0x60>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING_FALLING;
 8002e3a:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <MX_LPTIM1_Init+0x60>)
 8002e3c:	2204      	movs	r2, #4
 8002e3e:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8002e40:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <MX_LPTIM1_Init+0x60>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002e46:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <MX_LPTIM1_Init+0x60>)
 8002e48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e4c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002e4e:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <MX_LPTIM1_Init+0x60>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002e54:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <MX_LPTIM1_Init+0x60>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <MX_LPTIM1_Init+0x60>)
 8002e5c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002e60:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002e62:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <MX_LPTIM1_Init+0x60>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002e68:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <MX_LPTIM1_Init+0x60>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8002e6e:	4805      	ldr	r0, [pc, #20]	; (8002e84 <MX_LPTIM1_Init+0x60>)
 8002e70:	f003 fd78 	bl	8006964 <HAL_LPTIM_Init>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 8002e7a:	f000 f9bf 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000ec8 	.word	0x20000ec8
 8002e88:	40007c00 	.word	0x40007c00

08002e8c <MX_LPTIM2_Init>:
/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 8002e90:	4b16      	ldr	r3, [pc, #88]	; (8002eec <MX_LPTIM2_Init+0x60>)
 8002e92:	4a17      	ldr	r2, [pc, #92]	; (8002ef0 <MX_LPTIM2_Init+0x64>)
 8002e94:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_ULPTIM;
 8002e96:	4b15      	ldr	r3, [pc, #84]	; (8002eec <MX_LPTIM2_Init+0x60>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8002e9c:	4b13      	ldr	r3, [pc, #76]	; (8002eec <MX_LPTIM2_Init+0x60>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	609a      	str	r2, [r3, #8]
  hlptim2.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING_FALLING;
 8002ea2:	4b12      	ldr	r3, [pc, #72]	; (8002eec <MX_LPTIM2_Init+0x60>)
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	60da      	str	r2, [r3, #12]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8002ea8:	4b10      	ldr	r3, [pc, #64]	; (8002eec <MX_LPTIM2_Init+0x60>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	611a      	str	r2, [r3, #16]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002eae:	4b0f      	ldr	r3, [pc, #60]	; (8002eec <MX_LPTIM2_Init+0x60>)
 8002eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002eb4:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002eb6:	4b0d      	ldr	r3, [pc, #52]	; (8002eec <MX_LPTIM2_Init+0x60>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <MX_LPTIM2_Init+0x60>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8002ec2:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <MX_LPTIM2_Init+0x60>)
 8002ec4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002ec8:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002eca:	4b08      	ldr	r3, [pc, #32]	; (8002eec <MX_LPTIM2_Init+0x60>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <MX_LPTIM2_Init+0x60>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8002ed6:	4805      	ldr	r0, [pc, #20]	; (8002eec <MX_LPTIM2_Init+0x60>)
 8002ed8:	f003 fd44 	bl	8006964 <HAL_LPTIM_Init>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <MX_LPTIM2_Init+0x5a>
  {
    Error_Handler();
 8002ee2:	f000 f98b 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20000f00 	.word	0x20000f00
 8002ef0:	40009400 	.word	0x40009400

08002ef4 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b09c      	sub	sp, #112	; 0x70
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002efc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	605a      	str	r2, [r3, #4]
 8002f06:	609a      	str	r2, [r3, #8]
 8002f08:	60da      	str	r2, [r3, #12]
 8002f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f0c:	f107 030c 	add.w	r3, r7, #12
 8002f10:	2250      	movs	r2, #80	; 0x50
 8002f12:	2100      	movs	r1, #0
 8002f14:	4618      	mov	r0, r3
 8002f16:	f012 f8b3 	bl	8015080 <memset>
  if(lptimHandle->Instance==LPTIM1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a2c      	ldr	r2, [pc, #176]	; (8002fd0 <HAL_LPTIM_MspInit+0xdc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d126      	bne.n	8002f72 <HAL_LPTIM_MspInit+0x7e>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002f24:	2310      	movs	r3, #16
 8002f26:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 8002f28:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8002f2c:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f2e:	f107 030c 	add.w	r3, r7, #12
 8002f32:	4618      	mov	r0, r3
 8002f34:	f005 fb80 	bl	8008638 <HAL_RCCEx_PeriphCLKConfig>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 8002f3e:	f000 f95d 	bl	80031fc <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002f42:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002f46:	f7ff ff3a 	bl	8002dbe <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f4a:	2004      	movs	r0, #4
 8002f4c:	f7ff ff1e 	bl	8002d8c <LL_AHB2_GRP1_EnableClock>
    /**LPTIM1 GPIO Configuration
    PC0     ------> LPTIM1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f50:	2301      	movs	r3, #1
 8002f52:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f54:	2302      	movs	r3, #2
 8002f56:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8002f60:	2301      	movs	r3, #1
 8002f62:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f64:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f68:	4619      	mov	r1, r3
 8002f6a:	481a      	ldr	r0, [pc, #104]	; (8002fd4 <HAL_LPTIM_MspInit+0xe0>)
 8002f6c:	f003 fae0 	bl	8006530 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }
}
 8002f70:	e029      	b.n	8002fc6 <HAL_LPTIM_MspInit+0xd2>
  else if(lptimHandle->Instance==LPTIM2)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a18      	ldr	r2, [pc, #96]	; (8002fd8 <HAL_LPTIM_MspInit+0xe4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d124      	bne.n	8002fc6 <HAL_LPTIM_MspInit+0xd2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 8002f7c:	2320      	movs	r3, #32
 8002f7e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK;
 8002f80:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8002f84:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f86:	f107 030c 	add.w	r3, r7, #12
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f005 fb54 	bl	8008638 <HAL_RCCEx_PeriphCLKConfig>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_LPTIM_MspInit+0xa6>
      Error_Handler();
 8002f96:	f000 f931 	bl	80031fc <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8002f9a:	2020      	movs	r0, #32
 8002f9c:	f7ff ff28 	bl	8002df0 <LL_APB1_GRP2_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa0:	2002      	movs	r0, #2
 8002fa2:	f7ff fef3 	bl	8002d8c <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002faa:	2302      	movs	r3, #2
 8002fac:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 8002fb6:	230e      	movs	r3, #14
 8002fb8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4806      	ldr	r0, [pc, #24]	; (8002fdc <HAL_LPTIM_MspInit+0xe8>)
 8002fc2:	f003 fab5 	bl	8006530 <HAL_GPIO_Init>
}
 8002fc6:	bf00      	nop
 8002fc8:	3770      	adds	r7, #112	; 0x70
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40007c00 	.word	0x40007c00
 8002fd4:	48000800 	.word	0x48000800
 8002fd8:	40009400 	.word	0x40009400
 8002fdc:	48000400 	.word	0x48000400

08002fe0 <_ZN7Lsm6dslC1EP19__SPI_HandleTypeDefP7GpioOutP6GpioInS5_>:
 */


#include <lsm6dsl.hpp>

Lsm6dsl::Lsm6dsl(SPI_HandleTypeDef *hspi, GpioOut *ncs, GpioIn *it1, GpioIn *it2) : hspi(hspi), ncs(ncs), it1(it1), it2(it2) { }
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
 8002fec:	603b      	str	r3, [r7, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	60da      	str	r2, [r3, #12]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4618      	mov	r0, r3
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003018:	f001 ff04 	bl	8004e24 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800301c:	f7fd fefa 	bl	8000e14 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003020:	f000 f826 	bl	8003070 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003024:	f000 f89e 	bl	8003164 <_Z24PeriphCommonClock_Configv>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8003028:	f7ff fe78 	bl	8002d1c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800302c:	f7fe fe74 	bl	8001d18 <MX_GPIO_Init>
  MX_DMA_Init();
 8003030:	f7fe fad4 	bl	80015dc <MX_DMA_Init>
  MX_TIM1_Init();
 8003034:	f001 fb7e 	bl	8004734 <MX_TIM1_Init>
  MX_USB_PCD_Init();
 8003038:	f001 fde0 	bl	8004bfc <MX_USB_PCD_Init>
  MX_ADC1_Init();
 800303c:	f7fd fd96 	bl	8000b6c <MX_ADC1_Init>
  MX_LPTIM2_Init();
 8003040:	f7ff ff24 	bl	8002e8c <MX_LPTIM2_Init>
  MX_QUADSPI_Init();
 8003044:	f000 fe20 	bl	8003c88 <MX_QUADSPI_Init>
  MX_SPI1_Init();
 8003048:	f000 ff58 	bl	8003efc <MX_SPI1_Init>
  MX_LPUART1_UART_Init();
 800304c:	f001 fcb0 	bl	80049b0 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8003050:	f000 feb8 	bl	8003dc4 <MX_RTC_Init>
  MX_LPTIM1_Init();
 8003054:	f7ff fee6 	bl	8002e24 <MX_LPTIM1_Init>
  MX_RF_Init();
 8003058:	f000 fe82 	bl	8003d60 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800305c:	f00c ff52 	bl	800ff04 <osKernelInitialize>
  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8003060:	f7fd fee6 	bl	8000e30 <MX_APPE_Init>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003064:	f7fe f87c 	bl	8001160 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003068:	f00c ff70 	bl	800ff4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800306c:	e7fe      	b.n	800306c <main+0x58>
	...

08003070 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b09a      	sub	sp, #104	; 0x68
 8003074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003076:	f107 0320 	add.w	r3, r7, #32
 800307a:	2248      	movs	r2, #72	; 0x48
 800307c:	2100      	movs	r1, #0
 800307e:	4618      	mov	r0, r3
 8003080:	f011 fffe 	bl	8015080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003084:	1d3b      	adds	r3, r7, #4
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	605a      	str	r2, [r3, #4]
 800308c:	609a      	str	r2, [r3, #8]
 800308e:	60da      	str	r2, [r3, #12]
 8003090:	611a      	str	r2, [r3, #16]
 8003092:	615a      	str	r2, [r3, #20]
 8003094:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003096:	4b32      	ldr	r3, [pc, #200]	; (8003160 <_Z18SystemClock_Configv+0xf0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800309e:	4a30      	ldr	r2, [pc, #192]	; (8003160 <_Z18SystemClock_Configv+0xf0>)
 80030a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	4b2e      	ldr	r3, [pc, #184]	; (8003160 <_Z18SystemClock_Configv+0xf0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80030b2:	232f      	movs	r3, #47	; 0x2f
 80030b4:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80030bc:	2300      	movs	r3, #0
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80030c6:	2301      	movs	r3, #1
 80030c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030ca:	2340      	movs	r3, #64	; 0x40
 80030cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80030ce:	2300      	movs	r3, #0
 80030d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80030d2:	2360      	movs	r3, #96	; 0x60
 80030d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80030d6:	2305      	movs	r3, #5
 80030d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030da:	2302      	movs	r3, #2
 80030dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80030de:	2301      	movs	r3, #1
 80030e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80030e2:	2300      	movs	r3, #0
 80030e4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80030e6:	2320      	movs	r3, #32
 80030e8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80030f0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80030f4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80030f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030fa:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030fc:	f107 0320 	add.w	r3, r7, #32
 8003100:	4618      	mov	r0, r3
 8003102:	f004 faa7 	bl	8007654 <HAL_RCC_OscConfig>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	bf14      	ite	ne
 800310c:	2301      	movne	r3, #1
 800310e:	2300      	moveq	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 8003116:	f000 f871 	bl	80031fc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800311a:	236f      	movs	r3, #111	; 0x6f
 800311c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800311e:	2303      	movs	r3, #3
 8003120:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003126:	2300      	movs	r3, #0
 8003128:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800312e:	2380      	movs	r3, #128	; 0x80
 8003130:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003136:	1d3b      	adds	r3, r7, #4
 8003138:	2103      	movs	r1, #3
 800313a:	4618      	mov	r0, r3
 800313c:	f004 fdfe 	bl	8007d3c <HAL_RCC_ClockConfig>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	bf14      	ite	ne
 8003146:	2301      	movne	r3, #1
 8003148:	2300      	moveq	r3, #0
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <_Z18SystemClock_Configv+0xe4>
  {
    Error_Handler();
 8003150:	f000 f854 	bl	80031fc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003154:	f005 fbe6 	bl	8008924 <HAL_RCCEx_EnableMSIPLLMode>
}
 8003158:	bf00      	nop
 800315a:	3768      	adds	r7, #104	; 0x68
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	58000400 	.word	0x58000400

08003164 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b094      	sub	sp, #80	; 0x50
 8003168:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800316a:	463b      	mov	r3, r7
 800316c:	2250      	movs	r2, #80	; 0x50
 800316e:	2100      	movs	r1, #0
 8003170:	4618      	mov	r0, r3
 8003172:	f011 ff85 	bl	8015080 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8003176:	f44f 5354 	mov.w	r3, #13568	; 0x3500
 800317a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800317c:	2318      	movs	r3, #24
 800317e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8003180:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003184:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8003186:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800318a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800318c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003190:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8003192:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8003196:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003198:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800319c:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800319e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80031a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 80031a4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80031a8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80031aa:	2300      	movs	r3, #0
 80031ac:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80031ae:	2310      	movs	r3, #16
 80031b0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031b2:	463b      	mov	r3, r7
 80031b4:	4618      	mov	r0, r3
 80031b6:	f005 fa3f 	bl	8008638 <HAL_RCCEx_PeriphCLKConfig>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bf14      	ite	ne
 80031c0:	2301      	movne	r3, #1
 80031c2:	2300      	moveq	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <_Z24PeriphCommonClock_Configv+0x6a>
  {
    Error_Handler();
 80031ca:	f000 f817 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80031ce:	bf00      	nop
 80031d0:	3750      	adds	r7, #80	; 0x50
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a04      	ldr	r2, [pc, #16]	; (80031f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d101      	bne.n	80031ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80031ea:	f001 fe3b 	bl	8004e64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40014800 	.word	0x40014800

080031fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003200:	b672      	cpsid	i
}
 8003202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003204:	e7fe      	b.n	8003204 <Error_Handler+0x8>
	...

08003208 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af02      	add	r7, sp, #8
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d17d      	bne.n	8003314 <_Z41__static_initialization_and_destruction_0ii+0x10c>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800321e:	4293      	cmp	r3, r2
 8003220:	d178      	bne.n	8003314 <_Z41__static_initialization_and_destruction_0ii+0x10c>
GpioOut led1 = GPIO_OUT(LED1, true);
 8003222:	2301      	movs	r3, #1
 8003224:	2201      	movs	r2, #1
 8003226:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800322a:	483c      	ldr	r0, [pc, #240]	; (800331c <_Z41__static_initialization_and_destruction_0ii+0x114>)
 800322c:	f7fe f81b 	bl	8001266 <_ZN7GpioOutC1EP12GPIO_TypeDeftb>
GpioOut led2 = GPIO_OUT(LED2, true);
 8003230:	2301      	movs	r3, #1
 8003232:	2202      	movs	r2, #2
 8003234:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8003238:	4839      	ldr	r0, [pc, #228]	; (8003320 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 800323a:	f7fe f814 	bl	8001266 <_ZN7GpioOutC1EP12GPIO_TypeDeftb>
GpioOut led3 = GPIO_OUT(LED3, true);
 800323e:	2301      	movs	r3, #1
 8003240:	2220      	movs	r2, #32
 8003242:	4938      	ldr	r1, [pc, #224]	; (8003324 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8003244:	4838      	ldr	r0, [pc, #224]	; (8003328 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8003246:	f7fe f80e 	bl	8001266 <_ZN7GpioOutC1EP12GPIO_TypeDeftb>
GpioOut led4 = GPIO_OUT(LED4, true);
 800324a:	2301      	movs	r3, #1
 800324c:	2204      	movs	r2, #4
 800324e:	4937      	ldr	r1, [pc, #220]	; (800332c <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8003250:	4837      	ldr	r0, [pc, #220]	; (8003330 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8003252:	f7fe f808 	bl	8001266 <_ZN7GpioOutC1EP12GPIO_TypeDeftb>
GpioOut nm_sleep 			= GPIO_OUT(NM_SLEEP, true);
 8003256:	2301      	movs	r3, #1
 8003258:	2201      	movs	r2, #1
 800325a:	4934      	ldr	r1, [pc, #208]	; (800332c <_Z41__static_initialization_and_destruction_0ii+0x124>)
 800325c:	4835      	ldr	r0, [pc, #212]	; (8003334 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 800325e:	f7fe f802 	bl	8001266 <_ZN7GpioOutC1EP12GPIO_TypeDeftb>
GpioOut m_right_direction 	= GPIO_OUT(M_RIGHT_DIRECTION, true);
 8003262:	2301      	movs	r3, #1
 8003264:	2240      	movs	r2, #64	; 0x40
 8003266:	492f      	ldr	r1, [pc, #188]	; (8003324 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8003268:	4833      	ldr	r0, [pc, #204]	; (8003338 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 800326a:	f7fd fffc 	bl	8001266 <_ZN7GpioOutC1EP12GPIO_TypeDeftb>
GpioOut m_left_direction 	= GPIO_OUT(M_LEFT_DIRECTION, true);
 800326e:	2301      	movs	r3, #1
 8003270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003274:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8003278:	4830      	ldr	r0, [pc, #192]	; (800333c <_Z41__static_initialization_and_destruction_0ii+0x134>)
 800327a:	f7fd fff4 	bl	8001266 <_ZN7GpioOutC1EP12GPIO_TypeDeftb>
GpioOut spi_imu_ncs		= GPIO_OUT(SPI_IMU_NCS, true);
 800327e:	2301      	movs	r3, #1
 8003280:	2280      	movs	r2, #128	; 0x80
 8003282:	492a      	ldr	r1, [pc, #168]	; (800332c <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8003284:	482e      	ldr	r0, [pc, #184]	; (8003340 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8003286:	f7fd ffee 	bl	8001266 <_ZN7GpioOutC1EP12GPIO_TypeDeftb>
GpioIn spi_imu_int1 	= GPIO_IN(SPI_IMU_INT1, true);
 800328a:	2301      	movs	r3, #1
 800328c:	2208      	movs	r2, #8
 800328e:	4925      	ldr	r1, [pc, #148]	; (8003324 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8003290:	482c      	ldr	r0, [pc, #176]	; (8003344 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8003292:	f7fd ffc8 	bl	8001226 <_ZN6GpioInC1EP12GPIO_TypeDeftb>
GpioIn spi_imu_int2 	= GPIO_IN(SPI_IMU_INT2, true);
 8003296:	2301      	movs	r3, #1
 8003298:	2210      	movs	r2, #16
 800329a:	492b      	ldr	r1, [pc, #172]	; (8003348 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 800329c:	482b      	ldr	r0, [pc, #172]	; (800334c <_Z41__static_initialization_and_destruction_0ii+0x144>)
 800329e:	f7fd ffc2 	bl	8001226 <_ZN6GpioInC1EP12GPIO_TypeDeftb>
GpioOut spi_ex_ncs1 = GPIO_OUT(SPI_EX_NCS1, true);
 80032a2:	2301      	movs	r3, #1
 80032a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032a8:	491e      	ldr	r1, [pc, #120]	; (8003324 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 80032aa:	4829      	ldr	r0, [pc, #164]	; (8003350 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80032ac:	f7fd ffdb 	bl	8001266 <_ZN7GpioOutC1EP12GPIO_TypeDeftb>
GpioOut spi_ex_ncs2 = GPIO_OUT(SPI_EX_NCS2, true);
 80032b0:	2301      	movs	r3, #1
 80032b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032b6:	491b      	ldr	r1, [pc, #108]	; (8003324 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 80032b8:	4826      	ldr	r0, [pc, #152]	; (8003354 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 80032ba:	f7fd ffd4 	bl	8001266 <_ZN7GpioOutC1EP12GPIO_TypeDeftb>
GpioIn spi_ex_int1 	= GPIO_IN(SPI_EX_INT1, true);
 80032be:	2301      	movs	r3, #1
 80032c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032c4:	4917      	ldr	r1, [pc, #92]	; (8003324 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 80032c6:	4824      	ldr	r0, [pc, #144]	; (8003358 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 80032c8:	f7fd ffad 	bl	8001226 <_ZN6GpioInC1EP12GPIO_TypeDeftb>
Encoder left_encoder(&hlptim1, encoder_ratio);
 80032cc:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800335c <_Z41__static_initialization_and_destruction_0ii+0x154>
 80032d0:	4923      	ldr	r1, [pc, #140]	; (8003360 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 80032d2:	4824      	ldr	r0, [pc, #144]	; (8003364 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 80032d4:	f7fe f833 	bl	800133e <_ZN7EncoderC1EP19LPTIM_HandleTypeDeff>
Encoder right_encoder(&hlptim2, encoder_ratio);
 80032d8:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800335c <_Z41__static_initialization_and_destruction_0ii+0x154>
 80032dc:	4922      	ldr	r1, [pc, #136]	; (8003368 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 80032de:	4823      	ldr	r0, [pc, #140]	; (800336c <_Z41__static_initialization_and_destruction_0ii+0x164>)
 80032e0:	f7fe f82d 	bl	800133e <_ZN7EncoderC1EP19LPTIM_HandleTypeDeff>
PwmOut left_speed_ctrl(&htim1, PwmOutCh::_1);
 80032e4:	2200      	movs	r2, #0
 80032e6:	4922      	ldr	r1, [pc, #136]	; (8003370 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 80032e8:	4822      	ldr	r0, [pc, #136]	; (8003374 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 80032ea:	f7fe f883 	bl	80013f4 <_ZN6PwmOutC1EP17TIM_HandleTypeDef8PwmOutCh>
PwmOut right_speed_ctrl(&htim1, PwmOutCh::_3);
 80032ee:	2208      	movs	r2, #8
 80032f0:	491f      	ldr	r1, [pc, #124]	; (8003370 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 80032f2:	4821      	ldr	r0, [pc, #132]	; (8003378 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 80032f4:	f7fe f87e 	bl	80013f4 <_ZN6PwmOutC1EP17TIM_HandleTypeDef8PwmOutCh>
Max11643 front_adc(&hspi1, &spi_ex_ncs1, &spi_ex_int1);
 80032f8:	4b17      	ldr	r3, [pc, #92]	; (8003358 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 80032fa:	4a15      	ldr	r2, [pc, #84]	; (8003350 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80032fc:	491f      	ldr	r1, [pc, #124]	; (800337c <_Z41__static_initialization_and_destruction_0ii+0x174>)
 80032fe:	4820      	ldr	r0, [pc, #128]	; (8003380 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8003300:	f000 f9d7 	bl	80036b2 <_ZN8Max11643C1EP19__SPI_HandleTypeDefP7GpioOutP6GpioIn>
Lsm6dsl imu(&hspi1, &spi_imu_ncs, &spi_imu_int1, &spi_imu_int2);
 8003304:	4b11      	ldr	r3, [pc, #68]	; (800334c <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	4b0e      	ldr	r3, [pc, #56]	; (8003344 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 800330a:	4a0d      	ldr	r2, [pc, #52]	; (8003340 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 800330c:	491b      	ldr	r1, [pc, #108]	; (800337c <_Z41__static_initialization_and_destruction_0ii+0x174>)
 800330e:	481d      	ldr	r0, [pc, #116]	; (8003384 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8003310:	f7ff fe66 	bl	8002fe0 <_ZN7Lsm6dslC1EP19__SPI_HandleTypeDefP7GpioOutP6GpioInS5_>
}
 8003314:	bf00      	nop
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	20000f38 	.word	0x20000f38
 8003320:	20000f40 	.word	0x20000f40
 8003324:	48000800 	.word	0x48000800
 8003328:	20000f48 	.word	0x20000f48
 800332c:	48000400 	.word	0x48000400
 8003330:	20000f50 	.word	0x20000f50
 8003334:	20000f58 	.word	0x20000f58
 8003338:	20000f60 	.word	0x20000f60
 800333c:	20000f68 	.word	0x20000f68
 8003340:	20000f70 	.word	0x20000f70
 8003344:	20000f78 	.word	0x20000f78
 8003348:	48001000 	.word	0x48001000
 800334c:	20000f80 	.word	0x20000f80
 8003350:	20000f88 	.word	0x20000f88
 8003354:	20000f90 	.word	0x20000f90
 8003358:	20000f98 	.word	0x20000f98
 800335c:	3c888889 	.word	0x3c888889
 8003360:	20000ec8 	.word	0x20000ec8
 8003364:	20000fa0 	.word	0x20000fa0
 8003368:	20000f00 	.word	0x20000f00
 800336c:	20000fa8 	.word	0x20000fa8
 8003370:	20001384 	.word	0x20001384
 8003374:	20000010 	.word	0x20000010
 8003378:	20000020 	.word	0x20000020
 800337c:	20001118 	.word	0x20001118
 8003380:	20000fb0 	.word	0x20000fb0
 8003384:	20001014 	.word	0x20001014

08003388 <_GLOBAL__sub_I_led1>:
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
 800338c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003390:	2001      	movs	r0, #1
 8003392:	f7ff ff39 	bl	8003208 <_Z41__static_initialization_and_destruction_0ii>
 8003396:	bd80      	pop	{r7, pc}

08003398 <mainTaskEntry>:
char cmd[8] = { 0 };

char data [128] = { 0 };

void mainTaskEntry(void *argument)
{
 8003398:	b590      	push	{r4, r7, lr}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
	// engine init
	right_encoder.init();
 80033a0:	484e      	ldr	r0, [pc, #312]	; (80034dc <mainTaskEntry+0x144>)
 80033a2:	f7fd ffe0 	bl	8001366 <_ZN7Encoder4initEv>
	right_speed_ctrl.init();
 80033a6:	484e      	ldr	r0, [pc, #312]	; (80034e0 <mainTaskEntry+0x148>)
 80033a8:	f7fe f886 	bl	80014b8 <_ZN6PwmOut4initEv>
	left_encoder.init();
 80033ac:	484d      	ldr	r0, [pc, #308]	; (80034e4 <mainTaskEntry+0x14c>)
 80033ae:	f7fd ffda 	bl	8001366 <_ZN7Encoder4initEv>
	left_speed_ctrl.init();
 80033b2:	484d      	ldr	r0, [pc, #308]	; (80034e8 <mainTaskEntry+0x150>)
 80033b4:	f7fe f880 	bl	80014b8 <_ZN6PwmOut4initEv>
	nm_sleep.off();
 80033b8:	484c      	ldr	r0, [pc, #304]	; (80034ec <mainTaskEntry+0x154>)
 80033ba:	f7fd ff90 	bl	80012de <_ZN7GpioOut3offEv>

	// front init
	front_adc.init();
 80033be:	484c      	ldr	r0, [pc, #304]	; (80034f0 <mainTaskEntry+0x158>)
 80033c0:	f000 f9ce 	bl	8003760 <_ZN8Max116434initEv>

	//other init
	led1.off();
 80033c4:	484b      	ldr	r0, [pc, #300]	; (80034f4 <mainTaskEntry+0x15c>)
 80033c6:	f7fd ff8a 	bl	80012de <_ZN7GpioOut3offEv>
	led2.off();
 80033ca:	484b      	ldr	r0, [pc, #300]	; (80034f8 <mainTaskEntry+0x160>)
 80033cc:	f7fd ff87 	bl	80012de <_ZN7GpioOut3offEv>
	led3.off();
 80033d0:	484a      	ldr	r0, [pc, #296]	; (80034fc <mainTaskEntry+0x164>)
 80033d2:	f7fd ff84 	bl	80012de <_ZN7GpioOut3offEv>
	led4.off();
 80033d6:	484a      	ldr	r0, [pc, #296]	; (8003500 <mainTaskEntry+0x168>)
 80033d8:	f7fd ff81 	bl	80012de <_ZN7GpioOut3offEv>

	HAL_UART_Receive_IT(&hlpuart1, (uint8_t*)cmd, 5);
 80033dc:	2205      	movs	r2, #5
 80033de:	4949      	ldr	r1, [pc, #292]	; (8003504 <mainTaskEntry+0x16c>)
 80033e0:	4849      	ldr	r0, [pc, #292]	; (8003508 <mainTaskEntry+0x170>)
 80033e2:	f007 ff6b 	bl	800b2bc <HAL_UART_Receive_IT>

	//int i = 0;
	while(true)
	{
		size_t size = sprintf(data, "speed: %i, set_speed: %i\n\r", (uint32_t)speed, (uint32_t)set_speed);
 80033e6:	4b49      	ldr	r3, [pc, #292]	; (800350c <mainTaskEntry+0x174>)
 80033e8:	edd3 7a00 	vldr	s15, [r3]
 80033ec:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80033f0:	4b47      	ldr	r3, [pc, #284]	; (8003510 <mainTaskEntry+0x178>)
 80033f2:	edd3 7a00 	vldr	s15, [r3]
 80033f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033fa:	ee17 3a90 	vmov	r3, s15
 80033fe:	ee17 2a10 	vmov	r2, s14
 8003402:	4944      	ldr	r1, [pc, #272]	; (8003514 <mainTaskEntry+0x17c>)
 8003404:	4844      	ldr	r0, [pc, #272]	; (8003518 <mainTaskEntry+0x180>)
 8003406:	f011 fe1b 	bl	8015040 <siprintf>
 800340a:	4603      	mov	r3, r0
 800340c:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)data, strlen(data), 100);
 800340e:	4842      	ldr	r0, [pc, #264]	; (8003518 <mainTaskEntry+0x180>)
 8003410:	f7fc feb6 	bl	8000180 <strlen>
 8003414:	4603      	mov	r3, r0
 8003416:	b29a      	uxth	r2, r3
 8003418:	2364      	movs	r3, #100	; 0x64
 800341a:	493f      	ldr	r1, [pc, #252]	; (8003518 <mainTaskEntry+0x180>)
 800341c:	483a      	ldr	r0, [pc, #232]	; (8003508 <mainTaskEntry+0x170>)
 800341e:	f007 febf 	bl	800b1a0 <HAL_UART_Transmit>
		left_speed_ctrl.setDuty(duty_kek);
 8003422:	4b3e      	ldr	r3, [pc, #248]	; (800351c <mainTaskEntry+0x184>)
 8003424:	edd3 7a00 	vldr	s15, [r3]
 8003428:	eeb0 0a67 	vmov.f32	s0, s15
 800342c:	482e      	ldr	r0, [pc, #184]	; (80034e8 <mainTaskEntry+0x150>)
 800342e:	f7fe f853 	bl	80014d8 <_ZN6PwmOut7setDutyEf>
		//it_state = spi_ex_int1.read();

		front_adc.init();
 8003432:	482f      	ldr	r0, [pc, #188]	; (80034f0 <mainTaskEntry+0x158>)
 8003434:	f000 f994 	bl	8003760 <_ZN8Max116434initEv>
		front_adc.requestData();
 8003438:	482d      	ldr	r0, [pc, #180]	; (80034f0 <mainTaskEntry+0x158>)
 800343a:	f000 fa21 	bl	8003880 <_ZN8Max1164311requestDataEv>
		vTaskDelay(1);
 800343e:	2001      	movs	r0, #1
 8003440:	f00e fd9e 	bl	8011f80 <vTaskDelay>
		front_adc.readData();
 8003444:	482a      	ldr	r0, [pc, #168]	; (80034f0 <mainTaskEntry+0x158>)
 8003446:	f000 f9f5 	bl	8003834 <_ZN8Max116438readDataEv>

		static std::array<float, 16> coefs = { -8, -7, -6, -5, -4, -3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8 };
		follow_deviation = 0;
 800344a:	4b35      	ldr	r3, [pc, #212]	; (8003520 <mainTaskEntry+0x188>)
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
		for(size_t i = 0; i < 16; i++)
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	e033      	b.n	80034c0 <mainTaskEntry+0x128>
		{
			uint16_t buff = (uint16_t)(front_adc.data()[i * 2]) << 8 | (uint16_t)(front_adc.data()[i * 2 + 1]);
 8003458:	4825      	ldr	r0, [pc, #148]	; (80034f0 <mainTaskEntry+0x158>)
 800345a:	f000 fa5a 	bl	8003912 <_ZN8Max116434dataEv>
 800345e:	4602      	mov	r2, r0
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	4619      	mov	r1, r3
 8003466:	4610      	mov	r0, r2
 8003468:	f000 f89c 	bl	80035a4 <_ZNKSt5arrayIhLj32EEixEj>
 800346c:	4603      	mov	r3, r0
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	b21c      	sxth	r4, r3
 8003474:	481e      	ldr	r0, [pc, #120]	; (80034f0 <mainTaskEntry+0x158>)
 8003476:	f000 fa4c 	bl	8003912 <_ZN8Max116434dataEv>
 800347a:	4602      	mov	r2, r0
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	3301      	adds	r3, #1
 8003482:	4619      	mov	r1, r3
 8003484:	4610      	mov	r0, r2
 8003486:	f000 f88d 	bl	80035a4 <_ZNKSt5arrayIhLj32EEixEj>
 800348a:	4603      	mov	r3, r0
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	b21b      	sxth	r3, r3
 8003490:	4323      	orrs	r3, r4
 8003492:	b21b      	sxth	r3, r3
 8003494:	81fb      	strh	r3, [r7, #14]
			if (buff > 32)
 8003496:	89fb      	ldrh	r3, [r7, #14]
 8003498:	2b20      	cmp	r3, #32
 800349a:	d90e      	bls.n	80034ba <mainTaskEntry+0x122>
			{
				follow_deviation += coefs[i];
 800349c:	6979      	ldr	r1, [r7, #20]
 800349e:	4821      	ldr	r0, [pc, #132]	; (8003524 <mainTaskEntry+0x18c>)
 80034a0:	f000 f88f 	bl	80035c2 <_ZNSt5arrayIfLj16EEixEj>
 80034a4:	4603      	mov	r3, r0
 80034a6:	ed93 7a00 	vldr	s14, [r3]
 80034aa:	4b1d      	ldr	r3, [pc, #116]	; (8003520 <mainTaskEntry+0x188>)
 80034ac:	edd3 7a00 	vldr	s15, [r3]
 80034b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034b4:	4b1a      	ldr	r3, [pc, #104]	; (8003520 <mainTaskEntry+0x188>)
 80034b6:	edc3 7a00 	vstr	s15, [r3]
		for(size_t i = 0; i < 16; i++)
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	3301      	adds	r3, #1
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2b0f      	cmp	r3, #15
 80034c4:	d9c8      	bls.n	8003458 <mainTaskEntry+0xc0>
			}
		}

		front_adc.data();
 80034c6:	480a      	ldr	r0, [pc, #40]	; (80034f0 <mainTaskEntry+0x158>)
 80034c8:	f000 fa23 	bl	8003912 <_ZN8Max116434dataEv>

		led1.toggle();
 80034cc:	4809      	ldr	r0, [pc, #36]	; (80034f4 <mainTaskEntry+0x15c>)
 80034ce:	f7fd ff22 	bl	8001316 <_ZN7GpioOut6toggleEv>
		vTaskDelay(100);
 80034d2:	2064      	movs	r0, #100	; 0x64
 80034d4:	f00e fd54 	bl	8011f80 <vTaskDelay>
	}
 80034d8:	e785      	b.n	80033e6 <mainTaskEntry+0x4e>
 80034da:	bf00      	nop
 80034dc:	20000fa8 	.word	0x20000fa8
 80034e0:	20000020 	.word	0x20000020
 80034e4:	20000fa0 	.word	0x20000fa0
 80034e8:	20000010 	.word	0x20000010
 80034ec:	20000f58 	.word	0x20000f58
 80034f0:	20000fb0 	.word	0x20000fb0
 80034f4:	20000f38 	.word	0x20000f38
 80034f8:	20000f40 	.word	0x20000f40
 80034fc:	20000f48 	.word	0x20000f48
 8003500:	20000f50 	.word	0x20000f50
 8003504:	20001028 	.word	0x20001028
 8003508:	200013d0 	.word	0x200013d0
 800350c:	20000dd4 	.word	0x20000dd4
 8003510:	2000000c 	.word	0x2000000c
 8003514:	08015890 	.word	0x08015890
 8003518:	20001030 	.word	0x20001030
 800351c:	20001024 	.word	0x20001024
 8003520:	20000de0 	.word	0x20000de0
 8003524:	20000030 	.word	0x20000030

08003528 <HAL_UART_RxCpltCallback>:
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
	if(cmd[0] == 's' || cmd[0] == 'S')
 8003530:	4b18      	ldr	r3, [pc, #96]	; (8003594 <HAL_UART_RxCpltCallback+0x6c>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b73      	cmp	r3, #115	; 0x73
 8003536:	d003      	beq.n	8003540 <HAL_UART_RxCpltCallback+0x18>
 8003538:	4b16      	ldr	r3, [pc, #88]	; (8003594 <HAL_UART_RxCpltCallback+0x6c>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b53      	cmp	r3, #83	; 0x53
 800353e:	d11f      	bne.n	8003580 <HAL_UART_RxCpltCallback+0x58>
	{
		int set = atoi(cmd + 1);
 8003540:	4b15      	ldr	r3, [pc, #84]	; (8003598 <HAL_UART_RxCpltCallback+0x70>)
 8003542:	4618      	mov	r0, r3
 8003544:	f011 fc40 	bl	8014dc8 <atoi>
 8003548:	4603      	mov	r3, r0
 800354a:	60fb      	str	r3, [r7, #12]
		set = std::clamp(set, 500, 3500);
 800354c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003550:	613b      	str	r3, [r7, #16]
 8003552:	f640 53ac 	movw	r3, #3500	; 0xdac
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	f107 0214 	add.w	r2, r7, #20
 800355c:	f107 0110 	add.w	r1, r7, #16
 8003560:	f107 030c 	add.w	r3, r7, #12
 8003564:	4618      	mov	r0, r3
 8003566:	f000 f83b 	bl	80035e0 <_ZSt5clampIiERKT_S2_S2_S2_>
 800356a:	4603      	mov	r3, r0
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60fb      	str	r3, [r7, #12]
		set_speed = (float)set;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	ee07 3a90 	vmov	s15, r3
 8003576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800357a:	4b08      	ldr	r3, [pc, #32]	; (800359c <HAL_UART_RxCpltCallback+0x74>)
 800357c:	edc3 7a00 	vstr	s15, [r3]
	}
	HAL_UART_Receive_IT(&hlpuart1, (uint8_t*)cmd, 5);
 8003580:	2205      	movs	r2, #5
 8003582:	4904      	ldr	r1, [pc, #16]	; (8003594 <HAL_UART_RxCpltCallback+0x6c>)
 8003584:	4806      	ldr	r0, [pc, #24]	; (80035a0 <HAL_UART_RxCpltCallback+0x78>)
 8003586:	f007 fe99 	bl	800b2bc <HAL_UART_Receive_IT>
}
 800358a:	bf00      	nop
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20001028 	.word	0x20001028
 8003598:	20001029 	.word	0x20001029
 800359c:	2000000c 	.word	0x2000000c
 80035a0:	200013d0 	.word	0x200013d0

080035a4 <_ZNKSt5arrayIhLj32EEixEj>:
	__glibcxx_requires_subscript(__n);
	return _AT_Type::_S_ref(_M_elems, __n);
      }

      constexpr const_reference
      operator[](size_type __n) const noexcept
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
      {
#if __cplusplus >= 201402L
	__glibcxx_requires_subscript(__n);
#endif
	return _AT_Type::_S_ref(_M_elems, __n);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6839      	ldr	r1, [r7, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 f831 	bl	800361a <_ZNSt14__array_traitsIhLj32EE6_S_refERA32_Khj>
 80035b8:	4603      	mov	r3, r0
      }
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <_ZNSt5arrayIfLj16EEixEj>:
      operator[](size_type __n) noexcept
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b082      	sub	sp, #8
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6839      	ldr	r1, [r7, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 f830 	bl	8003636 <_ZNSt14__array_traitsIfLj16EE6_S_refERA16_Kfj>
 80035d6:	4603      	mov	r3, r0
      }
 80035d8:	4618      	mov	r0, r3
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <_ZSt5clampIiERKT_S2_S2_S2_>:
    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
      return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	db09      	blt.n	800360c <_ZSt5clampIiERKT_S2_S2_S2_+0x2c>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	da01      	bge.n	8003608 <_ZSt5clampIiERKT_S2_S2_S2_+0x28>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	e002      	b.n	800360e <_ZSt5clampIiERKT_S2_S2_S2_+0x2e>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	e000      	b.n	800360e <_ZSt5clampIiERKT_S2_S2_S2_+0x2e>
 800360c:	68bb      	ldr	r3, [r7, #8]
    }
 800360e:	4618      	mov	r0, r3
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <_ZNSt14__array_traitsIhLj32EE6_S_refERA32_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	4413      	add	r3, r2
 800362a:	4618      	mov	r0, r3
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <_ZNSt14__array_traitsIfLj16EE6_S_refERA16_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	4413      	add	r3, r2
 8003648:	4618      	mov	r0, r3
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
    return memory_order(int(__m) & int(__mod));
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4013      	ands	r3, r2
  }
 8003664:	4618      	mov	r0, r3
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <_ZNSt13__atomic_baseIbEC1Eb>:
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	70fb      	strb	r3, [r7, #3]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	701a      	strb	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4618      	mov	r0, r3
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <_ZNSt6atomicIbEC1Eb>:
    ~atomic() noexcept = default;
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;

    constexpr atomic(bool __i) noexcept : _M_base(__i) { }
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	70fb      	strb	r3, [r7, #3]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	78fa      	ldrb	r2, [r7, #3]
 80036a0:	4611      	mov	r1, r2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff ffe4 	bl	8003670 <_ZNSt13__atomic_baseIbEC1Eb>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <_ZN8Max11643C1EP19__SPI_HandleTypeDefP7GpioOutP6GpioIn>:

#include "max11643.hpp"
#include "spi_api.hpp"
#include "common.hpp"

Max11643::Max11643(SPI_HandleTypeDef *hspi, GpioOut *ncs, GpioIn *it) : hspi(hspi), ncs(ncs), it(it), pending_req(false)
 80036b2:	b590      	push	{r4, r7, lr}
 80036b4:	b08b      	sub	sp, #44	; 0x2c
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	60f8      	str	r0, [r7, #12]
 80036ba:	60b9      	str	r1, [r7, #8]
 80036bc:	607a      	str	r2, [r7, #4]
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	605a      	str	r2, [r3, #4]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	609a      	str	r2, [r3, #8]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	3360      	adds	r3, #96	; 0x60
 80036dc:	2100      	movs	r1, #0
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff ffd6 	bl	8003690 <_ZNSt6atomicIbEC1Eb>
{
	std::fill(tx_data_buff.begin(), tx_data_buff.end(), 0);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	334c      	adds	r3, #76	; 0x4c
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 f924 	bl	8003936 <_ZNSt5arrayIhLj16EE5beginEv>
 80036ee:	4604      	mov	r4, r0
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	334c      	adds	r3, #76	; 0x4c
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 f92a 	bl	800394e <_ZNSt5arrayIhLj16EE3endEv>
 80036fa:	4601      	mov	r1, r0
 80036fc:	2300      	movs	r3, #0
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	f107 0310 	add.w	r3, r7, #16
 8003704:	461a      	mov	r2, r3
 8003706:	4620      	mov	r0, r4
 8003708:	f000 f92e 	bl	8003968 <_ZSt4fillIPhiEvT_S1_RKT0_>
	for(auto& it : rx_data_buffs)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	330c      	adds	r3, #12
 8003710:	623b      	str	r3, [r7, #32]
 8003712:	6a38      	ldr	r0, [r7, #32]
 8003714:	f000 f937 	bl	8003986 <_ZNSt5arrayIS_IhLj32EELj2EE5beginEv>
 8003718:	6278      	str	r0, [r7, #36]	; 0x24
 800371a:	6a38      	ldr	r0, [r7, #32]
 800371c:	f000 f93f 	bl	800399e <_ZNSt5arrayIS_IhLj32EELj2EE3endEv>
 8003720:	61f8      	str	r0, [r7, #28]
 8003722:	e014      	b.n	800374e <_ZN8Max11643C1EP19__SPI_HandleTypeDefP7GpioOutP6GpioIn+0x9c>
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	61bb      	str	r3, [r7, #24]
		std::fill(it.begin(), it.end(), 0);
 8003728:	69b8      	ldr	r0, [r7, #24]
 800372a:	f000 f945 	bl	80039b8 <_ZNSt5arrayIhLj32EE5beginEv>
 800372e:	4604      	mov	r4, r0
 8003730:	69b8      	ldr	r0, [r7, #24]
 8003732:	f000 f94d 	bl	80039d0 <_ZNSt5arrayIhLj32EE3endEv>
 8003736:	4601      	mov	r1, r0
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	f107 0314 	add.w	r3, r7, #20
 8003740:	461a      	mov	r2, r3
 8003742:	4620      	mov	r0, r4
 8003744:	f000 f910 	bl	8003968 <_ZSt4fillIPhiEvT_S1_RKT0_>
	for(auto& it : rx_data_buffs)
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	3320      	adds	r3, #32
 800374c:	627b      	str	r3, [r7, #36]	; 0x24
 800374e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	429a      	cmp	r2, r3
 8003754:	d1e6      	bne.n	8003724 <_ZN8Max11643C1EP19__SPI_HandleTypeDefP7GpioOutP6GpioIn+0x72>
};
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4618      	mov	r0, r3
 800375a:	372c      	adds	r7, #44	; 0x2c
 800375c:	46bd      	mov	sp, r7
 800375e:	bd90      	pop	{r4, r7, pc}

08003760 <_ZN8Max116434initEv>:

void Max11643::init()
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b094      	sub	sp, #80	; 0x50
 8003764:	af02      	add	r7, sp, #8
 8003766:	6078      	str	r0, [r7, #4]
	// reset
	tx_data_buff[0] = 0b0001'0'000;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	334c      	adds	r3, #76	; 0x4c
 800376c:	2100      	movs	r1, #0
 800376e:	4618      	mov	r0, r3
 8003770:	f000 f93b 	bl	80039ea <_ZNSt5arrayIhLj16EEixEj>
 8003774:	4603      	mov	r3, r0
 8003776:	2210      	movs	r2, #16
 8003778:	701a      	strb	r2, [r3, #0]

	// setup - external, ref off
	tx_data_buff[1] = 0b01'10'01'00;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	334c      	adds	r3, #76	; 0x4c
 800377e:	2101      	movs	r1, #1
 8003780:	4618      	mov	r0, r3
 8003782:	f000 f932 	bl	80039ea <_ZNSt5arrayIhLj16EEixEj>
 8003786:	4603      	mov	r3, r0
 8003788:	2264      	movs	r2, #100	; 0x64
 800378a:	701a      	strb	r2, [r3, #0]

	// avg - external, ref off
	tx_data_buff[2] = 0b001'0'00'00;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	334c      	adds	r3, #76	; 0x4c
 8003790:	2102      	movs	r1, #2
 8003792:	4618      	mov	r0, r3
 8003794:	f000 f929 	bl	80039ea <_ZNSt5arrayIhLj16EEixEj>
 8003798:	4603      	mov	r3, r0
 800379a:	2220      	movs	r2, #32
 800379c:	701a      	strb	r2, [r3, #0]

	SpiDmaRequest request1 { tx_data_buff.begin() + 0, nullptr, 1, ncs, &pending_req };
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	334c      	adds	r3, #76	; 0x4c
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 f8c7 	bl	8003936 <_ZNSt5arrayIhLj16EE5beginEv>
 80037a8:	4601      	mov	r1, r0
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	3260      	adds	r2, #96	; 0x60
 80037b2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80037b6:	9201      	str	r2, [sp, #4]
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	2301      	movs	r3, #1
 80037bc:	2200      	movs	r2, #0
 80037be:	f000 fcc5 	bl	800414c <_ZN13SpiDmaRequestC1EPhS0_jP7GpioOutPSt6atomicIbE>
	request1.send();
 80037c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fcde 	bl	8004188 <_ZN13SpiDmaRequest4sendEv>
	SpiDmaRequest request2 { tx_data_buff.begin() + 1, nullptr, 1, ncs, &pending_req };
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	334c      	adds	r3, #76	; 0x4c
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 f8b0 	bl	8003936 <_ZNSt5arrayIhLj16EE5beginEv>
 80037d6:	4603      	mov	r3, r0
 80037d8:	1c59      	adds	r1, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	3260      	adds	r2, #96	; 0x60
 80037e2:	f107 0020 	add.w	r0, r7, #32
 80037e6:	9201      	str	r2, [sp, #4]
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	2301      	movs	r3, #1
 80037ec:	2200      	movs	r2, #0
 80037ee:	f000 fcad 	bl	800414c <_ZN13SpiDmaRequestC1EPhS0_jP7GpioOutPSt6atomicIbE>
	request2.send();
 80037f2:	f107 0320 	add.w	r3, r7, #32
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fcc6 	bl	8004188 <_ZN13SpiDmaRequest4sendEv>
	SpiDmaRequest request3 { tx_data_buff.begin() + 2, nullptr, 1, ncs, &pending_req };
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	334c      	adds	r3, #76	; 0x4c
 8003800:	4618      	mov	r0, r3
 8003802:	f000 f898 	bl	8003936 <_ZNSt5arrayIhLj16EE5beginEv>
 8003806:	4603      	mov	r3, r0
 8003808:	1c99      	adds	r1, r3, #2
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	3260      	adds	r2, #96	; 0x60
 8003812:	f107 000c 	add.w	r0, r7, #12
 8003816:	9201      	str	r2, [sp, #4]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	2301      	movs	r3, #1
 800381c:	2200      	movs	r2, #0
 800381e:	f000 fc95 	bl	800414c <_ZN13SpiDmaRequestC1EPhS0_jP7GpioOutPSt6atomicIbE>
	request3.send();
 8003822:	f107 030c 	add.w	r3, r7, #12
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fcae 	bl	8004188 <_ZN13SpiDmaRequest4sendEv>
}
 800382c:	bf00      	nop
 800382e:	3748      	adds	r7, #72	; 0x48
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <_ZN8Max116438readDataEv>:

void Max11643::readData()
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08a      	sub	sp, #40	; 0x28
 8003838:	af02      	add	r7, sp, #8
 800383a:	6078      	str	r0, [r7, #4]
	// intentional uint16* to uint8*
	SpiDmaRequest request { nullptr, rx_data_buffs[current_data_index].begin(), 32, ncs, nullptr };
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f103 020c 	add.w	r2, r3, #12
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003846:	4619      	mov	r1, r3
 8003848:	4610      	mov	r0, r2
 800384a:	f000 f8dd 	bl	8003a08 <_ZNSt5arrayIS_IhLj32EELj2EEixEj>
 800384e:	4603      	mov	r3, r0
 8003850:	4618      	mov	r0, r3
 8003852:	f000 f8b1 	bl	80039b8 <_ZNSt5arrayIhLj32EE5beginEv>
 8003856:	4602      	mov	r2, r0
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f107 000c 	add.w	r0, r7, #12
 8003860:	2100      	movs	r1, #0
 8003862:	9101      	str	r1, [sp, #4]
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	2320      	movs	r3, #32
 8003868:	2100      	movs	r1, #0
 800386a:	f000 fc6f 	bl	800414c <_ZN13SpiDmaRequestC1EPhS0_jP7GpioOutPSt6atomicIbE>

	request.send();
 800386e:	f107 030c 	add.w	r3, r7, #12
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fc88 	bl	8004188 <_ZN13SpiDmaRequest4sendEv>
}
 8003878:	bf00      	nop
 800387a:	3720      	adds	r7, #32
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <_ZN8Max1164311requestDataEv>:
{
	return it->read();
}

void Max11643::requestData()
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b08e      	sub	sp, #56	; 0x38
 8003884:	af02      	add	r7, sp, #8
 8003886:	6078      	str	r0, [r7, #4]
	// clear fifo
	tx_data_buff[0] = 0b0001'1'000;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	334c      	adds	r3, #76	; 0x4c
 800388c:	2100      	movs	r1, #0
 800388e:	4618      	mov	r0, r3
 8003890:	f000 f8ab 	bl	80039ea <_ZNSt5arrayIhLj16EEixEj>
 8003894:	4603      	mov	r3, r0
 8003896:	2218      	movs	r2, #24
 8003898:	701a      	strb	r2, [r3, #0]
	// request scanning of channel 0 trough 15
	tx_data_buff[1] = 0b1'1111'00'0;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	334c      	adds	r3, #76	; 0x4c
 800389e:	2101      	movs	r1, #1
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 f8a2 	bl	80039ea <_ZNSt5arrayIhLj16EEixEj>
 80038a6:	4603      	mov	r3, r0
 80038a8:	22f8      	movs	r2, #248	; 0xf8
 80038aa:	701a      	strb	r2, [r3, #0]

	SpiDmaRequest request1 { tx_data_buff.begin() + 0, nullptr, 1, ncs, &pending_req };
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	334c      	adds	r3, #76	; 0x4c
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 f840 	bl	8003936 <_ZNSt5arrayIhLj16EE5beginEv>
 80038b6:	4601      	mov	r1, r0
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	3260      	adds	r2, #96	; 0x60
 80038c0:	f107 001c 	add.w	r0, r7, #28
 80038c4:	9201      	str	r2, [sp, #4]
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	2301      	movs	r3, #1
 80038ca:	2200      	movs	r2, #0
 80038cc:	f000 fc3e 	bl	800414c <_ZN13SpiDmaRequestC1EPhS0_jP7GpioOutPSt6atomicIbE>
	request1.send();
 80038d0:	f107 031c 	add.w	r3, r7, #28
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 fc57 	bl	8004188 <_ZN13SpiDmaRequest4sendEv>
	SpiDmaRequest request2 { tx_data_buff.begin() + 1, nullptr, 1, ncs, &pending_req };
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	334c      	adds	r3, #76	; 0x4c
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 f829 	bl	8003936 <_ZNSt5arrayIhLj16EE5beginEv>
 80038e4:	4603      	mov	r3, r0
 80038e6:	1c59      	adds	r1, r3, #1
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	3260      	adds	r2, #96	; 0x60
 80038f0:	f107 0008 	add.w	r0, r7, #8
 80038f4:	9201      	str	r2, [sp, #4]
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	2301      	movs	r3, #1
 80038fa:	2200      	movs	r2, #0
 80038fc:	f000 fc26 	bl	800414c <_ZN13SpiDmaRequestC1EPhS0_jP7GpioOutPSt6atomicIbE>
	request2.send();
 8003900:	f107 0308 	add.w	r3, r7, #8
 8003904:	4618      	mov	r0, r3
 8003906:	f000 fc3f 	bl	8004188 <_ZN13SpiDmaRequest4sendEv>
}
 800390a:	bf00      	nop
 800390c:	3730      	adds	r7, #48	; 0x30
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <_ZN8Max116434dataEv>:
{
	return !(pending_req || it->read());
}

const Max11643::array_type& Max11643::data()
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
	//size_t i = current_data_index;
	//current_data_index ^= 1;
	return rx_data_buffs[current_data_index];
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f103 020c 	add.w	r2, r3, #12
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003924:	4619      	mov	r1, r3
 8003926:	4610      	mov	r0, r2
 8003928:	f000 f86e 	bl	8003a08 <_ZNSt5arrayIS_IhLj32EELj2EEixEj>
 800392c:	4603      	mov	r3, r0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <_ZNSt5arrayIhLj16EE5beginEv>:
      begin() noexcept
 8003936:	b580      	push	{r7, lr}
 8003938:	b082      	sub	sp, #8
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f871 	bl	8003a26 <_ZNSt5arrayIhLj16EE4dataEv>
 8003944:	4603      	mov	r3, r0
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <_ZNSt5arrayIhLj16EE3endEv>:
      end() noexcept
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f865 	bl	8003a26 <_ZNSt5arrayIhLj16EE4dataEv>
 800395c:	4603      	mov	r3, r0
 800395e:	3310      	adds	r3, #16
 8003960:	4618      	mov	r0, r3
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <_ZSt4fillIPhiEvT_S1_RKT0_>:
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(__first, __last, __value);
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	68b9      	ldr	r1, [r7, #8]
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f861 	bl	8003a40 <_ZSt8__fill_aIPhiEvT_S1_RKT0_>
    }
 800397e:	bf00      	nop
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <_ZNSt5arrayIS_IhLj32EELj2EE5beginEv>:
      begin() noexcept
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f865 	bl	8003a5e <_ZNSt5arrayIS_IhLj32EELj2EE4dataEv>
 8003994:	4603      	mov	r3, r0
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <_ZNSt5arrayIS_IhLj32EELj2EE3endEv>:
      end() noexcept
 800399e:	b580      	push	{r7, lr}
 80039a0:	b082      	sub	sp, #8
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f859 	bl	8003a5e <_ZNSt5arrayIS_IhLj32EELj2EE4dataEv>
 80039ac:	4603      	mov	r3, r0
 80039ae:	3340      	adds	r3, #64	; 0x40
 80039b0:	4618      	mov	r0, r3
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <_ZNSt5arrayIhLj32EE5beginEv>:
      begin() noexcept
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f859 	bl	8003a78 <_ZNSt5arrayIhLj32EE4dataEv>
 80039c6:	4603      	mov	r3, r0
 80039c8:	4618      	mov	r0, r3
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <_ZNSt5arrayIhLj32EE3endEv>:
      end() noexcept
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f84d 	bl	8003a78 <_ZNSt5arrayIhLj32EE4dataEv>
 80039de:	4603      	mov	r3, r0
 80039e0:	3320      	adds	r3, #32
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <_ZNSt5arrayIhLj16EEixEj>:
      operator[](size_type __n) noexcept
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b082      	sub	sp, #8
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6839      	ldr	r1, [r7, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 f84a 	bl	8003a92 <_ZNSt14__array_traitsIhLj16EE6_S_refERA16_Khj>
 80039fe:	4603      	mov	r3, r0
      }
 8003a00:	4618      	mov	r0, r3
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <_ZNSt5arrayIS_IhLj32EELj2EEixEj>:
      operator[](size_type __n) noexcept
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6839      	ldr	r1, [r7, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 f849 	bl	8003aae <_ZNSt14__array_traitsISt5arrayIhLj32EELj2EE6_S_refERA2_KS1_j>
 8003a1c:	4603      	mov	r3, r0
      }
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <_ZNSt5arrayIhLj16EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b082      	sub	sp, #8
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 f84b 	bl	8003acc <_ZNSt14__array_traitsIhLj16EE6_S_ptrERA16_Kh>
 8003a36:	4603      	mov	r3, r0
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <_ZSt8__fill_aIPhiEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	68b9      	ldr	r1, [r7, #8]
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f846 	bl	8003ae2 <_ZSt9__fill_a1IPhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
 8003a56:	bf00      	nop
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <_ZNSt5arrayIS_IhLj32EELj2EE4dataEv>:
      data() noexcept
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 f856 	bl	8003b1a <_ZNSt14__array_traitsISt5arrayIhLj32EELj2EE6_S_ptrERA2_KS1_>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4618      	mov	r0, r3
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <_ZNSt5arrayIhLj32EE4dataEv>:
      data() noexcept
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 f854 	bl	8003b30 <_ZNSt14__array_traitsIhLj32EE6_S_ptrERA32_Kh>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <_ZNSt14__array_traitsIhLj16EE6_S_refERA16_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <_ZNSt14__array_traitsISt5arrayIhLj32EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	015b      	lsls	r3, r3, #5
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	4413      	add	r3, r2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <_ZNSt14__array_traitsIhLj16EE6_S_ptrERA16_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <_ZSt9__fill_a1IPhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8003ae2:	b480      	push	{r7}
 8003ae4:	b087      	sub	sp, #28
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 8003af4:	e006      	b.n	8003b04 <_ZSt9__fill_a1IPhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x22>
	*__first = __tmp;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	701a      	strb	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	3301      	adds	r3, #1
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d1f4      	bne.n	8003af6 <_ZSt9__fill_a1IPhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x14>
    }
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop
 8003b10:	371c      	adds	r7, #28
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <_ZNSt14__array_traitsISt5arrayIhLj32EELj2EE6_S_ptrERA2_KS1_>:
      _S_ptr(const _Type& __t) noexcept
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4618      	mov	r0, r3
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <_ZNSt14__array_traitsIhLj32EE6_S_ptrERA32_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <_ZN3PidC1Effff>:
 *      Author: lenovo
 */

#include "pid.hpp"

Pid::Pid(float kp, float ki, float kd, float dt)
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b086      	sub	sp, #24
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6178      	str	r0, [r7, #20]
 8003b4e:	ed87 0a04 	vstr	s0, [r7, #16]
 8003b52:	edc7 0a03 	vstr	s1, [r7, #12]
 8003b56:	ed87 1a02 	vstr	s2, [r7, #8]
 8003b5a:	edc7 1a01 	vstr	s3, [r7, #4]
{
	pid_instance.Kp = kp;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	619a      	str	r2, [r3, #24]
	pid_instance.Ki = ki;// * dt;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	61da      	str	r2, [r3, #28]
	pid_instance.Kd = kd;// / dt;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&pid_instance, 1);
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	2101      	movs	r1, #1
 8003b74:	4618      	mov	r0, r3
 8003b76:	f011 f909 	bl	8014d8c <arm_pid_init_f32>
#ifdef DEBUG
	_kp = kp;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	625a      	str	r2, [r3, #36]	; 0x24
	_ki = ki;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	629a      	str	r2, [r3, #40]	; 0x28
	_kd = kd;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	62da      	str	r2, [r3, #44]	; 0x2c
	_dt = dt;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	631a      	str	r2, [r3, #48]	; 0x30
#endif
}
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <_ZN3Pid6updateEf>:
	_kd = pid_instance.Kd;
#endif
}

float Pid::update(float error)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	ed87 0a00 	vstr	s0, [r7]
//	if(pid_instance.Ki != _ki)
//	{
//		pid_instance.Kd = pid_instance.Kd / _dt;
//		_kd = pid_instance.Kd;
//	}
	arm_pid_init_f32(&pid_instance, 0);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2100      	movs	r1, #0
 8003bac:	4618      	mov	r0, r3
 8003bae:	f011 f8ed 	bl	8014d8c <arm_pid_init_f32>
#endif

	return arm_pid_f32(&pid_instance, error);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	ed93 7a00 	vldr	s14, [r3]
 8003bc0:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bc4:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	edd3 6a01 	vldr	s13, [r3, #4]
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	edd3 7a03 	vldr	s15, [r3, #12]
 8003bd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8003bd8:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	edd3 6a02 	vldr	s13, [r3, #8]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	edd3 7a04 	vldr	s15, [r3, #16]
 8003be8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8003bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bfa:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	ee07 3a90 	vmov	s15, r3
}
 8003c18:	eeb0 0a67 	vmov.f32	s0, s15
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <LL_AHB2_GRP1_EnableClock>:
{
 8003c22:	b480      	push	{r7}
 8003c24:	b085      	sub	sp, #20
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4013      	ands	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c46:	68fb      	ldr	r3, [r7, #12]
}
 8003c48:	bf00      	nop
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <LL_AHB3_GRP1_EnableClock>:
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4013      	ands	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c78:	68fb      	ldr	r3, [r7, #12]
}
 8003c7a:	bf00      	nop
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
	...

08003c88 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8003c8c:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <MX_QUADSPI_Init+0x44>)
 8003c8e:	4a10      	ldr	r2, [pc, #64]	; (8003cd0 <MX_QUADSPI_Init+0x48>)
 8003c90:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8003c92:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <MX_QUADSPI_Init+0x44>)
 8003c94:	22ff      	movs	r2, #255	; 0xff
 8003c96:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8003c98:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <MX_QUADSPI_Init+0x44>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8003c9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <MX_QUADSPI_Init+0x44>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8003ca4:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <MX_QUADSPI_Init+0x44>)
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8003caa:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <MX_QUADSPI_Init+0x44>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8003cb0:	4b06      	ldr	r3, [pc, #24]	; (8003ccc <MX_QUADSPI_Init+0x44>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8003cb6:	4805      	ldr	r0, [pc, #20]	; (8003ccc <MX_QUADSPI_Init+0x44>)
 8003cb8:	f003 f88e 	bl	8006dd8 <HAL_QSPI_Init>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8003cc2:	f7ff fa9b 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8003cc6:	bf00      	nop
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	200010b0 	.word	0x200010b0
 8003cd0:	a0001000 	.word	0xa0001000

08003cd4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cdc:	f107 030c 	add.w	r3, r7, #12
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	609a      	str	r2, [r3, #8]
 8003ce8:	60da      	str	r2, [r3, #12]
 8003cea:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a19      	ldr	r2, [pc, #100]	; (8003d58 <HAL_QSPI_MspInit+0x84>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d12b      	bne.n	8003d4e <HAL_QSPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003cf6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003cfa:	f7ff ffab 	bl	8003c54 <LL_AHB3_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cfe:	2002      	movs	r0, #2
 8003d00:	f7ff ff8f 	bl	8003c22 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d04:	2001      	movs	r0, #1
 8003d06:	f7ff ff8c 	bl	8003c22 <LL_AHB2_GRP1_EnableClock>
    PA2     ------> QUADSPI_BK1_NCS
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3
    PA7     ------> QUADSPI_BK1_IO2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d10:	2302      	movs	r3, #2
 8003d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003d1c:	230a      	movs	r3, #10
 8003d1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d20:	f107 030c 	add.w	r3, r7, #12
 8003d24:	4619      	mov	r1, r3
 8003d26:	480d      	ldr	r0, [pc, #52]	; (8003d5c <HAL_QSPI_MspInit+0x88>)
 8003d28:	f002 fc02 	bl	8006530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 8003d2c:	23cc      	movs	r3, #204	; 0xcc
 8003d2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d30:	2302      	movs	r3, #2
 8003d32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003d3c:	230a      	movs	r3, #10
 8003d3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d40:	f107 030c 	add.w	r3, r7, #12
 8003d44:	4619      	mov	r1, r3
 8003d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d4a:	f002 fbf1 	bl	8006530 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8003d4e:	bf00      	nop
 8003d50:	3720      	adds	r7, #32
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	a0001000 	.word	0xa0001000
 8003d5c:	48000400 	.word	0x48000400

08003d60 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8003d64:	bf00      	nop
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d86:	bf00      	nop
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <LL_APB1_GRP1_EnableClock>:
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4013      	ands	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003db4:	68fb      	ldr	r3, [r7, #12]
}
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003dc8:	4b16      	ldr	r3, [pc, #88]	; (8003e24 <MX_RTC_Init+0x60>)
 8003dca:	4a17      	ldr	r2, [pc, #92]	; (8003e28 <MX_RTC_Init+0x64>)
 8003dcc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003dce:	4b15      	ldr	r3, [pc, #84]	; (8003e24 <MX_RTC_Init+0x60>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8003dd4:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <MX_RTC_Init+0x60>)
 8003dd6:	220f      	movs	r2, #15
 8003dd8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8003dda:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <MX_RTC_Init+0x60>)
 8003ddc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003de0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003de2:	4b10      	ldr	r3, [pc, #64]	; (8003e24 <MX_RTC_Init+0x60>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003de8:	4b0e      	ldr	r3, [pc, #56]	; (8003e24 <MX_RTC_Init+0x60>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003dee:	4b0d      	ldr	r3, [pc, #52]	; (8003e24 <MX_RTC_Init+0x60>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003df4:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <MX_RTC_Init+0x60>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003dfa:	480a      	ldr	r0, [pc, #40]	; (8003e24 <MX_RTC_Init+0x60>)
 8003dfc:	f004 feaa 	bl	8008b54 <HAL_RTC_Init>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8003e06:	f7ff f9f9 	bl	80031fc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	4805      	ldr	r0, [pc, #20]	; (8003e24 <MX_RTC_Init+0x60>)
 8003e10:	f004 ffa0 	bl	8008d54 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003e1a:	f7ff f9ef 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003e1e:	bf00      	nop
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	200010f4 	.word	0x200010f4
 8003e28:	40002800 	.word	0x40002800

08003e2c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b096      	sub	sp, #88	; 0x58
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e34:	f107 0308 	add.w	r3, r7, #8
 8003e38:	2250      	movs	r2, #80	; 0x50
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f011 f91f 	bl	8015080 <memset>
  if(rtcHandle->Instance==RTC)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a13      	ldr	r2, [pc, #76]	; (8003e94 <HAL_RTC_MspInit+0x68>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d11f      	bne.n	8003e8c <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8003e4c:	f002 ffa6 	bl	8006d9c <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003e50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e54:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e5a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e5c:	f107 0308 	add.w	r3, r7, #8
 8003e60:	4618      	mov	r0, r3
 8003e62:	f004 fbe9 	bl	8008638 <HAL_RCCEx_PeriphCLKConfig>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8003e6c:	f7ff f9c6 	bl	80031fc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003e70:	f7ff ff7d 	bl	8003d6e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003e74:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003e78:	f7ff ff8a 	bl	8003d90 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2105      	movs	r1, #5
 8003e80:	2003      	movs	r0, #3
 8003e82:	f001 ffd1 	bl	8005e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003e86:	2003      	movs	r0, #3
 8003e88:	f001 ffe8 	bl	8005e5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003e8c:	bf00      	nop
 8003e8e:	3758      	adds	r7, #88	; 0x58
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40002800 	.word	0x40002800

08003e98 <LL_AHB2_GRP1_EnableClock>:
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ea6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
}
 8003ebe:	bf00      	nop
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b085      	sub	sp, #20
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ed8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4013      	ands	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003eee:	68fb      	ldr	r3, [r7, #12]
}
 8003ef0:	bf00      	nop
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003f00:	4b1b      	ldr	r3, [pc, #108]	; (8003f70 <MX_SPI1_Init+0x74>)
 8003f02:	4a1c      	ldr	r2, [pc, #112]	; (8003f74 <MX_SPI1_Init+0x78>)
 8003f04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003f06:	4b1a      	ldr	r3, [pc, #104]	; (8003f70 <MX_SPI1_Init+0x74>)
 8003f08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003f0e:	4b18      	ldr	r3, [pc, #96]	; (8003f70 <MX_SPI1_Init+0x74>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f14:	4b16      	ldr	r3, [pc, #88]	; (8003f70 <MX_SPI1_Init+0x74>)
 8003f16:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003f1a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003f1c:	4b14      	ldr	r3, [pc, #80]	; (8003f70 <MX_SPI1_Init+0x74>)
 8003f1e:	2202      	movs	r2, #2
 8003f20:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f22:	4b13      	ldr	r3, [pc, #76]	; (8003f70 <MX_SPI1_Init+0x74>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f28:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <MX_SPI1_Init+0x74>)
 8003f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f2e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003f30:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <MX_SPI1_Init+0x74>)
 8003f32:	2228      	movs	r2, #40	; 0x28
 8003f34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f36:	4b0e      	ldr	r3, [pc, #56]	; (8003f70 <MX_SPI1_Init+0x74>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <MX_SPI1_Init+0x74>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f42:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <MX_SPI1_Init+0x74>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003f48:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <MX_SPI1_Init+0x74>)
 8003f4a:	2207      	movs	r2, #7
 8003f4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003f4e:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <MX_SPI1_Init+0x74>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003f54:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <MX_SPI1_Init+0x74>)
 8003f56:	2208      	movs	r2, #8
 8003f58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003f5a:	4805      	ldr	r0, [pc, #20]	; (8003f70 <MX_SPI1_Init+0x74>)
 8003f5c:	f004 ffb6 	bl	8008ecc <HAL_SPI_Init>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003f66:	f7ff f949 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003f6a:	bf00      	nop
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20001118 	.word	0x20001118
 8003f74:	40013000 	.word	0x40013000

08003f78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f80:	f107 030c 	add.w	r3, r7, #12
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	60da      	str	r2, [r3, #12]
 8003f8e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a37      	ldr	r2, [pc, #220]	; (8004074 <HAL_SPI_MspInit+0xfc>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d168      	bne.n	800406c <HAL_SPI_MspInit+0xf4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f9a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003f9e:	f7ff ff94 	bl	8003eca <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fa2:	2002      	movs	r0, #2
 8003fa4:	f7ff ff78 	bl	8003e98 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003fa8:	2338      	movs	r3, #56	; 0x38
 8003faa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fac:	2302      	movs	r3, #2
 8003fae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003fb8:	2305      	movs	r3, #5
 8003fba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fbc:	f107 030c 	add.w	r3, r7, #12
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	482d      	ldr	r0, [pc, #180]	; (8004078 <HAL_SPI_MspInit+0x100>)
 8003fc4:	f002 fab4 	bl	8006530 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 8003fc8:	4b2c      	ldr	r3, [pc, #176]	; (800407c <HAL_SPI_MspInit+0x104>)
 8003fca:	4a2d      	ldr	r2, [pc, #180]	; (8004080 <HAL_SPI_MspInit+0x108>)
 8003fcc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003fce:	4b2b      	ldr	r3, [pc, #172]	; (800407c <HAL_SPI_MspInit+0x104>)
 8003fd0:	2206      	movs	r2, #6
 8003fd2:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fd4:	4b29      	ldr	r3, [pc, #164]	; (800407c <HAL_SPI_MspInit+0x104>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fda:	4b28      	ldr	r3, [pc, #160]	; (800407c <HAL_SPI_MspInit+0x104>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003fe0:	4b26      	ldr	r3, [pc, #152]	; (800407c <HAL_SPI_MspInit+0x104>)
 8003fe2:	2280      	movs	r2, #128	; 0x80
 8003fe4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fe6:	4b25      	ldr	r3, [pc, #148]	; (800407c <HAL_SPI_MspInit+0x104>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fec:	4b23      	ldr	r3, [pc, #140]	; (800407c <HAL_SPI_MspInit+0x104>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003ff2:	4b22      	ldr	r3, [pc, #136]	; (800407c <HAL_SPI_MspInit+0x104>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003ff8:	4b20      	ldr	r3, [pc, #128]	; (800407c <HAL_SPI_MspInit+0x104>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003ffe:	481f      	ldr	r0, [pc, #124]	; (800407c <HAL_SPI_MspInit+0x104>)
 8004000:	f001 ff64 	bl	8005ecc <HAL_DMA_Init>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_SPI_MspInit+0x96>
    {
      Error_Handler();
 800400a:	f7ff f8f7 	bl	80031fc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a1a      	ldr	r2, [pc, #104]	; (800407c <HAL_SPI_MspInit+0x104>)
 8004012:	659a      	str	r2, [r3, #88]	; 0x58
 8004014:	4a19      	ldr	r2, [pc, #100]	; (800407c <HAL_SPI_MspInit+0x104>)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 800401a:	4b1a      	ldr	r3, [pc, #104]	; (8004084 <HAL_SPI_MspInit+0x10c>)
 800401c:	4a1a      	ldr	r2, [pc, #104]	; (8004088 <HAL_SPI_MspInit+0x110>)
 800401e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8004020:	4b18      	ldr	r3, [pc, #96]	; (8004084 <HAL_SPI_MspInit+0x10c>)
 8004022:	2207      	movs	r2, #7
 8004024:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004026:	4b17      	ldr	r3, [pc, #92]	; (8004084 <HAL_SPI_MspInit+0x10c>)
 8004028:	2210      	movs	r2, #16
 800402a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800402c:	4b15      	ldr	r3, [pc, #84]	; (8004084 <HAL_SPI_MspInit+0x10c>)
 800402e:	2200      	movs	r2, #0
 8004030:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004032:	4b14      	ldr	r3, [pc, #80]	; (8004084 <HAL_SPI_MspInit+0x10c>)
 8004034:	2280      	movs	r2, #128	; 0x80
 8004036:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004038:	4b12      	ldr	r3, [pc, #72]	; (8004084 <HAL_SPI_MspInit+0x10c>)
 800403a:	2200      	movs	r2, #0
 800403c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800403e:	4b11      	ldr	r3, [pc, #68]	; (8004084 <HAL_SPI_MspInit+0x10c>)
 8004040:	2200      	movs	r2, #0
 8004042:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004044:	4b0f      	ldr	r3, [pc, #60]	; (8004084 <HAL_SPI_MspInit+0x10c>)
 8004046:	2200      	movs	r2, #0
 8004048:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800404a:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <HAL_SPI_MspInit+0x10c>)
 800404c:	2200      	movs	r2, #0
 800404e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004050:	480c      	ldr	r0, [pc, #48]	; (8004084 <HAL_SPI_MspInit+0x10c>)
 8004052:	f001 ff3b 	bl	8005ecc <HAL_DMA_Init>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <HAL_SPI_MspInit+0xe8>
    {
      Error_Handler();
 800405c:	f7ff f8ce 	bl	80031fc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a08      	ldr	r2, [pc, #32]	; (8004084 <HAL_SPI_MspInit+0x10c>)
 8004064:	655a      	str	r2, [r3, #84]	; 0x54
 8004066:	4a07      	ldr	r2, [pc, #28]	; (8004084 <HAL_SPI_MspInit+0x10c>)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800406c:	bf00      	nop
 800406e:	3720      	adds	r7, #32
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40013000 	.word	0x40013000
 8004078:	48000400 	.word	0x48000400
 800407c:	2000117c 	.word	0x2000117c
 8004080:	40020008 	.word	0x40020008
 8004084:	200011dc 	.word	0x200011dc
 8004088:	4002001c 	.word	0x4002001c

0800408c <_ZNSt6atomicIbE5storeEbSt12memory_order>:
#if __cplusplus >= 201703L
    static constexpr bool is_always_lock_free = ATOMIC_BOOL_LOCK_FREE == 2;
#endif

    void
    store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
 800408c:	b580      	push	{r7, lr}
 800408e:	b088      	sub	sp, #32
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	460b      	mov	r3, r1
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	72fb      	strb	r3, [r7, #11]
    { _M_base.store(__i, __m); }
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	61fb      	str	r3, [r7, #28]
 800409e:	7afb      	ldrb	r3, [r7, #11]
 80040a0:	76fb      	strb	r3, [r7, #27]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	617b      	str	r3, [r7, #20]

      _GLIBCXX_ALWAYS_INLINE void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 80040a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80040aa:	6978      	ldr	r0, [r7, #20]
 80040ac:	f7ff fad2 	bl	8003654 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 80040b0:	6138      	str	r0, [r7, #16]
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, int(__m));
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	7efa      	ldrb	r2, [r7, #27]
 80040b6:	f3bf 8f5b 	dmb	ish
 80040ba:	701a      	strb	r2, [r3, #0]
 80040bc:	f3bf 8f5b 	dmb	ish
      }
 80040c0:	bf00      	nop
 80040c2:	bf00      	nop
 80040c4:	3720      	adds	r7, #32
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <_ZN20SpiDmaRequestHandler10putRequestEP13SpiDmaRequest>:
		SpiDmaRequestHandler(const SpiDmaRequestHandler&) = delete;
		SpiDmaRequestHandler& operator=(SpiDmaRequestHandler const&) = delete;

		using Sdrh = SpiDmaRequestHandler;

		static void putRequest(SpiDmaRequest *request)
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
		{
			xQueueSend(Sdrh::queue, (void*)request, (TickType_t)0);
 80040d4:	4b05      	ldr	r3, [pc, #20]	; (80040ec <_ZN20SpiDmaRequestHandler10putRequestEP13SpiDmaRequest+0x20>)
 80040d6:	6818      	ldr	r0, [r3, #0]
 80040d8:	2300      	movs	r3, #0
 80040da:	2200      	movs	r2, #0
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	f00c fec1 	bl	8010e64 <xQueueGenericSend>
		}
 80040e2:	bf00      	nop
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	2000132c 	.word	0x2000132c

080040f0 <_ZN20SpiDmaRequestHandler18peekRequestFromISREP13SpiDmaRequest>:
		static void peekRequestFromISR(SpiDmaRequest *request)
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
		{
			xQueuePeekFromISR(Sdrh::queue, (void*)request);
 80040f8:	4b04      	ldr	r3, [pc, #16]	; (800410c <_ZN20SpiDmaRequestHandler18peekRequestFromISREP13SpiDmaRequest+0x1c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6879      	ldr	r1, [r7, #4]
 80040fe:	4618      	mov	r0, r3
 8004100:	f00d fb42 	bl	8011788 <xQueuePeekFromISR>
		}
 8004104:	bf00      	nop
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	2000132c 	.word	0x2000132c

08004110 <_ZN20SpiDmaRequestHandler17getRequestFromISREP13SpiDmaRequest>:
		static void getRequestFromISR(SpiDmaRequest *request)
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
		{
			xQueueReceiveFromISR(Sdrh::queue, (void*)request, nullptr);
 8004118:	4b05      	ldr	r3, [pc, #20]	; (8004130 <_ZN20SpiDmaRequestHandler17getRequestFromISREP13SpiDmaRequest+0x20>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2200      	movs	r2, #0
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	4618      	mov	r0, r3
 8004122:	f00d fab1 	bl	8011688 <xQueueReceiveFromISR>
		}
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	2000132c 	.word	0x2000132c

08004134 <_ZN20SpiDmaRequestHandler19requestCountFromISREv>:
		static uint32_t requestCountFromISR()
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
		{
			return uxQueueMessagesWaitingFromISR(Sdrh::queue);
 8004138:	4b03      	ldr	r3, [pc, #12]	; (8004148 <_ZN20SpiDmaRequestHandler19requestCountFromISREv+0x14>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4618      	mov	r0, r3
 800413e:	f00d fb8c 	bl	801185a <uxQueueMessagesWaitingFromISR>
 8004142:	4603      	mov	r3, r0
		}
 8004144:	4618      	mov	r0, r3
 8004146:	bd80      	pop	{r7, pc}
 8004148:	2000132c 	.word	0x2000132c

0800414c <_ZN13SpiDmaRequestC1EPhS0_jP7GpioOutPSt6atomicIbE>:
//	┏┓  •┳┓     ┳┓
//	┗┓┏┓┓┃┃┏┳┓┏┓┣┫┏┓┏┓┓┏┏┓┏╋
//	┗┛┣┛┗┻┛┛┗┗┗┻┛┗┗ ┗┫┗┻┗ ┛┗
//	  ┛              ┗

SpiDmaRequest::SpiDmaRequest(uint8_t *tx_data, uint8_t *rx_data, size_t size, GpioOut *cs, std::atomic<bool> *pending_request) : tx_data(tx_data), rx_data(rx_data), size(size), cs(cs), pending_request(pending_request) { }
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	605a      	str	r2, [r3, #4]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	609a      	str	r2, [r3, #8]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	60da      	str	r2, [r3, #12]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	611a      	str	r2, [r3, #16]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
	...

08004188 <_ZN13SpiDmaRequest4sendEv>:

void SpiDmaRequest::send()
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
	SpiDmaRequestHandler::putRequest(this);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7ff ff9b 	bl	80040cc <_ZN20SpiDmaRequestHandler10putRequestEP13SpiDmaRequest>
	if(this->pending_request != nullptr)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d006      	beq.n	80041ac <_ZN13SpiDmaRequest4sendEv+0x24>
	{
		this->pending_request->store(true);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	2205      	movs	r2, #5
 80041a4:	2101      	movs	r1, #1
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff ff70 	bl	800408c <_ZNSt6atomicIbE5storeEbSt12memory_order>
	}
	if(hspi1.State == HAL_SPI_STATE_READY)
 80041ac:	4b20      	ldr	r3, [pc, #128]	; (8004230 <_ZN13SpiDmaRequest4sendEv+0xa8>)
 80041ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	bf0c      	ite	eq
 80041b8:	2301      	moveq	r3, #1
 80041ba:	2300      	movne	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d032      	beq.n	8004228 <_ZN13SpiDmaRequest4sendEv+0xa0>
	{
		this->cs->on();
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fd f86d 	bl	80012a6 <_ZN7GpioOut2onEv>
		if(this->tx_data != nullptr && this->rx_data != nullptr)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00e      	beq.n	80041f2 <_ZN13SpiDmaRequest4sendEv+0x6a>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <_ZN13SpiDmaRequest4sendEv+0x6a>
			HAL_SPI_TransmitReceive_DMA(&hspi1, this->tx_data, this->rx_data, this->size);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6819      	ldr	r1, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	4811      	ldr	r0, [pc, #68]	; (8004230 <_ZN13SpiDmaRequest4sendEv+0xa8>)
 80041ec:	f005 f922 	bl	8009434 <HAL_SPI_TransmitReceive_DMA>
		else if(this->tx_data != nullptr)
			HAL_SPI_Transmit_DMA(&hspi1, this->tx_data, this->size);
		else if(this->rx_data != nullptr)
			HAL_SPI_Receive_DMA(&hspi1, this->rx_data, this->size);
	}
}
 80041f0:	e01a      	b.n	8004228 <_ZN13SpiDmaRequest4sendEv+0xa0>
		else if(this->tx_data != nullptr)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d009      	beq.n	800420e <_ZN13SpiDmaRequest4sendEv+0x86>
			HAL_SPI_Transmit_DMA(&hspi1, this->tx_data, this->size);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6819      	ldr	r1, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	b29b      	uxth	r3, r3
 8004204:	461a      	mov	r2, r3
 8004206:	480a      	ldr	r0, [pc, #40]	; (8004230 <_ZN13SpiDmaRequest4sendEv+0xa8>)
 8004208:	f004 ff04 	bl	8009014 <HAL_SPI_Transmit_DMA>
}
 800420c:	e00c      	b.n	8004228 <_ZN13SpiDmaRequest4sendEv+0xa0>
		else if(this->rx_data != nullptr)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d008      	beq.n	8004228 <_ZN13SpiDmaRequest4sendEv+0xa0>
			HAL_SPI_Receive_DMA(&hspi1, this->rx_data, this->size);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6859      	ldr	r1, [r3, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	b29b      	uxth	r3, r3
 8004220:	461a      	mov	r2, r3
 8004222:	4803      	ldr	r0, [pc, #12]	; (8004230 <_ZN13SpiDmaRequest4sendEv+0xa8>)
 8004224:	f004 ffe6 	bl	80091f4 <HAL_SPI_Receive_DMA>
}
 8004228:	bf00      	nop
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	20001118 	.word	0x20001118

08004234 <_ZL14handleCallbackP19__SPI_HandleTypeDef>:
//	┃┏┓╋┏┓┏┓┏┓┓┏┏┓╋
//	┻┛┗┗┗ ┛ ┛ ┗┻┣┛┗
//				┛

static void handleCallback(SPI_HandleTypeDef *hspi)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08a      	sub	sp, #40	; 0x28
 8004238:	af02      	add	r7, sp, #8
 800423a:	6078      	str	r0, [r7, #4]
	SpiDmaRequest request_buff { nullptr, nullptr, 0, nullptr, nullptr };
 800423c:	f107 000c 	add.w	r0, r7, #12
 8004240:	2300      	movs	r3, #0
 8004242:	9301      	str	r3, [sp, #4]
 8004244:	2300      	movs	r3, #0
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	2300      	movs	r3, #0
 800424a:	2200      	movs	r2, #0
 800424c:	2100      	movs	r1, #0
 800424e:	f7ff ff7d 	bl	800414c <_ZN13SpiDmaRequestC1EPhS0_jP7GpioOutPSt6atomicIbE>
	SpiDmaRequestHandler::getRequestFromISR(&request_buff);
 8004252:	f107 030c 	add.w	r3, r7, #12
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff ff5a 	bl	8004110 <_ZN20SpiDmaRequestHandler17getRequestFromISREP13SpiDmaRequest>
	request_buff.cs->off();
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	4618      	mov	r0, r3
 8004260:	f7fd f83d 	bl	80012de <_ZN7GpioOut3offEv>
	if(request_buff.pending_request != nullptr)
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d005      	beq.n	8004276 <_ZL14handleCallbackP19__SPI_HandleTypeDef+0x42>
	{
		request_buff.pending_request->store(false);
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	2205      	movs	r2, #5
 800426e:	2100      	movs	r1, #0
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff ff0b 	bl	800408c <_ZNSt6atomicIbE5storeEbSt12memory_order>
	}
	if(SpiDmaRequestHandler::requestCountFromISR() != 0)
 8004276:	f7ff ff5d 	bl	8004134 <_ZN20SpiDmaRequestHandler19requestCountFromISREv>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	bf14      	ite	ne
 8004280:	2301      	movne	r3, #1
 8004282:	2300      	moveq	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d02b      	beq.n	80042e2 <_ZL14handleCallbackP19__SPI_HandleTypeDef+0xae>
	{
		SpiDmaRequestHandler::peekRequestFromISR(&request_buff);
 800428a:	f107 030c 	add.w	r3, r7, #12
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff ff2e 	bl	80040f0 <_ZN20SpiDmaRequestHandler18peekRequestFromISREP13SpiDmaRequest>
		request_buff.cs->on();
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	4618      	mov	r0, r3
 8004298:	f7fd f805 	bl	80012a6 <_ZN7GpioOut2onEv>
		if(request_buff.tx_data != nullptr && request_buff.rx_data != nullptr)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <_ZL14handleCallbackP19__SPI_HandleTypeDef+0x84>
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d007      	beq.n	80042b8 <_ZL14handleCallbackP19__SPI_HandleTypeDef+0x84>
			HAL_SPI_TransmitReceive_DMA(&hspi1, request_buff.tx_data, request_buff.rx_data, request_buff.size);
 80042a8:	68f9      	ldr	r1, [r7, #12]
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	480e      	ldr	r0, [pc, #56]	; (80042ec <_ZL14handleCallbackP19__SPI_HandleTypeDef+0xb8>)
 80042b2:	f005 f8bf 	bl	8009434 <HAL_SPI_TransmitReceive_DMA>
		else if(request_buff.tx_data != nullptr)
			HAL_SPI_Transmit_DMA(&hspi1, request_buff.tx_data, request_buff.size);
		else if(request_buff.rx_data != nullptr)
			HAL_SPI_Receive_DMA(&hspi1, request_buff.rx_data, request_buff.size);
	}
}
 80042b6:	e014      	b.n	80042e2 <_ZL14handleCallbackP19__SPI_HandleTypeDef+0xae>
		else if(request_buff.tx_data != nullptr)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d007      	beq.n	80042ce <_ZL14handleCallbackP19__SPI_HandleTypeDef+0x9a>
			HAL_SPI_Transmit_DMA(&hspi1, request_buff.tx_data, request_buff.size);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	b292      	uxth	r2, r2
 80042c4:	4619      	mov	r1, r3
 80042c6:	4809      	ldr	r0, [pc, #36]	; (80042ec <_ZL14handleCallbackP19__SPI_HandleTypeDef+0xb8>)
 80042c8:	f004 fea4 	bl	8009014 <HAL_SPI_Transmit_DMA>
}
 80042cc:	e009      	b.n	80042e2 <_ZL14handleCallbackP19__SPI_HandleTypeDef+0xae>
		else if(request_buff.rx_data != nullptr)
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d006      	beq.n	80042e2 <_ZL14handleCallbackP19__SPI_HandleTypeDef+0xae>
			HAL_SPI_Receive_DMA(&hspi1, request_buff.rx_data, request_buff.size);
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	b292      	uxth	r2, r2
 80042da:	4619      	mov	r1, r3
 80042dc:	4803      	ldr	r0, [pc, #12]	; (80042ec <_ZL14handleCallbackP19__SPI_HandleTypeDef+0xb8>)
 80042de:	f004 ff89 	bl	80091f4 <HAL_SPI_Receive_DMA>
}
 80042e2:	bf00      	nop
 80042e4:	3720      	adds	r7, #32
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20001118 	.word	0x20001118

080042f0 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
	handleCallback(hspi);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff ff9b 	bl	8004234 <_ZL14handleCallbackP19__SPI_HandleTypeDef>
}
 80042fe:	bf00      	nop
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
	handleCallback(hspi);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff ff90 	bl	8004234 <_ZL14handleCallbackP19__SPI_HandleTypeDef>
}
 8004314:	bf00      	nop
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
	handleCallback(hspi);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff ff85 	bl	8004234 <_ZL14handleCallbackP19__SPI_HandleTypeDef>
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <_Z41__static_initialization_and_destruction_0ii>:
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af02      	add	r7, sp, #8
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d11d      	bne.n	8004380 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800434a:	4293      	cmp	r3, r2
 800434c:	d118      	bne.n	8004380 <_Z41__static_initialization_and_destruction_0ii+0x4c>
		static inline QueueHandle_t queue = xQueueCreateStatic(8, sizeof(SpiDmaRequest), queue_stotage, &static_queue);
 800434e:	4b0e      	ldr	r3, [pc, #56]	; (8004388 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3301      	adds	r3, #1
 8004354:	4a0c      	ldr	r2, [pc, #48]	; (8004388 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b01      	cmp	r3, #1
 800435e:	bf0c      	ite	eq
 8004360:	2301      	moveq	r3, #1
 8004362:	2300      	movne	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00a      	beq.n	8004380 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800436a:	2300      	movs	r3, #0
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	4b07      	ldr	r3, [pc, #28]	; (800438c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004370:	4a07      	ldr	r2, [pc, #28]	; (8004390 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004372:	2114      	movs	r1, #20
 8004374:	2008      	movs	r0, #8
 8004376:	f00c fb7f 	bl	8010a78 <xQueueGenericCreateStatic>
 800437a:	4603      	mov	r3, r0
 800437c:	4a05      	ldr	r2, [pc, #20]	; (8004394 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800437e:	6013      	str	r3, [r2, #0]
}
 8004380:	bf00      	nop
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20001330 	.word	0x20001330
 800438c:	2000123c 	.word	0x2000123c
 8004390:	2000128c 	.word	0x2000128c
 8004394:	2000132c 	.word	0x2000132c

08004398 <_GLOBAL__sub_I__ZN13SpiDmaRequestC2EPhS0_jP7GpioOutPSt6atomicIbE>:
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
 800439c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80043a0:	2001      	movs	r0, #1
 80043a2:	f7ff ffc7 	bl	8004334 <_Z41__static_initialization_and_destruction_0ii>
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <LL_AHB3_GRP1_EnableClock>:
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80043b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4313      	orrs	r3, r2
 80043be:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80043c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4013      	ands	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80043cc:	68fb      	ldr	r3, [r7, #12]
}
 80043ce:	bf00      	nop
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80043de:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80043e2:	f7ff ffe1 	bl	80043a8 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80043e6:	2200      	movs	r2, #0
 80043e8:	210f      	movs	r1, #15
 80043ea:	f06f 0001 	mvn.w	r0, #1
 80043ee:	f001 fd1b 	bl	8005e28 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 80043f2:	2200      	movs	r2, #0
 80043f4:	2105      	movs	r1, #5
 80043f6:	202e      	movs	r0, #46	; 0x2e
 80043f8:	f001 fd16 	bl	8005e28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80043fc:	202e      	movs	r0, #46	; 0x2e
 80043fe:	f001 fd2d 	bl	8005e5c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004402:	bf00      	nop
 8004404:	bd80      	pop	{r7, pc}

08004406 <LL_APB2_GRP1_EnableClock>:
{
 8004406:	b480      	push	{r7}
 8004408:	b085      	sub	sp, #20
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800440e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004412:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004414:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4313      	orrs	r3, r2
 800441c:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800441e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004422:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4013      	ands	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800442a:	68fb      	ldr	r3, [r7, #12]
}
 800442c:	bf00      	nop
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08c      	sub	sp, #48	; 0x30
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004444:	2300      	movs	r3, #0
 8004446:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8004448:	2200      	movs	r2, #0
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	201a      	movs	r0, #26
 800444e:	f001 fceb 	bl	8005e28 <HAL_NVIC_SetPriority>
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8004452:	201a      	movs	r0, #26
 8004454:	f001 fd02 	bl	8005e5c <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8004458:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800445c:	f7ff ffd3 	bl	8004406 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004460:	f107 0208 	add.w	r2, r7, #8
 8004464:	f107 030c 	add.w	r3, r7, #12
 8004468:	4611      	mov	r1, r2
 800446a:	4618      	mov	r0, r3
 800446c:	f003 fe52 	bl	8008114 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004470:	f003 fe3a 	bl	80080e8 <HAL_RCC_GetPCLK2Freq>
 8004474:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004478:	4a12      	ldr	r2, [pc, #72]	; (80044c4 <HAL_InitTick+0x8c>)
 800447a:	fba2 2303 	umull	r2, r3, r2, r3
 800447e:	0c9b      	lsrs	r3, r3, #18
 8004480:	3b01      	subs	r3, #1
 8004482:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8004484:	4b10      	ldr	r3, [pc, #64]	; (80044c8 <HAL_InitTick+0x90>)
 8004486:	4a11      	ldr	r2, [pc, #68]	; (80044cc <HAL_InitTick+0x94>)
 8004488:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800448a:	4b0f      	ldr	r3, [pc, #60]	; (80044c8 <HAL_InitTick+0x90>)
 800448c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004490:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8004492:	4a0d      	ldr	r2, [pc, #52]	; (80044c8 <HAL_InitTick+0x90>)
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8004498:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <HAL_InitTick+0x90>)
 800449a:	2200      	movs	r2, #0
 800449c:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800449e:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <HAL_InitTick+0x90>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 80044a4:	4808      	ldr	r0, [pc, #32]	; (80044c8 <HAL_InitTick+0x90>)
 80044a6:	f005 fc67 	bl	8009d78 <HAL_TIM_Base_Init>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d104      	bne.n	80044ba <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80044b0:	4805      	ldr	r0, [pc, #20]	; (80044c8 <HAL_InitTick+0x90>)
 80044b2:	f005 fcb9 	bl	8009e28 <HAL_TIM_Base_Start_IT>
 80044b6:	4603      	mov	r3, r0
 80044b8:	e000      	b.n	80044bc <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3730      	adds	r7, #48	; 0x30
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	431bde83 	.word	0x431bde83
 80044c8:	20001334 	.word	0x20001334
 80044cc:	40014800 	.word	0x40014800

080044d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044d4:	e7fe      	b.n	80044d4 <NMI_Handler+0x4>

080044d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044d6:	b480      	push	{r7}
 80044d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044da:	e7fe      	b.n	80044da <HardFault_Handler+0x4>

080044dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044e0:	e7fe      	b.n	80044e0 <MemManage_Handler+0x4>

080044e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044e2:	b480      	push	{r7}
 80044e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044e6:	e7fe      	b.n	80044e6 <BusFault_Handler+0x4>

080044e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044ec:	e7fe      	b.n	80044ec <UsageFault_Handler+0x4>

080044ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044ee:	b480      	push	{r7}
 80044f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044f2:	bf00      	nop
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8004500:	f7fe f8c0 	bl	8002684 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8004504:	bf00      	nop
 8004506:	bd80      	pop	{r7, pc}

08004508 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800450c:	4802      	ldr	r0, [pc, #8]	; (8004518 <DMA1_Channel1_IRQHandler+0x10>)
 800450e:	f001 febe 	bl	800628e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004512:	bf00      	nop
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	2000117c 	.word	0x2000117c

0800451c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004520:	4802      	ldr	r0, [pc, #8]	; (800452c <DMA1_Channel2_IRQHandler+0x10>)
 8004522:	f001 feb4 	bl	800628e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004526:	bf00      	nop
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	200011dc 	.word	0x200011dc

08004530 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8004534:	4802      	ldr	r0, [pc, #8]	; (8004540 <DMA1_Channel3_IRQHandler+0x10>)
 8004536:	f001 feaa 	bl	800628e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800453a:	bf00      	nop
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20001464 	.word	0x20001464

08004544 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8004548:	4802      	ldr	r0, [pc, #8]	; (8004554 <DMA1_Channel4_IRQHandler+0x10>)
 800454a:	f001 fea0 	bl	800628e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800454e:	bf00      	nop
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	200014c4 	.word	0x200014c4

08004558 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800455c:	4802      	ldr	r0, [pc, #8]	; (8004568 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800455e:	f005 fded 	bl	800a13c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004562:	bf00      	nop
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20001384 	.word	0x20001384

0800456c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004570:	4803      	ldr	r0, [pc, #12]	; (8004580 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8004572:	f005 fde3 	bl	800a13c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8004576:	4803      	ldr	r0, [pc, #12]	; (8004584 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8004578:	f005 fde0 	bl	800a13c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800457c:	bf00      	nop
 800457e:	bd80      	pop	{r7, pc}
 8004580:	20001384 	.word	0x20001384
 8004584:	20001334 	.word	0x20001334

08004588 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800458c:	4802      	ldr	r0, [pc, #8]	; (8004598 <LPUART1_IRQHandler+0x10>)
 800458e:	f006 fee1 	bl	800b354 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8004592:	bf00      	nop
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	200013d0 	.word	0x200013d0

0800459c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80045a0:	f010 fa74 	bl	8014a8c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80045a4:	bf00      	nop
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80045ac:	f010 faa4 	bl	8014af8 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80045b0:	bf00      	nop
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80045b8:	f002 f92a 	bl	8006810 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80045bc:	bf00      	nop
 80045be:	bd80      	pop	{r7, pc}

080045c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045c8:	4a14      	ldr	r2, [pc, #80]	; (800461c <_sbrk+0x5c>)
 80045ca:	4b15      	ldr	r3, [pc, #84]	; (8004620 <_sbrk+0x60>)
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045d4:	4b13      	ldr	r3, [pc, #76]	; (8004624 <_sbrk+0x64>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d102      	bne.n	80045e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045dc:	4b11      	ldr	r3, [pc, #68]	; (8004624 <_sbrk+0x64>)
 80045de:	4a12      	ldr	r2, [pc, #72]	; (8004628 <_sbrk+0x68>)
 80045e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045e2:	4b10      	ldr	r3, [pc, #64]	; (8004624 <_sbrk+0x64>)
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4413      	add	r3, r2
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d207      	bcs.n	8004600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045f0:	f010 fd5e 	bl	80150b0 <__errno>
 80045f4:	4603      	mov	r3, r0
 80045f6:	220c      	movs	r2, #12
 80045f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045fa:	f04f 33ff 	mov.w	r3, #4294967295
 80045fe:	e009      	b.n	8004614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004600:	4b08      	ldr	r3, [pc, #32]	; (8004624 <_sbrk+0x64>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004606:	4b07      	ldr	r3, [pc, #28]	; (8004624 <_sbrk+0x64>)
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4413      	add	r3, r2
 800460e:	4a05      	ldr	r2, [pc, #20]	; (8004624 <_sbrk+0x64>)
 8004610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004612:	68fb      	ldr	r3, [r7, #12]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	20030000 	.word	0x20030000
 8004620:	00000400 	.word	0x00000400
 8004624:	20001380 	.word	0x20001380
 8004628:	200033c8 	.word	0x200033c8

0800462c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8004630:	4b24      	ldr	r3, [pc, #144]	; (80046c4 <SystemInit+0x98>)
 8004632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004636:	4a23      	ldr	r2, [pc, #140]	; (80046c4 <SystemInit+0x98>)
 8004638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800463c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004654:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8004658:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800465a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004664:	4b18      	ldr	r3, [pc, #96]	; (80046c8 <SystemInit+0x9c>)
 8004666:	4013      	ands	r3, r2
 8004668:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800466a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800466e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004672:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004676:	f023 0305 	bic.w	r3, r3, #5
 800467a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800467e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004682:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004686:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800468a:	f023 0301 	bic.w	r3, r3, #1
 800468e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004696:	4a0d      	ldr	r2, [pc, #52]	; (80046cc <SystemInit+0xa0>)
 8004698:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800469a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800469e:	4a0b      	ldr	r2, [pc, #44]	; (80046cc <SystemInit+0xa0>)
 80046a0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80046a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80046b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b6:	2200      	movs	r2, #0
 80046b8:	619a      	str	r2, [r3, #24]
}
 80046ba:	bf00      	nop
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	e000ed00 	.word	0xe000ed00
 80046c8:	faf6fefb 	.word	0xfaf6fefb
 80046cc:	22041000 	.word	0x22041000

080046d0 <LL_AHB2_GRP1_EnableClock>:
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80046d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80046e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4013      	ands	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80046f4:	68fb      	ldr	r3, [r7, #12]
}
 80046f6:	bf00      	nop
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <LL_APB2_GRP1_EnableClock>:
{
 8004702:	b480      	push	{r7}
 8004704:	b085      	sub	sp, #20
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800470a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800470e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004710:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4313      	orrs	r3, r2
 8004718:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800471a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800471e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4013      	ands	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004726:	68fb      	ldr	r3, [r7, #12]
}
 8004728:	bf00      	nop
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b09c      	sub	sp, #112	; 0x70
 8004738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800473a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	605a      	str	r2, [r3, #4]
 8004744:	609a      	str	r2, [r3, #8]
 8004746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004748:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	605a      	str	r2, [r3, #4]
 8004752:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004754:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	605a      	str	r2, [r3, #4]
 800475e:	609a      	str	r2, [r3, #8]
 8004760:	60da      	str	r2, [r3, #12]
 8004762:	611a      	str	r2, [r3, #16]
 8004764:	615a      	str	r2, [r3, #20]
 8004766:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004768:	1d3b      	adds	r3, r7, #4
 800476a:	2234      	movs	r2, #52	; 0x34
 800476c:	2100      	movs	r1, #0
 800476e:	4618      	mov	r0, r3
 8004770:	f010 fc86 	bl	8015080 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004774:	4b4b      	ldr	r3, [pc, #300]	; (80048a4 <MX_TIM1_Init+0x170>)
 8004776:	4a4c      	ldr	r2, [pc, #304]	; (80048a8 <MX_TIM1_Init+0x174>)
 8004778:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4 - 1;
 800477a:	4b4a      	ldr	r3, [pc, #296]	; (80048a4 <MX_TIM1_Init+0x170>)
 800477c:	2203      	movs	r2, #3
 800477e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004780:	4b48      	ldr	r3, [pc, #288]	; (80048a4 <MX_TIM1_Init+0x170>)
 8004782:	2200      	movs	r2, #0
 8004784:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000 - 1;
 8004786:	4b47      	ldr	r3, [pc, #284]	; (80048a4 <MX_TIM1_Init+0x170>)
 8004788:	f242 720f 	movw	r2, #9999	; 0x270f
 800478c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800478e:	4b45      	ldr	r3, [pc, #276]	; (80048a4 <MX_TIM1_Init+0x170>)
 8004790:	2200      	movs	r2, #0
 8004792:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004794:	4b43      	ldr	r3, [pc, #268]	; (80048a4 <MX_TIM1_Init+0x170>)
 8004796:	2200      	movs	r2, #0
 8004798:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800479a:	4b42      	ldr	r3, [pc, #264]	; (80048a4 <MX_TIM1_Init+0x170>)
 800479c:	2200      	movs	r2, #0
 800479e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80047a0:	4840      	ldr	r0, [pc, #256]	; (80048a4 <MX_TIM1_Init+0x170>)
 80047a2:	f005 fae9 	bl	8009d78 <HAL_TIM_Base_Init>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80047ac:	f7fe fd26 	bl	80031fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047b4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80047b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80047ba:	4619      	mov	r1, r3
 80047bc:	4839      	ldr	r0, [pc, #228]	; (80048a4 <MX_TIM1_Init+0x170>)
 80047be:	f005 fed9 	bl	800a574 <HAL_TIM_ConfigClockSource>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80047c8:	f7fe fd18 	bl	80031fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80047cc:	4835      	ldr	r0, [pc, #212]	; (80048a4 <MX_TIM1_Init+0x170>)
 80047ce:	f005 fb79 	bl	8009ec4 <HAL_TIM_PWM_Init>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80047d8:	f7fe fd10 	bl	80031fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047dc:	2300      	movs	r3, #0
 80047de:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80047e0:	2300      	movs	r3, #0
 80047e2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047e4:	2300      	movs	r3, #0
 80047e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80047e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80047ec:	4619      	mov	r1, r3
 80047ee:	482d      	ldr	r0, [pc, #180]	; (80048a4 <MX_TIM1_Init+0x170>)
 80047f0:	f006 fb62 	bl	800aeb8 <HAL_TIMEx_MasterConfigSynchronization>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80047fa:	f7fe fcff 	bl	80031fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047fe:	2360      	movs	r3, #96	; 0x60
 8004800:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8004802:	2300      	movs	r3, #0
 8004804:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004806:	2300      	movs	r3, #0
 8004808:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800480a:	2300      	movs	r3, #0
 800480c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800480e:	2304      	movs	r3, #4
 8004810:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004812:	2300      	movs	r3, #0
 8004814:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004816:	2300      	movs	r3, #0
 8004818:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800481a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800481e:	2200      	movs	r2, #0
 8004820:	4619      	mov	r1, r3
 8004822:	4820      	ldr	r0, [pc, #128]	; (80048a4 <MX_TIM1_Init+0x170>)
 8004824:	f005 fd92 	bl	800a34c <HAL_TIM_PWM_ConfigChannel>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800482e:	f7fe fce5 	bl	80031fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004832:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004836:	2208      	movs	r2, #8
 8004838:	4619      	mov	r1, r3
 800483a:	481a      	ldr	r0, [pc, #104]	; (80048a4 <MX_TIM1_Init+0x170>)
 800483c:	f005 fd86 	bl	800a34c <HAL_TIM_PWM_ConfigChannel>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8004846:	f7fe fcd9 	bl	80031fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800484a:	2300      	movs	r3, #0
 800484c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800484e:	2300      	movs	r3, #0
 8004850:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004856:	2300      	movs	r3, #0
 8004858:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800485a:	2300      	movs	r3, #0
 800485c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800485e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004862:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004864:	2300      	movs	r3, #0
 8004866:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004868:	2300      	movs	r3, #0
 800486a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800486c:	2300      	movs	r3, #0
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004870:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004874:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004876:	2300      	movs	r3, #0
 8004878:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800487a:	2300      	movs	r3, #0
 800487c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800487e:	2300      	movs	r3, #0
 8004880:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004882:	1d3b      	adds	r3, r7, #4
 8004884:	4619      	mov	r1, r3
 8004886:	4807      	ldr	r0, [pc, #28]	; (80048a4 <MX_TIM1_Init+0x170>)
 8004888:	f006 fb76 	bl	800af78 <HAL_TIMEx_ConfigBreakDeadTime>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8004892:	f7fe fcb3 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004896:	4803      	ldr	r0, [pc, #12]	; (80048a4 <MX_TIM1_Init+0x170>)
 8004898:	f000 f82c 	bl	80048f4 <HAL_TIM_MspPostInit>

}
 800489c:	bf00      	nop
 800489e:	3770      	adds	r7, #112	; 0x70
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	20001384 	.word	0x20001384
 80048a8:	40012c00 	.word	0x40012c00

080048ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a0d      	ldr	r2, [pc, #52]	; (80048f0 <HAL_TIM_Base_MspInit+0x44>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d113      	bne.n	80048e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80048be:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80048c2:	f7ff ff1e 	bl	8004702 <LL_APB2_GRP1_EnableClock>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 80048c6:	2200      	movs	r2, #0
 80048c8:	2105      	movs	r1, #5
 80048ca:	2019      	movs	r0, #25
 80048cc:	f001 faac 	bl	8005e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80048d0:	2019      	movs	r0, #25
 80048d2:	f001 fac3 	bl	8005e5c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 15, 0);
 80048d6:	2200      	movs	r2, #0
 80048d8:	210f      	movs	r1, #15
 80048da:	201a      	movs	r0, #26
 80048dc:	f001 faa4 	bl	8005e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80048e0:	201a      	movs	r0, #26
 80048e2:	f001 fabb 	bl	8005e5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80048e6:	bf00      	nop
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	40012c00 	.word	0x40012c00

080048f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b088      	sub	sp, #32
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048fc:	f107 030c 	add.w	r3, r7, #12
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	605a      	str	r2, [r3, #4]
 8004906:	609a      	str	r2, [r3, #8]
 8004908:	60da      	str	r2, [r3, #12]
 800490a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a0d      	ldr	r2, [pc, #52]	; (8004948 <HAL_TIM_MspPostInit+0x54>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d114      	bne.n	8004940 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004916:	2001      	movs	r0, #1
 8004918:	f7ff feda 	bl	80046d0 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800491c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8004920:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004922:	2302      	movs	r3, #2
 8004924:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800492a:	2303      	movs	r3, #3
 800492c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800492e:	2301      	movs	r3, #1
 8004930:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004932:	f107 030c 	add.w	r3, r7, #12
 8004936:	4619      	mov	r1, r3
 8004938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800493c:	f001 fdf8 	bl	8006530 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004940:	bf00      	nop
 8004942:	3720      	adds	r7, #32
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40012c00 	.word	0x40012c00

0800494c <LL_AHB2_GRP1_EnableClock>:
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004958:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800495a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4313      	orrs	r3, r2
 8004962:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004968:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4013      	ands	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004970:	68fb      	ldr	r3, [r7, #12]
}
 8004972:	bf00      	nop
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <LL_APB1_GRP2_EnableClock>:
{
 800497e:	b480      	push	{r7}
 8004980:	b085      	sub	sp, #20
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8004986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800498a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800498c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4313      	orrs	r3, r2
 8004994:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8004996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800499a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4013      	ands	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80049a2:	68fb      	ldr	r3, [r7, #12]
}
 80049a4:	bf00      	nop
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80049b4:	4b22      	ldr	r3, [pc, #136]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 80049b6:	4a23      	ldr	r2, [pc, #140]	; (8004a44 <MX_LPUART1_UART_Init+0x94>)
 80049b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80049ba:	4b21      	ldr	r3, [pc, #132]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 80049bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80049c0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80049c2:	4b1f      	ldr	r3, [pc, #124]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80049c8:	4b1d      	ldr	r3, [pc, #116]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80049ce:	4b1c      	ldr	r3, [pc, #112]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80049d4:	4b1a      	ldr	r3, [pc, #104]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 80049d6:	220c      	movs	r2, #12
 80049d8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049da:	4b19      	ldr	r3, [pc, #100]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 80049dc:	2200      	movs	r2, #0
 80049de:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80049e0:	4b17      	ldr	r3, [pc, #92]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80049e6:	4b16      	ldr	r3, [pc, #88]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049ec:	4b14      	ldr	r3, [pc, #80]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80049f2:	4b13      	ldr	r3, [pc, #76]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80049f8:	4811      	ldr	r0, [pc, #68]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 80049fa:	f006 fb81 	bl	800b100 <HAL_UART_Init>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8004a04:	f7fe fbfa 	bl	80031fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a08:	2100      	movs	r1, #0
 8004a0a:	480d      	ldr	r0, [pc, #52]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 8004a0c:	f008 fb05 	bl	800d01a <HAL_UARTEx_SetTxFifoThreshold>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004a16:	f7fe fbf1 	bl	80031fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	4808      	ldr	r0, [pc, #32]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 8004a1e:	f008 fb3a 	bl	800d096 <HAL_UARTEx_SetRxFifoThreshold>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004a28:	f7fe fbe8 	bl	80031fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004a2c:	4804      	ldr	r0, [pc, #16]	; (8004a40 <MX_LPUART1_UART_Init+0x90>)
 8004a2e:	f008 fabb 	bl	800cfa8 <HAL_UARTEx_DisableFifoMode>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004a38:	f7fe fbe0 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8004a3c:	bf00      	nop
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	200013d0 	.word	0x200013d0
 8004a44:	40008000 	.word	0x40008000

08004a48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b09c      	sub	sp, #112	; 0x70
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a50:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	605a      	str	r2, [r3, #4]
 8004a5a:	609a      	str	r2, [r3, #8]
 8004a5c:	60da      	str	r2, [r3, #12]
 8004a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a60:	f107 030c 	add.w	r3, r7, #12
 8004a64:	2250      	movs	r2, #80	; 0x50
 8004a66:	2100      	movs	r1, #0
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f010 fb09 	bl	8015080 <memset>
  if(uartHandle->Instance==LPUART1)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a43      	ldr	r2, [pc, #268]	; (8004b80 <HAL_UART_MspInit+0x138>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d17f      	bne.n	8004b78 <HAL_UART_MspInit+0x130>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004a78:	2302      	movs	r3, #2
 8004a7a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a80:	f107 030c 	add.w	r3, r7, #12
 8004a84:	4618      	mov	r0, r3
 8004a86:	f003 fdd7 	bl	8008638 <HAL_RCCEx_PeriphCLKConfig>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004a90:	f7fe fbb4 	bl	80031fc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004a94:	2001      	movs	r0, #1
 8004a96:	f7ff ff72 	bl	800497e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a9a:	2002      	movs	r0, #2
 8004a9c:	f7ff ff56 	bl	800494c <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004aa0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ab6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004aba:	4619      	mov	r1, r3
 8004abc:	4831      	ldr	r0, [pc, #196]	; (8004b84 <HAL_UART_MspInit+0x13c>)
 8004abe:	f001 fd37 	bl	8006530 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8004ac2:	4b31      	ldr	r3, [pc, #196]	; (8004b88 <HAL_UART_MspInit+0x140>)
 8004ac4:	4a31      	ldr	r2, [pc, #196]	; (8004b8c <HAL_UART_MspInit+0x144>)
 8004ac6:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8004ac8:	4b2f      	ldr	r3, [pc, #188]	; (8004b88 <HAL_UART_MspInit+0x140>)
 8004aca:	2210      	movs	r2, #16
 8004acc:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ace:	4b2e      	ldr	r3, [pc, #184]	; (8004b88 <HAL_UART_MspInit+0x140>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ad4:	4b2c      	ldr	r3, [pc, #176]	; (8004b88 <HAL_UART_MspInit+0x140>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ada:	4b2b      	ldr	r3, [pc, #172]	; (8004b88 <HAL_UART_MspInit+0x140>)
 8004adc:	2280      	movs	r2, #128	; 0x80
 8004ade:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ae0:	4b29      	ldr	r3, [pc, #164]	; (8004b88 <HAL_UART_MspInit+0x140>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ae6:	4b28      	ldr	r3, [pc, #160]	; (8004b88 <HAL_UART_MspInit+0x140>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8004aec:	4b26      	ldr	r3, [pc, #152]	; (8004b88 <HAL_UART_MspInit+0x140>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004af2:	4b25      	ldr	r3, [pc, #148]	; (8004b88 <HAL_UART_MspInit+0x140>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8004af8:	4823      	ldr	r0, [pc, #140]	; (8004b88 <HAL_UART_MspInit+0x140>)
 8004afa:	f001 f9e7 	bl	8005ecc <HAL_DMA_Init>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8004b04:	f7fe fb7a 	bl	80031fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a1f      	ldr	r2, [pc, #124]	; (8004b88 <HAL_UART_MspInit+0x140>)
 8004b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004b10:	4a1d      	ldr	r2, [pc, #116]	; (8004b88 <HAL_UART_MspInit+0x140>)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8004b16:	4b1e      	ldr	r3, [pc, #120]	; (8004b90 <HAL_UART_MspInit+0x148>)
 8004b18:	4a1e      	ldr	r2, [pc, #120]	; (8004b94 <HAL_UART_MspInit+0x14c>)
 8004b1a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8004b1c:	4b1c      	ldr	r3, [pc, #112]	; (8004b90 <HAL_UART_MspInit+0x148>)
 8004b1e:	2211      	movs	r2, #17
 8004b20:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b22:	4b1b      	ldr	r3, [pc, #108]	; (8004b90 <HAL_UART_MspInit+0x148>)
 8004b24:	2210      	movs	r2, #16
 8004b26:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b28:	4b19      	ldr	r3, [pc, #100]	; (8004b90 <HAL_UART_MspInit+0x148>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b2e:	4b18      	ldr	r3, [pc, #96]	; (8004b90 <HAL_UART_MspInit+0x148>)
 8004b30:	2280      	movs	r2, #128	; 0x80
 8004b32:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b34:	4b16      	ldr	r3, [pc, #88]	; (8004b90 <HAL_UART_MspInit+0x148>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b3a:	4b15      	ldr	r3, [pc, #84]	; (8004b90 <HAL_UART_MspInit+0x148>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8004b40:	4b13      	ldr	r3, [pc, #76]	; (8004b90 <HAL_UART_MspInit+0x148>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004b46:	4b12      	ldr	r3, [pc, #72]	; (8004b90 <HAL_UART_MspInit+0x148>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8004b4c:	4810      	ldr	r0, [pc, #64]	; (8004b90 <HAL_UART_MspInit+0x148>)
 8004b4e:	f001 f9bd 	bl	8005ecc <HAL_DMA_Init>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8004b58:	f7fe fb50 	bl	80031fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a0c      	ldr	r2, [pc, #48]	; (8004b90 <HAL_UART_MspInit+0x148>)
 8004b60:	67da      	str	r2, [r3, #124]	; 0x7c
 8004b62:	4a0b      	ldr	r2, [pc, #44]	; (8004b90 <HAL_UART_MspInit+0x148>)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8004b68:	2200      	movs	r2, #0
 8004b6a:	2105      	movs	r1, #5
 8004b6c:	2025      	movs	r0, #37	; 0x25
 8004b6e:	f001 f95b 	bl	8005e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004b72:	2025      	movs	r0, #37	; 0x25
 8004b74:	f001 f972 	bl	8005e5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8004b78:	bf00      	nop
 8004b7a:	3770      	adds	r7, #112	; 0x70
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40008000 	.word	0x40008000
 8004b84:	48000400 	.word	0x48000400
 8004b88:	20001464 	.word	0x20001464
 8004b8c:	40020030 	.word	0x40020030
 8004b90:	200014c4 	.word	0x200014c4
 8004b94:	40020044 	.word	0x40020044

08004b98 <LL_AHB2_GRP1_EnableClock>:
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ba6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
}
 8004bbe:	bf00      	nop
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <LL_APB1_GRP1_EnableClock>:
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b085      	sub	sp, #20
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004bd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4013      	ands	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004bee:	68fb      	ldr	r3, [r7, #12]
}
 8004bf0:	bf00      	nop
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8004c00:	4b10      	ldr	r3, [pc, #64]	; (8004c44 <MX_USB_PCD_Init+0x48>)
 8004c02:	4a11      	ldr	r2, [pc, #68]	; (8004c48 <MX_USB_PCD_Init+0x4c>)
 8004c04:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004c06:	4b0f      	ldr	r3, [pc, #60]	; (8004c44 <MX_USB_PCD_Init+0x48>)
 8004c08:	2208      	movs	r2, #8
 8004c0a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004c0c:	4b0d      	ldr	r3, [pc, #52]	; (8004c44 <MX_USB_PCD_Init+0x48>)
 8004c0e:	2202      	movs	r2, #2
 8004c10:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004c12:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <MX_USB_PCD_Init+0x48>)
 8004c14:	2202      	movs	r2, #2
 8004c16:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8004c18:	4b0a      	ldr	r3, [pc, #40]	; (8004c44 <MX_USB_PCD_Init+0x48>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004c1e:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <MX_USB_PCD_Init+0x48>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004c24:	4b07      	ldr	r3, [pc, #28]	; (8004c44 <MX_USB_PCD_Init+0x48>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004c2a:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <MX_USB_PCD_Init+0x48>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004c30:	4804      	ldr	r0, [pc, #16]	; (8004c44 <MX_USB_PCD_Init+0x48>)
 8004c32:	f001 ffbb 	bl	8006bac <HAL_PCD_Init>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8004c3c:	f7fe fade 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8004c40:	bf00      	nop
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	20001524 	.word	0x20001524
 8004c48:	40006800 	.word	0x40006800

08004c4c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c54:	f107 030c 	add.w	r3, r7, #12
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	605a      	str	r2, [r3, #4]
 8004c5e:	609a      	str	r2, [r3, #8]
 8004c60:	60da      	str	r2, [r3, #12]
 8004c62:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a0f      	ldr	r2, [pc, #60]	; (8004ca8 <HAL_PCD_MspInit+0x5c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d118      	bne.n	8004ca0 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c6e:	2001      	movs	r0, #1
 8004c70:	f7ff ff92 	bl	8004b98 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004c74:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004c78:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c82:	2300      	movs	r3, #0
 8004c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8004c86:	230a      	movs	r3, #10
 8004c88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c8a:	f107 030c 	add.w	r3, r7, #12
 8004c8e:	4619      	mov	r1, r3
 8004c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c94:	f001 fc4c 	bl	8006530 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004c98:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004c9c:	f7ff ff95 	bl	8004bca <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004ca0:	bf00      	nop
 8004ca2:	3720      	adds	r7, #32
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40006800 	.word	0x40006800

08004cac <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004cac:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004cae:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cb0:	3304      	adds	r3, #4

08004cb2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004cb2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cb4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8004cb6:	d3f9      	bcc.n	8004cac <CopyDataInit>
  bx lr
 8004cb8:	4770      	bx	lr

08004cba <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8004cba:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004cbc:	3004      	adds	r0, #4

08004cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004cbe:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004cc0:	d3fb      	bcc.n	8004cba <FillZerobss>
  bx lr
 8004cc2:	4770      	bx	lr

08004cc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004cc4:	480c      	ldr	r0, [pc, #48]	; (8004cf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004cc6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004cc8:	f7ff fcb0 	bl	800462c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004ccc:	480b      	ldr	r0, [pc, #44]	; (8004cfc <LoopForever+0x6>)
 8004cce:	490c      	ldr	r1, [pc, #48]	; (8004d00 <LoopForever+0xa>)
 8004cd0:	4a0c      	ldr	r2, [pc, #48]	; (8004d04 <LoopForever+0xe>)
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	f7ff ffed 	bl	8004cb2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004cd8:	480b      	ldr	r0, [pc, #44]	; (8004d08 <LoopForever+0x12>)
 8004cda:	490c      	ldr	r1, [pc, #48]	; (8004d0c <LoopForever+0x16>)
 8004cdc:	4a0c      	ldr	r2, [pc, #48]	; (8004d10 <LoopForever+0x1a>)
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f7ff ffe7 	bl	8004cb2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004ce4:	480b      	ldr	r0, [pc, #44]	; (8004d14 <LoopForever+0x1e>)
 8004ce6:	490c      	ldr	r1, [pc, #48]	; (8004d18 <LoopForever+0x22>)
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f7ff ffe8 	bl	8004cbe <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004cee:	f010 f9e5 	bl	80150bc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004cf2:	f7fe f98f 	bl	8003014 <main>

08004cf6 <LoopForever>:

LoopForever:
  b LoopForever
 8004cf6:	e7fe      	b.n	8004cf6 <LoopForever>
  ldr   r0, =_estack
 8004cf8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004cfc:	20000008 	.word	0x20000008
 8004d00:	200000e0 	.word	0x200000e0
 8004d04:	08015da8 	.word	0x08015da8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004d08:	200301e3 	.word	0x200301e3
 8004d0c:	200301e3 	.word	0x200301e3
 8004d10:	08016755 	.word	0x08016755
  INIT_BSS _sbss, _ebss
 8004d14:	200009bc 	.word	0x200009bc
 8004d18:	200033c8 	.word	0x200033c8

08004d1c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004d1c:	e7fe      	b.n	8004d1c <ADC1_IRQHandler>

08004d1e <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b084      	sub	sp, #16
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d104      	bne.n	8004d36 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8004d2c:	b672      	cpsid	i
}
 8004d2e:	bf00      	nop
 8004d30:	f7fe fa64 	bl	80031fc <Error_Handler>
 8004d34:	e7fe      	b.n	8004d34 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	7a1b      	ldrb	r3, [r3, #8]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d904      	bls.n	8004d48 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8004d3e:	b672      	cpsid	i
}
 8004d40:	bf00      	nop
 8004d42:	f7fe fa5b 	bl	80031fc <Error_Handler>
 8004d46:	e7fe      	b.n	8004d46 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	7a1b      	ldrb	r3, [r3, #8]
 8004d4c:	1c5a      	adds	r2, r3, #1
 8004d4e:	b2d1      	uxtb	r1, r2
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	7211      	strb	r1, [r2, #8]
 8004d54:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d56:	f3ef 8211 	mrs	r2, BASEPRI
 8004d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	60fa      	str	r2, [r7, #12]
 8004d6c:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8004d76:	bf00      	nop
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d104      	bne.n	8004d96 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8004d8c:	b672      	cpsid	i
}
 8004d8e:	bf00      	nop
 8004d90:	f7fe fa34 	bl	80031fc <Error_Handler>
 8004d94:	e7fe      	b.n	8004d94 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	7a1b      	ldrb	r3, [r3, #8]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	7a1b      	ldrb	r3, [r3, #8]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d904      	bls.n	8004db4 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8004daa:	b672      	cpsid	i
}
 8004dac:	bf00      	nop
 8004dae:	f7fe fa25 	bl	80031fc <Error_Handler>
 8004db2:	e7fe      	b.n	8004db2 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	7a1b      	ldrb	r3, [r3, #8]
 8004db8:	461a      	mov	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dc0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004dc8:	bf00      	nop
}
 8004dca:	bf00      	nop
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b082      	sub	sp, #8
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d104      	bne.n	8004dea <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8004de0:	b672      	cpsid	i
}
 8004de2:	bf00      	nop
 8004de4:	f7fe fa0a 	bl	80031fc <Error_Handler>
 8004de8:	e7fe      	b.n	8004de8 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff ff96 	bl	8004d1e <stm32_lock_acquire>
}
 8004df2:	bf00      	nop
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b082      	sub	sp, #8
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d104      	bne.n	8004e12 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8004e08:	b672      	cpsid	i
}
 8004e0a:	bf00      	nop
 8004e0c:	f7fe f9f6 	bl	80031fc <Error_Handler>
 8004e10:	e7fe      	b.n	8004e10 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff ffb2 	bl	8004d7e <stm32_lock_release>
}
 8004e1a:	bf00      	nop
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
	...

08004e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e2e:	4b0c      	ldr	r3, [pc, #48]	; (8004e60 <HAL_Init+0x3c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a0b      	ldr	r2, [pc, #44]	; (8004e60 <HAL_Init+0x3c>)
 8004e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e38:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e3a:	2003      	movs	r0, #3
 8004e3c:	f000 ffe9 	bl	8005e12 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004e40:	200f      	movs	r0, #15
 8004e42:	f7ff faf9 	bl	8004438 <HAL_InitTick>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	71fb      	strb	r3, [r7, #7]
 8004e50:	e001      	b.n	8004e56 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004e52:	f7ff fac2 	bl	80043da <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004e56:	79fb      	ldrb	r3, [r7, #7]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	58004000 	.word	0x58004000

08004e64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004e68:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <HAL_IncTick+0x20>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <HAL_IncTick+0x24>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4413      	add	r3, r2
 8004e74:	4a04      	ldr	r2, [pc, #16]	; (8004e88 <HAL_IncTick+0x24>)
 8004e76:	6013      	str	r3, [r2, #0]
}
 8004e78:	bf00      	nop
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	20000078 	.word	0x20000078
 8004e88:	2000180c 	.word	0x2000180c

08004e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8004e90:	4b03      	ldr	r3, [pc, #12]	; (8004ea0 <HAL_GetTick+0x14>)
 8004e92:	681b      	ldr	r3, [r3, #0]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	2000180c 	.word	0x2000180c

08004ea4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004ea8:	4b03      	ldr	r3, [pc, #12]	; (8004eb8 <HAL_GetTickPrio+0x14>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	20000074 	.word	0x20000074

08004ebc <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	609a      	str	r2, [r3, #8]
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	3360      	adds	r3, #96	; 0x60
 8004f36:	461a      	mov	r2, r3
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	4b08      	ldr	r3, [pc, #32]	; (8004f68 <LL_ADC_SetOffset+0x44>)
 8004f46:	4013      	ands	r3, r2
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	4313      	orrs	r3, r2
 8004f54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004f5c:	bf00      	nop
 8004f5e:	371c      	adds	r7, #28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	03fff000 	.word	0x03fff000

08004f6c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3360      	adds	r3, #96	; 0x60
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3360      	adds	r3, #96	; 0x60
 8004fa8:	461a      	mov	r2, r3
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004fc2:	bf00      	nop
 8004fc4:	371c      	adds	r7, #28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b087      	sub	sp, #28
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	60f8      	str	r0, [r7, #12]
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	3330      	adds	r3, #48	; 0x30
 8004fde:	461a      	mov	r2, r3
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	0a1b      	lsrs	r3, r3, #8
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	f003 030c 	and.w	r3, r3, #12
 8004fea:	4413      	add	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f003 031f 	and.w	r3, r3, #31
 8004ff8:	211f      	movs	r1, #31
 8004ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffe:	43db      	mvns	r3, r3
 8005000:	401a      	ands	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	0e9b      	lsrs	r3, r3, #26
 8005006:	f003 011f 	and.w	r1, r3, #31
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f003 031f 	and.w	r3, r3, #31
 8005010:	fa01 f303 	lsl.w	r3, r1, r3
 8005014:	431a      	orrs	r2, r3
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005026:	b480      	push	{r7}
 8005028:	b087      	sub	sp, #28
 800502a:	af00      	add	r7, sp, #0
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	3314      	adds	r3, #20
 8005036:	461a      	mov	r2, r3
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	0e5b      	lsrs	r3, r3, #25
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	f003 0304 	and.w	r3, r3, #4
 8005042:	4413      	add	r3, r2
 8005044:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	0d1b      	lsrs	r3, r3, #20
 800504e:	f003 031f 	and.w	r3, r3, #31
 8005052:	2107      	movs	r1, #7
 8005054:	fa01 f303 	lsl.w	r3, r1, r3
 8005058:	43db      	mvns	r3, r3
 800505a:	401a      	ands	r2, r3
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	0d1b      	lsrs	r3, r3, #20
 8005060:	f003 031f 	and.w	r3, r3, #31
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	fa01 f303 	lsl.w	r3, r1, r3
 800506a:	431a      	orrs	r2, r3
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8005070:	bf00      	nop
 8005072:	371c      	adds	r7, #28
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005094:	43db      	mvns	r3, r3
 8005096:	401a      	ands	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f003 0318 	and.w	r3, r3, #24
 800509e:	4908      	ldr	r1, [pc, #32]	; (80050c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80050a0:	40d9      	lsrs	r1, r3
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	400b      	ands	r3, r1
 80050a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050aa:	431a      	orrs	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80050b2:	bf00      	nop
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	0007ffff 	.word	0x0007ffff

080050c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80050d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6093      	str	r3, [r2, #8]
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050fc:	d101      	bne.n	8005102 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005120:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005124:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005148:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800514c:	d101      	bne.n	8005152 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800514e:	2301      	movs	r3, #1
 8005150:	e000      	b.n	8005154 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <LL_ADC_IsEnabled+0x18>
 8005174:	2301      	movs	r3, #1
 8005176:	e000      	b.n	800517a <LL_ADC_IsEnabled+0x1a>
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 0304 	and.w	r3, r3, #4
 8005196:	2b04      	cmp	r3, #4
 8005198:	d101      	bne.n	800519e <LL_ADC_REG_IsConversionOngoing+0x18>
 800519a:	2301      	movs	r3, #1
 800519c:	e000      	b.n	80051a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f003 0308 	and.w	r3, r3, #8
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d101      	bne.n	80051c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80051c0:	2301      	movs	r3, #1
 80051c2:	e000      	b.n	80051c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
	...

080051d4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051dc:	2300      	movs	r3, #0
 80051de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80051e0:	2300      	movs	r3, #0
 80051e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80051e4:	2300      	movs	r3, #0
 80051e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e12e      	b.n	8005450 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d109      	bne.n	8005214 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7fb fd17 	bl	8000c34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff ff65 	bl	80050e8 <LL_ADC_IsDeepPowerDownEnabled>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d004      	beq.n	800522e <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4618      	mov	r0, r3
 800522a:	f7ff ff4b 	bl	80050c4 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff ff80 	bl	8005138 <LL_ADC_IsInternalRegulatorEnabled>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d115      	bne.n	800526a <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff ff64 	bl	8005110 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005248:	4b83      	ldr	r3, [pc, #524]	; (8005458 <HAL_ADC_Init+0x284>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	099b      	lsrs	r3, r3, #6
 800524e:	4a83      	ldr	r2, [pc, #524]	; (800545c <HAL_ADC_Init+0x288>)
 8005250:	fba2 2303 	umull	r2, r3, r2, r3
 8005254:	099b      	lsrs	r3, r3, #6
 8005256:	3301      	adds	r3, #1
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800525c:	e002      	b.n	8005264 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	3b01      	subs	r3, #1
 8005262:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1f9      	bne.n	800525e <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4618      	mov	r0, r3
 8005270:	f7ff ff62 	bl	8005138 <LL_ADC_IsInternalRegulatorEnabled>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10d      	bne.n	8005296 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527e:	f043 0210 	orr.w	r2, r3, #16
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528a:	f043 0201 	orr.w	r2, r3, #1
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff ff73 	bl	8005186 <LL_ADC_REG_IsConversionOngoing>
 80052a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a6:	f003 0310 	and.w	r3, r3, #16
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f040 80c7 	bne.w	800543e <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f040 80c3 	bne.w	800543e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80052c0:	f043 0202 	orr.w	r2, r3, #2
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7ff ff47 	bl	8005160 <LL_ADC_IsEnabled>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10b      	bne.n	80052f0 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80052d8:	4861      	ldr	r0, [pc, #388]	; (8005460 <HAL_ADC_Init+0x28c>)
 80052da:	f7ff ff41 	bl	8005160 <LL_ADC_IsEnabled>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d105      	bne.n	80052f0 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	4619      	mov	r1, r3
 80052ea:	485e      	ldr	r0, [pc, #376]	; (8005464 <HAL_ADC_Init+0x290>)
 80052ec:	f7ff fde6 	bl	8004ebc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	7e5b      	ldrb	r3, [r3, #25]
 80052f4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80052fa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005300:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005306:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800530e:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8005310:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	4313      	orrs	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d106      	bne.n	8005330 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	3b01      	subs	r3, #1
 8005328:	045b      	lsls	r3, r3, #17
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	4313      	orrs	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005334:	2b00      	cmp	r3, #0
 8005336:	d009      	beq.n	800534c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	4313      	orrs	r3, r2
 800534a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	4b45      	ldr	r3, [pc, #276]	; (8005468 <HAL_ADC_Init+0x294>)
 8005354:	4013      	ands	r3, r2
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	6812      	ldr	r2, [r2, #0]
 800535a:	69b9      	ldr	r1, [r7, #24]
 800535c:	430b      	orrs	r3, r1
 800535e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff ff0e 	bl	8005186 <LL_ADC_REG_IsConversionOngoing>
 800536a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4618      	mov	r0, r3
 8005372:	f7ff ff1b 	bl	80051ac <LL_ADC_INJ_IsConversionOngoing>
 8005376:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d13d      	bne.n	80053fa <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d13a      	bne.n	80053fa <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005388:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005390:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005392:	4313      	orrs	r3, r2
 8005394:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053a0:	f023 0302 	bic.w	r3, r3, #2
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6812      	ldr	r2, [r2, #0]
 80053a8:	69b9      	ldr	r1, [r7, #24]
 80053aa:	430b      	orrs	r3, r1
 80053ac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d118      	bne.n	80053ea <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80053c2:	f023 0304 	bic.w	r3, r3, #4
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80053ce:	4311      	orrs	r1, r2
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80053d4:	4311      	orrs	r1, r2
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80053da:	430a      	orrs	r2, r1
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0201 	orr.w	r2, r2, #1
 80053e6:	611a      	str	r2, [r3, #16]
 80053e8:	e007      	b.n	80053fa <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	691a      	ldr	r2, [r3, #16]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0201 	bic.w	r2, r2, #1
 80053f8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d10c      	bne.n	800541c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005408:	f023 010f 	bic.w	r1, r3, #15
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	1e5a      	subs	r2, r3, #1
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	631a      	str	r2, [r3, #48]	; 0x30
 800541a:	e007      	b.n	800542c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 020f 	bic.w	r2, r2, #15
 800542a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005430:	f023 0303 	bic.w	r3, r3, #3
 8005434:	f043 0201 	orr.w	r2, r3, #1
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	655a      	str	r2, [r3, #84]	; 0x54
 800543c:	e007      	b.n	800544e <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005442:	f043 0210 	orr.w	r2, r3, #16
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800544e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3720      	adds	r7, #32
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	20000070 	.word	0x20000070
 800545c:	053e2d63 	.word	0x053e2d63
 8005460:	50040000 	.word	0x50040000
 8005464:	50040300 	.word	0x50040300
 8005468:	fff0c007 	.word	0xfff0c007

0800546c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b0b6      	sub	sp, #216	; 0xd8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <HAL_ADC_ConfigChannel+0x22>
 800548a:	2302      	movs	r3, #2
 800548c:	e39f      	b.n	8005bce <HAL_ADC_ConfigChannel+0x762>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff fe73 	bl	8005186 <LL_ADC_REG_IsConversionOngoing>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f040 8384 	bne.w	8005bb0 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6818      	ldr	r0, [r3, #0]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	6859      	ldr	r1, [r3, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	461a      	mov	r2, r3
 80054b6:	f7ff fd8a 	bl	8004fce <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff fe61 	bl	8005186 <LL_ADC_REG_IsConversionOngoing>
 80054c4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff fe6d 	bl	80051ac <LL_ADC_INJ_IsConversionOngoing>
 80054d2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80054d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f040 81a6 	bne.w	800582c <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80054e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f040 81a1 	bne.w	800582c <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6818      	ldr	r0, [r3, #0]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	6819      	ldr	r1, [r3, #0]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	461a      	mov	r2, r3
 80054f8:	f7ff fd95 	bl	8005026 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	695a      	ldr	r2, [r3, #20]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	08db      	lsrs	r3, r3, #3
 8005508:	f003 0303 	and.w	r3, r3, #3
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	fa02 f303 	lsl.w	r3, r2, r3
 8005512:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b04      	cmp	r3, #4
 800551c:	d00a      	beq.n	8005534 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6818      	ldr	r0, [r3, #0]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	6919      	ldr	r1, [r3, #16]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800552e:	f7ff fcf9 	bl	8004f24 <LL_ADC_SetOffset>
 8005532:	e17b      	b.n	800582c <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2100      	movs	r1, #0
 800553a:	4618      	mov	r0, r3
 800553c:	f7ff fd16 	bl	8004f6c <LL_ADC_GetOffsetChannel>
 8005540:	4603      	mov	r3, r0
 8005542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10a      	bne.n	8005560 <HAL_ADC_ConfigChannel+0xf4>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2100      	movs	r1, #0
 8005550:	4618      	mov	r0, r3
 8005552:	f7ff fd0b 	bl	8004f6c <LL_ADC_GetOffsetChannel>
 8005556:	4603      	mov	r3, r0
 8005558:	0e9b      	lsrs	r3, r3, #26
 800555a:	f003 021f 	and.w	r2, r3, #31
 800555e:	e01e      	b.n	800559e <HAL_ADC_ConfigChannel+0x132>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2100      	movs	r1, #0
 8005566:	4618      	mov	r0, r3
 8005568:	f7ff fd00 	bl	8004f6c <LL_ADC_GetOffsetChannel>
 800556c:	4603      	mov	r3, r0
 800556e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005572:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005576:	fa93 f3a3 	rbit	r3, r3
 800557a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 800557e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005582:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8005586:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 800558e:	2320      	movs	r3, #32
 8005590:	e004      	b.n	800559c <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8005592:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005596:	fab3 f383 	clz	r3, r3
 800559a:	b2db      	uxtb	r3, r3
 800559c:	461a      	mov	r2, r3
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d105      	bne.n	80055b6 <HAL_ADC_ConfigChannel+0x14a>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	0e9b      	lsrs	r3, r3, #26
 80055b0:	f003 031f 	and.w	r3, r3, #31
 80055b4:	e018      	b.n	80055e8 <HAL_ADC_ConfigChannel+0x17c>
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80055c2:	fa93 f3a3 	rbit	r3, r3
 80055c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80055ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80055d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80055da:	2320      	movs	r3, #32
 80055dc:	e004      	b.n	80055e8 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80055de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80055e2:	fab3 f383 	clz	r3, r3
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d106      	bne.n	80055fa <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2200      	movs	r2, #0
 80055f2:	2100      	movs	r1, #0
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7ff fccf 	bl	8004f98 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2101      	movs	r1, #1
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff fcb3 	bl	8004f6c <LL_ADC_GetOffsetChannel>
 8005606:	4603      	mov	r3, r0
 8005608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10a      	bne.n	8005626 <HAL_ADC_ConfigChannel+0x1ba>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2101      	movs	r1, #1
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff fca8 	bl	8004f6c <LL_ADC_GetOffsetChannel>
 800561c:	4603      	mov	r3, r0
 800561e:	0e9b      	lsrs	r3, r3, #26
 8005620:	f003 021f 	and.w	r2, r3, #31
 8005624:	e01e      	b.n	8005664 <HAL_ADC_ConfigChannel+0x1f8>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2101      	movs	r1, #1
 800562c:	4618      	mov	r0, r3
 800562e:	f7ff fc9d 	bl	8004f6c <LL_ADC_GetOffsetChannel>
 8005632:	4603      	mov	r3, r0
 8005634:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005638:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800563c:	fa93 f3a3 	rbit	r3, r3
 8005640:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005644:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005648:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800564c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8005654:	2320      	movs	r3, #32
 8005656:	e004      	b.n	8005662 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8005658:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800565c:	fab3 f383 	clz	r3, r3
 8005660:	b2db      	uxtb	r3, r3
 8005662:	461a      	mov	r2, r3
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800566c:	2b00      	cmp	r3, #0
 800566e:	d105      	bne.n	800567c <HAL_ADC_ConfigChannel+0x210>
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	0e9b      	lsrs	r3, r3, #26
 8005676:	f003 031f 	and.w	r3, r3, #31
 800567a:	e018      	b.n	80056ae <HAL_ADC_ConfigChannel+0x242>
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005684:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005688:	fa93 f3a3 	rbit	r3, r3
 800568c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005690:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005694:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005698:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80056a0:	2320      	movs	r3, #32
 80056a2:	e004      	b.n	80056ae <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80056a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056a8:	fab3 f383 	clz	r3, r3
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d106      	bne.n	80056c0 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2200      	movs	r2, #0
 80056b8:	2101      	movs	r1, #1
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7ff fc6c 	bl	8004f98 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2102      	movs	r1, #2
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff fc50 	bl	8004f6c <LL_ADC_GetOffsetChannel>
 80056cc:	4603      	mov	r3, r0
 80056ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10a      	bne.n	80056ec <HAL_ADC_ConfigChannel+0x280>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2102      	movs	r1, #2
 80056dc:	4618      	mov	r0, r3
 80056de:	f7ff fc45 	bl	8004f6c <LL_ADC_GetOffsetChannel>
 80056e2:	4603      	mov	r3, r0
 80056e4:	0e9b      	lsrs	r3, r3, #26
 80056e6:	f003 021f 	and.w	r2, r3, #31
 80056ea:	e01e      	b.n	800572a <HAL_ADC_ConfigChannel+0x2be>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2102      	movs	r1, #2
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7ff fc3a 	bl	8004f6c <LL_ADC_GetOffsetChannel>
 80056f8:	4603      	mov	r3, r0
 80056fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005702:	fa93 f3a3 	rbit	r3, r3
 8005706:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800570a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800570e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005712:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800571a:	2320      	movs	r3, #32
 800571c:	e004      	b.n	8005728 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800571e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005722:	fab3 f383 	clz	r3, r3
 8005726:	b2db      	uxtb	r3, r3
 8005728:	461a      	mov	r2, r3
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005732:	2b00      	cmp	r3, #0
 8005734:	d105      	bne.n	8005742 <HAL_ADC_ConfigChannel+0x2d6>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	0e9b      	lsrs	r3, r3, #26
 800573c:	f003 031f 	and.w	r3, r3, #31
 8005740:	e016      	b.n	8005770 <HAL_ADC_ConfigChannel+0x304>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800574e:	fa93 f3a3 	rbit	r3, r3
 8005752:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005754:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005756:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800575a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8005762:	2320      	movs	r3, #32
 8005764:	e004      	b.n	8005770 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8005766:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800576a:	fab3 f383 	clz	r3, r3
 800576e:	b2db      	uxtb	r3, r3
 8005770:	429a      	cmp	r2, r3
 8005772:	d106      	bne.n	8005782 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2200      	movs	r2, #0
 800577a:	2102      	movs	r1, #2
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff fc0b 	bl	8004f98 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2103      	movs	r1, #3
 8005788:	4618      	mov	r0, r3
 800578a:	f7ff fbef 	bl	8004f6c <LL_ADC_GetOffsetChannel>
 800578e:	4603      	mov	r3, r0
 8005790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10a      	bne.n	80057ae <HAL_ADC_ConfigChannel+0x342>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2103      	movs	r1, #3
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff fbe4 	bl	8004f6c <LL_ADC_GetOffsetChannel>
 80057a4:	4603      	mov	r3, r0
 80057a6:	0e9b      	lsrs	r3, r3, #26
 80057a8:	f003 021f 	and.w	r2, r3, #31
 80057ac:	e017      	b.n	80057de <HAL_ADC_ConfigChannel+0x372>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2103      	movs	r1, #3
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff fbd9 	bl	8004f6c <LL_ADC_GetOffsetChannel>
 80057ba:	4603      	mov	r3, r0
 80057bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057c0:	fa93 f3a3 	rbit	r3, r3
 80057c4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80057c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057c8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80057ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80057d0:	2320      	movs	r3, #32
 80057d2:	e003      	b.n	80057dc <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80057d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057d6:	fab3 f383 	clz	r3, r3
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	461a      	mov	r2, r3
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d105      	bne.n	80057f6 <HAL_ADC_ConfigChannel+0x38a>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	0e9b      	lsrs	r3, r3, #26
 80057f0:	f003 031f 	and.w	r3, r3, #31
 80057f4:	e011      	b.n	800581a <HAL_ADC_ConfigChannel+0x3ae>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057fe:	fa93 f3a3 	rbit	r3, r3
 8005802:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005804:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005806:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800580e:	2320      	movs	r3, #32
 8005810:	e003      	b.n	800581a <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8005812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005814:	fab3 f383 	clz	r3, r3
 8005818:	b2db      	uxtb	r3, r3
 800581a:	429a      	cmp	r2, r3
 800581c:	d106      	bne.n	800582c <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2200      	movs	r2, #0
 8005824:	2103      	movs	r1, #3
 8005826:	4618      	mov	r0, r3
 8005828:	f7ff fbb6 	bl	8004f98 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4618      	mov	r0, r3
 8005832:	f7ff fc95 	bl	8005160 <LL_ADC_IsEnabled>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	f040 81c2 	bne.w	8005bc2 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6818      	ldr	r0, [r3, #0]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6819      	ldr	r1, [r3, #0]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	461a      	mov	r2, r3
 800584c:	f7ff fc16 	bl	800507c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	4a8e      	ldr	r2, [pc, #568]	; (8005a90 <HAL_ADC_ConfigChannel+0x624>)
 8005856:	4293      	cmp	r3, r2
 8005858:	f040 8130 	bne.w	8005abc <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10b      	bne.n	8005884 <HAL_ADC_ConfigChannel+0x418>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	0e9b      	lsrs	r3, r3, #26
 8005872:	3301      	adds	r3, #1
 8005874:	f003 031f 	and.w	r3, r3, #31
 8005878:	2b09      	cmp	r3, #9
 800587a:	bf94      	ite	ls
 800587c:	2301      	movls	r3, #1
 800587e:	2300      	movhi	r3, #0
 8005880:	b2db      	uxtb	r3, r3
 8005882:	e019      	b.n	80058b8 <HAL_ADC_ConfigChannel+0x44c>
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800588a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800588c:	fa93 f3a3 	rbit	r3, r3
 8005890:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005892:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005894:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 800589c:	2320      	movs	r3, #32
 800589e:	e003      	b.n	80058a8 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80058a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058a2:	fab3 f383 	clz	r3, r3
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	3301      	adds	r3, #1
 80058aa:	f003 031f 	and.w	r3, r3, #31
 80058ae:	2b09      	cmp	r3, #9
 80058b0:	bf94      	ite	ls
 80058b2:	2301      	movls	r3, #1
 80058b4:	2300      	movhi	r3, #0
 80058b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d079      	beq.n	80059b0 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d107      	bne.n	80058d8 <HAL_ADC_ConfigChannel+0x46c>
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	0e9b      	lsrs	r3, r3, #26
 80058ce:	3301      	adds	r3, #1
 80058d0:	069b      	lsls	r3, r3, #26
 80058d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80058d6:	e015      	b.n	8005904 <HAL_ADC_ConfigChannel+0x498>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058e0:	fa93 f3a3 	rbit	r3, r3
 80058e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80058e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80058ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80058f0:	2320      	movs	r3, #32
 80058f2:	e003      	b.n	80058fc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80058f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058f6:	fab3 f383 	clz	r3, r3
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	3301      	adds	r3, #1
 80058fe:	069b      	lsls	r3, r3, #26
 8005900:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800590c:	2b00      	cmp	r3, #0
 800590e:	d109      	bne.n	8005924 <HAL_ADC_ConfigChannel+0x4b8>
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	0e9b      	lsrs	r3, r3, #26
 8005916:	3301      	adds	r3, #1
 8005918:	f003 031f 	and.w	r3, r3, #31
 800591c:	2101      	movs	r1, #1
 800591e:	fa01 f303 	lsl.w	r3, r1, r3
 8005922:	e017      	b.n	8005954 <HAL_ADC_ConfigChannel+0x4e8>
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800592a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800592c:	fa93 f3a3 	rbit	r3, r3
 8005930:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005934:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005938:	2b00      	cmp	r3, #0
 800593a:	d101      	bne.n	8005940 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 800593c:	2320      	movs	r3, #32
 800593e:	e003      	b.n	8005948 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8005940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005942:	fab3 f383 	clz	r3, r3
 8005946:	b2db      	uxtb	r3, r3
 8005948:	3301      	adds	r3, #1
 800594a:	f003 031f 	and.w	r3, r3, #31
 800594e:	2101      	movs	r1, #1
 8005950:	fa01 f303 	lsl.w	r3, r1, r3
 8005954:	ea42 0103 	orr.w	r1, r2, r3
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10a      	bne.n	800597a <HAL_ADC_ConfigChannel+0x50e>
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	0e9b      	lsrs	r3, r3, #26
 800596a:	3301      	adds	r3, #1
 800596c:	f003 021f 	and.w	r2, r3, #31
 8005970:	4613      	mov	r3, r2
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	4413      	add	r3, r2
 8005976:	051b      	lsls	r3, r3, #20
 8005978:	e018      	b.n	80059ac <HAL_ADC_ConfigChannel+0x540>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005982:	fa93 f3a3 	rbit	r3, r3
 8005986:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800598a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800598c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8005992:	2320      	movs	r3, #32
 8005994:	e003      	b.n	800599e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8005996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005998:	fab3 f383 	clz	r3, r3
 800599c:	b2db      	uxtb	r3, r3
 800599e:	3301      	adds	r3, #1
 80059a0:	f003 021f 	and.w	r2, r3, #31
 80059a4:	4613      	mov	r3, r2
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	4413      	add	r3, r2
 80059aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059ac:	430b      	orrs	r3, r1
 80059ae:	e080      	b.n	8005ab2 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d107      	bne.n	80059cc <HAL_ADC_ConfigChannel+0x560>
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	0e9b      	lsrs	r3, r3, #26
 80059c2:	3301      	adds	r3, #1
 80059c4:	069b      	lsls	r3, r3, #26
 80059c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80059ca:	e015      	b.n	80059f8 <HAL_ADC_ConfigChannel+0x58c>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d4:	fa93 f3a3 	rbit	r3, r3
 80059d8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80059da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059dc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80059de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80059e4:	2320      	movs	r3, #32
 80059e6:	e003      	b.n	80059f0 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80059e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ea:	fab3 f383 	clz	r3, r3
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	3301      	adds	r3, #1
 80059f2:	069b      	lsls	r3, r3, #26
 80059f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d109      	bne.n	8005a18 <HAL_ADC_ConfigChannel+0x5ac>
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	0e9b      	lsrs	r3, r3, #26
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	f003 031f 	and.w	r3, r3, #31
 8005a10:	2101      	movs	r1, #1
 8005a12:	fa01 f303 	lsl.w	r3, r1, r3
 8005a16:	e017      	b.n	8005a48 <HAL_ADC_ConfigChannel+0x5dc>
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	fa93 f3a3 	rbit	r3, r3
 8005a24:	61fb      	str	r3, [r7, #28]
  return result;
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8005a30:	2320      	movs	r3, #32
 8005a32:	e003      	b.n	8005a3c <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	fab3 f383 	clz	r3, r3
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	f003 031f 	and.w	r3, r3, #31
 8005a42:	2101      	movs	r1, #1
 8005a44:	fa01 f303 	lsl.w	r3, r1, r3
 8005a48:	ea42 0103 	orr.w	r1, r2, r3
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10d      	bne.n	8005a74 <HAL_ADC_ConfigChannel+0x608>
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	0e9b      	lsrs	r3, r3, #26
 8005a5e:	3301      	adds	r3, #1
 8005a60:	f003 021f 	and.w	r2, r3, #31
 8005a64:	4613      	mov	r3, r2
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	4413      	add	r3, r2
 8005a6a:	3b1e      	subs	r3, #30
 8005a6c:	051b      	lsls	r3, r3, #20
 8005a6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005a72:	e01d      	b.n	8005ab0 <HAL_ADC_ConfigChannel+0x644>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	fa93 f3a3 	rbit	r3, r3
 8005a80:	613b      	str	r3, [r7, #16]
  return result;
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d103      	bne.n	8005a94 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8005a8c:	2320      	movs	r3, #32
 8005a8e:	e005      	b.n	8005a9c <HAL_ADC_ConfigChannel+0x630>
 8005a90:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	fab3 f383 	clz	r3, r3
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	f003 021f 	and.w	r2, r3, #31
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	4413      	add	r3, r2
 8005aa8:	3b1e      	subs	r3, #30
 8005aaa:	051b      	lsls	r3, r3, #20
 8005aac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ab0:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8005ab2:	683a      	ldr	r2, [r7, #0]
 8005ab4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	f7ff fab5 	bl	8005026 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	4b45      	ldr	r3, [pc, #276]	; (8005bd8 <HAL_ADC_ConfigChannel+0x76c>)
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d07c      	beq.n	8005bc2 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ac8:	4844      	ldr	r0, [pc, #272]	; (8005bdc <HAL_ADC_ConfigChannel+0x770>)
 8005aca:	f7ff fa1d 	bl	8004f08 <LL_ADC_GetCommonPathInternalCh>
 8005ace:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ad2:	4843      	ldr	r0, [pc, #268]	; (8005be0 <HAL_ADC_ConfigChannel+0x774>)
 8005ad4:	f7ff fb44 	bl	8005160 <LL_ADC_IsEnabled>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d15e      	bne.n	8005b9c <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a40      	ldr	r2, [pc, #256]	; (8005be4 <HAL_ADC_ConfigChannel+0x778>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d127      	bne.n	8005b38 <HAL_ADC_ConfigChannel+0x6cc>
 8005ae8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005aec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d121      	bne.n	8005b38 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a39      	ldr	r2, [pc, #228]	; (8005be0 <HAL_ADC_ConfigChannel+0x774>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d161      	bne.n	8005bc2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005afe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005b06:	4619      	mov	r1, r3
 8005b08:	4834      	ldr	r0, [pc, #208]	; (8005bdc <HAL_ADC_ConfigChannel+0x770>)
 8005b0a:	f7ff f9ea 	bl	8004ee2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b0e:	4b36      	ldr	r3, [pc, #216]	; (8005be8 <HAL_ADC_ConfigChannel+0x77c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	099b      	lsrs	r3, r3, #6
 8005b14:	4a35      	ldr	r2, [pc, #212]	; (8005bec <HAL_ADC_ConfigChannel+0x780>)
 8005b16:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1a:	099b      	lsrs	r3, r3, #6
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	4613      	mov	r3, r2
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	4413      	add	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8005b28:	e002      	b.n	8005b30 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1f9      	bne.n	8005b2a <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005b36:	e044      	b.n	8005bc2 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a2c      	ldr	r2, [pc, #176]	; (8005bf0 <HAL_ADC_ConfigChannel+0x784>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d113      	bne.n	8005b6a <HAL_ADC_ConfigChannel+0x6fe>
 8005b42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10d      	bne.n	8005b6a <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a23      	ldr	r2, [pc, #140]	; (8005be0 <HAL_ADC_ConfigChannel+0x774>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d134      	bne.n	8005bc2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005b58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b60:	4619      	mov	r1, r3
 8005b62:	481e      	ldr	r0, [pc, #120]	; (8005bdc <HAL_ADC_ConfigChannel+0x770>)
 8005b64:	f7ff f9bd 	bl	8004ee2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005b68:	e02b      	b.n	8005bc2 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a21      	ldr	r2, [pc, #132]	; (8005bf4 <HAL_ADC_ConfigChannel+0x788>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d126      	bne.n	8005bc2 <HAL_ADC_ConfigChannel+0x756>
 8005b74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d120      	bne.n	8005bc2 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a16      	ldr	r2, [pc, #88]	; (8005be0 <HAL_ADC_ConfigChannel+0x774>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d11b      	bne.n	8005bc2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005b8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b92:	4619      	mov	r1, r3
 8005b94:	4811      	ldr	r0, [pc, #68]	; (8005bdc <HAL_ADC_ConfigChannel+0x770>)
 8005b96:	f7ff f9a4 	bl	8004ee2 <LL_ADC_SetCommonPathInternalCh>
 8005b9a:	e012      	b.n	8005bc2 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba0:	f043 0220 	orr.w	r2, r3, #32
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005bae:	e008      	b.n	8005bc2 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb4:	f043 0220 	orr.w	r2, r3, #32
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8005bca:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	37d8      	adds	r7, #216	; 0xd8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	80080000 	.word	0x80080000
 8005bdc:	50040300 	.word	0x50040300
 8005be0:	50040000 	.word	0x50040000
 8005be4:	c7520000 	.word	0xc7520000
 8005be8:	20000070 	.word	0x20000070
 8005bec:	053e2d63 	.word	0x053e2d63
 8005bf0:	cb840000 	.word	0xcb840000
 8005bf4:	80000001 	.word	0x80000001

08005bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c08:	4b0c      	ldr	r3, [pc, #48]	; (8005c3c <__NVIC_SetPriorityGrouping+0x44>)
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c14:	4013      	ands	r3, r2
 8005c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c2a:	4a04      	ldr	r2, [pc, #16]	; (8005c3c <__NVIC_SetPriorityGrouping+0x44>)
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	60d3      	str	r3, [r2, #12]
}
 8005c30:	bf00      	nop
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	e000ed00 	.word	0xe000ed00

08005c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c44:	4b04      	ldr	r3, [pc, #16]	; (8005c58 <__NVIC_GetPriorityGrouping+0x18>)
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	0a1b      	lsrs	r3, r3, #8
 8005c4a:	f003 0307 	and.w	r3, r3, #7
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	e000ed00 	.word	0xe000ed00

08005c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	4603      	mov	r3, r0
 8005c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	db0b      	blt.n	8005c86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c6e:	79fb      	ldrb	r3, [r7, #7]
 8005c70:	f003 021f 	and.w	r2, r3, #31
 8005c74:	4907      	ldr	r1, [pc, #28]	; (8005c94 <__NVIC_EnableIRQ+0x38>)
 8005c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	2001      	movs	r0, #1
 8005c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8005c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	e000e100 	.word	0xe000e100

08005c98 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	db12      	blt.n	8005cd0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005caa:	79fb      	ldrb	r3, [r7, #7]
 8005cac:	f003 021f 	and.w	r2, r3, #31
 8005cb0:	490a      	ldr	r1, [pc, #40]	; (8005cdc <__NVIC_DisableIRQ+0x44>)
 8005cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cb6:	095b      	lsrs	r3, r3, #5
 8005cb8:	2001      	movs	r0, #1
 8005cba:	fa00 f202 	lsl.w	r2, r0, r2
 8005cbe:	3320      	adds	r3, #32
 8005cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005cc4:	f3bf 8f4f 	dsb	sy
}
 8005cc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005cca:	f3bf 8f6f 	isb	sy
}
 8005cce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	e000e100 	.word	0xe000e100

08005ce0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	db0c      	blt.n	8005d0c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cf2:	79fb      	ldrb	r3, [r7, #7]
 8005cf4:	f003 021f 	and.w	r2, r3, #31
 8005cf8:	4907      	ldr	r1, [pc, #28]	; (8005d18 <__NVIC_SetPendingIRQ+0x38>)
 8005cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cfe:	095b      	lsrs	r3, r3, #5
 8005d00:	2001      	movs	r0, #1
 8005d02:	fa00 f202 	lsl.w	r2, r0, r2
 8005d06:	3340      	adds	r3, #64	; 0x40
 8005d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	e000e100 	.word	0xe000e100

08005d1c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	4603      	mov	r3, r0
 8005d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	db0c      	blt.n	8005d48 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d2e:	79fb      	ldrb	r3, [r7, #7]
 8005d30:	f003 021f 	and.w	r2, r3, #31
 8005d34:	4907      	ldr	r1, [pc, #28]	; (8005d54 <__NVIC_ClearPendingIRQ+0x38>)
 8005d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d3a:	095b      	lsrs	r3, r3, #5
 8005d3c:	2001      	movs	r0, #1
 8005d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8005d42:	3360      	adds	r3, #96	; 0x60
 8005d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	e000e100 	.word	0xe000e100

08005d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	6039      	str	r1, [r7, #0]
 8005d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	db0a      	blt.n	8005d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	490c      	ldr	r1, [pc, #48]	; (8005da4 <__NVIC_SetPriority+0x4c>)
 8005d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d76:	0112      	lsls	r2, r2, #4
 8005d78:	b2d2      	uxtb	r2, r2
 8005d7a:	440b      	add	r3, r1
 8005d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d80:	e00a      	b.n	8005d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	4908      	ldr	r1, [pc, #32]	; (8005da8 <__NVIC_SetPriority+0x50>)
 8005d88:	79fb      	ldrb	r3, [r7, #7]
 8005d8a:	f003 030f 	and.w	r3, r3, #15
 8005d8e:	3b04      	subs	r3, #4
 8005d90:	0112      	lsls	r2, r2, #4
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	440b      	add	r3, r1
 8005d96:	761a      	strb	r2, [r3, #24]
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	e000e100 	.word	0xe000e100
 8005da8:	e000ed00 	.word	0xe000ed00

08005dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b089      	sub	sp, #36	; 0x24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f003 0307 	and.w	r3, r3, #7
 8005dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	f1c3 0307 	rsb	r3, r3, #7
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	bf28      	it	cs
 8005dca:	2304      	movcs	r3, #4
 8005dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	3304      	adds	r3, #4
 8005dd2:	2b06      	cmp	r3, #6
 8005dd4:	d902      	bls.n	8005ddc <NVIC_EncodePriority+0x30>
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	3b03      	subs	r3, #3
 8005dda:	e000      	b.n	8005dde <NVIC_EncodePriority+0x32>
 8005ddc:	2300      	movs	r3, #0
 8005dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005de0:	f04f 32ff 	mov.w	r2, #4294967295
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dea:	43da      	mvns	r2, r3
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	401a      	ands	r2, r3
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005df4:	f04f 31ff 	mov.w	r1, #4294967295
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8005dfe:	43d9      	mvns	r1, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e04:	4313      	orrs	r3, r2
         );
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3724      	adds	r7, #36	; 0x24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b082      	sub	sp, #8
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7ff feec 	bl	8005bf8 <__NVIC_SetPriorityGrouping>
}
 8005e20:	bf00      	nop
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	4603      	mov	r3, r0
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e36:	f7ff ff03 	bl	8005c40 <__NVIC_GetPriorityGrouping>
 8005e3a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	68b9      	ldr	r1, [r7, #8]
 8005e40:	6978      	ldr	r0, [r7, #20]
 8005e42:	f7ff ffb3 	bl	8005dac <NVIC_EncodePriority>
 8005e46:	4602      	mov	r2, r0
 8005e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e4c:	4611      	mov	r1, r2
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7ff ff82 	bl	8005d58 <__NVIC_SetPriority>
}
 8005e54:	bf00      	nop
 8005e56:	3718      	adds	r7, #24
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	4603      	mov	r3, r0
 8005e64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7ff fef6 	bl	8005c5c <__NVIC_EnableIRQ>
}
 8005e70:	bf00      	nop
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	4603      	mov	r3, r0
 8005e80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7ff ff06 	bl	8005c98 <__NVIC_DisableIRQ>
}
 8005e8c:	bf00      	nop
 8005e8e:	3708      	adds	r7, #8
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8005e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7ff ff1c 	bl	8005ce0 <__NVIC_SetPendingIRQ>
}
 8005ea8:	bf00      	nop
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8005eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7ff ff2c 	bl	8005d1c <__NVIC_ClearPendingIRQ>
}
 8005ec4:	bf00      	nop
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e08e      	b.n	8005ffc <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	4b47      	ldr	r3, [pc, #284]	; (8006004 <HAL_DMA_Init+0x138>)
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d80f      	bhi.n	8005f0a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	4b45      	ldr	r3, [pc, #276]	; (8006008 <HAL_DMA_Init+0x13c>)
 8005ef2:	4413      	add	r3, r2
 8005ef4:	4a45      	ldr	r2, [pc, #276]	; (800600c <HAL_DMA_Init+0x140>)
 8005ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8005efa:	091b      	lsrs	r3, r3, #4
 8005efc:	009a      	lsls	r2, r3, #2
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a42      	ldr	r2, [pc, #264]	; (8006010 <HAL_DMA_Init+0x144>)
 8005f06:	641a      	str	r2, [r3, #64]	; 0x40
 8005f08:	e00e      	b.n	8005f28 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	4b40      	ldr	r3, [pc, #256]	; (8006014 <HAL_DMA_Init+0x148>)
 8005f12:	4413      	add	r3, r2
 8005f14:	4a3d      	ldr	r2, [pc, #244]	; (800600c <HAL_DMA_Init+0x140>)
 8005f16:	fba2 2303 	umull	r2, r3, r2, r3
 8005f1a:	091b      	lsrs	r3, r3, #4
 8005f1c:	009a      	lsls	r2, r3, #2
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a3c      	ldr	r2, [pc, #240]	; (8006018 <HAL_DMA_Init+0x14c>)
 8005f26:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fa74 	bl	8006468 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f88:	d102      	bne.n	8005f90 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f98:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005f9c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005fa6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d010      	beq.n	8005fd2 <HAL_DMA_Init+0x106>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2b04      	cmp	r3, #4
 8005fb6:	d80c      	bhi.n	8005fd2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fa93 	bl	80064e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005fce:	605a      	str	r2, [r3, #4]
 8005fd0:	e008      	b.n	8005fe4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	40020407 	.word	0x40020407
 8006008:	bffdfff8 	.word	0xbffdfff8
 800600c:	cccccccd 	.word	0xcccccccd
 8006010:	40020000 	.word	0x40020000
 8006014:	bffdfbf8 	.word	0xbffdfbf8
 8006018:	40020400 	.word	0x40020400

0800601c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b086      	sub	sp, #24
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
 8006028:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006034:	2b01      	cmp	r3, #1
 8006036:	d101      	bne.n	800603c <HAL_DMA_Start_IT+0x20>
 8006038:	2302      	movs	r3, #2
 800603a:	e066      	b.n	800610a <HAL_DMA_Start_IT+0xee>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b01      	cmp	r3, #1
 800604e:	d155      	bne.n	80060fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0201 	bic.w	r2, r2, #1
 800606c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	68b9      	ldr	r1, [r7, #8]
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f000 f9b9 	bl	80063ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607e:	2b00      	cmp	r3, #0
 8006080:	d008      	beq.n	8006094 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f042 020e 	orr.w	r2, r2, #14
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	e00f      	b.n	80060b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 0204 	bic.w	r2, r2, #4
 80060a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f042 020a 	orr.w	r2, r2, #10
 80060b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d007      	beq.n	80060d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060d0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d007      	beq.n	80060ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f042 0201 	orr.w	r2, r2, #1
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	e005      	b.n	8006108 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006104:	2302      	movs	r3, #2
 8006106:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006108:	7dfb      	ldrb	r3, [r7, #23]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3718      	adds	r7, #24
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006112:	b480      	push	{r7}
 8006114:	b083      	sub	sp, #12
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e04f      	b.n	80061c4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b02      	cmp	r3, #2
 800612e:	d008      	beq.n	8006142 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2204      	movs	r2, #4
 8006134:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e040      	b.n	80061c4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 020e 	bic.w	r2, r2, #14
 8006150:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800615c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006160:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f022 0201 	bic.w	r2, r2, #1
 8006170:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006176:	f003 021c 	and.w	r2, r3, #28
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617e:	2101      	movs	r1, #1
 8006180:	fa01 f202 	lsl.w	r2, r1, r2
 8006184:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800618e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00c      	beq.n	80061b2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80061b0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061d8:	2300      	movs	r3, #0
 80061da:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d005      	beq.n	80061f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2204      	movs	r2, #4
 80061ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	73fb      	strb	r3, [r7, #15]
 80061f2:	e047      	b.n	8006284 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 020e 	bic.w	r2, r2, #14
 8006202:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0201 	bic.w	r2, r2, #1
 8006212:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800621e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006222:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006228:	f003 021c 	and.w	r2, r3, #28
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006230:	2101      	movs	r1, #1
 8006232:	fa01 f202 	lsl.w	r2, r1, r2
 8006236:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006240:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00c      	beq.n	8006264 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006258:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006262:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	4798      	blx	r3
    }
  }
  return status;
 8006284:	7bfb      	ldrb	r3, [r7, #15]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b084      	sub	sp, #16
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062aa:	f003 031c 	and.w	r3, r3, #28
 80062ae:	2204      	movs	r2, #4
 80062b0:	409a      	lsls	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	4013      	ands	r3, r2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d026      	beq.n	8006308 <HAL_DMA_IRQHandler+0x7a>
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d021      	beq.n	8006308 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d107      	bne.n	80062e2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 0204 	bic.w	r2, r2, #4
 80062e0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e6:	f003 021c 	and.w	r2, r3, #28
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	2104      	movs	r1, #4
 80062f0:	fa01 f202 	lsl.w	r2, r1, r2
 80062f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d071      	beq.n	80063e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006306:	e06c      	b.n	80063e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800630c:	f003 031c 	and.w	r3, r3, #28
 8006310:	2202      	movs	r2, #2
 8006312:	409a      	lsls	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4013      	ands	r3, r2
 8006318:	2b00      	cmp	r3, #0
 800631a:	d02e      	beq.n	800637a <HAL_DMA_IRQHandler+0xec>
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	2b00      	cmp	r3, #0
 8006324:	d029      	beq.n	800637a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0320 	and.w	r3, r3, #32
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10b      	bne.n	800634c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 020a 	bic.w	r2, r2, #10
 8006342:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006350:	f003 021c 	and.w	r2, r3, #28
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006358:	2102      	movs	r1, #2
 800635a:	fa01 f202 	lsl.w	r2, r1, r2
 800635e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636c:	2b00      	cmp	r3, #0
 800636e:	d038      	beq.n	80063e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006378:	e033      	b.n	80063e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800637e:	f003 031c 	and.w	r3, r3, #28
 8006382:	2208      	movs	r2, #8
 8006384:	409a      	lsls	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4013      	ands	r3, r2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d02a      	beq.n	80063e4 <HAL_DMA_IRQHandler+0x156>
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f003 0308 	and.w	r3, r3, #8
 8006394:	2b00      	cmp	r3, #0
 8006396:	d025      	beq.n	80063e4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 020e 	bic.w	r2, r2, #14
 80063a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ac:	f003 021c 	and.w	r2, r3, #28
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b4:	2101      	movs	r1, #1
 80063b6:	fa01 f202 	lsl.w	r2, r1, r2
 80063ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d004      	beq.n	80063e4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80063e2:	bf00      	nop
 80063e4:	bf00      	nop
}
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
 80063f8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006402:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006408:	2b00      	cmp	r3, #0
 800640a:	d004      	beq.n	8006416 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006414:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800641a:	f003 021c 	and.w	r2, r3, #28
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006422:	2101      	movs	r1, #1
 8006424:	fa01 f202 	lsl.w	r2, r1, r2
 8006428:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	683a      	ldr	r2, [r7, #0]
 8006430:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	2b10      	cmp	r3, #16
 8006438:	d108      	bne.n	800644c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800644a:	e007      	b.n	800645c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	60da      	str	r2, [r3, #12]
}
 800645c:	bf00      	nop
 800645e:	3714      	adds	r7, #20
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	461a      	mov	r2, r3
 8006476:	4b17      	ldr	r3, [pc, #92]	; (80064d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006478:	429a      	cmp	r2, r3
 800647a:	d80a      	bhi.n	8006492 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006480:	089b      	lsrs	r3, r3, #2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006488:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	6493      	str	r3, [r2, #72]	; 0x48
 8006490:	e007      	b.n	80064a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006496:	089b      	lsrs	r3, r3, #2
 8006498:	009a      	lsls	r2, r3, #2
 800649a:	4b0f      	ldr	r3, [pc, #60]	; (80064d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800649c:	4413      	add	r3, r2
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	3b08      	subs	r3, #8
 80064aa:	4a0c      	ldr	r2, [pc, #48]	; (80064dc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80064ac:	fba2 2303 	umull	r2, r3, r2, r3
 80064b0:	091b      	lsrs	r3, r3, #4
 80064b2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a0a      	ldr	r2, [pc, #40]	; (80064e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80064b8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f003 031f 	and.w	r3, r3, #31
 80064c0:	2201      	movs	r2, #1
 80064c2:	409a      	lsls	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80064c8:	bf00      	nop
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr
 80064d4:	40020407 	.word	0x40020407
 80064d8:	4002081c 	.word	0x4002081c
 80064dc:	cccccccd 	.word	0xcccccccd
 80064e0:	40020880 	.word	0x40020880

080064e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064f4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	4b0b      	ldr	r3, [pc, #44]	; (8006528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80064fa:	4413      	add	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	461a      	mov	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a09      	ldr	r2, [pc, #36]	; (800652c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8006508:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	3b01      	subs	r3, #1
 800650e:	f003 0303 	and.w	r3, r3, #3
 8006512:	2201      	movs	r2, #1
 8006514:	409a      	lsls	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800651a:	bf00      	nop
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	1000823f 	.word	0x1000823f
 800652c:	40020940 	.word	0x40020940

08006530 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006530:	b480      	push	{r7}
 8006532:	b087      	sub	sp, #28
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800653a:	2300      	movs	r3, #0
 800653c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800653e:	e14c      	b.n	80067da <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	2101      	movs	r1, #1
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	fa01 f303 	lsl.w	r3, r1, r3
 800654c:	4013      	ands	r3, r2
 800654e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 813e 	beq.w	80067d4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f003 0303 	and.w	r3, r3, #3
 8006560:	2b01      	cmp	r3, #1
 8006562:	d005      	beq.n	8006570 <HAL_GPIO_Init+0x40>
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f003 0303 	and.w	r3, r3, #3
 800656c:	2b02      	cmp	r3, #2
 800656e:	d130      	bne.n	80065d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	2203      	movs	r2, #3
 800657c:	fa02 f303 	lsl.w	r3, r2, r3
 8006580:	43db      	mvns	r3, r3
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	4013      	ands	r3, r2
 8006586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	68da      	ldr	r2, [r3, #12]
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	fa02 f303 	lsl.w	r3, r2, r3
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	4313      	orrs	r3, r2
 8006598:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80065a6:	2201      	movs	r2, #1
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	fa02 f303 	lsl.w	r3, r2, r3
 80065ae:	43db      	mvns	r3, r3
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	4013      	ands	r3, r2
 80065b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	091b      	lsrs	r3, r3, #4
 80065bc:	f003 0201 	and.w	r2, r3, #1
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	fa02 f303 	lsl.w	r3, r2, r3
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f003 0303 	and.w	r3, r3, #3
 80065da:	2b03      	cmp	r3, #3
 80065dc:	d017      	beq.n	800660e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	2203      	movs	r2, #3
 80065ea:	fa02 f303 	lsl.w	r3, r2, r3
 80065ee:	43db      	mvns	r3, r3
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	4013      	ands	r3, r2
 80065f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	689a      	ldr	r2, [r3, #8]
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	4313      	orrs	r3, r2
 8006606:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f003 0303 	and.w	r3, r3, #3
 8006616:	2b02      	cmp	r3, #2
 8006618:	d123      	bne.n	8006662 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	08da      	lsrs	r2, r3, #3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	3208      	adds	r2, #8
 8006622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006626:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f003 0307 	and.w	r3, r3, #7
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	220f      	movs	r2, #15
 8006632:	fa02 f303 	lsl.w	r3, r2, r3
 8006636:	43db      	mvns	r3, r3
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4013      	ands	r3, r2
 800663c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	691a      	ldr	r2, [r3, #16]
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f003 0307 	and.w	r3, r3, #7
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	fa02 f303 	lsl.w	r3, r2, r3
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	4313      	orrs	r3, r2
 8006652:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	08da      	lsrs	r2, r3, #3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	3208      	adds	r2, #8
 800665c:	6939      	ldr	r1, [r7, #16]
 800665e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	005b      	lsls	r3, r3, #1
 800666c:	2203      	movs	r2, #3
 800666e:	fa02 f303 	lsl.w	r3, r2, r3
 8006672:	43db      	mvns	r3, r3
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	4013      	ands	r3, r2
 8006678:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f003 0203 	and.w	r2, r3, #3
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	005b      	lsls	r3, r3, #1
 8006686:	fa02 f303 	lsl.w	r3, r2, r3
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	4313      	orrs	r3, r2
 800668e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f000 8098 	beq.w	80067d4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80066a4:	4a54      	ldr	r2, [pc, #336]	; (80067f8 <HAL_GPIO_Init+0x2c8>)
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	089b      	lsrs	r3, r3, #2
 80066aa:	3302      	adds	r3, #2
 80066ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f003 0303 	and.w	r3, r3, #3
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	220f      	movs	r2, #15
 80066bc:	fa02 f303 	lsl.w	r3, r2, r3
 80066c0:	43db      	mvns	r3, r3
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	4013      	ands	r3, r2
 80066c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80066ce:	d019      	beq.n	8006704 <HAL_GPIO_Init+0x1d4>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a4a      	ldr	r2, [pc, #296]	; (80067fc <HAL_GPIO_Init+0x2cc>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d013      	beq.n	8006700 <HAL_GPIO_Init+0x1d0>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a49      	ldr	r2, [pc, #292]	; (8006800 <HAL_GPIO_Init+0x2d0>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d00d      	beq.n	80066fc <HAL_GPIO_Init+0x1cc>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a48      	ldr	r2, [pc, #288]	; (8006804 <HAL_GPIO_Init+0x2d4>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d007      	beq.n	80066f8 <HAL_GPIO_Init+0x1c8>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a47      	ldr	r2, [pc, #284]	; (8006808 <HAL_GPIO_Init+0x2d8>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d101      	bne.n	80066f4 <HAL_GPIO_Init+0x1c4>
 80066f0:	2304      	movs	r3, #4
 80066f2:	e008      	b.n	8006706 <HAL_GPIO_Init+0x1d6>
 80066f4:	2307      	movs	r3, #7
 80066f6:	e006      	b.n	8006706 <HAL_GPIO_Init+0x1d6>
 80066f8:	2303      	movs	r3, #3
 80066fa:	e004      	b.n	8006706 <HAL_GPIO_Init+0x1d6>
 80066fc:	2302      	movs	r3, #2
 80066fe:	e002      	b.n	8006706 <HAL_GPIO_Init+0x1d6>
 8006700:	2301      	movs	r3, #1
 8006702:	e000      	b.n	8006706 <HAL_GPIO_Init+0x1d6>
 8006704:	2300      	movs	r3, #0
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	f002 0203 	and.w	r2, r2, #3
 800670c:	0092      	lsls	r2, r2, #2
 800670e:	4093      	lsls	r3, r2
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	4313      	orrs	r3, r2
 8006714:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006716:	4938      	ldr	r1, [pc, #224]	; (80067f8 <HAL_GPIO_Init+0x2c8>)
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	089b      	lsrs	r3, r3, #2
 800671c:	3302      	adds	r3, #2
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006724:	4b39      	ldr	r3, [pc, #228]	; (800680c <HAL_GPIO_Init+0x2dc>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	43db      	mvns	r3, r3
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	4013      	ands	r3, r2
 8006732:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d003      	beq.n	8006748 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4313      	orrs	r3, r2
 8006746:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006748:	4a30      	ldr	r2, [pc, #192]	; (800680c <HAL_GPIO_Init+0x2dc>)
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800674e:	4b2f      	ldr	r3, [pc, #188]	; (800680c <HAL_GPIO_Init+0x2dc>)
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	43db      	mvns	r3, r3
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	4013      	ands	r3, r2
 800675c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4313      	orrs	r3, r2
 8006770:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006772:	4a26      	ldr	r2, [pc, #152]	; (800680c <HAL_GPIO_Init+0x2dc>)
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006778:	4b24      	ldr	r3, [pc, #144]	; (800680c <HAL_GPIO_Init+0x2dc>)
 800677a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800677e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	43db      	mvns	r3, r3
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	4013      	ands	r3, r2
 8006788:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4313      	orrs	r3, r2
 800679c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800679e:	4a1b      	ldr	r2, [pc, #108]	; (800680c <HAL_GPIO_Init+0x2dc>)
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80067a6:	4b19      	ldr	r3, [pc, #100]	; (800680c <HAL_GPIO_Init+0x2dc>)
 80067a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	43db      	mvns	r3, r3
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	4013      	ands	r3, r2
 80067b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80067cc:	4a0f      	ldr	r2, [pc, #60]	; (800680c <HAL_GPIO_Init+0x2dc>)
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	3301      	adds	r3, #1
 80067d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	fa22 f303 	lsr.w	r3, r2, r3
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f47f aeab 	bne.w	8006540 <HAL_GPIO_Init+0x10>
  }
}
 80067ea:	bf00      	nop
 80067ec:	bf00      	nop
 80067ee:	371c      	adds	r7, #28
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr
 80067f8:	40010000 	.word	0x40010000
 80067fc:	48000400 	.word	0x48000400
 8006800:	48000800 	.word	0x48000800
 8006804:	48000c00 	.word	0x48000c00
 8006808:	48001000 	.word	0x48001000
 800680c:	58000800 	.word	0x58000800

08006810 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8006816:	4b0a      	ldr	r3, [pc, #40]	; (8006840 <HAL_HSEM_IRQHandler+0x30>)
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800681c:	4b08      	ldr	r3, [pc, #32]	; (8006840 <HAL_HSEM_IRQHandler+0x30>)
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	43db      	mvns	r3, r3
 8006824:	4906      	ldr	r1, [pc, #24]	; (8006840 <HAL_HSEM_IRQHandler+0x30>)
 8006826:	4013      	ands	r3, r2
 8006828:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800682a:	4a05      	ldr	r2, [pc, #20]	; (8006840 <HAL_HSEM_IRQHandler+0x30>)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f807 	bl	8006844 <HAL_HSEM_FreeCallback>
}
 8006836:	bf00      	nop
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	58001500 	.word	0x58001500

08006844 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d01e      	beq.n	80068a8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800686a:	4b13      	ldr	r3, [pc, #76]	; (80068b8 <HAL_IPCC_Init+0x60>)
 800686c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d102      	bne.n	8006880 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7fc fa62 	bl	8002d44 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8006880:	68b8      	ldr	r0, [r7, #8]
 8006882:	f000 f85b 	bl	800693c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f82c 	bl	80068f0 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80068a6:	e001      	b.n	80068ac <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	58000c00 	.word	0x58000c00

080068bc <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	4613      	mov	r3, r2
 80068c8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80068ca:	bf00      	nop
 80068cc:	3714      	adds	r7, #20
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b085      	sub	sp, #20
 80068da:	af00      	add	r7, sp, #0
 80068dc:	60f8      	str	r0, [r7, #12]
 80068de:	60b9      	str	r1, [r7, #8]
 80068e0:	4613      	mov	r3, r2
 80068e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80068e4:	bf00      	nop
 80068e6:	3714      	adds	r7, #20
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80068f8:	2300      	movs	r3, #0
 80068fa:	60fb      	str	r3, [r7, #12]
 80068fc:	e00f      	b.n	800691e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	4a0b      	ldr	r2, [pc, #44]	; (8006934 <IPCC_SetDefaultCallbacks+0x44>)
 8006908:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3306      	adds	r3, #6
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4413      	add	r3, r2
 8006914:	4a08      	ldr	r2, [pc, #32]	; (8006938 <IPCC_SetDefaultCallbacks+0x48>)
 8006916:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	3301      	adds	r3, #1
 800691c:	60fb      	str	r3, [r7, #12]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2b05      	cmp	r3, #5
 8006922:	d9ec      	bls.n	80068fe <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8006924:	bf00      	nop
 8006926:	bf00      	nop
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	080068bd 	.word	0x080068bd
 8006938:	080068d7 	.word	0x080068d7

0800693c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8006950:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	223f      	movs	r2, #63	; 0x3f
 8006956:	609a      	str	r2, [r3, #8]
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e08f      	b.n	8006a96 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b00      	cmp	r3, #0
 8006986:	d106      	bne.n	8006996 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7fc faaf 	bl	8002ef4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2202      	movs	r2, #2
 800699a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d004      	beq.n	80069b8 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069b6:	d103      	bne.n	80069c0 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f023 031e 	bic.w	r3, r3, #30
 80069be:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d005      	beq.n	80069d8 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80069d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80069d6:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	4b31      	ldr	r3, [pc, #196]	; (8006aa0 <HAL_LPTIM_Init+0x13c>)
 80069dc:	4013      	ands	r3, r2
 80069de:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80069e8:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80069ee:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80069f4:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80069fa:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d107      	bne.n	8006a1a <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8006a12:	4313      	orrs	r3, r2
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d004      	beq.n	8006a2c <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a2a:	d107      	bne.n	8006a3c <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8006a34:	4313      	orrs	r3, r2
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d00a      	beq.n	8006a5e <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006a50:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8006a56:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a0e      	ldr	r2, [pc, #56]	; (8006aa4 <HAL_LPTIM_Init+0x140>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d108      	bne.n	8006a82 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	621a      	str	r2, [r3, #32]
 8006a80:	e004      	b.n	8006a8c <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a8a:	621a      	str	r2, [r3, #32]
  }
#endif /* LPTIM_OR_OR */

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	ff19f1fe 	.word	0xff19f1fe
 8006aa4:	40007c00 	.word	0x40007c00

08006aa8 <HAL_LPTIM_Counter_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2202      	movs	r2, #2
 8006ab6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d00c      	beq.n	8006adc <HAL_LPTIM_Counter_Start+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006aca:	d107      	bne.n	8006adc <HAL_LPTIM_Counter_Start+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68da      	ldr	r2, [r3, #12]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8006ada:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	691a      	ldr	r2, [r3, #16]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f042 0201 	orr.w	r2, r2, #1
 8006aea:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2210      	movs	r2, #16
 8006af2:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8006afc:	2110      	movs	r1, #16
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f824 	bl	8006b4c <LPTIM_WaitForFlag>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b03      	cmp	r3, #3
 8006b08:	d101      	bne.n	8006b0e <HAL_LPTIM_Counter_Start+0x66>
  {
    return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e00c      	b.n	8006b28 <HAL_LPTIM_Counter_Start+0x80>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	691a      	ldr	r2, [r3, #16]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f042 0204 	orr.w	r2, r2, #4
 8006b1c:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <HAL_LPTIM_ReadCounter>:
  * @brief  Return the current counter value.
  * @param  hlptim LPTIM handle
  * @retval Counter value.
  */
uint32_t HAL_LPTIM_ReadCounter(const LPTIM_HandleTypeDef *hlptim)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  return (hlptim->Instance->CNT);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	69db      	ldr	r3, [r3, #28]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
	...

08006b4c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8006b5a:	4b12      	ldr	r3, [pc, #72]	; (8006ba4 <LPTIM_WaitForFlag+0x58>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a12      	ldr	r2, [pc, #72]	; (8006ba8 <LPTIM_WaitForFlag+0x5c>)
 8006b60:	fba2 2303 	umull	r2, r3, r2, r3
 8006b64:	0b9b      	lsrs	r3, r3, #14
 8006b66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b6a:	fb02 f303 	mul.w	r3, r2, r3
 8006b6e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	3b01      	subs	r3, #1
 8006b74:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d101      	bne.n	8006b80 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	4013      	ands	r3, r2
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d002      	beq.n	8006b96 <LPTIM_WaitForFlag+0x4a>
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1ec      	bne.n	8006b70 <LPTIM_WaitForFlag+0x24>

  return result;
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	20000070 	.word	0x20000070
 8006ba8:	d1b71759 	.word	0xd1b71759

08006bac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e0c0      	b.n	8006d40 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d106      	bne.n	8006bd8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7fe f83a 	bl	8004c4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2203      	movs	r2, #3
 8006bdc:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f006 fedb 	bl	800d9a0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bea:	2300      	movs	r3, #0
 8006bec:	73fb      	strb	r3, [r7, #15]
 8006bee:	e03e      	b.n	8006c6e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006bf0:	7bfa      	ldrb	r2, [r7, #15]
 8006bf2:	6879      	ldr	r1, [r7, #4]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	440b      	add	r3, r1
 8006bfe:	3311      	adds	r3, #17
 8006c00:	2201      	movs	r2, #1
 8006c02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006c04:	7bfa      	ldrb	r2, [r7, #15]
 8006c06:	6879      	ldr	r1, [r7, #4]
 8006c08:	4613      	mov	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4413      	add	r3, r2
 8006c0e:	00db      	lsls	r3, r3, #3
 8006c10:	440b      	add	r3, r1
 8006c12:	3310      	adds	r3, #16
 8006c14:	7bfa      	ldrb	r2, [r7, #15]
 8006c16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006c18:	7bfa      	ldrb	r2, [r7, #15]
 8006c1a:	6879      	ldr	r1, [r7, #4]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	00db      	lsls	r3, r3, #3
 8006c24:	440b      	add	r3, r1
 8006c26:	3313      	adds	r3, #19
 8006c28:	2200      	movs	r2, #0
 8006c2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006c2c:	7bfa      	ldrb	r2, [r7, #15]
 8006c2e:	6879      	ldr	r1, [r7, #4]
 8006c30:	4613      	mov	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	00db      	lsls	r3, r3, #3
 8006c38:	440b      	add	r3, r1
 8006c3a:	3320      	adds	r3, #32
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006c40:	7bfa      	ldrb	r2, [r7, #15]
 8006c42:	6879      	ldr	r1, [r7, #4]
 8006c44:	4613      	mov	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	00db      	lsls	r3, r3, #3
 8006c4c:	440b      	add	r3, r1
 8006c4e:	3324      	adds	r3, #36	; 0x24
 8006c50:	2200      	movs	r2, #0
 8006c52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
 8006c56:	6879      	ldr	r1, [r7, #4]
 8006c58:	1c5a      	adds	r2, r3, #1
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	00db      	lsls	r3, r3, #3
 8006c62:	440b      	add	r3, r1
 8006c64:	2200      	movs	r2, #0
 8006c66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	73fb      	strb	r3, [r7, #15]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	791b      	ldrb	r3, [r3, #4]
 8006c72:	7bfa      	ldrb	r2, [r7, #15]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d3bb      	bcc.n	8006bf0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c78:	2300      	movs	r3, #0
 8006c7a:	73fb      	strb	r3, [r7, #15]
 8006c7c:	e044      	b.n	8006d08 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006c7e:	7bfa      	ldrb	r2, [r7, #15]
 8006c80:	6879      	ldr	r1, [r7, #4]
 8006c82:	4613      	mov	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	00db      	lsls	r3, r3, #3
 8006c8a:	440b      	add	r3, r1
 8006c8c:	f203 1351 	addw	r3, r3, #337	; 0x151
 8006c90:	2200      	movs	r2, #0
 8006c92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006c94:	7bfa      	ldrb	r2, [r7, #15]
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	00db      	lsls	r3, r3, #3
 8006ca0:	440b      	add	r3, r1
 8006ca2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ca6:	7bfa      	ldrb	r2, [r7, #15]
 8006ca8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006caa:	7bfa      	ldrb	r2, [r7, #15]
 8006cac:	6879      	ldr	r1, [r7, #4]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	00db      	lsls	r3, r3, #3
 8006cb6:	440b      	add	r3, r1
 8006cb8:	f203 1353 	addw	r3, r3, #339	; 0x153
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006cc0:	7bfa      	ldrb	r2, [r7, #15]
 8006cc2:	6879      	ldr	r1, [r7, #4]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4413      	add	r3, r2
 8006cca:	00db      	lsls	r3, r3, #3
 8006ccc:	440b      	add	r3, r1
 8006cce:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006cd6:	7bfa      	ldrb	r2, [r7, #15]
 8006cd8:	6879      	ldr	r1, [r7, #4]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	00db      	lsls	r3, r3, #3
 8006ce2:	440b      	add	r3, r1
 8006ce4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006cec:	7bfa      	ldrb	r2, [r7, #15]
 8006cee:	6879      	ldr	r1, [r7, #4]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	00db      	lsls	r3, r3, #3
 8006cf8:	440b      	add	r3, r1
 8006cfa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006cfe:	2200      	movs	r2, #0
 8006d00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
 8006d04:	3301      	adds	r3, #1
 8006d06:	73fb      	strb	r3, [r7, #15]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	791b      	ldrb	r3, [r3, #4]
 8006d0c:	7bfa      	ldrb	r2, [r7, #15]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d3b5      	bcc.n	8006c7e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6818      	ldr	r0, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	3304      	adds	r3, #4
 8006d1a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006d1e:	f006 fe5a 	bl	800d9d6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	7a9b      	ldrb	r3, [r3, #10]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d102      	bne.n	8006d3e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f805 	bl	8006d48 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	f043 0301 	orr.w	r3, r3, #1
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	f043 0302 	orr.w	r3, r3, #2
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3714      	adds	r7, #20
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006da0:	4b05      	ldr	r3, [pc, #20]	; (8006db8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a04      	ldr	r2, [pc, #16]	; (8006db8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006daa:	6013      	str	r3, [r2, #0]
}
 8006dac:	bf00      	nop
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	58000400 	.word	0x58000400

08006dbc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006dc0:	4b04      	ldr	r3, [pc, #16]	; (8006dd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	58000400 	.word	0x58000400

08006dd8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af02      	add	r7, sp, #8
 8006dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006de0:	f7fe f854 	bl	8004e8c <HAL_GetTick>
 8006de4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e063      	b.n	8006eb8 <HAL_QSPI_Init+0xe0>
  assert_param(IS_QSPI_SSHIFT(hqspi->Init.SampleShifting));
  assert_param(IS_QSPI_FLASH_SIZE(hqspi->Init.FlashSize));
  assert_param(IS_QSPI_CS_HIGH_TIME(hqspi->Init.ChipSelectHighTime));
  assert_param(IS_QSPI_CLOCK_MODE(hqspi->Init.ClockMode));

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10b      	bne.n	8006e14 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7fc ff65 	bl	8003cd4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006e0a:	f241 3188 	movw	r1, #5000	; 0x1388
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f858 	bl	8006ec4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	3b01      	subs	r3, #1
 8006e24:	021a      	lsls	r2, r3, #8
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e32:	9300      	str	r3, [sp, #0]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	2120      	movs	r1, #32
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f850 	bl	8006ee0 <QSPI_WaitFlagStateUntilTimeout>
 8006e40:	4603      	mov	r3, r0
 8006e42:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006e44:	7afb      	ldrb	r3, [r7, #11]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d131      	bne.n	8006eae <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e54:	f023 0310 	bic.w	r3, r3, #16
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	6852      	ldr	r2, [r2, #4]
 8006e5c:	0611      	lsls	r1, r2, #24
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	68d2      	ldr	r2, [r2, #12]
 8006e62:	4311      	orrs	r1, r2
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	6812      	ldr	r2, [r2, #0]
 8006e68:	430b      	orrs	r3, r1
 8006e6a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	4b13      	ldr	r3, [pc, #76]	; (8006ec0 <HAL_QSPI_Init+0xe8>)
 8006e74:	4013      	ands	r3, r2
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	6912      	ldr	r2, [r2, #16]
 8006e7a:	0411      	lsls	r1, r2, #16
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	6952      	ldr	r2, [r2, #20]
 8006e80:	4311      	orrs	r1, r2
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	6992      	ldr	r2, [r2, #24]
 8006e86:	4311      	orrs	r1, r2
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6812      	ldr	r2, [r2, #0]
 8006e8c:	430b      	orrs	r3, r1
 8006e8e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0201 	orr.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8006eb6:	7afb      	ldrb	r3, [r7, #11]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	ffe0f8fe 	.word	0xffe0f8fe

08006ec4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	603b      	str	r3, [r7, #0]
 8006eec:	4613      	mov	r3, r2
 8006eee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006ef0:	e01a      	b.n	8006f28 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef8:	d016      	beq.n	8006f28 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006efa:	f7fd ffc7 	bl	8004e8c <HAL_GetTick>
 8006efe:	4602      	mov	r2, r0
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	69ba      	ldr	r2, [r7, #24]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d302      	bcc.n	8006f10 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10b      	bne.n	8006f28 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2204      	movs	r2, #4
 8006f14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f1c:	f043 0201 	orr.w	r2, r3, #1
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e00e      	b.n	8006f46 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	689a      	ldr	r2, [r3, #8]
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	4013      	ands	r3, r2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	bf14      	ite	ne
 8006f36:	2301      	movne	r3, #1
 8006f38:	2300      	moveq	r3, #0
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	79fb      	ldrb	r3, [r7, #7]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d1d6      	bne.n	8006ef2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006f4e:	b480      	push	{r7}
 8006f50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f60:	d101      	bne.n	8006f66 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006f62:	2301      	movs	r3, #1
 8006f64:	e000      	b.n	8006f68 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <LL_RCC_HSE_Enable>:
{
 8006f72:	b480      	push	{r7}
 8006f74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f84:	6013      	str	r3, [r2, #0]
}
 8006f86:	bf00      	nop
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <LL_RCC_HSE_Disable>:
{
 8006f90:	b480      	push	{r7}
 8006f92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fa2:	6013      	str	r3, [r2, #0]
}
 8006fa4:	bf00      	nop
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <LL_RCC_HSE_IsReady>:
{
 8006fae:	b480      	push	{r7}
 8006fb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fc0:	d101      	bne.n	8006fc6 <LL_RCC_HSE_IsReady+0x18>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e000      	b.n	8006fc8 <LL_RCC_HSE_IsReady+0x1a>
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <LL_RCC_HSI_Enable>:
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fe4:	6013      	str	r3, [r2, #0]
}
 8006fe6:	bf00      	nop
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <LL_RCC_HSI_Disable>:
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ffe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007002:	6013      	str	r3, [r2, #0]
}
 8007004:	bf00      	nop
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <LL_RCC_HSI_IsReady>:
{
 800700e:	b480      	push	{r7}
 8007010:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800701c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007020:	d101      	bne.n	8007026 <LL_RCC_HSI_IsReady+0x18>
 8007022:	2301      	movs	r3, #1
 8007024:	e000      	b.n	8007028 <LL_RCC_HSI_IsReady+0x1a>
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <LL_RCC_HSI_SetCalibTrimming>:
{
 8007032:	b480      	push	{r7}
 8007034:	b083      	sub	sp, #12
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800703a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	061b      	lsls	r3, r3, #24
 8007048:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800704c:	4313      	orrs	r3, r2
 800704e:	604b      	str	r3, [r1, #4]
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <LL_RCC_HSI48_Enable>:
{
 800705c:	b480      	push	{r7}
 800705e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007064:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007068:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800706c:	f043 0301 	orr.w	r3, r3, #1
 8007070:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8007074:	bf00      	nop
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <LL_RCC_HSI48_Disable>:
{
 800707e:	b480      	push	{r7}
 8007080:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007086:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800708a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800708e:	f023 0301 	bic.w	r3, r3, #1
 8007092:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8007096:	bf00      	nop
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <LL_RCC_HSI48_IsReady>:
{
 80070a0:	b480      	push	{r7}
 80070a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80070a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070ac:	f003 0302 	and.w	r3, r3, #2
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d101      	bne.n	80070b8 <LL_RCC_HSI48_IsReady+0x18>
 80070b4:	2301      	movs	r3, #1
 80070b6:	e000      	b.n	80070ba <LL_RCC_HSI48_IsReady+0x1a>
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <LL_RCC_LSE_Enable>:
{
 80070c4:	b480      	push	{r7}
 80070c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80070c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070d4:	f043 0301 	orr.w	r3, r3, #1
 80070d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80070dc:	bf00      	nop
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <LL_RCC_LSE_Disable>:
{
 80070e6:	b480      	push	{r7}
 80070e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80070ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070f6:	f023 0301 	bic.w	r3, r3, #1
 80070fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80070fe:	bf00      	nop
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <LL_RCC_LSE_EnableBypass>:
{
 8007108:	b480      	push	{r7}
 800710a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800710c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007114:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007118:	f043 0304 	orr.w	r3, r3, #4
 800711c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007120:	bf00      	nop
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <LL_RCC_LSE_DisableBypass>:
{
 800712a:	b480      	push	{r7}
 800712c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800712e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007136:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800713a:	f023 0304 	bic.w	r3, r3, #4
 800713e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007142:	bf00      	nop
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <LL_RCC_LSE_IsReady>:
{
 800714c:	b480      	push	{r7}
 800714e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007158:	f003 0302 	and.w	r3, r3, #2
 800715c:	2b02      	cmp	r3, #2
 800715e:	d101      	bne.n	8007164 <LL_RCC_LSE_IsReady+0x18>
 8007160:	2301      	movs	r3, #1
 8007162:	e000      	b.n	8007166 <LL_RCC_LSE_IsReady+0x1a>
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <LL_RCC_LSI1_Enable>:
{
 8007170:	b480      	push	{r7}
 8007172:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800717c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007180:	f043 0301 	orr.w	r3, r3, #1
 8007184:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007188:	bf00      	nop
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <LL_RCC_LSI1_Disable>:
{
 8007192:	b480      	push	{r7}
 8007194:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800719a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800719e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071a2:	f023 0301 	bic.w	r3, r3, #1
 80071a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80071aa:	bf00      	nop
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <LL_RCC_LSI1_IsReady>:
{
 80071b4:	b480      	push	{r7}
 80071b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80071b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071c0:	f003 0302 	and.w	r3, r3, #2
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d101      	bne.n	80071cc <LL_RCC_LSI1_IsReady+0x18>
 80071c8:	2301      	movs	r3, #1
 80071ca:	e000      	b.n	80071ce <LL_RCC_LSI1_IsReady+0x1a>
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <LL_RCC_LSI2_Enable>:
{
 80071d8:	b480      	push	{r7}
 80071da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80071dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071e8:	f043 0304 	orr.w	r3, r3, #4
 80071ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80071f0:	bf00      	nop
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <LL_RCC_LSI2_Disable>:
{
 80071fa:	b480      	push	{r7}
 80071fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80071fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007206:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800720a:	f023 0304 	bic.w	r3, r3, #4
 800720e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007212:	bf00      	nop
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <LL_RCC_LSI2_IsReady>:
{
 800721c:	b480      	push	{r7}
 800721e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8007220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007228:	f003 0308 	and.w	r3, r3, #8
 800722c:	2b08      	cmp	r3, #8
 800722e:	d101      	bne.n	8007234 <LL_RCC_LSI2_IsReady+0x18>
 8007230:	2301      	movs	r3, #1
 8007232:	e000      	b.n	8007236 <LL_RCC_LSI2_IsReady+0x1a>
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <LL_RCC_LSI2_SetTrimming>:
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8007248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800724c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007250:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	021b      	lsls	r3, r3, #8
 8007258:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800725c:	4313      	orrs	r3, r2
 800725e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007262:	bf00      	nop
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <LL_RCC_MSI_Enable>:
{
 800726e:	b480      	push	{r7}
 8007270:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800727c:	f043 0301 	orr.w	r3, r3, #1
 8007280:	6013      	str	r3, [r2, #0]
}
 8007282:	bf00      	nop
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <LL_RCC_MSI_Disable>:
{
 800728c:	b480      	push	{r7}
 800728e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800729a:	f023 0301 	bic.w	r3, r3, #1
 800729e:	6013      	str	r3, [r2, #0]
}
 80072a0:	bf00      	nop
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <LL_RCC_MSI_IsReady>:
{
 80072aa:	b480      	push	{r7}
 80072ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80072ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d101      	bne.n	80072c0 <LL_RCC_MSI_IsReady+0x16>
 80072bc:	2301      	movs	r3, #1
 80072be:	e000      	b.n	80072c2 <LL_RCC_MSI_IsReady+0x18>
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <LL_RCC_MSI_SetRange>:
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80072d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	600b      	str	r3, [r1, #0]
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <LL_RCC_MSI_GetRange>:
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80072fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007304:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2bb0      	cmp	r3, #176	; 0xb0
 800730a:	d901      	bls.n	8007310 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800730c:	23b0      	movs	r3, #176	; 0xb0
 800730e:	607b      	str	r3, [r7, #4]
  return msiRange;
 8007310:	687b      	ldr	r3, [r7, #4]
}
 8007312:	4618      	mov	r0, r3
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <LL_RCC_MSI_SetCalibTrimming>:
{
 800731e:	b480      	push	{r7}
 8007320:	b083      	sub	sp, #12
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8007326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	021b      	lsls	r3, r3, #8
 8007334:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007338:	4313      	orrs	r3, r2
 800733a:	604b      	str	r3, [r1, #4]
}
 800733c:	bf00      	nop
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <LL_RCC_SetSysClkSource>:
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f023 0203 	bic.w	r2, r3, #3
 800735a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4313      	orrs	r3, r2
 8007362:	608b      	str	r3, [r1, #8]
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <LL_RCC_GetSysClkSource>:
{
 8007370:	b480      	push	{r7}
 8007372:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	f003 030c 	and.w	r3, r3, #12
}
 800737e:	4618      	mov	r0, r3
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <LL_RCC_SetAHBPrescaler>:
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800739a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	608b      	str	r3, [r1, #8]
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <LL_C2_RCC_SetAHBPrescaler>:
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80073b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80073c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <LL_RCC_SetAHB4Prescaler>:
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80073e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80073ec:	f023 020f 	bic.w	r2, r3, #15
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	091b      	lsrs	r3, r3, #4
 80073f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073f8:	4313      	orrs	r3, r2
 80073fa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80073fe:	bf00      	nop
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <LL_RCC_SetAPB1Prescaler>:
{
 800740a:	b480      	push	{r7}
 800740c:	b083      	sub	sp, #12
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800741c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4313      	orrs	r3, r2
 8007424:	608b      	str	r3, [r1, #8]
}
 8007426:	bf00      	nop
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <LL_RCC_SetAPB2Prescaler>:
{
 8007432:	b480      	push	{r7}
 8007434:	b083      	sub	sp, #12
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800743a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007444:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4313      	orrs	r3, r2
 800744c:	608b      	str	r3, [r1, #8]
}
 800744e:	bf00      	nop
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <LL_RCC_GetAHBPrescaler>:
{
 800745a:	b480      	push	{r7}
 800745c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800745e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007468:	4618      	mov	r0, r3
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <LL_C2_RCC_GetAHBPrescaler>:
{
 8007472:	b480      	push	{r7}
 8007474:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8007476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800747a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800747e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007482:	4618      	mov	r0, r3
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <LL_RCC_GetAHB4Prescaler>:
{
 800748c:	b480      	push	{r7}
 800748e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007494:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007498:	011b      	lsls	r3, r3, #4
 800749a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <LL_RCC_GetAPB1Prescaler>:
{
 80074a8:	b480      	push	{r7}
 80074aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80074ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <LL_RCC_GetAPB2Prescaler>:
{
 80074c0:	b480      	push	{r7}
 80074c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80074c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80074d8:	b480      	push	{r7}
 80074da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80074dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074ea:	6013      	str	r3, [r2, #0]
}
 80074ec:	bf00      	nop
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80074f6:	b480      	push	{r7}
 80074f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80074fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007504:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007508:	6013      	str	r3, [r2, #0]
}
 800750a:	bf00      	nop
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8007514:	b480      	push	{r7}
 8007516:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8007518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007522:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007526:	d101      	bne.n	800752c <LL_RCC_PLL_IsReady+0x18>
 8007528:	2301      	movs	r3, #1
 800752a:	e000      	b.n	800752e <LL_RCC_PLL_IsReady+0x1a>
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007538:	b480      	push	{r7}
 800753a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800753c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	0a1b      	lsrs	r3, r3, #8
 8007544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007548:	4618      	mov	r0, r3
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8007552:	b480      	push	{r7}
 8007554:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8007560:	4618      	mov	r0, r3
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800756a:	b480      	push	{r7}
 800756c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800756e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8007578:	4618      	mov	r0, r3
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007582:	b480      	push	{r7}
 8007584:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f003 0303 	and.w	r3, r3, #3
}
 8007590:	4618      	mov	r0, r3
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800759a:	b480      	push	{r7}
 800759c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800759e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ac:	d101      	bne.n	80075b2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80075ae:	2301      	movs	r3, #1
 80075b0:	e000      	b.n	80075b4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80075be:	b480      	push	{r7}
 80075c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80075c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80075ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075d2:	d101      	bne.n	80075d8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80075d4:	2301      	movs	r3, #1
 80075d6:	e000      	b.n	80075da <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80075e4:	b480      	push	{r7}
 80075e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80075e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80075f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075f8:	d101      	bne.n	80075fe <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80075fa:	2301      	movs	r3, #1
 80075fc:	e000      	b.n	8007600 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800760a:	b480      	push	{r7}
 800760c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800760e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007618:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800761c:	d101      	bne.n	8007622 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800761e:	2301      	movs	r3, #1
 8007620:	e000      	b.n	8007624 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800762e:	b480      	push	{r7}
 8007630:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8007632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800763c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007640:	d101      	bne.n	8007646 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8007642:	2301      	movs	r3, #1
 8007644:	e000      	b.n	8007648 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
	...

08007654 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007654:	b590      	push	{r4, r7, lr}
 8007656:	b08d      	sub	sp, #52	; 0x34
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d101      	bne.n	8007666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e363      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0320 	and.w	r3, r3, #32
 800766e:	2b00      	cmp	r3, #0
 8007670:	f000 808d 	beq.w	800778e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007674:	f7ff fe7c 	bl	8007370 <LL_RCC_GetSysClkSource>
 8007678:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800767a:	f7ff ff82 	bl	8007582 <LL_RCC_PLL_GetMainSource>
 800767e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007682:	2b00      	cmp	r3, #0
 8007684:	d005      	beq.n	8007692 <HAL_RCC_OscConfig+0x3e>
 8007686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007688:	2b0c      	cmp	r3, #12
 800768a:	d147      	bne.n	800771c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800768c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768e:	2b01      	cmp	r3, #1
 8007690:	d144      	bne.n	800771c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	69db      	ldr	r3, [r3, #28]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d101      	bne.n	800769e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e347      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80076a2:	f7ff fe27 	bl	80072f4 <LL_RCC_MSI_GetRange>
 80076a6:	4603      	mov	r3, r0
 80076a8:	429c      	cmp	r4, r3
 80076aa:	d914      	bls.n	80076d6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 fd61 	bl	8008178 <RCC_SetFlashLatencyFromMSIRange>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d001      	beq.n	80076c0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e336      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7ff fe01 	bl	80072cc <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a1b      	ldr	r3, [r3, #32]
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7ff fe25 	bl	800731e <LL_RCC_MSI_SetCalibTrimming>
 80076d4:	e013      	b.n	80076fe <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076da:	4618      	mov	r0, r3
 80076dc:	f7ff fdf6 	bl	80072cc <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a1b      	ldr	r3, [r3, #32]
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7ff fe1a 	bl	800731e <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 fd42 	bl	8008178 <RCC_SetFlashLatencyFromMSIRange>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e317      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80076fe:	f000 fcc9 	bl	8008094 <HAL_RCC_GetHCLKFreq>
 8007702:	4603      	mov	r3, r0
 8007704:	4aa4      	ldr	r2, [pc, #656]	; (8007998 <HAL_RCC_OscConfig+0x344>)
 8007706:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007708:	4ba4      	ldr	r3, [pc, #656]	; (800799c <HAL_RCC_OscConfig+0x348>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4618      	mov	r0, r3
 800770e:	f7fc fe93 	bl	8004438 <HAL_InitTick>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d039      	beq.n	800778c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e308      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	69db      	ldr	r3, [r3, #28]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d01e      	beq.n	8007762 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007724:	f7ff fda3 	bl	800726e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007728:	f7fd fbb0 	bl	8004e8c <HAL_GetTick>
 800772c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800772e:	e008      	b.n	8007742 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007730:	f7fd fbac 	bl	8004e8c <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	2b02      	cmp	r3, #2
 800773c:	d901      	bls.n	8007742 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e2f5      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007742:	f7ff fdb2 	bl	80072aa <LL_RCC_MSI_IsReady>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d0f1      	beq.n	8007730 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	4618      	mov	r0, r3
 8007752:	f7ff fdbb 	bl	80072cc <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	4618      	mov	r0, r3
 800775c:	f7ff fddf 	bl	800731e <LL_RCC_MSI_SetCalibTrimming>
 8007760:	e015      	b.n	800778e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007762:	f7ff fd93 	bl	800728c <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007766:	f7fd fb91 	bl	8004e8c <HAL_GetTick>
 800776a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800776c:	e008      	b.n	8007780 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800776e:	f7fd fb8d 	bl	8004e8c <HAL_GetTick>
 8007772:	4602      	mov	r2, r0
 8007774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	2b02      	cmp	r3, #2
 800777a:	d901      	bls.n	8007780 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800777c:	2303      	movs	r3, #3
 800777e:	e2d6      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007780:	f7ff fd93 	bl	80072aa <LL_RCC_MSI_IsReady>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1f1      	bne.n	800776e <HAL_RCC_OscConfig+0x11a>
 800778a:	e000      	b.n	800778e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800778c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b00      	cmp	r3, #0
 8007798:	d047      	beq.n	800782a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800779a:	f7ff fde9 	bl	8007370 <LL_RCC_GetSysClkSource>
 800779e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077a0:	f7ff feef 	bl	8007582 <LL_RCC_PLL_GetMainSource>
 80077a4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	2b08      	cmp	r3, #8
 80077aa:	d005      	beq.n	80077b8 <HAL_RCC_OscConfig+0x164>
 80077ac:	6a3b      	ldr	r3, [r7, #32]
 80077ae:	2b0c      	cmp	r3, #12
 80077b0:	d108      	bne.n	80077c4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	2b03      	cmp	r3, #3
 80077b6:	d105      	bne.n	80077c4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d134      	bne.n	800782a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e2b4      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077cc:	d102      	bne.n	80077d4 <HAL_RCC_OscConfig+0x180>
 80077ce:	f7ff fbd0 	bl	8006f72 <LL_RCC_HSE_Enable>
 80077d2:	e001      	b.n	80077d8 <HAL_RCC_OscConfig+0x184>
 80077d4:	f7ff fbdc 	bl	8006f90 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d012      	beq.n	8007806 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077e0:	f7fd fb54 	bl	8004e8c <HAL_GetTick>
 80077e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80077e6:	e008      	b.n	80077fa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077e8:	f7fd fb50 	bl	8004e8c <HAL_GetTick>
 80077ec:	4602      	mov	r2, r0
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	2b64      	cmp	r3, #100	; 0x64
 80077f4:	d901      	bls.n	80077fa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e299      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80077fa:	f7ff fbd8 	bl	8006fae <LL_RCC_HSE_IsReady>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d0f1      	beq.n	80077e8 <HAL_RCC_OscConfig+0x194>
 8007804:	e011      	b.n	800782a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007806:	f7fd fb41 	bl	8004e8c <HAL_GetTick>
 800780a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800780c:	e008      	b.n	8007820 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800780e:	f7fd fb3d 	bl	8004e8c <HAL_GetTick>
 8007812:	4602      	mov	r2, r0
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	2b64      	cmp	r3, #100	; 0x64
 800781a:	d901      	bls.n	8007820 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e286      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007820:	f7ff fbc5 	bl	8006fae <LL_RCC_HSE_IsReady>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1f1      	bne.n	800780e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 0302 	and.w	r3, r3, #2
 8007832:	2b00      	cmp	r3, #0
 8007834:	d04c      	beq.n	80078d0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007836:	f7ff fd9b 	bl	8007370 <LL_RCC_GetSysClkSource>
 800783a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800783c:	f7ff fea1 	bl	8007582 <LL_RCC_PLL_GetMainSource>
 8007840:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	2b04      	cmp	r3, #4
 8007846:	d005      	beq.n	8007854 <HAL_RCC_OscConfig+0x200>
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	2b0c      	cmp	r3, #12
 800784c:	d10e      	bne.n	800786c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	2b02      	cmp	r3, #2
 8007852:	d10b      	bne.n	800786c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d101      	bne.n	8007860 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e266      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	4618      	mov	r0, r3
 8007866:	f7ff fbe4 	bl	8007032 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800786a:	e031      	b.n	80078d0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d019      	beq.n	80078a8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007874:	f7ff fbad 	bl	8006fd2 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007878:	f7fd fb08 	bl	8004e8c <HAL_GetTick>
 800787c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800787e:	e008      	b.n	8007892 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007880:	f7fd fb04 	bl	8004e8c <HAL_GetTick>
 8007884:	4602      	mov	r2, r0
 8007886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	2b02      	cmp	r3, #2
 800788c:	d901      	bls.n	8007892 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e24d      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007892:	f7ff fbbc 	bl	800700e <LL_RCC_HSI_IsReady>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d0f1      	beq.n	8007880 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7ff fbc6 	bl	8007032 <LL_RCC_HSI_SetCalibTrimming>
 80078a6:	e013      	b.n	80078d0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078a8:	f7ff fba2 	bl	8006ff0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ac:	f7fd faee 	bl	8004e8c <HAL_GetTick>
 80078b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80078b2:	e008      	b.n	80078c6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078b4:	f7fd faea 	bl	8004e8c <HAL_GetTick>
 80078b8:	4602      	mov	r2, r0
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d901      	bls.n	80078c6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	e233      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80078c6:	f7ff fba2 	bl	800700e <LL_RCC_HSI_IsReady>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1f1      	bne.n	80078b4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0308 	and.w	r3, r3, #8
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d106      	bne.n	80078ea <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 80a3 	beq.w	8007a30 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	695b      	ldr	r3, [r3, #20]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d076      	beq.n	80079e0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0310 	and.w	r3, r3, #16
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d046      	beq.n	800798c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80078fe:	f7ff fc59 	bl	80071b4 <LL_RCC_LSI1_IsReady>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d113      	bne.n	8007930 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8007908:	f7ff fc32 	bl	8007170 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800790c:	f7fd fabe 	bl	8004e8c <HAL_GetTick>
 8007910:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007912:	e008      	b.n	8007926 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007914:	f7fd faba 	bl	8004e8c <HAL_GetTick>
 8007918:	4602      	mov	r2, r0
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	2b02      	cmp	r3, #2
 8007920:	d901      	bls.n	8007926 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e203      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007926:	f7ff fc45 	bl	80071b4 <LL_RCC_LSI1_IsReady>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d0f1      	beq.n	8007914 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8007930:	f7ff fc52 	bl	80071d8 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007934:	f7fd faaa 	bl	8004e8c <HAL_GetTick>
 8007938:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800793a:	e008      	b.n	800794e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800793c:	f7fd faa6 	bl	8004e8c <HAL_GetTick>
 8007940:	4602      	mov	r2, r0
 8007942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	2b03      	cmp	r3, #3
 8007948:	d901      	bls.n	800794e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e1ef      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800794e:	f7ff fc65 	bl	800721c <LL_RCC_LSI2_IsReady>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d0f1      	beq.n	800793c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	4618      	mov	r0, r3
 800795e:	f7ff fc6f 	bl	8007240 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8007962:	f7ff fc16 	bl	8007192 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007966:	f7fd fa91 	bl	8004e8c <HAL_GetTick>
 800796a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800796c:	e008      	b.n	8007980 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800796e:	f7fd fa8d 	bl	8004e8c <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	2b02      	cmp	r3, #2
 800797a:	d901      	bls.n	8007980 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	e1d6      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007980:	f7ff fc18 	bl	80071b4 <LL_RCC_LSI1_IsReady>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1f1      	bne.n	800796e <HAL_RCC_OscConfig+0x31a>
 800798a:	e051      	b.n	8007a30 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800798c:	f7ff fbf0 	bl	8007170 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007990:	f7fd fa7c 	bl	8004e8c <HAL_GetTick>
 8007994:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007996:	e00c      	b.n	80079b2 <HAL_RCC_OscConfig+0x35e>
 8007998:	20000070 	.word	0x20000070
 800799c:	20000074 	.word	0x20000074
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80079a0:	f7fd fa74 	bl	8004e8c <HAL_GetTick>
 80079a4:	4602      	mov	r2, r0
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d901      	bls.n	80079b2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e1bd      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80079b2:	f7ff fbff 	bl	80071b4 <LL_RCC_LSI1_IsReady>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d0f1      	beq.n	80079a0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80079bc:	f7ff fc1d 	bl	80071fa <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80079c0:	e008      	b.n	80079d4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80079c2:	f7fd fa63 	bl	8004e8c <HAL_GetTick>
 80079c6:	4602      	mov	r2, r0
 80079c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	d901      	bls.n	80079d4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e1ac      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80079d4:	f7ff fc22 	bl	800721c <LL_RCC_LSI2_IsReady>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1f1      	bne.n	80079c2 <HAL_RCC_OscConfig+0x36e>
 80079de:	e027      	b.n	8007a30 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80079e0:	f7ff fc0b 	bl	80071fa <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079e4:	f7fd fa52 	bl	8004e8c <HAL_GetTick>
 80079e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80079ea:	e008      	b.n	80079fe <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80079ec:	f7fd fa4e 	bl	8004e8c <HAL_GetTick>
 80079f0:	4602      	mov	r2, r0
 80079f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	2b03      	cmp	r3, #3
 80079f8:	d901      	bls.n	80079fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e197      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80079fe:	f7ff fc0d 	bl	800721c <LL_RCC_LSI2_IsReady>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1f1      	bne.n	80079ec <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8007a08:	f7ff fbc3 	bl	8007192 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a0c:	f7fd fa3e 	bl	8004e8c <HAL_GetTick>
 8007a10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007a12:	e008      	b.n	8007a26 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007a14:	f7fd fa3a 	bl	8004e8c <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d901      	bls.n	8007a26 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	e183      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007a26:	f7ff fbc5 	bl	80071b4 <LL_RCC_LSI1_IsReady>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1f1      	bne.n	8007a14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0304 	and.w	r3, r3, #4
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d05b      	beq.n	8007af4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a3c:	4ba7      	ldr	r3, [pc, #668]	; (8007cdc <HAL_RCC_OscConfig+0x688>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d114      	bne.n	8007a72 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007a48:	f7ff f9a8 	bl	8006d9c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a4c:	f7fd fa1e 	bl	8004e8c <HAL_GetTick>
 8007a50:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a52:	e008      	b.n	8007a66 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a54:	f7fd fa1a 	bl	8004e8c <HAL_GetTick>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d901      	bls.n	8007a66 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e163      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a66:	4b9d      	ldr	r3, [pc, #628]	; (8007cdc <HAL_RCC_OscConfig+0x688>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d0f0      	beq.n	8007a54 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d102      	bne.n	8007a80 <HAL_RCC_OscConfig+0x42c>
 8007a7a:	f7ff fb23 	bl	80070c4 <LL_RCC_LSE_Enable>
 8007a7e:	e00c      	b.n	8007a9a <HAL_RCC_OscConfig+0x446>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	2b05      	cmp	r3, #5
 8007a86:	d104      	bne.n	8007a92 <HAL_RCC_OscConfig+0x43e>
 8007a88:	f7ff fb3e 	bl	8007108 <LL_RCC_LSE_EnableBypass>
 8007a8c:	f7ff fb1a 	bl	80070c4 <LL_RCC_LSE_Enable>
 8007a90:	e003      	b.n	8007a9a <HAL_RCC_OscConfig+0x446>
 8007a92:	f7ff fb28 	bl	80070e6 <LL_RCC_LSE_Disable>
 8007a96:	f7ff fb48 	bl	800712a <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d014      	beq.n	8007acc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007aa2:	f7fd f9f3 	bl	8004e8c <HAL_GetTick>
 8007aa6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007aa8:	e00a      	b.n	8007ac0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aaa:	f7fd f9ef 	bl	8004e8c <HAL_GetTick>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d901      	bls.n	8007ac0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e136      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007ac0:	f7ff fb44 	bl	800714c <LL_RCC_LSE_IsReady>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d0ef      	beq.n	8007aaa <HAL_RCC_OscConfig+0x456>
 8007aca:	e013      	b.n	8007af4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007acc:	f7fd f9de 	bl	8004e8c <HAL_GetTick>
 8007ad0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007ad2:	e00a      	b.n	8007aea <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ad4:	f7fd f9da 	bl	8004e8c <HAL_GetTick>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d901      	bls.n	8007aea <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e121      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007aea:	f7ff fb2f 	bl	800714c <LL_RCC_LSE_IsReady>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1ef      	bne.n	8007ad4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d02c      	beq.n	8007b5a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d014      	beq.n	8007b32 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007b08:	f7ff faa8 	bl	800705c <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b0c:	f7fd f9be 	bl	8004e8c <HAL_GetTick>
 8007b10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007b12:	e008      	b.n	8007b26 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b14:	f7fd f9ba 	bl	8004e8c <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d901      	bls.n	8007b26 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e103      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007b26:	f7ff fabb 	bl	80070a0 <LL_RCC_HSI48_IsReady>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d0f1      	beq.n	8007b14 <HAL_RCC_OscConfig+0x4c0>
 8007b30:	e013      	b.n	8007b5a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007b32:	f7ff faa4 	bl	800707e <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b36:	f7fd f9a9 	bl	8004e8c <HAL_GetTick>
 8007b3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007b3c:	e008      	b.n	8007b50 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b3e:	f7fd f9a5 	bl	8004e8c <HAL_GetTick>
 8007b42:	4602      	mov	r2, r0
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d901      	bls.n	8007b50 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e0ee      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007b50:	f7ff faa6 	bl	80070a0 <LL_RCC_HSI48_IsReady>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1f1      	bne.n	8007b3e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f000 80e4 	beq.w	8007d2c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b64:	f7ff fc04 	bl	8007370 <LL_RCC_GetSysClkSource>
 8007b68:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8007b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	f040 80b4 	bne.w	8007ce4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f003 0203 	and.w	r2, r3, #3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d123      	bne.n	8007bd2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d11c      	bne.n	8007bd2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	0a1b      	lsrs	r3, r3, #8
 8007b9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d114      	bne.n	8007bd2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d10d      	bne.n	8007bd2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d106      	bne.n	8007bd2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d05d      	beq.n	8007c8e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	2b0c      	cmp	r3, #12
 8007bd6:	d058      	beq.n	8007c8a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d001      	beq.n	8007bea <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e0a1      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007bea:	f7ff fc84 	bl	80074f6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007bee:	f7fd f94d 	bl	8004e8c <HAL_GetTick>
 8007bf2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007bf4:	e008      	b.n	8007c08 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bf6:	f7fd f949 	bl	8004e8c <HAL_GetTick>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	d901      	bls.n	8007c08 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e092      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1ef      	bne.n	8007bf6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c1a:	68da      	ldr	r2, [r3, #12]
 8007c1c:	4b30      	ldr	r3, [pc, #192]	; (8007ce0 <HAL_RCC_OscConfig+0x68c>)
 8007c1e:	4013      	ands	r3, r2
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007c28:	4311      	orrs	r1, r2
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c2e:	0212      	lsls	r2, r2, #8
 8007c30:	4311      	orrs	r1, r2
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007c36:	4311      	orrs	r1, r2
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007c3c:	4311      	orrs	r1, r2
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007c42:	430a      	orrs	r2, r1
 8007c44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007c4c:	f7ff fc44 	bl	80074d8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007c60:	f7fd f914 	bl	8004e8c <HAL_GetTick>
 8007c64:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c66:	e008      	b.n	8007c7a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c68:	f7fd f910 	bl	8004e8c <HAL_GetTick>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d901      	bls.n	8007c7a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e059      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d0ef      	beq.n	8007c68 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c88:	e050      	b.n	8007d2c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e04f      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d147      	bne.n	8007d2c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007c9c:	f7ff fc1c 	bl	80074d8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007cb0:	f7fd f8ec 	bl	8004e8c <HAL_GetTick>
 8007cb4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cb6:	e008      	b.n	8007cca <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cb8:	f7fd f8e8 	bl	8004e8c <HAL_GetTick>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d901      	bls.n	8007cca <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e031      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d0ef      	beq.n	8007cb8 <HAL_RCC_OscConfig+0x664>
 8007cd8:	e028      	b.n	8007d2c <HAL_RCC_OscConfig+0x6d8>
 8007cda:	bf00      	nop
 8007cdc:	58000400 	.word	0x58000400
 8007ce0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	2b0c      	cmp	r3, #12
 8007ce8:	d01e      	beq.n	8007d28 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cea:	f7ff fc04 	bl	80074f6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cee:	f7fd f8cd 	bl	8004e8c <HAL_GetTick>
 8007cf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007cf4:	e008      	b.n	8007d08 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cf6:	f7fd f8c9 	bl	8004e8c <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d901      	bls.n	8007d08 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e012      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1ef      	bne.n	8007cf6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8007d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d1a:	68da      	ldr	r2, [r3, #12]
 8007d1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d20:	4b05      	ldr	r3, [pc, #20]	; (8007d38 <HAL_RCC_OscConfig+0x6e4>)
 8007d22:	4013      	ands	r3, r2
 8007d24:	60cb      	str	r3, [r1, #12]
 8007d26:	e001      	b.n	8007d2c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e000      	b.n	8007d2e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3734      	adds	r7, #52	; 0x34
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd90      	pop	{r4, r7, pc}
 8007d36:	bf00      	nop
 8007d38:	eefefffc 	.word	0xeefefffc

08007d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e12d      	b.n	8007fac <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d50:	4b98      	ldr	r3, [pc, #608]	; (8007fb4 <HAL_RCC_ClockConfig+0x278>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 0307 	and.w	r3, r3, #7
 8007d58:	683a      	ldr	r2, [r7, #0]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d91b      	bls.n	8007d96 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d5e:	4b95      	ldr	r3, [pc, #596]	; (8007fb4 <HAL_RCC_ClockConfig+0x278>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f023 0207 	bic.w	r2, r3, #7
 8007d66:	4993      	ldr	r1, [pc, #588]	; (8007fb4 <HAL_RCC_ClockConfig+0x278>)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d6e:	f7fd f88d 	bl	8004e8c <HAL_GetTick>
 8007d72:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d74:	e008      	b.n	8007d88 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007d76:	f7fd f889 	bl	8004e8c <HAL_GetTick>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	1ad3      	subs	r3, r2, r3
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d901      	bls.n	8007d88 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e111      	b.n	8007fac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d88:	4b8a      	ldr	r3, [pc, #552]	; (8007fb4 <HAL_RCC_ClockConfig+0x278>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 0307 	and.w	r3, r3, #7
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d1ef      	bne.n	8007d76 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d016      	beq.n	8007dd0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7ff faee 	bl	8007388 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007dac:	f7fd f86e 	bl	8004e8c <HAL_GetTick>
 8007db0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007db2:	e008      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007db4:	f7fd f86a 	bl	8004e8c <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d901      	bls.n	8007dc6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e0f2      	b.n	8007fac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007dc6:	f7ff fbe8 	bl	800759a <LL_RCC_IsActiveFlag_HPRE>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d0f1      	beq.n	8007db4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0320 	and.w	r3, r3, #32
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d016      	beq.n	8007e0a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	695b      	ldr	r3, [r3, #20]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7ff fae5 	bl	80073b0 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007de6:	f7fd f851 	bl	8004e8c <HAL_GetTick>
 8007dea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007dec:	e008      	b.n	8007e00 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007dee:	f7fd f84d 	bl	8004e8c <HAL_GetTick>
 8007df2:	4602      	mov	r2, r0
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d901      	bls.n	8007e00 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	e0d5      	b.n	8007fac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007e00:	f7ff fbdd 	bl	80075be <LL_RCC_IsActiveFlag_C2HPRE>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d0f1      	beq.n	8007dee <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d016      	beq.n	8007e44 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7ff fade 	bl	80073dc <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007e20:	f7fd f834 	bl	8004e8c <HAL_GetTick>
 8007e24:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007e26:	e008      	b.n	8007e3a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007e28:	f7fd f830 	bl	8004e8c <HAL_GetTick>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d901      	bls.n	8007e3a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007e36:	2303      	movs	r3, #3
 8007e38:	e0b8      	b.n	8007fac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007e3a:	f7ff fbd3 	bl	80075e4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d0f1      	beq.n	8007e28 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0304 	and.w	r3, r3, #4
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d016      	beq.n	8007e7e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7ff fad8 	bl	800740a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007e5a:	f7fd f817 	bl	8004e8c <HAL_GetTick>
 8007e5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007e60:	e008      	b.n	8007e74 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007e62:	f7fd f813 	bl	8004e8c <HAL_GetTick>
 8007e66:	4602      	mov	r2, r0
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d901      	bls.n	8007e74 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e09b      	b.n	8007fac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007e74:	f7ff fbc9 	bl	800760a <LL_RCC_IsActiveFlag_PPRE1>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d0f1      	beq.n	8007e62 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0308 	and.w	r3, r3, #8
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d017      	beq.n	8007eba <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	00db      	lsls	r3, r3, #3
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7ff face 	bl	8007432 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007e96:	f7fc fff9 	bl	8004e8c <HAL_GetTick>
 8007e9a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007e9c:	e008      	b.n	8007eb0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007e9e:	f7fc fff5 	bl	8004e8c <HAL_GetTick>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	1ad3      	subs	r3, r2, r3
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d901      	bls.n	8007eb0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e07d      	b.n	8007fac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007eb0:	f7ff fbbd 	bl	800762e <LL_RCC_IsActiveFlag_PPRE2>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d0f1      	beq.n	8007e9e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d043      	beq.n	8007f4e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d106      	bne.n	8007edc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007ece:	f7ff f86e 	bl	8006fae <LL_RCC_HSE_IsReady>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d11e      	bne.n	8007f16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e067      	b.n	8007fac <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	2b03      	cmp	r3, #3
 8007ee2:	d106      	bne.n	8007ef2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007ee4:	f7ff fb16 	bl	8007514 <LL_RCC_PLL_IsReady>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d113      	bne.n	8007f16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e05c      	b.n	8007fac <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d106      	bne.n	8007f08 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007efa:	f7ff f9d6 	bl	80072aa <LL_RCC_MSI_IsReady>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d108      	bne.n	8007f16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e051      	b.n	8007fac <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007f08:	f7ff f881 	bl	800700e <LL_RCC_HSI_IsReady>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d101      	bne.n	8007f16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e04a      	b.n	8007fac <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7ff fa14 	bl	8007348 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f20:	f7fc ffb4 	bl	8004e8c <HAL_GetTick>
 8007f24:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f26:	e00a      	b.n	8007f3e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f28:	f7fc ffb0 	bl	8004e8c <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d901      	bls.n	8007f3e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e036      	b.n	8007fac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f3e:	f7ff fa17 	bl	8007370 <LL_RCC_GetSysClkSource>
 8007f42:	4602      	mov	r2, r0
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d1ec      	bne.n	8007f28 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f4e:	4b19      	ldr	r3, [pc, #100]	; (8007fb4 <HAL_RCC_ClockConfig+0x278>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 0307 	and.w	r3, r3, #7
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d21b      	bcs.n	8007f94 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f5c:	4b15      	ldr	r3, [pc, #84]	; (8007fb4 <HAL_RCC_ClockConfig+0x278>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f023 0207 	bic.w	r2, r3, #7
 8007f64:	4913      	ldr	r1, [pc, #76]	; (8007fb4 <HAL_RCC_ClockConfig+0x278>)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f6c:	f7fc ff8e 	bl	8004e8c <HAL_GetTick>
 8007f70:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f72:	e008      	b.n	8007f86 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007f74:	f7fc ff8a 	bl	8004e8c <HAL_GetTick>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d901      	bls.n	8007f86 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e012      	b.n	8007fac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f86:	4b0b      	ldr	r3, [pc, #44]	; (8007fb4 <HAL_RCC_ClockConfig+0x278>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0307 	and.w	r3, r3, #7
 8007f8e:	683a      	ldr	r2, [r7, #0]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d1ef      	bne.n	8007f74 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007f94:	f000 f87e 	bl	8008094 <HAL_RCC_GetHCLKFreq>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	4a07      	ldr	r2, [pc, #28]	; (8007fb8 <HAL_RCC_ClockConfig+0x27c>)
 8007f9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8007f9e:	f7fc ff81 	bl	8004ea4 <HAL_GetTickPrio>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7fc fa47 	bl	8004438 <HAL_InitTick>
 8007faa:	4603      	mov	r3, r0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	58004000 	.word	0x58004000
 8007fb8:	20000070 	.word	0x20000070

08007fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fbc:	b590      	push	{r4, r7, lr}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fc2:	f7ff f9d5 	bl	8007370 <LL_RCC_GetSysClkSource>
 8007fc6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10a      	bne.n	8007fe4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007fce:	f7ff f991 	bl	80072f4 <LL_RCC_MSI_GetRange>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	091b      	lsrs	r3, r3, #4
 8007fd6:	f003 030f 	and.w	r3, r3, #15
 8007fda:	4a2b      	ldr	r2, [pc, #172]	; (8008088 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fe0:	60fb      	str	r3, [r7, #12]
 8007fe2:	e04b      	b.n	800807c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b04      	cmp	r3, #4
 8007fe8:	d102      	bne.n	8007ff0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007fea:	4b28      	ldr	r3, [pc, #160]	; (800808c <HAL_RCC_GetSysClockFreq+0xd0>)
 8007fec:	60fb      	str	r3, [r7, #12]
 8007fee:	e045      	b.n	800807c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2b08      	cmp	r3, #8
 8007ff4:	d10a      	bne.n	800800c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007ff6:	f7fe ffaa 	bl	8006f4e <LL_RCC_HSE_IsEnabledDiv2>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d102      	bne.n	8008006 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008000:	4b22      	ldr	r3, [pc, #136]	; (800808c <HAL_RCC_GetSysClockFreq+0xd0>)
 8008002:	60fb      	str	r3, [r7, #12]
 8008004:	e03a      	b.n	800807c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008006:	4b22      	ldr	r3, [pc, #136]	; (8008090 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008008:	60fb      	str	r3, [r7, #12]
 800800a:	e037      	b.n	800807c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800800c:	f7ff fab9 	bl	8007582 <LL_RCC_PLL_GetMainSource>
 8008010:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	2b02      	cmp	r3, #2
 8008016:	d003      	beq.n	8008020 <HAL_RCC_GetSysClockFreq+0x64>
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	2b03      	cmp	r3, #3
 800801c:	d003      	beq.n	8008026 <HAL_RCC_GetSysClockFreq+0x6a>
 800801e:	e00d      	b.n	800803c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008020:	4b1a      	ldr	r3, [pc, #104]	; (800808c <HAL_RCC_GetSysClockFreq+0xd0>)
 8008022:	60bb      	str	r3, [r7, #8]
        break;
 8008024:	e015      	b.n	8008052 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008026:	f7fe ff92 	bl	8006f4e <LL_RCC_HSE_IsEnabledDiv2>
 800802a:	4603      	mov	r3, r0
 800802c:	2b01      	cmp	r3, #1
 800802e:	d102      	bne.n	8008036 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008030:	4b16      	ldr	r3, [pc, #88]	; (800808c <HAL_RCC_GetSysClockFreq+0xd0>)
 8008032:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008034:	e00d      	b.n	8008052 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8008036:	4b16      	ldr	r3, [pc, #88]	; (8008090 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008038:	60bb      	str	r3, [r7, #8]
        break;
 800803a:	e00a      	b.n	8008052 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800803c:	f7ff f95a 	bl	80072f4 <LL_RCC_MSI_GetRange>
 8008040:	4603      	mov	r3, r0
 8008042:	091b      	lsrs	r3, r3, #4
 8008044:	f003 030f 	and.w	r3, r3, #15
 8008048:	4a0f      	ldr	r2, [pc, #60]	; (8008088 <HAL_RCC_GetSysClockFreq+0xcc>)
 800804a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800804e:	60bb      	str	r3, [r7, #8]
        break;
 8008050:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8008052:	f7ff fa71 	bl	8007538 <LL_RCC_PLL_GetN>
 8008056:	4602      	mov	r2, r0
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	fb03 f402 	mul.w	r4, r3, r2
 800805e:	f7ff fa84 	bl	800756a <LL_RCC_PLL_GetDivider>
 8008062:	4603      	mov	r3, r0
 8008064:	091b      	lsrs	r3, r3, #4
 8008066:	3301      	adds	r3, #1
 8008068:	fbb4 f4f3 	udiv	r4, r4, r3
 800806c:	f7ff fa71 	bl	8007552 <LL_RCC_PLL_GetR>
 8008070:	4603      	mov	r3, r0
 8008072:	0f5b      	lsrs	r3, r3, #29
 8008074:	3301      	adds	r3, #1
 8008076:	fbb4 f3f3 	udiv	r3, r4, r3
 800807a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800807c:	68fb      	ldr	r3, [r7, #12]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3714      	adds	r7, #20
 8008082:	46bd      	mov	sp, r7
 8008084:	bd90      	pop	{r4, r7, pc}
 8008086:	bf00      	nop
 8008088:	08015b54 	.word	0x08015b54
 800808c:	00f42400 	.word	0x00f42400
 8008090:	01e84800 	.word	0x01e84800

08008094 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008094:	b598      	push	{r3, r4, r7, lr}
 8008096:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008098:	f7ff ff90 	bl	8007fbc <HAL_RCC_GetSysClockFreq>
 800809c:	4604      	mov	r4, r0
 800809e:	f7ff f9dc 	bl	800745a <LL_RCC_GetAHBPrescaler>
 80080a2:	4603      	mov	r3, r0
 80080a4:	091b      	lsrs	r3, r3, #4
 80080a6:	f003 030f 	and.w	r3, r3, #15
 80080aa:	4a03      	ldr	r2, [pc, #12]	; (80080b8 <HAL_RCC_GetHCLKFreq+0x24>)
 80080ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080b0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	bd98      	pop	{r3, r4, r7, pc}
 80080b8:	08015af4 	.word	0x08015af4

080080bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080bc:	b598      	push	{r3, r4, r7, lr}
 80080be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80080c0:	f7ff ffe8 	bl	8008094 <HAL_RCC_GetHCLKFreq>
 80080c4:	4604      	mov	r4, r0
 80080c6:	f7ff f9ef 	bl	80074a8 <LL_RCC_GetAPB1Prescaler>
 80080ca:	4603      	mov	r3, r0
 80080cc:	0a1b      	lsrs	r3, r3, #8
 80080ce:	f003 0307 	and.w	r3, r3, #7
 80080d2:	4a04      	ldr	r2, [pc, #16]	; (80080e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80080d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080d8:	f003 031f 	and.w	r3, r3, #31
 80080dc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	bd98      	pop	{r3, r4, r7, pc}
 80080e4:	08015b34 	.word	0x08015b34

080080e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080e8:	b598      	push	{r3, r4, r7, lr}
 80080ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80080ec:	f7ff ffd2 	bl	8008094 <HAL_RCC_GetHCLKFreq>
 80080f0:	4604      	mov	r4, r0
 80080f2:	f7ff f9e5 	bl	80074c0 <LL_RCC_GetAPB2Prescaler>
 80080f6:	4603      	mov	r3, r0
 80080f8:	0adb      	lsrs	r3, r3, #11
 80080fa:	f003 0307 	and.w	r3, r3, #7
 80080fe:	4a04      	ldr	r2, [pc, #16]	; (8008110 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008104:	f003 031f 	and.w	r3, r3, #31
 8008108:	fa24 f303 	lsr.w	r3, r4, r3
}
 800810c:	4618      	mov	r0, r3
 800810e:	bd98      	pop	{r3, r4, r7, pc}
 8008110:	08015b34 	.word	0x08015b34

08008114 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	226f      	movs	r2, #111	; 0x6f
 8008122:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8008124:	f7ff f924 	bl	8007370 <LL_RCC_GetSysClkSource>
 8008128:	4602      	mov	r2, r0
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800812e:	f7ff f994 	bl	800745a <LL_RCC_GetAHBPrescaler>
 8008132:	4602      	mov	r2, r0
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8008138:	f7ff f9b6 	bl	80074a8 <LL_RCC_GetAPB1Prescaler>
 800813c:	4602      	mov	r2, r0
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8008142:	f7ff f9bd 	bl	80074c0 <LL_RCC_GetAPB2Prescaler>
 8008146:	4602      	mov	r2, r0
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800814c:	f7ff f991 	bl	8007472 <LL_C2_RCC_GetAHBPrescaler>
 8008150:	4602      	mov	r2, r0
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8008156:	f7ff f999 	bl	800748c <LL_RCC_GetAHB4Prescaler>
 800815a:	4602      	mov	r2, r0
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008160:	4b04      	ldr	r3, [pc, #16]	; (8008174 <HAL_RCC_GetClockConfig+0x60>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 0207 	and.w	r2, r3, #7
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	601a      	str	r2, [r3, #0]
}
 800816c:	bf00      	nop
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	58004000 	.word	0x58004000

08008178 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008178:	b590      	push	{r4, r7, lr}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2bb0      	cmp	r3, #176	; 0xb0
 8008184:	d903      	bls.n	800818e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8008186:	4b15      	ldr	r3, [pc, #84]	; (80081dc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818a:	60fb      	str	r3, [r7, #12]
 800818c:	e007      	b.n	800819e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	091b      	lsrs	r3, r3, #4
 8008192:	f003 030f 	and.w	r3, r3, #15
 8008196:	4a11      	ldr	r2, [pc, #68]	; (80081dc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800819c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800819e:	f7ff f975 	bl	800748c <LL_RCC_GetAHB4Prescaler>
 80081a2:	4603      	mov	r3, r0
 80081a4:	091b      	lsrs	r3, r3, #4
 80081a6:	f003 030f 	and.w	r3, r3, #15
 80081aa:	4a0d      	ldr	r2, [pc, #52]	; (80081e0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80081ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	4a0a      	ldr	r2, [pc, #40]	; (80081e4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80081bc:	fba2 2303 	umull	r2, r3, r2, r3
 80081c0:	0c9c      	lsrs	r4, r3, #18
 80081c2:	f7fe fdfb 	bl	8006dbc <HAL_PWREx_GetVoltageRange>
 80081c6:	4603      	mov	r3, r0
 80081c8:	4619      	mov	r1, r3
 80081ca:	4620      	mov	r0, r4
 80081cc:	f000 f80c 	bl	80081e8 <RCC_SetFlashLatency>
 80081d0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3714      	adds	r7, #20
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd90      	pop	{r4, r7, pc}
 80081da:	bf00      	nop
 80081dc:	08015b54 	.word	0x08015b54
 80081e0:	08015af4 	.word	0x08015af4
 80081e4:	431bde83 	.word	0x431bde83

080081e8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80081e8:	b590      	push	{r4, r7, lr}
 80081ea:	b093      	sub	sp, #76	; 0x4c
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80081f2:	4b37      	ldr	r3, [pc, #220]	; (80082d0 <RCC_SetFlashLatency+0xe8>)
 80081f4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80081f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80081fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80081fe:	4a35      	ldr	r2, [pc, #212]	; (80082d4 <RCC_SetFlashLatency+0xec>)
 8008200:	f107 031c 	add.w	r3, r7, #28
 8008204:	ca07      	ldmia	r2, {r0, r1, r2}
 8008206:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800820a:	4b33      	ldr	r3, [pc, #204]	; (80082d8 <RCC_SetFlashLatency+0xf0>)
 800820c:	f107 040c 	add.w	r4, r7, #12
 8008210:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008212:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8008216:	2300      	movs	r3, #0
 8008218:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008220:	d11a      	bne.n	8008258 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008222:	2300      	movs	r3, #0
 8008224:	643b      	str	r3, [r7, #64]	; 0x40
 8008226:	e013      	b.n	8008250 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8008228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	3348      	adds	r3, #72	; 0x48
 800822e:	443b      	add	r3, r7
 8008230:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	429a      	cmp	r2, r3
 8008238:	d807      	bhi.n	800824a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800823a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	3348      	adds	r3, #72	; 0x48
 8008240:	443b      	add	r3, r7
 8008242:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008246:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8008248:	e020      	b.n	800828c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800824a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800824c:	3301      	adds	r3, #1
 800824e:	643b      	str	r3, [r7, #64]	; 0x40
 8008250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008252:	2b03      	cmp	r3, #3
 8008254:	d9e8      	bls.n	8008228 <RCC_SetFlashLatency+0x40>
 8008256:	e019      	b.n	800828c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008258:	2300      	movs	r3, #0
 800825a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800825c:	e013      	b.n	8008286 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800825e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	3348      	adds	r3, #72	; 0x48
 8008264:	443b      	add	r3, r7
 8008266:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	429a      	cmp	r2, r3
 800826e:	d807      	bhi.n	8008280 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	3348      	adds	r3, #72	; 0x48
 8008276:	443b      	add	r3, r7
 8008278:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800827c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800827e:	e005      	b.n	800828c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008282:	3301      	adds	r3, #1
 8008284:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008288:	2b02      	cmp	r3, #2
 800828a:	d9e8      	bls.n	800825e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800828c:	4b13      	ldr	r3, [pc, #76]	; (80082dc <RCC_SetFlashLatency+0xf4>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f023 0207 	bic.w	r2, r3, #7
 8008294:	4911      	ldr	r1, [pc, #68]	; (80082dc <RCC_SetFlashLatency+0xf4>)
 8008296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008298:	4313      	orrs	r3, r2
 800829a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800829c:	f7fc fdf6 	bl	8004e8c <HAL_GetTick>
 80082a0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80082a2:	e008      	b.n	80082b6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80082a4:	f7fc fdf2 	bl	8004e8c <HAL_GetTick>
 80082a8:	4602      	mov	r2, r0
 80082aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d901      	bls.n	80082b6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e007      	b.n	80082c6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80082b6:	4b09      	ldr	r3, [pc, #36]	; (80082dc <RCC_SetFlashLatency+0xf4>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 0307 	and.w	r3, r3, #7
 80082be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d1ef      	bne.n	80082a4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	374c      	adds	r7, #76	; 0x4c
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd90      	pop	{r4, r7, pc}
 80082ce:	bf00      	nop
 80082d0:	080158ac 	.word	0x080158ac
 80082d4:	080158bc 	.word	0x080158bc
 80082d8:	080158c8 	.word	0x080158c8
 80082dc:	58004000 	.word	0x58004000

080082e0 <LL_RCC_LSE_IsEnabled>:
{
 80082e0:	b480      	push	{r7}
 80082e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80082e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ec:	f003 0301 	and.w	r3, r3, #1
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d101      	bne.n	80082f8 <LL_RCC_LSE_IsEnabled+0x18>
 80082f4:	2301      	movs	r3, #1
 80082f6:	e000      	b.n	80082fa <LL_RCC_LSE_IsEnabled+0x1a>
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <LL_RCC_LSE_IsReady>:
{
 8008304:	b480      	push	{r7}
 8008306:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800830c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008310:	f003 0302 	and.w	r3, r3, #2
 8008314:	2b02      	cmp	r3, #2
 8008316:	d101      	bne.n	800831c <LL_RCC_LSE_IsReady+0x18>
 8008318:	2301      	movs	r3, #1
 800831a:	e000      	b.n	800831e <LL_RCC_LSE_IsReady+0x1a>
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <LL_RCC_MSI_EnablePLLMode>:
{
 8008328:	b480      	push	{r7}
 800832a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800832c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008336:	f043 0304 	orr.w	r3, r3, #4
 800833a:	6013      	str	r3, [r2, #0]
}
 800833c:	bf00      	nop
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <LL_RCC_SetRFWKPClockSource>:
{
 8008346:	b480      	push	{r7}
 8008348:	b083      	sub	sp, #12
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800834e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008356:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800835a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4313      	orrs	r3, r2
 8008362:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8008366:	bf00      	nop
 8008368:	370c      	adds	r7, #12
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr

08008372 <LL_RCC_SetSMPSClockSource>:
{
 8008372:	b480      	push	{r7}
 8008374:	b083      	sub	sp, #12
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800837a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800837e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008380:	f023 0203 	bic.w	r2, r3, #3
 8008384:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4313      	orrs	r3, r2
 800838c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800838e:	bf00      	nop
 8008390:	370c      	adds	r7, #12
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr

0800839a <LL_RCC_SetSMPSPrescaler>:
{
 800839a:	b480      	push	{r7}
 800839c:	b083      	sub	sp, #12
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80083a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80083ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80083b6:	bf00      	nop
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <LL_RCC_SetUSARTClockSource>:
{
 80083c2:	b480      	push	{r7}
 80083c4:	b083      	sub	sp, #12
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80083ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083d2:	f023 0203 	bic.w	r2, r3, #3
 80083d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4313      	orrs	r3, r2
 80083de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80083e2:	bf00      	nop
 80083e4:	370c      	adds	r7, #12
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr

080083ee <LL_RCC_SetLPUARTClockSource>:
{
 80083ee:	b480      	push	{r7}
 80083f0:	b083      	sub	sp, #12
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80083f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008402:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4313      	orrs	r3, r2
 800840a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800840e:	bf00      	nop
 8008410:	370c      	adds	r7, #12
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <LL_RCC_SetI2CClockSource>:
{
 800841a:	b480      	push	{r7}
 800841c:	b083      	sub	sp, #12
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008426:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	091b      	lsrs	r3, r3, #4
 800842e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008432:	43db      	mvns	r3, r3
 8008434:	401a      	ands	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	011b      	lsls	r3, r3, #4
 800843a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800843e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008442:	4313      	orrs	r3, r2
 8008444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <LL_RCC_SetLPTIMClockSource>:
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800845c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008460:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	0c1b      	lsrs	r3, r3, #16
 8008468:	041b      	lsls	r3, r3, #16
 800846a:	43db      	mvns	r3, r3
 800846c:	401a      	ands	r2, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	041b      	lsls	r3, r3, #16
 8008472:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008476:	4313      	orrs	r3, r2
 8008478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800847c:	bf00      	nop
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <LL_RCC_SetSAIClockSource>:
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8008490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008498:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800849c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80084a8:	bf00      	nop
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <LL_RCC_SetRNGClockSource>:
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80084bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084c4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80084c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <LL_RCC_SetCLK48ClockSource>:
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80084e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80084f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <LL_RCC_SetUSBClockSource>:
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f7ff ffe3 	bl	80084e0 <LL_RCC_SetCLK48ClockSource>
}
 800851a:	bf00      	nop
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <LL_RCC_SetADCClockSource>:
{
 8008522:	b480      	push	{r7}
 8008524:	b083      	sub	sp, #12
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800852a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800852e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008532:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008536:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4313      	orrs	r3, r2
 800853e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008542:	bf00      	nop
 8008544:	370c      	adds	r7, #12
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <LL_RCC_SetRTCClockSource>:
{
 800854e:	b480      	push	{r7}
 8008550:	b083      	sub	sp, #12
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800855a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800855e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008562:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4313      	orrs	r3, r2
 800856a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800856e:	bf00      	nop
 8008570:	370c      	adds	r7, #12
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <LL_RCC_GetRTCClockSource>:
{
 800857a:	b480      	push	{r7}
 800857c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800857e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008586:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800858a:	4618      	mov	r0, r3
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <LL_RCC_ForceBackupDomainReset>:
{
 8008594:	b480      	push	{r7}
 8008596:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800859c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80085ac:	bf00      	nop
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80085b6:	b480      	push	{r7}
 80085b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80085ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80085ce:	bf00      	nop
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <LL_RCC_PLLSAI1_Enable>:
{
 80085d8:	b480      	push	{r7}
 80085da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80085dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80085ea:	6013      	str	r3, [r2, #0]
}
 80085ec:	bf00      	nop
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr

080085f6 <LL_RCC_PLLSAI1_Disable>:
{
 80085f6:	b480      	push	{r7}
 80085f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80085fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008604:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008608:	6013      	str	r3, [r2, #0]
}
 800860a:	bf00      	nop
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <LL_RCC_PLLSAI1_IsReady>:
{
 8008614:	b480      	push	{r7}
 8008616:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8008618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008622:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008626:	d101      	bne.n	800862c <LL_RCC_PLLSAI1_IsReady+0x18>
 8008628:	2301      	movs	r3, #1
 800862a:	e000      	b.n	800862e <LL_RCC_PLLSAI1_IsReady+0x1a>
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b088      	sub	sp, #32
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8008640:	2300      	movs	r3, #0
 8008642:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008644:	2300      	movs	r3, #0
 8008646:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008650:	2b00      	cmp	r3, #0
 8008652:	d034      	beq.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008658:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800865c:	d021      	beq.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800865e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008662:	d81b      	bhi.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008664:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008668:	d01d      	beq.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800866a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800866e:	d815      	bhi.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00b      	beq.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8008674:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008678:	d110      	bne.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800867a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008688:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800868a:	e00d      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	3304      	adds	r3, #4
 8008690:	4618      	mov	r0, r3
 8008692:	f000 f94d 	bl	8008930 <RCCEx_PLLSAI1_ConfigNP>
 8008696:	4603      	mov	r3, r0
 8008698:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800869a:	e005      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	77fb      	strb	r3, [r7, #31]
        break;
 80086a0:	e002      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80086a2:	bf00      	nop
 80086a4:	e000      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80086a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086a8:	7ffb      	ldrb	r3, [r7, #31]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d105      	bne.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7ff fee8 	bl	8008488 <LL_RCC_SetSAIClockSource>
 80086b8:	e001      	b.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ba:	7ffb      	ldrb	r3, [r7, #31]
 80086bc:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d046      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80086ca:	f7ff ff56 	bl	800857a <LL_RCC_GetRTCClockSource>
 80086ce:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d4:	69ba      	ldr	r2, [r7, #24]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d03c      	beq.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80086da:	f7fe fb5f 	bl	8006d9c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d105      	bne.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7ff ff30 	bl	800854e <LL_RCC_SetRTCClockSource>
 80086ee:	e02e      	b.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80086f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086f8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80086fa:	f7ff ff4b 	bl	8008594 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80086fe:	f7ff ff5a 	bl	80085b6 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870c:	4313      	orrs	r3, r2
 800870e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8008710:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800871a:	f7ff fde1 	bl	80082e0 <LL_RCC_LSE_IsEnabled>
 800871e:	4603      	mov	r3, r0
 8008720:	2b01      	cmp	r3, #1
 8008722:	d114      	bne.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008724:	f7fc fbb2 	bl	8004e8c <HAL_GetTick>
 8008728:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800872a:	e00b      	b.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800872c:	f7fc fbae 	bl	8004e8c <HAL_GetTick>
 8008730:	4602      	mov	r2, r0
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	f241 3288 	movw	r2, #5000	; 0x1388
 800873a:	4293      	cmp	r3, r2
 800873c:	d902      	bls.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800873e:	2303      	movs	r3, #3
 8008740:	77fb      	strb	r3, [r7, #31]
              break;
 8008742:	e004      	b.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8008744:	f7ff fdde 	bl	8008304 <LL_RCC_LSE_IsReady>
 8008748:	4603      	mov	r3, r0
 800874a:	2b01      	cmp	r3, #1
 800874c:	d1ee      	bne.n	800872c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800874e:	7ffb      	ldrb	r3, [r7, #31]
 8008750:	77bb      	strb	r3, [r7, #30]
 8008752:	e001      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008754:	7ffb      	ldrb	r3, [r7, #31]
 8008756:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0301 	and.w	r3, r3, #1
 8008760:	2b00      	cmp	r3, #0
 8008762:	d004      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	4618      	mov	r0, r3
 800876a:	f7ff fe2a 	bl	80083c2 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 0302 	and.w	r3, r3, #2
 8008776:	2b00      	cmp	r3, #0
 8008778:	d004      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	4618      	mov	r0, r3
 8008780:	f7ff fe35 	bl	80083ee <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 0310 	and.w	r3, r3, #16
 800878c:	2b00      	cmp	r3, #0
 800878e:	d004      	beq.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008794:	4618      	mov	r0, r3
 8008796:	f7ff fe5d 	bl	8008454 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f003 0320 	and.w	r3, r3, #32
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d004      	beq.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7ff fe52 	bl	8008454 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 0304 	and.w	r3, r3, #4
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d004      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a1b      	ldr	r3, [r3, #32]
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7ff fe2a 	bl	800841a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 0308 	and.w	r3, r3, #8
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d004      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7ff fe1f 	bl	800841a <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d022      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7ff fe8d 	bl	800850c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087fa:	d107      	bne.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80087fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800880a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008810:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008814:	d10b      	bne.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	3304      	adds	r3, #4
 800881a:	4618      	mov	r0, r3
 800881c:	f000 f8e3 	bl	80089e6 <RCCEx_PLLSAI1_ConfigNQ>
 8008820:	4603      	mov	r3, r0
 8008822:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008824:	7ffb      	ldrb	r3, [r7, #31]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800882a:	7ffb      	ldrb	r3, [r7, #31]
 800882c:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008836:	2b00      	cmp	r3, #0
 8008838:	d02b      	beq.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008842:	d008      	beq.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008848:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800884c:	d003      	beq.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008852:	2b00      	cmp	r3, #0
 8008854:	d105      	bne.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885a:	4618      	mov	r0, r3
 800885c:	f7ff fe2a 	bl	80084b4 <LL_RCC_SetRNGClockSource>
 8008860:	e00a      	b.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	2000      	movs	r0, #0
 800886e:	f7ff fe21 	bl	80084b4 <LL_RCC_SetRNGClockSource>
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f7ff fe34 	bl	80084e0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800887c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008880:	d107      	bne.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800888c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008890:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800889a:	2b00      	cmp	r3, #0
 800889c:	d022      	beq.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7ff fe3d 	bl	8008522 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088b0:	d107      	bne.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80088b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80088bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088c0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088ca:	d10b      	bne.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	3304      	adds	r3, #4
 80088d0:	4618      	mov	r0, r3
 80088d2:	f000 f8e3 	bl	8008a9c <RCCEx_PLLSAI1_ConfigNR>
 80088d6:	4603      	mov	r3, r0
 80088d8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80088da:	7ffb      	ldrb	r3, [r7, #31]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d001      	beq.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80088e0:	7ffb      	ldrb	r3, [r7, #31]
 80088e2:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d004      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7ff fd26 	bl	8008346 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008902:	2b00      	cmp	r3, #0
 8008904:	d009      	beq.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800890a:	4618      	mov	r0, r3
 800890c:	f7ff fd45 	bl	800839a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008914:	4618      	mov	r0, r3
 8008916:	f7ff fd2c 	bl	8008372 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800891a:	7fbb      	ldrb	r3, [r7, #30]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3720      	adds	r7, #32
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8008928:	f7ff fcfe 	bl	8008328 <LL_RCC_MSI_EnablePLLMode>
}
 800892c:	bf00      	nop
 800892e:	bd80      	pop	{r7, pc}

08008930 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008938:	2300      	movs	r3, #0
 800893a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800893c:	f7ff fe5b 	bl	80085f6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008940:	f7fc faa4 	bl	8004e8c <HAL_GetTick>
 8008944:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008946:	e009      	b.n	800895c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008948:	f7fc faa0 	bl	8004e8c <HAL_GetTick>
 800894c:	4602      	mov	r2, r0
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	2b02      	cmp	r3, #2
 8008954:	d902      	bls.n	800895c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8008956:	2303      	movs	r3, #3
 8008958:	73fb      	strb	r3, [r7, #15]
      break;
 800895a:	e004      	b.n	8008966 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800895c:	f7ff fe5a 	bl	8008614 <LL_RCC_PLLSAI1_IsReady>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1f0      	bne.n	8008948 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8008966:	7bfb      	ldrb	r3, [r7, #15]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d137      	bne.n	80089dc <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800896c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	021b      	lsls	r3, r3, #8
 800897c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008980:	4313      	orrs	r3, r2
 8008982:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8008984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008996:	4313      	orrs	r3, r2
 8008998:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800899a:	f7ff fe1d 	bl	80085d8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800899e:	f7fc fa75 	bl	8004e8c <HAL_GetTick>
 80089a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80089a4:	e009      	b.n	80089ba <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80089a6:	f7fc fa71 	bl	8004e8c <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d902      	bls.n	80089ba <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80089b4:	2303      	movs	r3, #3
 80089b6:	73fb      	strb	r3, [r7, #15]
        break;
 80089b8:	e004      	b.n	80089c4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80089ba:	f7ff fe2b 	bl	8008614 <LL_RCC_PLLSAI1_IsReady>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d1f0      	bne.n	80089a6 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d108      	bne.n	80089dc <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80089ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089ce:	691a      	ldr	r2, [r3, #16]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80089d8:	4313      	orrs	r3, r2
 80089da:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b084      	sub	sp, #16
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80089f2:	f7ff fe00 	bl	80085f6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80089f6:	f7fc fa49 	bl	8004e8c <HAL_GetTick>
 80089fa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80089fc:	e009      	b.n	8008a12 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80089fe:	f7fc fa45 	bl	8004e8c <HAL_GetTick>
 8008a02:	4602      	mov	r2, r0
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d902      	bls.n	8008a12 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a10:	e004      	b.n	8008a1c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008a12:	f7ff fdff 	bl	8008614 <LL_RCC_PLLSAI1_IsReady>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1f0      	bne.n	80089fe <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8008a1c:	7bfb      	ldrb	r3, [r7, #15]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d137      	bne.n	8008a92 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	021b      	lsls	r3, r3, #8
 8008a32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a36:	4313      	orrs	r3, r2
 8008a38:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8008a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008a50:	f7ff fdc2 	bl	80085d8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a54:	f7fc fa1a 	bl	8004e8c <HAL_GetTick>
 8008a58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008a5a:	e009      	b.n	8008a70 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008a5c:	f7fc fa16 	bl	8004e8c <HAL_GetTick>
 8008a60:	4602      	mov	r2, r0
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d902      	bls.n	8008a70 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	73fb      	strb	r3, [r7, #15]
        break;
 8008a6e:	e004      	b.n	8008a7a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008a70:	f7ff fdd0 	bl	8008614 <LL_RCC_PLLSAI1_IsReady>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d1f0      	bne.n	8008a5c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d108      	bne.n	8008a92 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a84:	691a      	ldr	r2, [r3, #16]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008aa8:	f7ff fda5 	bl	80085f6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008aac:	f7fc f9ee 	bl	8004e8c <HAL_GetTick>
 8008ab0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008ab2:	e009      	b.n	8008ac8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008ab4:	f7fc f9ea 	bl	8004e8c <HAL_GetTick>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d902      	bls.n	8008ac8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ac6:	e004      	b.n	8008ad2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008ac8:	f7ff fda4 	bl	8008614 <LL_RCC_PLLSAI1_IsReady>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1f0      	bne.n	8008ab4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8008ad2:	7bfb      	ldrb	r3, [r7, #15]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d137      	bne.n	8008b48 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	021b      	lsls	r3, r3, #8
 8008ae8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008aec:	4313      	orrs	r3, r2
 8008aee:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8008af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b02:	4313      	orrs	r3, r2
 8008b04:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008b06:	f7ff fd67 	bl	80085d8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b0a:	f7fc f9bf 	bl	8004e8c <HAL_GetTick>
 8008b0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008b10:	e009      	b.n	8008b26 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008b12:	f7fc f9bb 	bl	8004e8c <HAL_GetTick>
 8008b16:	4602      	mov	r2, r0
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d902      	bls.n	8008b26 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	73fb      	strb	r3, [r7, #15]
        break;
 8008b24:	e004      	b.n	8008b30 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008b26:	f7ff fd75 	bl	8008614 <LL_RCC_PLLSAI1_IsReady>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d1f0      	bne.n	8008b12 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d108      	bne.n	8008b48 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b3a:	691a      	ldr	r2, [r3, #16]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b44:	4313      	orrs	r3, r2
 8008b46:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
	...

08008b54 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d101      	bne.n	8008b66 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8008b62:	2301      	movs	r3, #1
 8008b64:	e09f      	b.n	8008ca6 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d106      	bne.n	8008b80 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f7fb f956 	bl	8003e2c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2202      	movs	r2, #2
 8008b84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008b88:	4b49      	ldr	r3, [pc, #292]	; (8008cb0 <HAL_RTC_Init+0x15c>)
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	f003 0310 	and.w	r3, r3, #16
 8008b90:	2b10      	cmp	r3, #16
 8008b92:	d07e      	beq.n	8008c92 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	22ca      	movs	r2, #202	; 0xca
 8008b9a:	625a      	str	r2, [r3, #36]	; 0x24
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2253      	movs	r2, #83	; 0x53
 8008ba2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f8ab 	bl	8008d00 <RTC_EnterInitMode>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00a      	beq.n	8008bc6 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	22ff      	movs	r2, #255	; 0xff
 8008bb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2204      	movs	r2, #4
 8008bbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	73fb      	strb	r3, [r7, #15]
 8008bc4:	e067      	b.n	8008c96 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	6812      	ldr	r2, [r2, #0]
 8008bd0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bd8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	6899      	ldr	r1, [r3, #8]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	685a      	ldr	r2, [r3, #4]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	431a      	orrs	r2, r3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	431a      	orrs	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	430a      	orrs	r2, r1
 8008bf6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	68d2      	ldr	r2, [r2, #12]
 8008c00:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	6919      	ldr	r1, [r3, #16]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	041a      	lsls	r2, r3, #16
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	430a      	orrs	r2, r1
 8008c14:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68da      	ldr	r2, [r3, #12]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c24:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f022 0203 	bic.w	r2, r2, #3
 8008c34:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	69da      	ldr	r2, [r3, #28]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	695b      	ldr	r3, [r3, #20]
 8008c44:	431a      	orrs	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	430a      	orrs	r2, r1
 8008c4c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	f003 0320 	and.w	r3, r3, #32
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d113      	bne.n	8008c84 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f829 	bl	8008cb4 <HAL_RTC_WaitForSynchro>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00d      	beq.n	8008c84 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	22ff      	movs	r2, #255	; 0xff
 8008c6e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2204      	movs	r2, #4
 8008c74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	e010      	b.n	8008ca6 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	22ff      	movs	r2, #255	; 0xff
 8008c8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	73fb      	strb	r3, [r7, #15]
 8008c90:	e001      	b.n	8008c96 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8008c92:	2300      	movs	r3, #0
 8008c94:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008c96:	7bfb      	ldrb	r3, [r7, #15]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d103      	bne.n	8008ca4 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8008ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	40002800 	.word	0x40002800

08008cb4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68da      	ldr	r2, [r3, #12]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008cca:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008ccc:	f7fc f8de 	bl	8004e8c <HAL_GetTick>
 8008cd0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008cd2:	e009      	b.n	8008ce8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008cd4:	f7fc f8da 	bl	8004e8c <HAL_GetTick>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ce2:	d901      	bls.n	8008ce8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	e007      	b.n	8008cf8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	f003 0320 	and.w	r3, r3, #32
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d0ee      	beq.n	8008cd4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d119      	bne.n	8008d4a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d1e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008d20:	f7fc f8b4 	bl	8004e8c <HAL_GetTick>
 8008d24:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008d26:	e009      	b.n	8008d3c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008d28:	f7fc f8b0 	bl	8004e8c <HAL_GetTick>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d36:	d901      	bls.n	8008d3c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	e007      	b.n	8008d4c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d0ee      	beq.n	8008d28 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d101      	bne.n	8008d6e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8008d6a:	2302      	movs	r3, #2
 8008d6c:	e0a8      	b.n	8008ec0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2201      	movs	r2, #1
 8008d72:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2202      	movs	r2, #2
 8008d7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	22ca      	movs	r2, #202	; 0xca
 8008d84:	625a      	str	r2, [r3, #36]	; 0x24
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2253      	movs	r2, #83	; 0x53
 8008d8c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d020      	beq.n	8008dde <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8008d9c:	f7fc f876 	bl	8004e8c <HAL_GetTick>
 8008da0:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8008da2:	e015      	b.n	8008dd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008da4:	f7fc f872 	bl	8004e8c <HAL_GetTick>
 8008da8:	4602      	mov	r2, r0
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	1ad3      	subs	r3, r2, r3
 8008dae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008db2:	d90d      	bls.n	8008dd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	22ff      	movs	r2, #255	; 0xff
 8008dba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2203      	movs	r2, #3
 8008dc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	e077      	b.n	8008ec0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	f003 0304 	and.w	r3, r3, #4
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1e2      	bne.n	8008da4 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	689a      	ldr	r2, [r3, #8]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dec:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	b2da      	uxtb	r2, r3
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008dfe:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008e00:	f7fc f844 	bl	8004e8c <HAL_GetTick>
 8008e04:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008e06:	e015      	b.n	8008e34 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008e08:	f7fc f840 	bl	8004e8c <HAL_GetTick>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e16:	d90d      	bls.n	8008e34 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	22ff      	movs	r2, #255	; 0xff
 8008e1e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2203      	movs	r2, #3
 8008e24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8008e30:	2303      	movs	r3, #3
 8008e32:	e045      	b.n	8008ec0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	f003 0304 	and.w	r3, r3, #4
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d0e2      	beq.n	8008e08 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68ba      	ldr	r2, [r7, #8]
 8008e48:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	689a      	ldr	r2, [r3, #8]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f022 0207 	bic.w	r2, r2, #7
 8008e58:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	6899      	ldr	r1, [r3, #8]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	430a      	orrs	r2, r1
 8008e68:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8008e6a:	4b17      	ldr	r3, [pc, #92]	; (8008ec8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e70:	4a15      	ldr	r2, [pc, #84]	; (8008ec8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008e72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e76:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8008e7a:	4b13      	ldr	r3, [pc, #76]	; (8008ec8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a12      	ldr	r2, [pc, #72]	; (8008ec8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008e80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e84:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	689a      	ldr	r2, [r3, #8]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e94:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	689a      	ldr	r2, [r3, #8]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008ea4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	22ff      	movs	r2, #255	; 0xff
 8008eac:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3718      	adds	r7, #24
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	58000800 	.word	0x58000800

08008ecc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d101      	bne.n	8008ede <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e095      	b.n	800900a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d108      	bne.n	8008ef8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008eee:	d009      	beq.n	8008f04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	61da      	str	r2, [r3, #28]
 8008ef6:	e005      	b.n	8008f04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d106      	bne.n	8008f24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f7fb f82a 	bl	8003f78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2202      	movs	r2, #2
 8008f28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f44:	d902      	bls.n	8008f4c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008f46:	2300      	movs	r3, #0
 8008f48:	60fb      	str	r3, [r7, #12]
 8008f4a:	e002      	b.n	8008f52 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f50:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008f5a:	d007      	beq.n	8008f6c <HAL_SPI_Init+0xa0>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f64:	d002      	beq.n	8008f6c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008f7c:	431a      	orrs	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	f003 0302 	and.w	r3, r3, #2
 8008f86:	431a      	orrs	r2, r3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	695b      	ldr	r3, [r3, #20]
 8008f8c:	f003 0301 	and.w	r3, r3, #1
 8008f90:	431a      	orrs	r2, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	699b      	ldr	r3, [r3, #24]
 8008f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f9a:	431a      	orrs	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	69db      	ldr	r3, [r3, #28]
 8008fa0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fa4:	431a      	orrs	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a1b      	ldr	r3, [r3, #32]
 8008faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fae:	ea42 0103 	orr.w	r1, r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	0c1b      	lsrs	r3, r3, #16
 8008fc8:	f003 0204 	and.w	r2, r3, #4
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd0:	f003 0310 	and.w	r3, r3, #16
 8008fd4:	431a      	orrs	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fda:	f003 0308 	and.w	r3, r3, #8
 8008fde:	431a      	orrs	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008fe8:	ea42 0103 	orr.w	r1, r2, r3
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	430a      	orrs	r2, r1
 8008ff8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
	...

08009014 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b086      	sub	sp, #24
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	4613      	mov	r3, r2
 8009020:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009022:	2300      	movs	r3, #0
 8009024:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800902c:	2b01      	cmp	r3, #1
 800902e:	d101      	bne.n	8009034 <HAL_SPI_Transmit_DMA+0x20>
 8009030:	2302      	movs	r3, #2
 8009032:	e0d4      	b.n	80091de <HAL_SPI_Transmit_DMA+0x1ca>
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009042:	b2db      	uxtb	r3, r3
 8009044:	2b01      	cmp	r3, #1
 8009046:	d002      	beq.n	800904e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8009048:	2302      	movs	r3, #2
 800904a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800904c:	e0c2      	b.n	80091d4 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d002      	beq.n	800905a <HAL_SPI_Transmit_DMA+0x46>
 8009054:	88fb      	ldrh	r3, [r7, #6]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d102      	bne.n	8009060 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800905e:	e0b9      	b.n	80091d4 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2203      	movs	r2, #3
 8009064:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2200      	movs	r2, #0
 800906c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	88fa      	ldrh	r2, [r7, #6]
 8009078:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	88fa      	ldrh	r2, [r7, #6]
 800907e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2200      	movs	r2, #0
 8009090:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2200      	movs	r2, #0
 8009096:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2200      	movs	r2, #0
 800909e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090aa:	d10f      	bne.n	80090cc <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090d0:	4a45      	ldr	r2, [pc, #276]	; (80091e8 <HAL_SPI_Transmit_DMA+0x1d4>)
 80090d2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090d8:	4a44      	ldr	r2, [pc, #272]	; (80091ec <HAL_SPI_Transmit_DMA+0x1d8>)
 80090da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090e0:	4a43      	ldr	r2, [pc, #268]	; (80091f0 <HAL_SPI_Transmit_DMA+0x1dc>)
 80090e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090e8:	2200      	movs	r2, #0
 80090ea:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	685a      	ldr	r2, [r3, #4]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80090fa:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009104:	d82d      	bhi.n	8009162 <HAL_SPI_Transmit_DMA+0x14e>
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800910a:	699b      	ldr	r3, [r3, #24]
 800910c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009110:	d127      	bne.n	8009162 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009116:	b29b      	uxth	r3, r3
 8009118:	f003 0301 	and.w	r3, r3, #1
 800911c:	2b00      	cmp	r3, #0
 800911e:	d10f      	bne.n	8009140 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	685a      	ldr	r2, [r3, #4]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800912e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009134:	b29b      	uxth	r3, r3
 8009136:	085b      	lsrs	r3, r3, #1
 8009138:	b29a      	uxth	r2, r3
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800913e:	e010      	b.n	8009162 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	685a      	ldr	r2, [r3, #4]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800914e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009154:	b29b      	uxth	r3, r3
 8009156:	085b      	lsrs	r3, r3, #1
 8009158:	b29b      	uxth	r3, r3
 800915a:	3301      	adds	r3, #1
 800915c:	b29a      	uxth	r2, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916a:	4619      	mov	r1, r3
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	330c      	adds	r3, #12
 8009172:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009178:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800917a:	f7fc ff4f 	bl	800601c <HAL_DMA_Start_IT>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d008      	beq.n	8009196 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009188:	f043 0210 	orr.w	r2, r3, #16
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	75fb      	strb	r3, [r7, #23]

    goto error;
 8009194:	e01e      	b.n	80091d4 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a0:	2b40      	cmp	r3, #64	; 0x40
 80091a2:	d007      	beq.n	80091b4 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091b2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	685a      	ldr	r2, [r3, #4]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f042 0220 	orr.w	r2, r2, #32
 80091c2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	685a      	ldr	r2, [r3, #4]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f042 0202 	orr.w	r2, r2, #2
 80091d2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80091dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3718      	adds	r7, #24
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	0800996b 	.word	0x0800996b
 80091ec:	0800978d 	.word	0x0800978d
 80091f0:	080099bf 	.word	0x080099bf

080091f4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b086      	sub	sp, #24
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	4613      	mov	r3, r2
 8009200:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009202:	2300      	movs	r3, #0
 8009204:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800920c:	b2db      	uxtb	r3, r3
 800920e:	2b01      	cmp	r3, #1
 8009210:	d002      	beq.n	8009218 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 8009212:	2302      	movs	r3, #2
 8009214:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009216:	e0fe      	b.n	8009416 <HAL_SPI_Receive_DMA+0x222>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d110      	bne.n	8009242 <HAL_SPI_Receive_DMA+0x4e>
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009228:	d10b      	bne.n	8009242 <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2204      	movs	r2, #4
 800922e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8009232:	88fb      	ldrh	r3, [r7, #6]
 8009234:	68ba      	ldr	r2, [r7, #8]
 8009236:	68b9      	ldr	r1, [r7, #8]
 8009238:	68f8      	ldr	r0, [r7, #12]
 800923a:	f000 f8fb 	bl	8009434 <HAL_SPI_TransmitReceive_DMA>
 800923e:	4603      	mov	r3, r0
 8009240:	e0ee      	b.n	8009420 <HAL_SPI_Receive_DMA+0x22c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009248:	2b01      	cmp	r3, #1
 800924a:	d101      	bne.n	8009250 <HAL_SPI_Receive_DMA+0x5c>
 800924c:	2302      	movs	r3, #2
 800924e:	e0e7      	b.n	8009420 <HAL_SPI_Receive_DMA+0x22c>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <HAL_SPI_Receive_DMA+0x70>
 800925e:	88fb      	ldrh	r3, [r7, #6]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d102      	bne.n	800926a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009268:	e0d5      	b.n	8009416 <HAL_SPI_Receive_DMA+0x222>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2204      	movs	r2, #4
 800926e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2200      	movs	r2, #0
 8009276:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	88fa      	ldrh	r2, [r7, #6]
 8009282:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	88fa      	ldrh	r2, [r7, #6]
 800928a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2200      	movs	r2, #0
 8009292:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2200      	movs	r2, #0
 8009298:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2200      	movs	r2, #0
 800929e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2200      	movs	r2, #0
 80092a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092ae:	d10f      	bne.n	80092d0 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80092ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	685a      	ldr	r2, [r3, #4]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092de:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80092e8:	d908      	bls.n	80092fc <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	685a      	ldr	r2, [r3, #4]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80092f8:	605a      	str	r2, [r3, #4]
 80092fa:	e042      	b.n	8009382 <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	685a      	ldr	r2, [r3, #4]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800930a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009310:	699b      	ldr	r3, [r3, #24]
 8009312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009316:	d134      	bne.n	8009382 <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	685a      	ldr	r2, [r3, #4]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009326:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800932e:	b29b      	uxth	r3, r3
 8009330:	f003 0301 	and.w	r3, r3, #1
 8009334:	2b00      	cmp	r3, #0
 8009336:	d111      	bne.n	800935c <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	685a      	ldr	r2, [r3, #4]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009346:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800934e:	b29b      	uxth	r3, r3
 8009350:	085b      	lsrs	r3, r3, #1
 8009352:	b29a      	uxth	r2, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800935a:	e012      	b.n	8009382 <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	685a      	ldr	r2, [r3, #4]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800936a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009372:	b29b      	uxth	r3, r3
 8009374:	085b      	lsrs	r3, r3, #1
 8009376:	b29b      	uxth	r3, r3
 8009378:	3301      	adds	r3, #1
 800937a:	b29a      	uxth	r2, r3
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009386:	4a28      	ldr	r2, [pc, #160]	; (8009428 <HAL_SPI_Receive_DMA+0x234>)
 8009388:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800938e:	4a27      	ldr	r2, [pc, #156]	; (800942c <HAL_SPI_Receive_DMA+0x238>)
 8009390:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009396:	4a26      	ldr	r2, [pc, #152]	; (8009430 <HAL_SPI_Receive_DMA+0x23c>)
 8009398:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800939e:	2200      	movs	r2, #0
 80093a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	330c      	adds	r3, #12
 80093ac:	4619      	mov	r1, r3
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b2:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80093ba:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80093bc:	f7fc fe2e 	bl	800601c <HAL_DMA_Start_IT>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d008      	beq.n	80093d8 <HAL_SPI_Receive_DMA+0x1e4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093ca:	f043 0210 	orr.w	r2, r3, #16
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	75fb      	strb	r3, [r7, #23]

    goto error;
 80093d6:	e01e      	b.n	8009416 <HAL_SPI_Receive_DMA+0x222>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e2:	2b40      	cmp	r3, #64	; 0x40
 80093e4:	d007      	beq.n	80093f6 <HAL_SPI_Receive_DMA+0x202>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093f4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	685a      	ldr	r2, [r3, #4]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f042 0220 	orr.w	r2, r2, #32
 8009404:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f042 0201 	orr.w	r2, r2, #1
 8009414:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800941e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3718      	adds	r7, #24
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	08009987 	.word	0x08009987
 800942c:	08009833 	.word	0x08009833
 8009430:	080099bf 	.word	0x080099bf

08009434 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b086      	sub	sp, #24
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
 8009440:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009442:	2300      	movs	r3, #0
 8009444:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800944c:	2b01      	cmp	r3, #1
 800944e:	d101      	bne.n	8009454 <HAL_SPI_TransmitReceive_DMA+0x20>
 8009450:	2302      	movs	r3, #2
 8009452:	e164      	b.n	800971e <HAL_SPI_TransmitReceive_DMA+0x2ea>
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009462:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800946a:	7dbb      	ldrb	r3, [r7, #22]
 800946c:	2b01      	cmp	r3, #1
 800946e:	d00d      	beq.n	800948c <HAL_SPI_TransmitReceive_DMA+0x58>
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009476:	d106      	bne.n	8009486 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d102      	bne.n	8009486 <HAL_SPI_TransmitReceive_DMA+0x52>
 8009480:	7dbb      	ldrb	r3, [r7, #22]
 8009482:	2b04      	cmp	r3, #4
 8009484:	d002      	beq.n	800948c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8009486:	2302      	movs	r3, #2
 8009488:	75fb      	strb	r3, [r7, #23]
    goto error;
 800948a:	e143      	b.n	8009714 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d005      	beq.n	800949e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d002      	beq.n	800949e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8009498:	887b      	ldrh	r3, [r7, #2]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d102      	bne.n	80094a4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80094a2:	e137      	b.n	8009714 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	2b04      	cmp	r3, #4
 80094ae:	d003      	beq.n	80094b8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2205      	movs	r2, #5
 80094b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2200      	movs	r2, #0
 80094bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	68ba      	ldr	r2, [r7, #8]
 80094c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	887a      	ldrh	r2, [r7, #2]
 80094c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	887a      	ldrh	r2, [r7, #2]
 80094ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	887a      	ldrh	r2, [r7, #2]
 80094da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	887a      	ldrh	r2, [r7, #2]
 80094e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2200      	movs	r2, #0
 80094f0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	685a      	ldr	r2, [r3, #4]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8009500:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800950a:	d908      	bls.n	800951e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	685a      	ldr	r2, [r3, #4]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800951a:	605a      	str	r2, [r3, #4]
 800951c:	e06f      	b.n	80095fe <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	685a      	ldr	r2, [r3, #4]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800952c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009532:	699b      	ldr	r3, [r3, #24]
 8009534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009538:	d126      	bne.n	8009588 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800953e:	f003 0301 	and.w	r3, r3, #1
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10f      	bne.n	8009566 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	685a      	ldr	r2, [r3, #4]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009554:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800955a:	b29b      	uxth	r3, r3
 800955c:	085b      	lsrs	r3, r3, #1
 800955e:	b29a      	uxth	r2, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009564:	e010      	b.n	8009588 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	685a      	ldr	r2, [r3, #4]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009574:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800957a:	b29b      	uxth	r3, r3
 800957c:	085b      	lsrs	r3, r3, #1
 800957e:	b29b      	uxth	r3, r3
 8009580:	3301      	adds	r3, #1
 8009582:	b29a      	uxth	r2, r3
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800958c:	699b      	ldr	r3, [r3, #24]
 800958e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009592:	d134      	bne.n	80095fe <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	685a      	ldr	r2, [r3, #4]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80095a2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	f003 0301 	and.w	r3, r3, #1
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d111      	bne.n	80095d8 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	685a      	ldr	r2, [r3, #4]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095c2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	085b      	lsrs	r3, r3, #1
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80095d6:	e012      	b.n	80095fe <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	685a      	ldr	r2, [r3, #4]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095e6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	085b      	lsrs	r3, r3, #1
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	3301      	adds	r3, #1
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009604:	b2db      	uxtb	r3, r3
 8009606:	2b04      	cmp	r3, #4
 8009608:	d108      	bne.n	800961c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800960e:	4a46      	ldr	r2, [pc, #280]	; (8009728 <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 8009610:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009616:	4a45      	ldr	r2, [pc, #276]	; (800972c <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8009618:	62da      	str	r2, [r3, #44]	; 0x2c
 800961a:	e007      	b.n	800962c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009620:	4a43      	ldr	r2, [pc, #268]	; (8009730 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8009622:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009628:	4a42      	ldr	r2, [pc, #264]	; (8009734 <HAL_SPI_TransmitReceive_DMA+0x300>)
 800962a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009630:	4a41      	ldr	r2, [pc, #260]	; (8009738 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8009632:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009638:	2200      	movs	r2, #0
 800963a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	330c      	adds	r3, #12
 8009646:	4619      	mov	r1, r3
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800964c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009654:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009656:	f7fc fce1 	bl	800601c <HAL_DMA_Start_IT>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d008      	beq.n	8009672 <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009664:	f043 0210 	orr.w	r2, r3, #16
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	75fb      	strb	r3, [r7, #23]

    goto error;
 8009670:	e050      	b.n	8009714 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	685a      	ldr	r2, [r3, #4]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f042 0201 	orr.w	r2, r2, #1
 8009680:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009686:	2200      	movs	r2, #0
 8009688:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800968e:	2200      	movs	r2, #0
 8009690:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009696:	2200      	movs	r2, #0
 8009698:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800969e:	2200      	movs	r2, #0
 80096a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096aa:	4619      	mov	r1, r3
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	330c      	adds	r3, #12
 80096b2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096b8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80096ba:	f7fc fcaf 	bl	800601c <HAL_DMA_Start_IT>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d008      	beq.n	80096d6 <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096c8:	f043 0210 	orr.w	r2, r3, #16
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	75fb      	strb	r3, [r7, #23]

    goto error;
 80096d4:	e01e      	b.n	8009714 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e0:	2b40      	cmp	r3, #64	; 0x40
 80096e2:	d007      	beq.n	80096f4 <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096f2:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685a      	ldr	r2, [r3, #4]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f042 0220 	orr.w	r2, r2, #32
 8009702:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	685a      	ldr	r2, [r3, #4]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f042 0202 	orr.w	r2, r2, #2
 8009712:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2200      	movs	r2, #0
 8009718:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800971c:	7dfb      	ldrb	r3, [r7, #23]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3718      	adds	r7, #24
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	08009987 	.word	0x08009987
 800972c:	08009833 	.word	0x08009833
 8009730:	080099a3 	.word	0x080099a3
 8009734:	080098db 	.word	0x080098db
 8009738:	080099bf 	.word	0x080099bf

0800973c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009744:	bf00      	nop
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009758:	bf00      	nop
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800976c:	bf00      	nop
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009780:	bf00      	nop
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b086      	sub	sp, #24
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009798:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800979a:	f7fb fb77 	bl	8004e8c <HAL_GetTick>
 800979e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 0320 	and.w	r3, r3, #32
 80097aa:	2b20      	cmp	r3, #32
 80097ac:	d03b      	beq.n	8009826 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	685a      	ldr	r2, [r3, #4]
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f022 0220 	bic.w	r2, r2, #32
 80097bc:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	685a      	ldr	r2, [r3, #4]
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f022 0202 	bic.w	r2, r2, #2
 80097cc:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	2164      	movs	r1, #100	; 0x64
 80097d2:	6978      	ldr	r0, [r7, #20]
 80097d4:	f000 fa8a 	bl	8009cec <SPI_EndRxTxTransaction>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d005      	beq.n	80097ea <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097e2:	f043 0220 	orr.w	r2, r3, #32
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10a      	bne.n	8009808 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80097f2:	2300      	movs	r3, #0
 80097f4:	60fb      	str	r3, [r7, #12]
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	60fb      	str	r3, [r7, #12]
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	60fb      	str	r3, [r7, #12]
 8009806:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	2200      	movs	r2, #0
 800980c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	2201      	movs	r2, #1
 8009812:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800981a:	2b00      	cmp	r3, #0
 800981c:	d003      	beq.n	8009826 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800981e:	6978      	ldr	r0, [r7, #20]
 8009820:	f7ff ffaa 	bl	8009778 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009824:	e002      	b.n	800982c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009826:	6978      	ldr	r0, [r7, #20]
 8009828:	f7fa fd6d 	bl	8004306 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800982c:	3718      	adds	r7, #24
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b084      	sub	sp, #16
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800983e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009840:	f7fb fb24 	bl	8004e8c <HAL_GetTick>
 8009844:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f003 0320 	and.w	r3, r3, #32
 8009850:	2b20      	cmp	r3, #32
 8009852:	d03c      	beq.n	80098ce <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	685a      	ldr	r2, [r3, #4]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f022 0220 	bic.w	r2, r2, #32
 8009862:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10d      	bne.n	8009888 <SPI_DMAReceiveCplt+0x56>
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009874:	d108      	bne.n	8009888 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	685a      	ldr	r2, [r3, #4]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f022 0203 	bic.w	r2, r2, #3
 8009884:	605a      	str	r2, [r3, #4]
 8009886:	e007      	b.n	8009898 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	685a      	ldr	r2, [r3, #4]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f022 0201 	bic.w	r2, r2, #1
 8009896:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009898:	68ba      	ldr	r2, [r7, #8]
 800989a:	2164      	movs	r1, #100	; 0x64
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f000 f9cd 	bl	8009c3c <SPI_EndRxTransaction>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d002      	beq.n	80098ae <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2220      	movs	r2, #32
 80098ac:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d003      	beq.n	80098ce <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80098c6:	68f8      	ldr	r0, [r7, #12]
 80098c8:	f7ff ff56 	bl	8009778 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80098cc:	e002      	b.n	80098d4 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	f7fa fd24 	bl	800431c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b084      	sub	sp, #16
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098e6:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098e8:	f7fb fad0 	bl	8004e8c <HAL_GetTick>
 80098ec:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f003 0320 	and.w	r3, r3, #32
 80098f8:	2b20      	cmp	r3, #32
 80098fa:	d030      	beq.n	800995e <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	685a      	ldr	r2, [r3, #4]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f022 0220 	bic.w	r2, r2, #32
 800990a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800990c:	68ba      	ldr	r2, [r7, #8]
 800990e:	2164      	movs	r1, #100	; 0x64
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f000 f9eb 	bl	8009cec <SPI_EndRxTxTransaction>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d005      	beq.n	8009928 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009920:	f043 0220 	orr.w	r2, r3, #32
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	685a      	ldr	r2, [r3, #4]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f022 0203 	bic.w	r2, r2, #3
 8009936:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2200      	movs	r2, #0
 800993c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2200      	movs	r2, #0
 8009942:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2201      	movs	r2, #1
 800994a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009952:	2b00      	cmp	r3, #0
 8009954:	d003      	beq.n	800995e <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f7ff ff0e 	bl	8009778 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800995c:	e002      	b.n	8009964 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f7fa fcc6 	bl	80042f0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b084      	sub	sp, #16
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009976:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f7ff fedf 	bl	800973c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800997e:	bf00      	nop
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b084      	sub	sp, #16
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009992:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f7ff fedb 	bl	8009750 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800999a:	bf00      	nop
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b084      	sub	sp, #16
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ae:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f7ff fed7 	bl	8009764 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80099b6:	bf00      	nop
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b084      	sub	sp, #16
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ca:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	685a      	ldr	r2, [r3, #4]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f022 0203 	bic.w	r2, r2, #3
 80099da:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099e0:	f043 0210 	orr.w	r2, r3, #16
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f7ff fec1 	bl	8009778 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80099f6:	bf00      	nop
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
	...

08009a00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b088      	sub	sp, #32
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	603b      	str	r3, [r7, #0]
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009a10:	f7fb fa3c 	bl	8004e8c <HAL_GetTick>
 8009a14:	4602      	mov	r2, r0
 8009a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a18:	1a9b      	subs	r3, r3, r2
 8009a1a:	683a      	ldr	r2, [r7, #0]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009a20:	f7fb fa34 	bl	8004e8c <HAL_GetTick>
 8009a24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009a26:	4b39      	ldr	r3, [pc, #228]	; (8009b0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	015b      	lsls	r3, r3, #5
 8009a2c:	0d1b      	lsrs	r3, r3, #20
 8009a2e:	69fa      	ldr	r2, [r7, #28]
 8009a30:	fb02 f303 	mul.w	r3, r2, r3
 8009a34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a36:	e054      	b.n	8009ae2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a3e:	d050      	beq.n	8009ae2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009a40:	f7fb fa24 	bl	8004e8c <HAL_GetTick>
 8009a44:	4602      	mov	r2, r0
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	1ad3      	subs	r3, r2, r3
 8009a4a:	69fa      	ldr	r2, [r7, #28]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d902      	bls.n	8009a56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d13d      	bne.n	8009ad2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	685a      	ldr	r2, [r3, #4]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009a64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a6e:	d111      	bne.n	8009a94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a78:	d004      	beq.n	8009a84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a82:	d107      	bne.n	8009a94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a9c:	d10f      	bne.n	8009abe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009aac:	601a      	str	r2, [r3, #0]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009abc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009ace:	2303      	movs	r3, #3
 8009ad0:	e017      	b.n	8009b02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d101      	bne.n	8009adc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	689a      	ldr	r2, [r3, #8]
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	4013      	ands	r3, r2
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	bf0c      	ite	eq
 8009af2:	2301      	moveq	r3, #1
 8009af4:	2300      	movne	r3, #0
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	461a      	mov	r2, r3
 8009afa:	79fb      	ldrb	r3, [r7, #7]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d19b      	bne.n	8009a38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3720      	adds	r7, #32
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	20000070 	.word	0x20000070

08009b10 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b08a      	sub	sp, #40	; 0x28
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	607a      	str	r2, [r7, #4]
 8009b1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009b22:	f7fb f9b3 	bl	8004e8c <HAL_GetTick>
 8009b26:	4602      	mov	r2, r0
 8009b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2a:	1a9b      	subs	r3, r3, r2
 8009b2c:	683a      	ldr	r2, [r7, #0]
 8009b2e:	4413      	add	r3, r2
 8009b30:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009b32:	f7fb f9ab 	bl	8004e8c <HAL_GetTick>
 8009b36:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	330c      	adds	r3, #12
 8009b3e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009b40:	4b3d      	ldr	r3, [pc, #244]	; (8009c38 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	4613      	mov	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4413      	add	r3, r2
 8009b4a:	00da      	lsls	r2, r3, #3
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	0d1b      	lsrs	r3, r3, #20
 8009b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b52:	fb02 f303 	mul.w	r3, r2, r3
 8009b56:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009b58:	e060      	b.n	8009c1c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009b60:	d107      	bne.n	8009b72 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d104      	bne.n	8009b72 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009b70:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b78:	d050      	beq.n	8009c1c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b7a:	f7fb f987 	bl	8004e8c <HAL_GetTick>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	6a3b      	ldr	r3, [r7, #32]
 8009b82:	1ad3      	subs	r3, r2, r3
 8009b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d902      	bls.n	8009b90 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d13d      	bne.n	8009c0c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	685a      	ldr	r2, [r3, #4]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009b9e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ba8:	d111      	bne.n	8009bce <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bb2:	d004      	beq.n	8009bbe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bbc:	d107      	bne.n	8009bce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bcc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bd6:	d10f      	bne.n	8009bf8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009be6:	601a      	str	r2, [r3, #0]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009bf6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009c08:	2303      	movs	r3, #3
 8009c0a:	e010      	b.n	8009c2e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009c0c:	69bb      	ldr	r3, [r7, #24]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d101      	bne.n	8009c16 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009c12:	2300      	movs	r3, #0
 8009c14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	689a      	ldr	r2, [r3, #8]
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	4013      	ands	r3, r2
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d196      	bne.n	8009b5a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3728      	adds	r7, #40	; 0x28
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	20000070 	.word	0x20000070

08009c3c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af02      	add	r7, sp, #8
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c50:	d111      	bne.n	8009c76 <SPI_EndRxTransaction+0x3a>
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c5a:	d004      	beq.n	8009c66 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c64:	d107      	bne.n	8009c76 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c74:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	9300      	str	r3, [sp, #0]
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	2180      	movs	r1, #128	; 0x80
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	f7ff febd 	bl	8009a00 <SPI_WaitFlagStateUntilTimeout>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d007      	beq.n	8009c9c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c90:	f043 0220 	orr.w	r2, r3, #32
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009c98:	2303      	movs	r3, #3
 8009c9a:	e023      	b.n	8009ce4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ca4:	d11d      	bne.n	8009ce2 <SPI_EndRxTransaction+0xa6>
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cae:	d004      	beq.n	8009cba <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cb8:	d113      	bne.n	8009ce2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	9300      	str	r3, [sp, #0]
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f7ff ff22 	bl	8009b10 <SPI_WaitFifoStateUntilTimeout>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d007      	beq.n	8009ce2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cd6:	f043 0220 	orr.w	r2, r3, #32
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009cde:	2303      	movs	r3, #3
 8009ce0:	e000      	b.n	8009ce4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b086      	sub	sp, #24
 8009cf0:	af02      	add	r7, sp, #8
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f7ff ff03 	bl	8009b10 <SPI_WaitFifoStateUntilTimeout>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d007      	beq.n	8009d20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d14:	f043 0220 	orr.w	r2, r3, #32
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	e027      	b.n	8009d70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	9300      	str	r3, [sp, #0]
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	2200      	movs	r2, #0
 8009d28:	2180      	movs	r1, #128	; 0x80
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f7ff fe68 	bl	8009a00 <SPI_WaitFlagStateUntilTimeout>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d007      	beq.n	8009d46 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d3a:	f043 0220 	orr.w	r2, r3, #32
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009d42:	2303      	movs	r3, #3
 8009d44:	e014      	b.n	8009d70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	9300      	str	r3, [sp, #0]
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009d52:	68f8      	ldr	r0, [r7, #12]
 8009d54:	f7ff fedc 	bl	8009b10 <SPI_WaitFifoStateUntilTimeout>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d007      	beq.n	8009d6e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d62:	f043 0220 	orr.w	r2, r3, #32
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009d6a:	2303      	movs	r3, #3
 8009d6c:	e000      	b.n	8009d70 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009d6e:	2300      	movs	r3, #0
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3710      	adds	r7, #16
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d101      	bne.n	8009d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	e049      	b.n	8009e1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d106      	bne.n	8009da4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f7fa fd84 	bl	80048ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2202      	movs	r2, #2
 8009da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	3304      	adds	r3, #4
 8009db4:	4619      	mov	r1, r3
 8009db6:	4610      	mov	r0, r2
 8009db8:	f000 fcce 	bl	800a758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2201      	movs	r2, #1
 8009de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2201      	movs	r2, #1
 8009df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2201      	movs	r2, #1
 8009df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2201      	movs	r2, #1
 8009e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3708      	adds	r7, #8
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
	...

08009e28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d001      	beq.n	8009e40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e036      	b.n	8009eae <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2202      	movs	r2, #2
 8009e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	68da      	ldr	r2, [r3, #12]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f042 0201 	orr.w	r2, r2, #1
 8009e56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a17      	ldr	r2, [pc, #92]	; (8009ebc <HAL_TIM_Base_Start_IT+0x94>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d004      	beq.n	8009e6c <HAL_TIM_Base_Start_IT+0x44>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e6a:	d115      	bne.n	8009e98 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	689a      	ldr	r2, [r3, #8]
 8009e72:	4b13      	ldr	r3, [pc, #76]	; (8009ec0 <HAL_TIM_Base_Start_IT+0x98>)
 8009e74:	4013      	ands	r3, r2
 8009e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2b06      	cmp	r3, #6
 8009e7c:	d015      	beq.n	8009eaa <HAL_TIM_Base_Start_IT+0x82>
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e84:	d011      	beq.n	8009eaa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f042 0201 	orr.w	r2, r2, #1
 8009e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e96:	e008      	b.n	8009eaa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f042 0201 	orr.w	r2, r2, #1
 8009ea6:	601a      	str	r2, [r3, #0]
 8009ea8:	e000      	b.n	8009eac <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3714      	adds	r7, #20
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	40012c00 	.word	0x40012c00
 8009ec0:	00010007 	.word	0x00010007

08009ec4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d101      	bne.n	8009ed6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e049      	b.n	8009f6a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d106      	bne.n	8009ef0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 f841 	bl	8009f72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2202      	movs	r2, #2
 8009ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	3304      	adds	r3, #4
 8009f00:	4619      	mov	r1, r3
 8009f02:	4610      	mov	r0, r2
 8009f04:	f000 fc28 	bl	800a758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2201      	movs	r2, #1
 8009f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2201      	movs	r2, #1
 8009f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2201      	movs	r2, #1
 8009f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2201      	movs	r2, #1
 8009f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f68:	2300      	movs	r3, #0
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3708      	adds	r7, #8
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}

08009f72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009f72:	b480      	push	{r7}
 8009f74:	b083      	sub	sp, #12
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009f7a:	bf00      	nop
 8009f7c:	370c      	adds	r7, #12
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
	...

08009f88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d109      	bne.n	8009fac <HAL_TIM_PWM_Start+0x24>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	bf14      	ite	ne
 8009fa4:	2301      	movne	r3, #1
 8009fa6:	2300      	moveq	r3, #0
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	e03c      	b.n	800a026 <HAL_TIM_PWM_Start+0x9e>
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	2b04      	cmp	r3, #4
 8009fb0:	d109      	bne.n	8009fc6 <HAL_TIM_PWM_Start+0x3e>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	bf14      	ite	ne
 8009fbe:	2301      	movne	r3, #1
 8009fc0:	2300      	moveq	r3, #0
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	e02f      	b.n	800a026 <HAL_TIM_PWM_Start+0x9e>
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	2b08      	cmp	r3, #8
 8009fca:	d109      	bne.n	8009fe0 <HAL_TIM_PWM_Start+0x58>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	bf14      	ite	ne
 8009fd8:	2301      	movne	r3, #1
 8009fda:	2300      	moveq	r3, #0
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	e022      	b.n	800a026 <HAL_TIM_PWM_Start+0x9e>
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	2b0c      	cmp	r3, #12
 8009fe4:	d109      	bne.n	8009ffa <HAL_TIM_PWM_Start+0x72>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	bf14      	ite	ne
 8009ff2:	2301      	movne	r3, #1
 8009ff4:	2300      	moveq	r3, #0
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	e015      	b.n	800a026 <HAL_TIM_PWM_Start+0x9e>
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	2b10      	cmp	r3, #16
 8009ffe:	d109      	bne.n	800a014 <HAL_TIM_PWM_Start+0x8c>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a006:	b2db      	uxtb	r3, r3
 800a008:	2b01      	cmp	r3, #1
 800a00a:	bf14      	ite	ne
 800a00c:	2301      	movne	r3, #1
 800a00e:	2300      	moveq	r3, #0
 800a010:	b2db      	uxtb	r3, r3
 800a012:	e008      	b.n	800a026 <HAL_TIM_PWM_Start+0x9e>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	bf14      	ite	ne
 800a020:	2301      	movne	r3, #1
 800a022:	2300      	moveq	r3, #0
 800a024:	b2db      	uxtb	r3, r3
 800a026:	2b00      	cmp	r3, #0
 800a028:	d001      	beq.n	800a02e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
 800a02c:	e079      	b.n	800a122 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d104      	bne.n	800a03e <HAL_TIM_PWM_Start+0xb6>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2202      	movs	r2, #2
 800a038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a03c:	e023      	b.n	800a086 <HAL_TIM_PWM_Start+0xfe>
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	2b04      	cmp	r3, #4
 800a042:	d104      	bne.n	800a04e <HAL_TIM_PWM_Start+0xc6>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2202      	movs	r2, #2
 800a048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a04c:	e01b      	b.n	800a086 <HAL_TIM_PWM_Start+0xfe>
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	2b08      	cmp	r3, #8
 800a052:	d104      	bne.n	800a05e <HAL_TIM_PWM_Start+0xd6>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2202      	movs	r2, #2
 800a058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a05c:	e013      	b.n	800a086 <HAL_TIM_PWM_Start+0xfe>
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	2b0c      	cmp	r3, #12
 800a062:	d104      	bne.n	800a06e <HAL_TIM_PWM_Start+0xe6>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2202      	movs	r2, #2
 800a068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a06c:	e00b      	b.n	800a086 <HAL_TIM_PWM_Start+0xfe>
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	2b10      	cmp	r3, #16
 800a072:	d104      	bne.n	800a07e <HAL_TIM_PWM_Start+0xf6>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2202      	movs	r2, #2
 800a078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a07c:	e003      	b.n	800a086 <HAL_TIM_PWM_Start+0xfe>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2202      	movs	r2, #2
 800a082:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	2201      	movs	r2, #1
 800a08c:	6839      	ldr	r1, [r7, #0]
 800a08e:	4618      	mov	r0, r3
 800a090:	f000 feec 	bl	800ae6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a24      	ldr	r2, [pc, #144]	; (800a12c <HAL_TIM_PWM_Start+0x1a4>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d009      	beq.n	800a0b2 <HAL_TIM_PWM_Start+0x12a>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a23      	ldr	r2, [pc, #140]	; (800a130 <HAL_TIM_PWM_Start+0x1a8>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d004      	beq.n	800a0b2 <HAL_TIM_PWM_Start+0x12a>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a21      	ldr	r2, [pc, #132]	; (800a134 <HAL_TIM_PWM_Start+0x1ac>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d101      	bne.n	800a0b6 <HAL_TIM_PWM_Start+0x12e>
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e000      	b.n	800a0b8 <HAL_TIM_PWM_Start+0x130>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d007      	beq.n	800a0cc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a0ca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a16      	ldr	r2, [pc, #88]	; (800a12c <HAL_TIM_PWM_Start+0x1a4>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d004      	beq.n	800a0e0 <HAL_TIM_PWM_Start+0x158>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0de:	d115      	bne.n	800a10c <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	689a      	ldr	r2, [r3, #8]
 800a0e6:	4b14      	ldr	r3, [pc, #80]	; (800a138 <HAL_TIM_PWM_Start+0x1b0>)
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2b06      	cmp	r3, #6
 800a0f0:	d015      	beq.n	800a11e <HAL_TIM_PWM_Start+0x196>
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0f8:	d011      	beq.n	800a11e <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f042 0201 	orr.w	r2, r2, #1
 800a108:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a10a:	e008      	b.n	800a11e <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f042 0201 	orr.w	r2, r2, #1
 800a11a:	601a      	str	r2, [r3, #0]
 800a11c:	e000      	b.n	800a120 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a11e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	40012c00 	.word	0x40012c00
 800a130:	40014400 	.word	0x40014400
 800a134:	40014800 	.word	0x40014800
 800a138:	00010007 	.word	0x00010007

0800a13c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	691b      	ldr	r3, [r3, #16]
 800a152:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	f003 0302 	and.w	r3, r3, #2
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d020      	beq.n	800a1a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f003 0302 	and.w	r3, r3, #2
 800a164:	2b00      	cmp	r3, #0
 800a166:	d01b      	beq.n	800a1a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f06f 0202 	mvn.w	r2, #2
 800a170:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2201      	movs	r2, #1
 800a176:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	699b      	ldr	r3, [r3, #24]
 800a17e:	f003 0303 	and.w	r3, r3, #3
 800a182:	2b00      	cmp	r3, #0
 800a184:	d003      	beq.n	800a18e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 fac7 	bl	800a71a <HAL_TIM_IC_CaptureCallback>
 800a18c:	e005      	b.n	800a19a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 fab9 	bl	800a706 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 faca 	bl	800a72e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	f003 0304 	and.w	r3, r3, #4
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d020      	beq.n	800a1ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f003 0304 	and.w	r3, r3, #4
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d01b      	beq.n	800a1ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f06f 0204 	mvn.w	r2, #4
 800a1bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2202      	movs	r2, #2
 800a1c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	699b      	ldr	r3, [r3, #24]
 800a1ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d003      	beq.n	800a1da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 faa1 	bl	800a71a <HAL_TIM_IC_CaptureCallback>
 800a1d8:	e005      	b.n	800a1e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f000 fa93 	bl	800a706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 faa4 	bl	800a72e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	f003 0308 	and.w	r3, r3, #8
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d020      	beq.n	800a238 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f003 0308 	and.w	r3, r3, #8
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d01b      	beq.n	800a238 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f06f 0208 	mvn.w	r2, #8
 800a208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2204      	movs	r2, #4
 800a20e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	69db      	ldr	r3, [r3, #28]
 800a216:	f003 0303 	and.w	r3, r3, #3
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d003      	beq.n	800a226 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 fa7b 	bl	800a71a <HAL_TIM_IC_CaptureCallback>
 800a224:	e005      	b.n	800a232 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 fa6d 	bl	800a706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 fa7e 	bl	800a72e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	f003 0310 	and.w	r3, r3, #16
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d020      	beq.n	800a284 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f003 0310 	and.w	r3, r3, #16
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d01b      	beq.n	800a284 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f06f 0210 	mvn.w	r2, #16
 800a254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2208      	movs	r2, #8
 800a25a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	69db      	ldr	r3, [r3, #28]
 800a262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a266:	2b00      	cmp	r3, #0
 800a268:	d003      	beq.n	800a272 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 fa55 	bl	800a71a <HAL_TIM_IC_CaptureCallback>
 800a270:	e005      	b.n	800a27e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 fa47 	bl	800a706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fa58 	bl	800a72e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	f003 0301 	and.w	r3, r3, #1
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00c      	beq.n	800a2a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f003 0301 	and.w	r3, r3, #1
 800a294:	2b00      	cmp	r3, #0
 800a296:	d007      	beq.n	800a2a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f06f 0201 	mvn.w	r2, #1
 800a2a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f7f8 ff98 	bl	80031d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d104      	bne.n	800a2bc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d00c      	beq.n	800a2d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d007      	beq.n	800a2d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800a2ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 fee1 	bl	800b098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00c      	beq.n	800a2fa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d007      	beq.n	800a2fa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a2f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 fed9 	bl	800b0ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a300:	2b00      	cmp	r3, #0
 800a302:	d00c      	beq.n	800a31e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d007      	beq.n	800a31e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 fa12 	bl	800a742 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	f003 0320 	and.w	r3, r3, #32
 800a324:	2b00      	cmp	r3, #0
 800a326:	d00c      	beq.n	800a342 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f003 0320 	and.w	r3, r3, #32
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d007      	beq.n	800a342 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f06f 0220 	mvn.w	r2, #32
 800a33a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 fea1 	bl	800b084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a342:	bf00      	nop
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
	...

0800a34c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b086      	sub	sp, #24
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a358:	2300      	movs	r3, #0
 800a35a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a362:	2b01      	cmp	r3, #1
 800a364:	d101      	bne.n	800a36a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a366:	2302      	movs	r3, #2
 800a368:	e0ff      	b.n	800a56a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2201      	movs	r2, #1
 800a36e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2b14      	cmp	r3, #20
 800a376:	f200 80f0 	bhi.w	800a55a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a37a:	a201      	add	r2, pc, #4	; (adr r2, 800a380 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a380:	0800a3d5 	.word	0x0800a3d5
 800a384:	0800a55b 	.word	0x0800a55b
 800a388:	0800a55b 	.word	0x0800a55b
 800a38c:	0800a55b 	.word	0x0800a55b
 800a390:	0800a415 	.word	0x0800a415
 800a394:	0800a55b 	.word	0x0800a55b
 800a398:	0800a55b 	.word	0x0800a55b
 800a39c:	0800a55b 	.word	0x0800a55b
 800a3a0:	0800a457 	.word	0x0800a457
 800a3a4:	0800a55b 	.word	0x0800a55b
 800a3a8:	0800a55b 	.word	0x0800a55b
 800a3ac:	0800a55b 	.word	0x0800a55b
 800a3b0:	0800a497 	.word	0x0800a497
 800a3b4:	0800a55b 	.word	0x0800a55b
 800a3b8:	0800a55b 	.word	0x0800a55b
 800a3bc:	0800a55b 	.word	0x0800a55b
 800a3c0:	0800a4d9 	.word	0x0800a4d9
 800a3c4:	0800a55b 	.word	0x0800a55b
 800a3c8:	0800a55b 	.word	0x0800a55b
 800a3cc:	0800a55b 	.word	0x0800a55b
 800a3d0:	0800a519 	.word	0x0800a519
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	68b9      	ldr	r1, [r7, #8]
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f000 fa2c 	bl	800a838 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	699a      	ldr	r2, [r3, #24]
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f042 0208 	orr.w	r2, r2, #8
 800a3ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	699a      	ldr	r2, [r3, #24]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f022 0204 	bic.w	r2, r2, #4
 800a3fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	6999      	ldr	r1, [r3, #24]
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	691a      	ldr	r2, [r3, #16]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	430a      	orrs	r2, r1
 800a410:	619a      	str	r2, [r3, #24]
      break;
 800a412:	e0a5      	b.n	800a560 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68b9      	ldr	r1, [r7, #8]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f000 fa88 	bl	800a930 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	699a      	ldr	r2, [r3, #24]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a42e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	699a      	ldr	r2, [r3, #24]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a43e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	6999      	ldr	r1, [r3, #24]
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	021a      	lsls	r2, r3, #8
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	430a      	orrs	r2, r1
 800a452:	619a      	str	r2, [r3, #24]
      break;
 800a454:	e084      	b.n	800a560 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	68b9      	ldr	r1, [r7, #8]
 800a45c:	4618      	mov	r0, r3
 800a45e:	f000 fae1 	bl	800aa24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	69da      	ldr	r2, [r3, #28]
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f042 0208 	orr.w	r2, r2, #8
 800a470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	69da      	ldr	r2, [r3, #28]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f022 0204 	bic.w	r2, r2, #4
 800a480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	69d9      	ldr	r1, [r3, #28]
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	691a      	ldr	r2, [r3, #16]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	430a      	orrs	r2, r1
 800a492:	61da      	str	r2, [r3, #28]
      break;
 800a494:	e064      	b.n	800a560 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	68b9      	ldr	r1, [r7, #8]
 800a49c:	4618      	mov	r0, r3
 800a49e:	f000 fb39 	bl	800ab14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	69da      	ldr	r2, [r3, #28]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	69da      	ldr	r2, [r3, #28]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	69d9      	ldr	r1, [r3, #28]
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	691b      	ldr	r3, [r3, #16]
 800a4cc:	021a      	lsls	r2, r3, #8
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	430a      	orrs	r2, r1
 800a4d4:	61da      	str	r2, [r3, #28]
      break;
 800a4d6:	e043      	b.n	800a560 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	68b9      	ldr	r1, [r7, #8]
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f000 fb76 	bl	800abd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f042 0208 	orr.w	r2, r2, #8
 800a4f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f022 0204 	bic.w	r2, r2, #4
 800a502:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	691a      	ldr	r2, [r3, #16]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	430a      	orrs	r2, r1
 800a514:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a516:	e023      	b.n	800a560 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68b9      	ldr	r1, [r7, #8]
 800a51e:	4618      	mov	r0, r3
 800a520:	f000 fbae 	bl	800ac80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a532:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a542:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	691b      	ldr	r3, [r3, #16]
 800a54e:	021a      	lsls	r2, r3, #8
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	430a      	orrs	r2, r1
 800a556:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a558:	e002      	b.n	800a560 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	75fb      	strb	r3, [r7, #23]
      break;
 800a55e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2200      	movs	r2, #0
 800a564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a568:	7dfb      	ldrb	r3, [r7, #23]
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3718      	adds	r7, #24
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop

0800a574 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a57e:	2300      	movs	r3, #0
 800a580:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d101      	bne.n	800a590 <HAL_TIM_ConfigClockSource+0x1c>
 800a58c:	2302      	movs	r3, #2
 800a58e:	e0b6      	b.n	800a6fe <HAL_TIM_ConfigClockSource+0x18a>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2202      	movs	r2, #2
 800a59c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800a5ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a5b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	68ba      	ldr	r2, [r7, #8]
 800a5c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5cc:	d03e      	beq.n	800a64c <HAL_TIM_ConfigClockSource+0xd8>
 800a5ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5d2:	f200 8087 	bhi.w	800a6e4 <HAL_TIM_ConfigClockSource+0x170>
 800a5d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5da:	f000 8086 	beq.w	800a6ea <HAL_TIM_ConfigClockSource+0x176>
 800a5de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5e2:	d87f      	bhi.n	800a6e4 <HAL_TIM_ConfigClockSource+0x170>
 800a5e4:	2b70      	cmp	r3, #112	; 0x70
 800a5e6:	d01a      	beq.n	800a61e <HAL_TIM_ConfigClockSource+0xaa>
 800a5e8:	2b70      	cmp	r3, #112	; 0x70
 800a5ea:	d87b      	bhi.n	800a6e4 <HAL_TIM_ConfigClockSource+0x170>
 800a5ec:	2b60      	cmp	r3, #96	; 0x60
 800a5ee:	d050      	beq.n	800a692 <HAL_TIM_ConfigClockSource+0x11e>
 800a5f0:	2b60      	cmp	r3, #96	; 0x60
 800a5f2:	d877      	bhi.n	800a6e4 <HAL_TIM_ConfigClockSource+0x170>
 800a5f4:	2b50      	cmp	r3, #80	; 0x50
 800a5f6:	d03c      	beq.n	800a672 <HAL_TIM_ConfigClockSource+0xfe>
 800a5f8:	2b50      	cmp	r3, #80	; 0x50
 800a5fa:	d873      	bhi.n	800a6e4 <HAL_TIM_ConfigClockSource+0x170>
 800a5fc:	2b40      	cmp	r3, #64	; 0x40
 800a5fe:	d058      	beq.n	800a6b2 <HAL_TIM_ConfigClockSource+0x13e>
 800a600:	2b40      	cmp	r3, #64	; 0x40
 800a602:	d86f      	bhi.n	800a6e4 <HAL_TIM_ConfigClockSource+0x170>
 800a604:	2b30      	cmp	r3, #48	; 0x30
 800a606:	d064      	beq.n	800a6d2 <HAL_TIM_ConfigClockSource+0x15e>
 800a608:	2b30      	cmp	r3, #48	; 0x30
 800a60a:	d86b      	bhi.n	800a6e4 <HAL_TIM_ConfigClockSource+0x170>
 800a60c:	2b20      	cmp	r3, #32
 800a60e:	d060      	beq.n	800a6d2 <HAL_TIM_ConfigClockSource+0x15e>
 800a610:	2b20      	cmp	r3, #32
 800a612:	d867      	bhi.n	800a6e4 <HAL_TIM_ConfigClockSource+0x170>
 800a614:	2b00      	cmp	r3, #0
 800a616:	d05c      	beq.n	800a6d2 <HAL_TIM_ConfigClockSource+0x15e>
 800a618:	2b10      	cmp	r3, #16
 800a61a:	d05a      	beq.n	800a6d2 <HAL_TIM_ConfigClockSource+0x15e>
 800a61c:	e062      	b.n	800a6e4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a62e:	f000 fbfd 	bl	800ae2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a640:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	68ba      	ldr	r2, [r7, #8]
 800a648:	609a      	str	r2, [r3, #8]
      break;
 800a64a:	e04f      	b.n	800a6ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a65c:	f000 fbe6 	bl	800ae2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	689a      	ldr	r2, [r3, #8]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a66e:	609a      	str	r2, [r3, #8]
      break;
 800a670:	e03c      	b.n	800a6ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a67e:	461a      	mov	r2, r3
 800a680:	f000 fb58 	bl	800ad34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2150      	movs	r1, #80	; 0x50
 800a68a:	4618      	mov	r0, r3
 800a68c:	f000 fbb1 	bl	800adf2 <TIM_ITRx_SetConfig>
      break;
 800a690:	e02c      	b.n	800a6ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a69e:	461a      	mov	r2, r3
 800a6a0:	f000 fb77 	bl	800ad92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2160      	movs	r1, #96	; 0x60
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f000 fba1 	bl	800adf2 <TIM_ITRx_SetConfig>
      break;
 800a6b0:	e01c      	b.n	800a6ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6be:	461a      	mov	r2, r3
 800a6c0:	f000 fb38 	bl	800ad34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2140      	movs	r1, #64	; 0x40
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f000 fb91 	bl	800adf2 <TIM_ITRx_SetConfig>
      break;
 800a6d0:	e00c      	b.n	800a6ec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4619      	mov	r1, r3
 800a6dc:	4610      	mov	r0, r2
 800a6de:	f000 fb88 	bl	800adf2 <TIM_ITRx_SetConfig>
      break;
 800a6e2:	e003      	b.n	800a6ec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	73fb      	strb	r3, [r7, #15]
      break;
 800a6e8:	e000      	b.n	800a6ec <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a6ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a706:	b480      	push	{r7}
 800a708:	b083      	sub	sp, #12
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a70e:	bf00      	nop
 800a710:	370c      	adds	r7, #12
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr

0800a71a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a71a:	b480      	push	{r7}
 800a71c:	b083      	sub	sp, #12
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a722:	bf00      	nop
 800a724:	370c      	adds	r7, #12
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr

0800a72e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a72e:	b480      	push	{r7}
 800a730:	b083      	sub	sp, #12
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a736:	bf00      	nop
 800a738:	370c      	adds	r7, #12
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr

0800a742 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a742:	b480      	push	{r7}
 800a744:	b083      	sub	sp, #12
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a74a:	bf00      	nop
 800a74c:	370c      	adds	r7, #12
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr
	...

0800a758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a758:	b480      	push	{r7}
 800a75a:	b085      	sub	sp, #20
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a30      	ldr	r2, [pc, #192]	; (800a82c <TIM_Base_SetConfig+0xd4>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d003      	beq.n	800a778 <TIM_Base_SetConfig+0x20>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a776:	d108      	bne.n	800a78a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a77e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	4313      	orrs	r3, r2
 800a788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4a27      	ldr	r2, [pc, #156]	; (800a82c <TIM_Base_SetConfig+0xd4>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d00b      	beq.n	800a7aa <TIM_Base_SetConfig+0x52>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a798:	d007      	beq.n	800a7aa <TIM_Base_SetConfig+0x52>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4a24      	ldr	r2, [pc, #144]	; (800a830 <TIM_Base_SetConfig+0xd8>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d003      	beq.n	800a7aa <TIM_Base_SetConfig+0x52>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4a23      	ldr	r2, [pc, #140]	; (800a834 <TIM_Base_SetConfig+0xdc>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d108      	bne.n	800a7bc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	695b      	ldr	r3, [r3, #20]
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	689a      	ldr	r2, [r3, #8]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4a12      	ldr	r2, [pc, #72]	; (800a82c <TIM_Base_SetConfig+0xd4>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d007      	beq.n	800a7f8 <TIM_Base_SetConfig+0xa0>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	4a11      	ldr	r2, [pc, #68]	; (800a830 <TIM_Base_SetConfig+0xd8>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d003      	beq.n	800a7f8 <TIM_Base_SetConfig+0xa0>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4a10      	ldr	r2, [pc, #64]	; (800a834 <TIM_Base_SetConfig+0xdc>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d103      	bne.n	800a800 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	691a      	ldr	r2, [r3, #16]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	691b      	ldr	r3, [r3, #16]
 800a80a:	f003 0301 	and.w	r3, r3, #1
 800a80e:	2b01      	cmp	r3, #1
 800a810:	d105      	bne.n	800a81e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	691b      	ldr	r3, [r3, #16]
 800a816:	f023 0201 	bic.w	r2, r3, #1
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	611a      	str	r2, [r3, #16]
  }
}
 800a81e:	bf00      	nop
 800a820:	3714      	adds	r7, #20
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr
 800a82a:	bf00      	nop
 800a82c:	40012c00 	.word	0x40012c00
 800a830:	40014400 	.word	0x40014400
 800a834:	40014800 	.word	0x40014800

0800a838 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a838:	b480      	push	{r7}
 800a83a:	b087      	sub	sp, #28
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a1b      	ldr	r3, [r3, #32]
 800a846:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6a1b      	ldr	r3, [r3, #32]
 800a84c:	f023 0201 	bic.w	r2, r3, #1
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	699b      	ldr	r3, [r3, #24]
 800a85e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a86a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f023 0303 	bic.w	r3, r3, #3
 800a872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	4313      	orrs	r3, r2
 800a87c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	f023 0302 	bic.w	r3, r3, #2
 800a884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	689b      	ldr	r3, [r3, #8]
 800a88a:	697a      	ldr	r2, [r7, #20]
 800a88c:	4313      	orrs	r3, r2
 800a88e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	4a24      	ldr	r2, [pc, #144]	; (800a924 <TIM_OC1_SetConfig+0xec>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d007      	beq.n	800a8a8 <TIM_OC1_SetConfig+0x70>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	4a23      	ldr	r2, [pc, #140]	; (800a928 <TIM_OC1_SetConfig+0xf0>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d003      	beq.n	800a8a8 <TIM_OC1_SetConfig+0x70>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	4a22      	ldr	r2, [pc, #136]	; (800a92c <TIM_OC1_SetConfig+0xf4>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d10c      	bne.n	800a8c2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	f023 0308 	bic.w	r3, r3, #8
 800a8ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	697a      	ldr	r2, [r7, #20]
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	f023 0304 	bic.w	r3, r3, #4
 800a8c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	4a17      	ldr	r2, [pc, #92]	; (800a924 <TIM_OC1_SetConfig+0xec>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d007      	beq.n	800a8da <TIM_OC1_SetConfig+0xa2>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	4a17      	ldr	r2, [pc, #92]	; (800a92c <TIM_OC1_SetConfig+0xf4>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d003      	beq.n	800a8da <TIM_OC1_SetConfig+0xa2>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4a14      	ldr	r2, [pc, #80]	; (800a928 <TIM_OC1_SetConfig+0xf0>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d111      	bne.n	800a8fe <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a8e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	695b      	ldr	r3, [r3, #20]
 800a8ee:	693a      	ldr	r2, [r7, #16]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	699b      	ldr	r3, [r3, #24]
 800a8f8:	693a      	ldr	r2, [r7, #16]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	693a      	ldr	r2, [r7, #16]
 800a902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	685a      	ldr	r2, [r3, #4]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	697a      	ldr	r2, [r7, #20]
 800a916:	621a      	str	r2, [r3, #32]
}
 800a918:	bf00      	nop
 800a91a:	371c      	adds	r7, #28
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr
 800a924:	40012c00 	.word	0x40012c00
 800a928:	40014800 	.word	0x40014800
 800a92c:	40014400 	.word	0x40014400

0800a930 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a930:	b480      	push	{r7}
 800a932:	b087      	sub	sp, #28
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6a1b      	ldr	r3, [r3, #32]
 800a93e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6a1b      	ldr	r3, [r3, #32]
 800a944:	f023 0210 	bic.w	r2, r3, #16
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	699b      	ldr	r3, [r3, #24]
 800a956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a95e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a96a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	021b      	lsls	r3, r3, #8
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	4313      	orrs	r3, r2
 800a976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	f023 0320 	bic.w	r3, r3, #32
 800a97e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	011b      	lsls	r3, r3, #4
 800a986:	697a      	ldr	r2, [r7, #20]
 800a988:	4313      	orrs	r3, r2
 800a98a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4a22      	ldr	r2, [pc, #136]	; (800aa18 <TIM_OC2_SetConfig+0xe8>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d10d      	bne.n	800a9b0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a99a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	011b      	lsls	r3, r3, #4
 800a9a2:	697a      	ldr	r2, [r7, #20]
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4a19      	ldr	r2, [pc, #100]	; (800aa18 <TIM_OC2_SetConfig+0xe8>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d007      	beq.n	800a9c8 <TIM_OC2_SetConfig+0x98>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4a18      	ldr	r2, [pc, #96]	; (800aa1c <TIM_OC2_SetConfig+0xec>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d003      	beq.n	800a9c8 <TIM_OC2_SetConfig+0x98>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	4a17      	ldr	r2, [pc, #92]	; (800aa20 <TIM_OC2_SetConfig+0xf0>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d113      	bne.n	800a9f0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a9ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a9d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	695b      	ldr	r3, [r3, #20]
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	693a      	ldr	r2, [r7, #16]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	699b      	ldr	r3, [r3, #24]
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	693a      	ldr	r2, [r7, #16]
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	693a      	ldr	r2, [r7, #16]
 800a9f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	685a      	ldr	r2, [r3, #4]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	697a      	ldr	r2, [r7, #20]
 800aa08:	621a      	str	r2, [r3, #32]
}
 800aa0a:	bf00      	nop
 800aa0c:	371c      	adds	r7, #28
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop
 800aa18:	40012c00 	.word	0x40012c00
 800aa1c:	40014400 	.word	0x40014400
 800aa20:	40014800 	.word	0x40014800

0800aa24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b087      	sub	sp, #28
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6a1b      	ldr	r3, [r3, #32]
 800aa32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a1b      	ldr	r3, [r3, #32]
 800aa38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	69db      	ldr	r3, [r3, #28]
 800aa4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f023 0303 	bic.w	r3, r3, #3
 800aa5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	4313      	orrs	r3, r2
 800aa68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	021b      	lsls	r3, r3, #8
 800aa78:	697a      	ldr	r2, [r7, #20]
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4a21      	ldr	r2, [pc, #132]	; (800ab08 <TIM_OC3_SetConfig+0xe4>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d10d      	bne.n	800aaa2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	021b      	lsls	r3, r3, #8
 800aa94:	697a      	ldr	r2, [r7, #20]
 800aa96:	4313      	orrs	r3, r2
 800aa98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aaa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4a18      	ldr	r2, [pc, #96]	; (800ab08 <TIM_OC3_SetConfig+0xe4>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d007      	beq.n	800aaba <TIM_OC3_SetConfig+0x96>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4a17      	ldr	r2, [pc, #92]	; (800ab0c <TIM_OC3_SetConfig+0xe8>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d003      	beq.n	800aaba <TIM_OC3_SetConfig+0x96>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	4a16      	ldr	r2, [pc, #88]	; (800ab10 <TIM_OC3_SetConfig+0xec>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d113      	bne.n	800aae2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	695b      	ldr	r3, [r3, #20]
 800aace:	011b      	lsls	r3, r3, #4
 800aad0:	693a      	ldr	r2, [r7, #16]
 800aad2:	4313      	orrs	r3, r2
 800aad4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	699b      	ldr	r3, [r3, #24]
 800aada:	011b      	lsls	r3, r3, #4
 800aadc:	693a      	ldr	r2, [r7, #16]
 800aade:	4313      	orrs	r3, r2
 800aae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	693a      	ldr	r2, [r7, #16]
 800aae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	68fa      	ldr	r2, [r7, #12]
 800aaec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	685a      	ldr	r2, [r3, #4]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	697a      	ldr	r2, [r7, #20]
 800aafa:	621a      	str	r2, [r3, #32]
}
 800aafc:	bf00      	nop
 800aafe:	371c      	adds	r7, #28
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr
 800ab08:	40012c00 	.word	0x40012c00
 800ab0c:	40014400 	.word	0x40014400
 800ab10:	40014800 	.word	0x40014800

0800ab14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b087      	sub	sp, #28
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6a1b      	ldr	r3, [r3, #32]
 800ab22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a1b      	ldr	r3, [r3, #32]
 800ab28:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	69db      	ldr	r3, [r3, #28]
 800ab3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	021b      	lsls	r3, r3, #8
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	689b      	ldr	r3, [r3, #8]
 800ab68:	031b      	lsls	r3, r3, #12
 800ab6a:	693a      	ldr	r2, [r7, #16]
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a14      	ldr	r2, [pc, #80]	; (800abc4 <TIM_OC4_SetConfig+0xb0>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d007      	beq.n	800ab88 <TIM_OC4_SetConfig+0x74>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a13      	ldr	r2, [pc, #76]	; (800abc8 <TIM_OC4_SetConfig+0xb4>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d003      	beq.n	800ab88 <TIM_OC4_SetConfig+0x74>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a12      	ldr	r2, [pc, #72]	; (800abcc <TIM_OC4_SetConfig+0xb8>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d109      	bne.n	800ab9c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	695b      	ldr	r3, [r3, #20]
 800ab94:	019b      	lsls	r3, r3, #6
 800ab96:	697a      	ldr	r2, [r7, #20]
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	697a      	ldr	r2, [r7, #20]
 800aba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	68fa      	ldr	r2, [r7, #12]
 800aba6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	685a      	ldr	r2, [r3, #4]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	693a      	ldr	r2, [r7, #16]
 800abb4:	621a      	str	r2, [r3, #32]
}
 800abb6:	bf00      	nop
 800abb8:	371c      	adds	r7, #28
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	40012c00 	.word	0x40012c00
 800abc8:	40014400 	.word	0x40014400
 800abcc:	40014800 	.word	0x40014800

0800abd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b087      	sub	sp, #28
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a1b      	ldr	r3, [r3, #32]
 800abde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6a1b      	ldr	r3, [r3, #32]
 800abe4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ac14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	041b      	lsls	r3, r3, #16
 800ac1c:	693a      	ldr	r2, [r7, #16]
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4a13      	ldr	r2, [pc, #76]	; (800ac74 <TIM_OC5_SetConfig+0xa4>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d007      	beq.n	800ac3a <TIM_OC5_SetConfig+0x6a>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4a12      	ldr	r2, [pc, #72]	; (800ac78 <TIM_OC5_SetConfig+0xa8>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d003      	beq.n	800ac3a <TIM_OC5_SetConfig+0x6a>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	4a11      	ldr	r2, [pc, #68]	; (800ac7c <TIM_OC5_SetConfig+0xac>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d109      	bne.n	800ac4e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	695b      	ldr	r3, [r3, #20]
 800ac46:	021b      	lsls	r3, r3, #8
 800ac48:	697a      	ldr	r2, [r7, #20]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	697a      	ldr	r2, [r7, #20]
 800ac52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	68fa      	ldr	r2, [r7, #12]
 800ac58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	685a      	ldr	r2, [r3, #4]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	693a      	ldr	r2, [r7, #16]
 800ac66:	621a      	str	r2, [r3, #32]
}
 800ac68:	bf00      	nop
 800ac6a:	371c      	adds	r7, #28
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr
 800ac74:	40012c00 	.word	0x40012c00
 800ac78:	40014400 	.word	0x40014400
 800ac7c:	40014800 	.word	0x40014800

0800ac80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b087      	sub	sp, #28
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6a1b      	ldr	r3, [r3, #32]
 800ac8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6a1b      	ldr	r3, [r3, #32]
 800ac94:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800acae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	021b      	lsls	r3, r3, #8
 800acba:	68fa      	ldr	r2, [r7, #12]
 800acbc:	4313      	orrs	r3, r2
 800acbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800acc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	689b      	ldr	r3, [r3, #8]
 800accc:	051b      	lsls	r3, r3, #20
 800acce:	693a      	ldr	r2, [r7, #16]
 800acd0:	4313      	orrs	r3, r2
 800acd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	4a14      	ldr	r2, [pc, #80]	; (800ad28 <TIM_OC6_SetConfig+0xa8>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d007      	beq.n	800acec <TIM_OC6_SetConfig+0x6c>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	4a13      	ldr	r2, [pc, #76]	; (800ad2c <TIM_OC6_SetConfig+0xac>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d003      	beq.n	800acec <TIM_OC6_SetConfig+0x6c>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	4a12      	ldr	r2, [pc, #72]	; (800ad30 <TIM_OC6_SetConfig+0xb0>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d109      	bne.n	800ad00 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800acf2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	695b      	ldr	r3, [r3, #20]
 800acf8:	029b      	lsls	r3, r3, #10
 800acfa:	697a      	ldr	r2, [r7, #20]
 800acfc:	4313      	orrs	r3, r2
 800acfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	697a      	ldr	r2, [r7, #20]
 800ad04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	68fa      	ldr	r2, [r7, #12]
 800ad0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	685a      	ldr	r2, [r3, #4]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	693a      	ldr	r2, [r7, #16]
 800ad18:	621a      	str	r2, [r3, #32]
}
 800ad1a:	bf00      	nop
 800ad1c:	371c      	adds	r7, #28
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr
 800ad26:	bf00      	nop
 800ad28:	40012c00 	.word	0x40012c00
 800ad2c:	40014400 	.word	0x40014400
 800ad30:	40014800 	.word	0x40014800

0800ad34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b087      	sub	sp, #28
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	6a1b      	ldr	r3, [r3, #32]
 800ad44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6a1b      	ldr	r3, [r3, #32]
 800ad4a:	f023 0201 	bic.w	r2, r3, #1
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	699b      	ldr	r3, [r3, #24]
 800ad56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	011b      	lsls	r3, r3, #4
 800ad64:	693a      	ldr	r2, [r7, #16]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	f023 030a 	bic.w	r3, r3, #10
 800ad70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad72:	697a      	ldr	r2, [r7, #20]
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	4313      	orrs	r3, r2
 800ad78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	693a      	ldr	r2, [r7, #16]
 800ad7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	697a      	ldr	r2, [r7, #20]
 800ad84:	621a      	str	r2, [r3, #32]
}
 800ad86:	bf00      	nop
 800ad88:	371c      	adds	r7, #28
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr

0800ad92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad92:	b480      	push	{r7}
 800ad94:	b087      	sub	sp, #28
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	60f8      	str	r0, [r7, #12]
 800ad9a:	60b9      	str	r1, [r7, #8]
 800ad9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	6a1b      	ldr	r3, [r3, #32]
 800ada2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6a1b      	ldr	r3, [r3, #32]
 800ada8:	f023 0210 	bic.w	r2, r3, #16
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	699b      	ldr	r3, [r3, #24]
 800adb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800adbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	031b      	lsls	r3, r3, #12
 800adc2:	693a      	ldr	r2, [r7, #16]
 800adc4:	4313      	orrs	r3, r2
 800adc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800adce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	011b      	lsls	r3, r3, #4
 800add4:	697a      	ldr	r2, [r7, #20]
 800add6:	4313      	orrs	r3, r2
 800add8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	693a      	ldr	r2, [r7, #16]
 800adde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	697a      	ldr	r2, [r7, #20]
 800ade4:	621a      	str	r2, [r3, #32]
}
 800ade6:	bf00      	nop
 800ade8:	371c      	adds	r7, #28
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr

0800adf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800adf2:	b480      	push	{r7}
 800adf4:	b085      	sub	sp, #20
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
 800adfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ae08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae0e:	683a      	ldr	r2, [r7, #0]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	4313      	orrs	r3, r2
 800ae14:	f043 0307 	orr.w	r3, r3, #7
 800ae18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	609a      	str	r2, [r3, #8]
}
 800ae20:	bf00      	nop
 800ae22:	3714      	adds	r7, #20
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b087      	sub	sp, #28
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
 800ae38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	021a      	lsls	r2, r3, #8
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	431a      	orrs	r2, r3
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	4313      	orrs	r3, r2
 800ae54:	697a      	ldr	r2, [r7, #20]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	697a      	ldr	r2, [r7, #20]
 800ae5e:	609a      	str	r2, [r3, #8]
}
 800ae60:	bf00      	nop
 800ae62:	371c      	adds	r7, #28
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b087      	sub	sp, #28
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	f003 031f 	and.w	r3, r3, #31
 800ae7e:	2201      	movs	r2, #1
 800ae80:	fa02 f303 	lsl.w	r3, r2, r3
 800ae84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	6a1a      	ldr	r2, [r3, #32]
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	43db      	mvns	r3, r3
 800ae8e:	401a      	ands	r2, r3
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	6a1a      	ldr	r2, [r3, #32]
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	f003 031f 	and.w	r3, r3, #31
 800ae9e:	6879      	ldr	r1, [r7, #4]
 800aea0:	fa01 f303 	lsl.w	r3, r1, r3
 800aea4:	431a      	orrs	r2, r3
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	621a      	str	r2, [r3, #32]
}
 800aeaa:	bf00      	nop
 800aeac:	371c      	adds	r7, #28
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr
	...

0800aeb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d101      	bne.n	800aed0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aecc:	2302      	movs	r3, #2
 800aece:	e04a      	b.n	800af66 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2201      	movs	r2, #1
 800aed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2202      	movs	r2, #2
 800aedc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	689b      	ldr	r3, [r3, #8]
 800aeee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a1f      	ldr	r2, [pc, #124]	; (800af74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d108      	bne.n	800af0c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800af00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	68fa      	ldr	r2, [r7, #12]
 800af08:	4313      	orrs	r3, r2
 800af0a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	68fa      	ldr	r2, [r7, #12]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	68fa      	ldr	r2, [r7, #12]
 800af24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a12      	ldr	r2, [pc, #72]	; (800af74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d004      	beq.n	800af3a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af38:	d10c      	bne.n	800af54 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	4313      	orrs	r3, r2
 800af4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	68ba      	ldr	r2, [r7, #8]
 800af52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2201      	movs	r2, #1
 800af58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	3714      	adds	r7, #20
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop
 800af74:	40012c00 	.word	0x40012c00

0800af78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800af78:	b480      	push	{r7}
 800af7a:	b085      	sub	sp, #20
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800af82:	2300      	movs	r3, #0
 800af84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d101      	bne.n	800af94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800af90:	2302      	movs	r3, #2
 800af92:	e06e      	b.n	800b072 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2201      	movs	r2, #1
 800af98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	68db      	ldr	r3, [r3, #12]
 800afa6:	4313      	orrs	r3, r2
 800afa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	4313      	orrs	r3, r2
 800afb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	4313      	orrs	r3, r2
 800afc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4313      	orrs	r3, r2
 800afd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	691b      	ldr	r3, [r3, #16]
 800afde:	4313      	orrs	r3, r2
 800afe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	695b      	ldr	r3, [r3, #20]
 800afec:	4313      	orrs	r3, r2
 800afee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800affa:	4313      	orrs	r3, r2
 800affc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	699b      	ldr	r3, [r3, #24]
 800b008:	041b      	lsls	r3, r3, #16
 800b00a:	4313      	orrs	r3, r2
 800b00c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	69db      	ldr	r3, [r3, #28]
 800b018:	4313      	orrs	r3, r2
 800b01a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a17      	ldr	r2, [pc, #92]	; (800b080 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d11c      	bne.n	800b060 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b030:	051b      	lsls	r3, r3, #20
 800b032:	4313      	orrs	r3, r2
 800b034:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	6a1b      	ldr	r3, [r3, #32]
 800b040:	4313      	orrs	r3, r2
 800b042:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04e:	4313      	orrs	r3, r2
 800b050:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b05c:	4313      	orrs	r3, r2
 800b05e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	68fa      	ldr	r2, [r7, #12]
 800b066:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b070:	2300      	movs	r3, #0
}
 800b072:	4618      	mov	r0, r3
 800b074:	3714      	adds	r7, #20
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr
 800b07e:	bf00      	nop
 800b080:	40012c00 	.word	0x40012c00

0800b084 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b08c:	bf00      	nop
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b0a0:	bf00      	nop
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b0b4:	bf00      	nop
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <LL_RCC_GetUSARTClockSource>:
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800b0c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b0cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	4013      	ands	r3, r2
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	370c      	adds	r7, #12
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr

0800b0e0 <LL_RCC_GetLPUARTClockSource>:
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800b0e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b0ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	4013      	ands	r3, r2
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	370c      	adds	r7, #12
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d101      	bne.n	800b112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b10e:	2301      	movs	r3, #1
 800b110:	e042      	b.n	800b198 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d106      	bne.n	800b12a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f7f9 fc8f 	bl	8004a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2224      	movs	r2, #36	; 0x24
 800b12e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f022 0201 	bic.w	r2, r2, #1
 800b140:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b146:	2b00      	cmp	r3, #0
 800b148:	d002      	beq.n	800b150 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 fe6e 	bl	800be2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 fc43 	bl	800b9dc <UART_SetConfig>
 800b156:	4603      	mov	r3, r0
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d101      	bne.n	800b160 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b15c:	2301      	movs	r3, #1
 800b15e:	e01b      	b.n	800b198 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	685a      	ldr	r2, [r3, #4]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b16e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	689a      	ldr	r2, [r3, #8]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b17e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f042 0201 	orr.w	r2, r2, #1
 800b18e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f000 feed 	bl	800bf70 <UART_CheckIdleState>
 800b196:	4603      	mov	r3, r0
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3708      	adds	r7, #8
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b08a      	sub	sp, #40	; 0x28
 800b1a4:	af02      	add	r7, sp, #8
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	603b      	str	r3, [r7, #0]
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1b6:	2b20      	cmp	r3, #32
 800b1b8:	d17b      	bne.n	800b2b2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d002      	beq.n	800b1c6 <HAL_UART_Transmit+0x26>
 800b1c0:	88fb      	ldrh	r3, [r7, #6]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d101      	bne.n	800b1ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e074      	b.n	800b2b4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2221      	movs	r2, #33	; 0x21
 800b1d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b1da:	f7f9 fe57 	bl	8004e8c <HAL_GetTick>
 800b1de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	88fa      	ldrh	r2, [r7, #6]
 800b1e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	88fa      	ldrh	r2, [r7, #6]
 800b1ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	689b      	ldr	r3, [r3, #8]
 800b1f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1f8:	d108      	bne.n	800b20c <HAL_UART_Transmit+0x6c>
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d104      	bne.n	800b20c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b202:	2300      	movs	r3, #0
 800b204:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	61bb      	str	r3, [r7, #24]
 800b20a:	e003      	b.n	800b214 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b210:	2300      	movs	r3, #0
 800b212:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b214:	e030      	b.n	800b278 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	9300      	str	r3, [sp, #0]
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	2200      	movs	r2, #0
 800b21e:	2180      	movs	r1, #128	; 0x80
 800b220:	68f8      	ldr	r0, [r7, #12]
 800b222:	f000 ff4f 	bl	800c0c4 <UART_WaitOnFlagUntilTimeout>
 800b226:	4603      	mov	r3, r0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d005      	beq.n	800b238 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2220      	movs	r2, #32
 800b230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b234:	2303      	movs	r3, #3
 800b236:	e03d      	b.n	800b2b4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d10b      	bne.n	800b256 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b23e:	69bb      	ldr	r3, [r7, #24]
 800b240:	881b      	ldrh	r3, [r3, #0]
 800b242:	461a      	mov	r2, r3
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b24c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b24e:	69bb      	ldr	r3, [r7, #24]
 800b250:	3302      	adds	r3, #2
 800b252:	61bb      	str	r3, [r7, #24]
 800b254:	e007      	b.n	800b266 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b256:	69fb      	ldr	r3, [r7, #28]
 800b258:	781a      	ldrb	r2, [r3, #0]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	3301      	adds	r3, #1
 800b264:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	3b01      	subs	r3, #1
 800b270:	b29a      	uxth	r2, r3
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b27e:	b29b      	uxth	r3, r3
 800b280:	2b00      	cmp	r3, #0
 800b282:	d1c8      	bne.n	800b216 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	9300      	str	r3, [sp, #0]
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	2200      	movs	r2, #0
 800b28c:	2140      	movs	r1, #64	; 0x40
 800b28e:	68f8      	ldr	r0, [r7, #12]
 800b290:	f000 ff18 	bl	800c0c4 <UART_WaitOnFlagUntilTimeout>
 800b294:	4603      	mov	r3, r0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d005      	beq.n	800b2a6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2220      	movs	r2, #32
 800b29e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	e006      	b.n	800b2b4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2220      	movs	r2, #32
 800b2aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	e000      	b.n	800b2b4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b2b2:	2302      	movs	r3, #2
  }
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3720      	adds	r7, #32
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b08a      	sub	sp, #40	; 0x28
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2d0:	2b20      	cmp	r3, #32
 800b2d2:	d137      	bne.n	800b344 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d002      	beq.n	800b2e0 <HAL_UART_Receive_IT+0x24>
 800b2da:	88fb      	ldrh	r3, [r7, #6]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d101      	bne.n	800b2e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	e030      	b.n	800b346 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	4a18      	ldr	r2, [pc, #96]	; (800b350 <HAL_UART_Receive_IT+0x94>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d01f      	beq.n	800b334 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d018      	beq.n	800b334 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	e853 3f00 	ldrex	r3, [r3]
 800b30e:	613b      	str	r3, [r7, #16]
   return(result);
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b316:	627b      	str	r3, [r7, #36]	; 0x24
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	461a      	mov	r2, r3
 800b31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b320:	623b      	str	r3, [r7, #32]
 800b322:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b324:	69f9      	ldr	r1, [r7, #28]
 800b326:	6a3a      	ldr	r2, [r7, #32]
 800b328:	e841 2300 	strex	r3, r2, [r1]
 800b32c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b32e:	69bb      	ldr	r3, [r7, #24]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d1e6      	bne.n	800b302 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b334:	88fb      	ldrh	r3, [r7, #6]
 800b336:	461a      	mov	r2, r3
 800b338:	68b9      	ldr	r1, [r7, #8]
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	f000 ff30 	bl	800c1a0 <UART_Start_Receive_IT>
 800b340:	4603      	mov	r3, r0
 800b342:	e000      	b.n	800b346 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b344:	2302      	movs	r3, #2
  }
}
 800b346:	4618      	mov	r0, r3
 800b348:	3728      	adds	r7, #40	; 0x28
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	40008000 	.word	0x40008000

0800b354 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b0ba      	sub	sp, #232	; 0xe8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	69db      	ldr	r3, [r3, #28]
 800b362:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b37a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b37e:	f640 030f 	movw	r3, #2063	; 0x80f
 800b382:	4013      	ands	r3, r2
 800b384:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b388:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d11b      	bne.n	800b3c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b394:	f003 0320 	and.w	r3, r3, #32
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d015      	beq.n	800b3c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b39c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3a0:	f003 0320 	and.w	r3, r3, #32
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d105      	bne.n	800b3b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b3a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d009      	beq.n	800b3c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	f000 82e3 	beq.w	800b984 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	4798      	blx	r3
      }
      return;
 800b3c6:	e2dd      	b.n	800b984 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b3c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	f000 8123 	beq.w	800b618 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b3d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b3d6:	4b8d      	ldr	r3, [pc, #564]	; (800b60c <HAL_UART_IRQHandler+0x2b8>)
 800b3d8:	4013      	ands	r3, r2
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d106      	bne.n	800b3ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b3de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b3e2:	4b8b      	ldr	r3, [pc, #556]	; (800b610 <HAL_UART_IRQHandler+0x2bc>)
 800b3e4:	4013      	ands	r3, r2
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	f000 8116 	beq.w	800b618 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b3ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3f0:	f003 0301 	and.w	r3, r3, #1
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d011      	beq.n	800b41c <HAL_UART_IRQHandler+0xc8>
 800b3f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b400:	2b00      	cmp	r3, #0
 800b402:	d00b      	beq.n	800b41c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	2201      	movs	r2, #1
 800b40a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b412:	f043 0201 	orr.w	r2, r3, #1
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b41c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b420:	f003 0302 	and.w	r3, r3, #2
 800b424:	2b00      	cmp	r3, #0
 800b426:	d011      	beq.n	800b44c <HAL_UART_IRQHandler+0xf8>
 800b428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b42c:	f003 0301 	and.w	r3, r3, #1
 800b430:	2b00      	cmp	r3, #0
 800b432:	d00b      	beq.n	800b44c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2202      	movs	r2, #2
 800b43a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b442:	f043 0204 	orr.w	r2, r3, #4
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b44c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b450:	f003 0304 	and.w	r3, r3, #4
 800b454:	2b00      	cmp	r3, #0
 800b456:	d011      	beq.n	800b47c <HAL_UART_IRQHandler+0x128>
 800b458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b45c:	f003 0301 	and.w	r3, r3, #1
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00b      	beq.n	800b47c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	2204      	movs	r2, #4
 800b46a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b472:	f043 0202 	orr.w	r2, r3, #2
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b47c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b480:	f003 0308 	and.w	r3, r3, #8
 800b484:	2b00      	cmp	r3, #0
 800b486:	d017      	beq.n	800b4b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b48c:	f003 0320 	and.w	r3, r3, #32
 800b490:	2b00      	cmp	r3, #0
 800b492:	d105      	bne.n	800b4a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b494:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b498:	4b5c      	ldr	r3, [pc, #368]	; (800b60c <HAL_UART_IRQHandler+0x2b8>)
 800b49a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d00b      	beq.n	800b4b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2208      	movs	r2, #8
 800b4a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4ae:	f043 0208 	orr.w	r2, r3, #8
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b4b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d012      	beq.n	800b4ea <HAL_UART_IRQHandler+0x196>
 800b4c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d00c      	beq.n	800b4ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b4d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4e0:	f043 0220 	orr.w	r2, r3, #32
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	f000 8249 	beq.w	800b988 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b4f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4fa:	f003 0320 	and.w	r3, r3, #32
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d013      	beq.n	800b52a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b506:	f003 0320 	and.w	r3, r3, #32
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d105      	bne.n	800b51a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b50e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b516:	2b00      	cmp	r3, #0
 800b518:	d007      	beq.n	800b52a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d003      	beq.n	800b52a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b530:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b53e:	2b40      	cmp	r3, #64	; 0x40
 800b540:	d005      	beq.n	800b54e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b546:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d054      	beq.n	800b5f8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 ff48 	bl	800c3e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b55e:	2b40      	cmp	r3, #64	; 0x40
 800b560:	d146      	bne.n	800b5f0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	3308      	adds	r3, #8
 800b568:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b570:	e853 3f00 	ldrex	r3, [r3]
 800b574:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b578:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b57c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b580:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	3308      	adds	r3, #8
 800b58a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b58e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b592:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b596:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b59a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b59e:	e841 2300 	strex	r3, r2, [r1]
 800b5a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b5a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d1d9      	bne.n	800b562 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d017      	beq.n	800b5e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5be:	4a15      	ldr	r2, [pc, #84]	; (800b614 <HAL_UART_IRQHandler+0x2c0>)
 800b5c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7fa fe01 	bl	80061d0 <HAL_DMA_Abort_IT>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d019      	beq.n	800b608 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5dc:	687a      	ldr	r2, [r7, #4]
 800b5de:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b5e2:	4610      	mov	r0, r2
 800b5e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5e6:	e00f      	b.n	800b608 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 f9e1 	bl	800b9b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5ee:	e00b      	b.n	800b608 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 f9dd 	bl	800b9b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5f6:	e007      	b.n	800b608 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 f9d9 	bl	800b9b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2200      	movs	r2, #0
 800b602:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b606:	e1bf      	b.n	800b988 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b608:	bf00      	nop
    return;
 800b60a:	e1bd      	b.n	800b988 <HAL_UART_IRQHandler+0x634>
 800b60c:	10000001 	.word	0x10000001
 800b610:	04000120 	.word	0x04000120
 800b614:	0800c4b1 	.word	0x0800c4b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	f040 8153 	bne.w	800b8c8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b626:	f003 0310 	and.w	r3, r3, #16
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	f000 814c 	beq.w	800b8c8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b634:	f003 0310 	and.w	r3, r3, #16
 800b638:	2b00      	cmp	r3, #0
 800b63a:	f000 8145 	beq.w	800b8c8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	2210      	movs	r2, #16
 800b644:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b650:	2b40      	cmp	r3, #64	; 0x40
 800b652:	f040 80bb 	bne.w	800b7cc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b664:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f000 818f 	beq.w	800b98c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b674:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b678:	429a      	cmp	r2, r3
 800b67a:	f080 8187 	bcs.w	800b98c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b684:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f003 0320 	and.w	r3, r3, #32
 800b696:	2b00      	cmp	r3, #0
 800b698:	f040 8087 	bne.w	800b7aa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b6a8:	e853 3f00 	ldrex	r3, [r3]
 800b6ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b6b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b6b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b6b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b6ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b6d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b6d6:	e841 2300 	strex	r3, r2, [r1]
 800b6da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b6de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d1da      	bne.n	800b69c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	3308      	adds	r3, #8
 800b6ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6f0:	e853 3f00 	ldrex	r3, [r3]
 800b6f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b6f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b6f8:	f023 0301 	bic.w	r3, r3, #1
 800b6fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	3308      	adds	r3, #8
 800b706:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b70a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b70e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b710:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b712:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b716:	e841 2300 	strex	r3, r2, [r1]
 800b71a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b71c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d1e1      	bne.n	800b6e6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	3308      	adds	r3, #8
 800b728:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b72a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b72c:	e853 3f00 	ldrex	r3, [r3]
 800b730:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b738:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3308      	adds	r3, #8
 800b742:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b746:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b748:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b74a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b74c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b74e:	e841 2300 	strex	r3, r2, [r1]
 800b752:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b756:	2b00      	cmp	r3, #0
 800b758:	d1e3      	bne.n	800b722 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2220      	movs	r2, #32
 800b75e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2200      	movs	r2, #0
 800b766:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b76e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b770:	e853 3f00 	ldrex	r3, [r3]
 800b774:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b778:	f023 0310 	bic.w	r3, r3, #16
 800b77c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	461a      	mov	r2, r3
 800b786:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b78a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b78c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b78e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b790:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b792:	e841 2300 	strex	r3, r2, [r1]
 800b796:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d1e4      	bne.n	800b768 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7fa fcb4 	bl	8006112 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2202      	movs	r2, #2
 800b7ae:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	1ad3      	subs	r3, r2, r3
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 f8fd 	bl	800b9c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b7ca:	e0df      	b.n	800b98c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	1ad3      	subs	r3, r2, r3
 800b7dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b7e6:	b29b      	uxth	r3, r3
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	f000 80d1 	beq.w	800b990 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800b7ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	f000 80cc 	beq.w	800b990 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b800:	e853 3f00 	ldrex	r3, [r3]
 800b804:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b808:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b80c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	461a      	mov	r2, r3
 800b816:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b81a:	647b      	str	r3, [r7, #68]	; 0x44
 800b81c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b81e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b820:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b822:	e841 2300 	strex	r3, r2, [r1]
 800b826:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d1e4      	bne.n	800b7f8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	3308      	adds	r3, #8
 800b834:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b838:	e853 3f00 	ldrex	r3, [r3]
 800b83c:	623b      	str	r3, [r7, #32]
   return(result);
 800b83e:	6a3b      	ldr	r3, [r7, #32]
 800b840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b844:	f023 0301 	bic.w	r3, r3, #1
 800b848:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	3308      	adds	r3, #8
 800b852:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b856:	633a      	str	r2, [r7, #48]	; 0x30
 800b858:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b85a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b85c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b85e:	e841 2300 	strex	r3, r2, [r1]
 800b862:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b866:	2b00      	cmp	r3, #0
 800b868:	d1e1      	bne.n	800b82e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2220      	movs	r2, #32
 800b86e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2200      	movs	r2, #0
 800b876:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2200      	movs	r2, #0
 800b87c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	e853 3f00 	ldrex	r3, [r3]
 800b88a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f023 0310 	bic.w	r3, r3, #16
 800b892:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	461a      	mov	r2, r3
 800b89c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b8a0:	61fb      	str	r3, [r7, #28]
 800b8a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8a4:	69b9      	ldr	r1, [r7, #24]
 800b8a6:	69fa      	ldr	r2, [r7, #28]
 800b8a8:	e841 2300 	strex	r3, r2, [r1]
 800b8ac:	617b      	str	r3, [r7, #20]
   return(result);
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d1e4      	bne.n	800b87e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2202      	movs	r2, #2
 800b8b8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b8ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b8be:	4619      	mov	r1, r3
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 f87f 	bl	800b9c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b8c6:	e063      	b.n	800b990 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b8c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d00e      	beq.n	800b8f2 <HAL_UART_IRQHandler+0x59e>
 800b8d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d008      	beq.n	800b8f2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b8e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f001 fb3e 	bl	800cf6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b8f0:	e051      	b.n	800b996 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b8f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d014      	beq.n	800b928 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b8fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b906:	2b00      	cmp	r3, #0
 800b908:	d105      	bne.n	800b916 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b90a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b90e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b912:	2b00      	cmp	r3, #0
 800b914:	d008      	beq.n	800b928 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d03a      	beq.n	800b994 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	4798      	blx	r3
    }
    return;
 800b926:	e035      	b.n	800b994 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b92c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b930:	2b00      	cmp	r3, #0
 800b932:	d009      	beq.n	800b948 <HAL_UART_IRQHandler+0x5f4>
 800b934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d003      	beq.n	800b948 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 fdcb 	bl	800c4dc <UART_EndTransmit_IT>
    return;
 800b946:	e026      	b.n	800b996 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b94c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b950:	2b00      	cmp	r3, #0
 800b952:	d009      	beq.n	800b968 <HAL_UART_IRQHandler+0x614>
 800b954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b958:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d003      	beq.n	800b968 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f001 fb17 	bl	800cf94 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b966:	e016      	b.n	800b996 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b96c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b970:	2b00      	cmp	r3, #0
 800b972:	d010      	beq.n	800b996 <HAL_UART_IRQHandler+0x642>
 800b974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	da0c      	bge.n	800b996 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f001 faff 	bl	800cf80 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b982:	e008      	b.n	800b996 <HAL_UART_IRQHandler+0x642>
      return;
 800b984:	bf00      	nop
 800b986:	e006      	b.n	800b996 <HAL_UART_IRQHandler+0x642>
    return;
 800b988:	bf00      	nop
 800b98a:	e004      	b.n	800b996 <HAL_UART_IRQHandler+0x642>
      return;
 800b98c:	bf00      	nop
 800b98e:	e002      	b.n	800b996 <HAL_UART_IRQHandler+0x642>
      return;
 800b990:	bf00      	nop
 800b992:	e000      	b.n	800b996 <HAL_UART_IRQHandler+0x642>
    return;
 800b994:	bf00      	nop
  }
}
 800b996:	37e8      	adds	r7, #232	; 0xe8
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b083      	sub	sp, #12
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b9a4:	bf00      	nop
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b9b8:	bf00      	nop
 800b9ba:	370c      	adds	r7, #12
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr

0800b9c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b083      	sub	sp, #12
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b9d0:	bf00      	nop
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b9dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b9e0:	b08c      	sub	sp, #48	; 0x30
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	689a      	ldr	r2, [r3, #8]
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	691b      	ldr	r3, [r3, #16]
 800b9f4:	431a      	orrs	r2, r3
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	695b      	ldr	r3, [r3, #20]
 800b9fa:	431a      	orrs	r2, r3
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	69db      	ldr	r3, [r3, #28]
 800ba00:	4313      	orrs	r3, r2
 800ba02:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	681a      	ldr	r2, [r3, #0]
 800ba0a:	4baf      	ldr	r3, [pc, #700]	; (800bcc8 <UART_SetConfig+0x2ec>)
 800ba0c:	4013      	ands	r3, r2
 800ba0e:	697a      	ldr	r2, [r7, #20]
 800ba10:	6812      	ldr	r2, [r2, #0]
 800ba12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba14:	430b      	orrs	r3, r1
 800ba16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	68da      	ldr	r2, [r3, #12]
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	430a      	orrs	r2, r1
 800ba2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	699b      	ldr	r3, [r3, #24]
 800ba32:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4aa4      	ldr	r2, [pc, #656]	; (800bccc <UART_SetConfig+0x2f0>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d004      	beq.n	800ba48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	6a1b      	ldr	r3, [r3, #32]
 800ba42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba44:	4313      	orrs	r3, r2
 800ba46:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	689b      	ldr	r3, [r3, #8]
 800ba4e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ba52:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ba56:	697a      	ldr	r2, [r7, #20]
 800ba58:	6812      	ldr	r2, [r2, #0]
 800ba5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba5c:	430b      	orrs	r3, r1
 800ba5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba66:	f023 010f 	bic.w	r1, r3, #15
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	430a      	orrs	r2, r1
 800ba74:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4a95      	ldr	r2, [pc, #596]	; (800bcd0 <UART_SetConfig+0x2f4>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d125      	bne.n	800bacc <UART_SetConfig+0xf0>
 800ba80:	2003      	movs	r0, #3
 800ba82:	f7ff fb1d 	bl	800b0c0 <LL_RCC_GetUSARTClockSource>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b03      	cmp	r3, #3
 800ba8a:	d81b      	bhi.n	800bac4 <UART_SetConfig+0xe8>
 800ba8c:	a201      	add	r2, pc, #4	; (adr r2, 800ba94 <UART_SetConfig+0xb8>)
 800ba8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba92:	bf00      	nop
 800ba94:	0800baa5 	.word	0x0800baa5
 800ba98:	0800bab5 	.word	0x0800bab5
 800ba9c:	0800baad 	.word	0x0800baad
 800baa0:	0800babd 	.word	0x0800babd
 800baa4:	2301      	movs	r3, #1
 800baa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baaa:	e042      	b.n	800bb32 <UART_SetConfig+0x156>
 800baac:	2302      	movs	r3, #2
 800baae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bab2:	e03e      	b.n	800bb32 <UART_SetConfig+0x156>
 800bab4:	2304      	movs	r3, #4
 800bab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baba:	e03a      	b.n	800bb32 <UART_SetConfig+0x156>
 800babc:	2308      	movs	r3, #8
 800babe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bac2:	e036      	b.n	800bb32 <UART_SetConfig+0x156>
 800bac4:	2310      	movs	r3, #16
 800bac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baca:	e032      	b.n	800bb32 <UART_SetConfig+0x156>
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4a7e      	ldr	r2, [pc, #504]	; (800bccc <UART_SetConfig+0x2f0>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d12a      	bne.n	800bb2c <UART_SetConfig+0x150>
 800bad6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800bada:	f7ff fb01 	bl	800b0e0 <LL_RCC_GetLPUARTClockSource>
 800bade:	4603      	mov	r3, r0
 800bae0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bae4:	d01a      	beq.n	800bb1c <UART_SetConfig+0x140>
 800bae6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800baea:	d81b      	bhi.n	800bb24 <UART_SetConfig+0x148>
 800baec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800baf0:	d00c      	beq.n	800bb0c <UART_SetConfig+0x130>
 800baf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800baf6:	d815      	bhi.n	800bb24 <UART_SetConfig+0x148>
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d003      	beq.n	800bb04 <UART_SetConfig+0x128>
 800bafc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb00:	d008      	beq.n	800bb14 <UART_SetConfig+0x138>
 800bb02:	e00f      	b.n	800bb24 <UART_SetConfig+0x148>
 800bb04:	2300      	movs	r3, #0
 800bb06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb0a:	e012      	b.n	800bb32 <UART_SetConfig+0x156>
 800bb0c:	2302      	movs	r3, #2
 800bb0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb12:	e00e      	b.n	800bb32 <UART_SetConfig+0x156>
 800bb14:	2304      	movs	r3, #4
 800bb16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb1a:	e00a      	b.n	800bb32 <UART_SetConfig+0x156>
 800bb1c:	2308      	movs	r3, #8
 800bb1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb22:	e006      	b.n	800bb32 <UART_SetConfig+0x156>
 800bb24:	2310      	movs	r3, #16
 800bb26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb2a:	e002      	b.n	800bb32 <UART_SetConfig+0x156>
 800bb2c:	2310      	movs	r3, #16
 800bb2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a65      	ldr	r2, [pc, #404]	; (800bccc <UART_SetConfig+0x2f0>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	f040 8097 	bne.w	800bc6c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bb3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bb42:	2b08      	cmp	r3, #8
 800bb44:	d823      	bhi.n	800bb8e <UART_SetConfig+0x1b2>
 800bb46:	a201      	add	r2, pc, #4	; (adr r2, 800bb4c <UART_SetConfig+0x170>)
 800bb48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb4c:	0800bb71 	.word	0x0800bb71
 800bb50:	0800bb8f 	.word	0x0800bb8f
 800bb54:	0800bb79 	.word	0x0800bb79
 800bb58:	0800bb8f 	.word	0x0800bb8f
 800bb5c:	0800bb7f 	.word	0x0800bb7f
 800bb60:	0800bb8f 	.word	0x0800bb8f
 800bb64:	0800bb8f 	.word	0x0800bb8f
 800bb68:	0800bb8f 	.word	0x0800bb8f
 800bb6c:	0800bb87 	.word	0x0800bb87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb70:	f7fc faa4 	bl	80080bc <HAL_RCC_GetPCLK1Freq>
 800bb74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bb76:	e010      	b.n	800bb9a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb78:	4b56      	ldr	r3, [pc, #344]	; (800bcd4 <UART_SetConfig+0x2f8>)
 800bb7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bb7c:	e00d      	b.n	800bb9a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb7e:	f7fc fa1d 	bl	8007fbc <HAL_RCC_GetSysClockFreq>
 800bb82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bb84:	e009      	b.n	800bb9a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bb8c:	e005      	b.n	800bb9a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bb92:	2301      	movs	r3, #1
 800bb94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bb98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	f000 812b 	beq.w	800bdf8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba6:	4a4c      	ldr	r2, [pc, #304]	; (800bcd8 <UART_SetConfig+0x2fc>)
 800bba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbac:	461a      	mov	r2, r3
 800bbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbb4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	685a      	ldr	r2, [r3, #4]
 800bbba:	4613      	mov	r3, r2
 800bbbc:	005b      	lsls	r3, r3, #1
 800bbbe:	4413      	add	r3, r2
 800bbc0:	69ba      	ldr	r2, [r7, #24]
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d305      	bcc.n	800bbd2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbcc:	69ba      	ldr	r2, [r7, #24]
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d903      	bls.n	800bbda <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bbd8:	e10e      	b.n	800bdf8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbdc:	2200      	movs	r2, #0
 800bbde:	60bb      	str	r3, [r7, #8]
 800bbe0:	60fa      	str	r2, [r7, #12]
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe6:	4a3c      	ldr	r2, [pc, #240]	; (800bcd8 <UART_SetConfig+0x2fc>)
 800bbe8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	2200      	movs	r2, #0
 800bbf0:	603b      	str	r3, [r7, #0]
 800bbf2:	607a      	str	r2, [r7, #4]
 800bbf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbf8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bbfc:	f7f4 fe1e 	bl	800083c <__aeabi_uldivmod>
 800bc00:	4602      	mov	r2, r0
 800bc02:	460b      	mov	r3, r1
 800bc04:	4610      	mov	r0, r2
 800bc06:	4619      	mov	r1, r3
 800bc08:	f04f 0200 	mov.w	r2, #0
 800bc0c:	f04f 0300 	mov.w	r3, #0
 800bc10:	020b      	lsls	r3, r1, #8
 800bc12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bc16:	0202      	lsls	r2, r0, #8
 800bc18:	6979      	ldr	r1, [r7, #20]
 800bc1a:	6849      	ldr	r1, [r1, #4]
 800bc1c:	0849      	lsrs	r1, r1, #1
 800bc1e:	2000      	movs	r0, #0
 800bc20:	460c      	mov	r4, r1
 800bc22:	4605      	mov	r5, r0
 800bc24:	eb12 0804 	adds.w	r8, r2, r4
 800bc28:	eb43 0905 	adc.w	r9, r3, r5
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	469a      	mov	sl, r3
 800bc34:	4693      	mov	fp, r2
 800bc36:	4652      	mov	r2, sl
 800bc38:	465b      	mov	r3, fp
 800bc3a:	4640      	mov	r0, r8
 800bc3c:	4649      	mov	r1, r9
 800bc3e:	f7f4 fdfd 	bl	800083c <__aeabi_uldivmod>
 800bc42:	4602      	mov	r2, r0
 800bc44:	460b      	mov	r3, r1
 800bc46:	4613      	mov	r3, r2
 800bc48:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bc4a:	6a3b      	ldr	r3, [r7, #32]
 800bc4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc50:	d308      	bcc.n	800bc64 <UART_SetConfig+0x288>
 800bc52:	6a3b      	ldr	r3, [r7, #32]
 800bc54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc58:	d204      	bcs.n	800bc64 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	6a3a      	ldr	r2, [r7, #32]
 800bc60:	60da      	str	r2, [r3, #12]
 800bc62:	e0c9      	b.n	800bdf8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800bc64:	2301      	movs	r3, #1
 800bc66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bc6a:	e0c5      	b.n	800bdf8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	69db      	ldr	r3, [r3, #28]
 800bc70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc74:	d16d      	bne.n	800bd52 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800bc76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc7a:	3b01      	subs	r3, #1
 800bc7c:	2b07      	cmp	r3, #7
 800bc7e:	d82d      	bhi.n	800bcdc <UART_SetConfig+0x300>
 800bc80:	a201      	add	r2, pc, #4	; (adr r2, 800bc88 <UART_SetConfig+0x2ac>)
 800bc82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc86:	bf00      	nop
 800bc88:	0800bca9 	.word	0x0800bca9
 800bc8c:	0800bcb1 	.word	0x0800bcb1
 800bc90:	0800bcdd 	.word	0x0800bcdd
 800bc94:	0800bcb7 	.word	0x0800bcb7
 800bc98:	0800bcdd 	.word	0x0800bcdd
 800bc9c:	0800bcdd 	.word	0x0800bcdd
 800bca0:	0800bcdd 	.word	0x0800bcdd
 800bca4:	0800bcbf 	.word	0x0800bcbf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bca8:	f7fc fa1e 	bl	80080e8 <HAL_RCC_GetPCLK2Freq>
 800bcac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bcae:	e01b      	b.n	800bce8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bcb0:	4b08      	ldr	r3, [pc, #32]	; (800bcd4 <UART_SetConfig+0x2f8>)
 800bcb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bcb4:	e018      	b.n	800bce8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bcb6:	f7fc f981 	bl	8007fbc <HAL_RCC_GetSysClockFreq>
 800bcba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bcbc:	e014      	b.n	800bce8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bcbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bcc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bcc4:	e010      	b.n	800bce8 <UART_SetConfig+0x30c>
 800bcc6:	bf00      	nop
 800bcc8:	cfff69f3 	.word	0xcfff69f3
 800bccc:	40008000 	.word	0x40008000
 800bcd0:	40013800 	.word	0x40013800
 800bcd4:	00f42400 	.word	0x00f42400
 800bcd8:	08015b94 	.word	0x08015b94
      default:
        pclk = 0U;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bce0:	2301      	movs	r3, #1
 800bce2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bce6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	f000 8084 	beq.w	800bdf8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf4:	4a4b      	ldr	r2, [pc, #300]	; (800be24 <UART_SetConfig+0x448>)
 800bcf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfe:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd02:	005a      	lsls	r2, r3, #1
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	085b      	lsrs	r3, r3, #1
 800bd0a:	441a      	add	r2, r3
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd14:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd16:	6a3b      	ldr	r3, [r7, #32]
 800bd18:	2b0f      	cmp	r3, #15
 800bd1a:	d916      	bls.n	800bd4a <UART_SetConfig+0x36e>
 800bd1c:	6a3b      	ldr	r3, [r7, #32]
 800bd1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd22:	d212      	bcs.n	800bd4a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd24:	6a3b      	ldr	r3, [r7, #32]
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	f023 030f 	bic.w	r3, r3, #15
 800bd2c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd2e:	6a3b      	ldr	r3, [r7, #32]
 800bd30:	085b      	lsrs	r3, r3, #1
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	f003 0307 	and.w	r3, r3, #7
 800bd38:	b29a      	uxth	r2, r3
 800bd3a:	8bfb      	ldrh	r3, [r7, #30]
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	8bfa      	ldrh	r2, [r7, #30]
 800bd46:	60da      	str	r2, [r3, #12]
 800bd48:	e056      	b.n	800bdf8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bd50:	e052      	b.n	800bdf8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bd52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd56:	3b01      	subs	r3, #1
 800bd58:	2b07      	cmp	r3, #7
 800bd5a:	d822      	bhi.n	800bda2 <UART_SetConfig+0x3c6>
 800bd5c:	a201      	add	r2, pc, #4	; (adr r2, 800bd64 <UART_SetConfig+0x388>)
 800bd5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd62:	bf00      	nop
 800bd64:	0800bd85 	.word	0x0800bd85
 800bd68:	0800bd8d 	.word	0x0800bd8d
 800bd6c:	0800bda3 	.word	0x0800bda3
 800bd70:	0800bd93 	.word	0x0800bd93
 800bd74:	0800bda3 	.word	0x0800bda3
 800bd78:	0800bda3 	.word	0x0800bda3
 800bd7c:	0800bda3 	.word	0x0800bda3
 800bd80:	0800bd9b 	.word	0x0800bd9b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd84:	f7fc f9b0 	bl	80080e8 <HAL_RCC_GetPCLK2Freq>
 800bd88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd8a:	e010      	b.n	800bdae <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd8c:	4b26      	ldr	r3, [pc, #152]	; (800be28 <UART_SetConfig+0x44c>)
 800bd8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd90:	e00d      	b.n	800bdae <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd92:	f7fc f913 	bl	8007fbc <HAL_RCC_GetSysClockFreq>
 800bd96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd98:	e009      	b.n	800bdae <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bda0:	e005      	b.n	800bdae <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800bda2:	2300      	movs	r3, #0
 800bda4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bda6:	2301      	movs	r3, #1
 800bda8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bdac:	bf00      	nop
    }

    if (pclk != 0U)
 800bdae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d021      	beq.n	800bdf8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb8:	4a1a      	ldr	r2, [pc, #104]	; (800be24 <UART_SetConfig+0x448>)
 800bdba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc2:	fbb3 f2f2 	udiv	r2, r3, r2
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	085b      	lsrs	r3, r3, #1
 800bdcc:	441a      	add	r2, r3
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdd6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdd8:	6a3b      	ldr	r3, [r7, #32]
 800bdda:	2b0f      	cmp	r3, #15
 800bddc:	d909      	bls.n	800bdf2 <UART_SetConfig+0x416>
 800bdde:	6a3b      	ldr	r3, [r7, #32]
 800bde0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bde4:	d205      	bcs.n	800bdf2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bde6:	6a3b      	ldr	r3, [r7, #32]
 800bde8:	b29a      	uxth	r2, r3
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	60da      	str	r2, [r3, #12]
 800bdf0:	e002      	b.n	800bdf8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	2201      	movs	r2, #1
 800be04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	2200      	movs	r2, #0
 800be0c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	2200      	movs	r2, #0
 800be12:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800be14:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3730      	adds	r7, #48	; 0x30
 800be1c:	46bd      	mov	sp, r7
 800be1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be22:	bf00      	nop
 800be24:	08015b94 	.word	0x08015b94
 800be28:	00f42400 	.word	0x00f42400

0800be2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be38:	f003 0308 	and.w	r3, r3, #8
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d00a      	beq.n	800be56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	430a      	orrs	r2, r1
 800be54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be5a:	f003 0301 	and.w	r3, r3, #1
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d00a      	beq.n	800be78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	430a      	orrs	r2, r1
 800be76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be7c:	f003 0302 	and.w	r3, r3, #2
 800be80:	2b00      	cmp	r3, #0
 800be82:	d00a      	beq.n	800be9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	430a      	orrs	r2, r1
 800be98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be9e:	f003 0304 	and.w	r3, r3, #4
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d00a      	beq.n	800bebc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	685b      	ldr	r3, [r3, #4]
 800beac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	430a      	orrs	r2, r1
 800beba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bec0:	f003 0310 	and.w	r3, r3, #16
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d00a      	beq.n	800bede <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	689b      	ldr	r3, [r3, #8]
 800bece:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	430a      	orrs	r2, r1
 800bedc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bee2:	f003 0320 	and.w	r3, r3, #32
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d00a      	beq.n	800bf00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	689b      	ldr	r3, [r3, #8]
 800bef0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	430a      	orrs	r2, r1
 800befe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d01a      	beq.n	800bf42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	430a      	orrs	r2, r1
 800bf20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf2a:	d10a      	bne.n	800bf42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	430a      	orrs	r2, r1
 800bf40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d00a      	beq.n	800bf64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	430a      	orrs	r2, r1
 800bf62:	605a      	str	r2, [r3, #4]
  }
}
 800bf64:	bf00      	nop
 800bf66:	370c      	adds	r7, #12
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr

0800bf70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b098      	sub	sp, #96	; 0x60
 800bf74:	af02      	add	r7, sp, #8
 800bf76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf80:	f7f8 ff84 	bl	8004e8c <HAL_GetTick>
 800bf84:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f003 0308 	and.w	r3, r3, #8
 800bf90:	2b08      	cmp	r3, #8
 800bf92:	d12f      	bne.n	800bff4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bf98:	9300      	str	r3, [sp, #0]
 800bf9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 f88e 	bl	800c0c4 <UART_WaitOnFlagUntilTimeout>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d022      	beq.n	800bff4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb6:	e853 3f00 	ldrex	r3, [r3]
 800bfba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bfbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfc2:	653b      	str	r3, [r7, #80]	; 0x50
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	461a      	mov	r2, r3
 800bfca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfcc:	647b      	str	r3, [r7, #68]	; 0x44
 800bfce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bfd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bfd4:	e841 2300 	strex	r3, r2, [r1]
 800bfd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bfda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d1e6      	bne.n	800bfae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2220      	movs	r2, #32
 800bfe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bff0:	2303      	movs	r3, #3
 800bff2:	e063      	b.n	800c0bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f003 0304 	and.w	r3, r3, #4
 800bffe:	2b04      	cmp	r3, #4
 800c000:	d149      	bne.n	800c096 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c002:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c006:	9300      	str	r3, [sp, #0]
 800c008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c00a:	2200      	movs	r2, #0
 800c00c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 f857 	bl	800c0c4 <UART_WaitOnFlagUntilTimeout>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d03c      	beq.n	800c096 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c024:	e853 3f00 	ldrex	r3, [r3]
 800c028:	623b      	str	r3, [r7, #32]
   return(result);
 800c02a:	6a3b      	ldr	r3, [r7, #32]
 800c02c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c030:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	461a      	mov	r2, r3
 800c038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c03a:	633b      	str	r3, [r7, #48]	; 0x30
 800c03c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c03e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c042:	e841 2300 	strex	r3, r2, [r1]
 800c046:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d1e6      	bne.n	800c01c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	3308      	adds	r3, #8
 800c054:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	e853 3f00 	ldrex	r3, [r3]
 800c05c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f023 0301 	bic.w	r3, r3, #1
 800c064:	64bb      	str	r3, [r7, #72]	; 0x48
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	3308      	adds	r3, #8
 800c06c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c06e:	61fa      	str	r2, [r7, #28]
 800c070:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c072:	69b9      	ldr	r1, [r7, #24]
 800c074:	69fa      	ldr	r2, [r7, #28]
 800c076:	e841 2300 	strex	r3, r2, [r1]
 800c07a:	617b      	str	r3, [r7, #20]
   return(result);
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d1e5      	bne.n	800c04e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2220      	movs	r2, #32
 800c086:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2200      	movs	r2, #0
 800c08e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c092:	2303      	movs	r3, #3
 800c094:	e012      	b.n	800c0bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2220      	movs	r2, #32
 800c09a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2220      	movs	r2, #32
 800c0a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c0ba:	2300      	movs	r3, #0
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3758      	adds	r7, #88	; 0x58
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	60f8      	str	r0, [r7, #12]
 800c0cc:	60b9      	str	r1, [r7, #8]
 800c0ce:	603b      	str	r3, [r7, #0]
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0d4:	e04f      	b.n	800c176 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0d6:	69bb      	ldr	r3, [r7, #24]
 800c0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0dc:	d04b      	beq.n	800c176 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0de:	f7f8 fed5 	bl	8004e8c <HAL_GetTick>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	1ad3      	subs	r3, r2, r3
 800c0e8:	69ba      	ldr	r2, [r7, #24]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d302      	bcc.n	800c0f4 <UART_WaitOnFlagUntilTimeout+0x30>
 800c0ee:	69bb      	ldr	r3, [r7, #24]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d101      	bne.n	800c0f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c0f4:	2303      	movs	r3, #3
 800c0f6:	e04e      	b.n	800c196 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f003 0304 	and.w	r3, r3, #4
 800c102:	2b00      	cmp	r3, #0
 800c104:	d037      	beq.n	800c176 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	2b80      	cmp	r3, #128	; 0x80
 800c10a:	d034      	beq.n	800c176 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	2b40      	cmp	r3, #64	; 0x40
 800c110:	d031      	beq.n	800c176 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	69db      	ldr	r3, [r3, #28]
 800c118:	f003 0308 	and.w	r3, r3, #8
 800c11c:	2b08      	cmp	r3, #8
 800c11e:	d110      	bne.n	800c142 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	2208      	movs	r2, #8
 800c126:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c128:	68f8      	ldr	r0, [r7, #12]
 800c12a:	f000 f95b 	bl	800c3e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2208      	movs	r2, #8
 800c132:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	2200      	movs	r2, #0
 800c13a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800c13e:	2301      	movs	r3, #1
 800c140:	e029      	b.n	800c196 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	69db      	ldr	r3, [r3, #28]
 800c148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c14c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c150:	d111      	bne.n	800c176 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c15a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c15c:	68f8      	ldr	r0, [r7, #12]
 800c15e:	f000 f941 	bl	800c3e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2220      	movs	r2, #32
 800c166:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2200      	movs	r2, #0
 800c16e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c172:	2303      	movs	r3, #3
 800c174:	e00f      	b.n	800c196 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	69da      	ldr	r2, [r3, #28]
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	4013      	ands	r3, r2
 800c180:	68ba      	ldr	r2, [r7, #8]
 800c182:	429a      	cmp	r2, r3
 800c184:	bf0c      	ite	eq
 800c186:	2301      	moveq	r3, #1
 800c188:	2300      	movne	r3, #0
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	461a      	mov	r2, r3
 800c18e:	79fb      	ldrb	r3, [r7, #7]
 800c190:	429a      	cmp	r2, r3
 800c192:	d0a0      	beq.n	800c0d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c194:	2300      	movs	r3, #0
}
 800c196:	4618      	mov	r0, r3
 800c198:	3710      	adds	r7, #16
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
	...

0800c1a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b0a3      	sub	sp, #140	; 0x8c
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	4613      	mov	r3, r2
 800c1ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	68ba      	ldr	r2, [r7, #8]
 800c1b2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	88fa      	ldrh	r2, [r7, #6]
 800c1b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	88fa      	ldrh	r2, [r7, #6]
 800c1c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	689b      	ldr	r3, [r3, #8]
 800c1ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1d2:	d10e      	bne.n	800c1f2 <UART_Start_Receive_IT+0x52>
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	691b      	ldr	r3, [r3, #16]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d105      	bne.n	800c1e8 <UART_Start_Receive_IT+0x48>
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c1e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c1e6:	e02d      	b.n	800c244 <UART_Start_Receive_IT+0xa4>
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	22ff      	movs	r2, #255	; 0xff
 800c1ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c1f0:	e028      	b.n	800c244 <UART_Start_Receive_IT+0xa4>
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	689b      	ldr	r3, [r3, #8]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d10d      	bne.n	800c216 <UART_Start_Receive_IT+0x76>
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	691b      	ldr	r3, [r3, #16]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d104      	bne.n	800c20c <UART_Start_Receive_IT+0x6c>
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	22ff      	movs	r2, #255	; 0xff
 800c206:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c20a:	e01b      	b.n	800c244 <UART_Start_Receive_IT+0xa4>
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	227f      	movs	r2, #127	; 0x7f
 800c210:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c214:	e016      	b.n	800c244 <UART_Start_Receive_IT+0xa4>
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	689b      	ldr	r3, [r3, #8]
 800c21a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c21e:	d10d      	bne.n	800c23c <UART_Start_Receive_IT+0x9c>
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	691b      	ldr	r3, [r3, #16]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d104      	bne.n	800c232 <UART_Start_Receive_IT+0x92>
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	227f      	movs	r2, #127	; 0x7f
 800c22c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c230:	e008      	b.n	800c244 <UART_Start_Receive_IT+0xa4>
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	223f      	movs	r2, #63	; 0x3f
 800c236:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c23a:	e003      	b.n	800c244 <UART_Start_Receive_IT+0xa4>
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2200      	movs	r2, #0
 800c240:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2200      	movs	r2, #0
 800c248:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2222      	movs	r2, #34	; 0x22
 800c250:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	3308      	adds	r3, #8
 800c25a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c25c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c25e:	e853 3f00 	ldrex	r3, [r3]
 800c262:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c264:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c266:	f043 0301 	orr.w	r3, r3, #1
 800c26a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	3308      	adds	r3, #8
 800c274:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c278:	673a      	str	r2, [r7, #112]	; 0x70
 800c27a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c27c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c27e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c280:	e841 2300 	strex	r3, r2, [r1]
 800c284:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800c286:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d1e3      	bne.n	800c254 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c294:	d14f      	bne.n	800c336 <UART_Start_Receive_IT+0x196>
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c29c:	88fa      	ldrh	r2, [r7, #6]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d349      	bcc.n	800c336 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	689b      	ldr	r3, [r3, #8]
 800c2a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2aa:	d107      	bne.n	800c2bc <UART_Start_Receive_IT+0x11c>
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	691b      	ldr	r3, [r3, #16]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d103      	bne.n	800c2bc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	4a47      	ldr	r2, [pc, #284]	; (800c3d4 <UART_Start_Receive_IT+0x234>)
 800c2b8:	675a      	str	r2, [r3, #116]	; 0x74
 800c2ba:	e002      	b.n	800c2c2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	4a46      	ldr	r2, [pc, #280]	; (800c3d8 <UART_Start_Receive_IT+0x238>)
 800c2c0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	691b      	ldr	r3, [r3, #16]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d01a      	beq.n	800c300 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2d2:	e853 3f00 	ldrex	r3, [r3]
 800c2d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c2d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c2ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2ee:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c2f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c2f4:	e841 2300 	strex	r3, r2, [r1]
 800c2f8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c2fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d1e4      	bne.n	800c2ca <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	3308      	adds	r3, #8
 800c306:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c30a:	e853 3f00 	ldrex	r3, [r3]
 800c30e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c316:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	3308      	adds	r3, #8
 800c31e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c320:	64ba      	str	r2, [r7, #72]	; 0x48
 800c322:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c324:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c326:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c328:	e841 2300 	strex	r3, r2, [r1]
 800c32c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c32e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c330:	2b00      	cmp	r3, #0
 800c332:	d1e5      	bne.n	800c300 <UART_Start_Receive_IT+0x160>
 800c334:	e046      	b.n	800c3c4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	689b      	ldr	r3, [r3, #8]
 800c33a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c33e:	d107      	bne.n	800c350 <UART_Start_Receive_IT+0x1b0>
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	691b      	ldr	r3, [r3, #16]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d103      	bne.n	800c350 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	4a24      	ldr	r2, [pc, #144]	; (800c3dc <UART_Start_Receive_IT+0x23c>)
 800c34c:	675a      	str	r2, [r3, #116]	; 0x74
 800c34e:	e002      	b.n	800c356 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	4a23      	ldr	r2, [pc, #140]	; (800c3e0 <UART_Start_Receive_IT+0x240>)
 800c354:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	691b      	ldr	r3, [r3, #16]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d019      	beq.n	800c392 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c366:	e853 3f00 	ldrex	r3, [r3]
 800c36a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c372:	677b      	str	r3, [r7, #116]	; 0x74
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	461a      	mov	r2, r3
 800c37a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c37c:	637b      	str	r3, [r7, #52]	; 0x34
 800c37e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c380:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c384:	e841 2300 	strex	r3, r2, [r1]
 800c388:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d1e6      	bne.n	800c35e <UART_Start_Receive_IT+0x1be>
 800c390:	e018      	b.n	800c3c4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	e853 3f00 	ldrex	r3, [r3]
 800c39e:	613b      	str	r3, [r7, #16]
   return(result);
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	f043 0320 	orr.w	r3, r3, #32
 800c3a6:	67bb      	str	r3, [r7, #120]	; 0x78
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3b0:	623b      	str	r3, [r7, #32]
 800c3b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b4:	69f9      	ldr	r1, [r7, #28]
 800c3b6:	6a3a      	ldr	r2, [r7, #32]
 800c3b8:	e841 2300 	strex	r3, r2, [r1]
 800c3bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800c3be:	69bb      	ldr	r3, [r7, #24]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d1e6      	bne.n	800c392 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800c3c4:	2300      	movs	r3, #0
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	378c      	adds	r7, #140	; 0x8c
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr
 800c3d2:	bf00      	nop
 800c3d4:	0800cc05 	.word	0x0800cc05
 800c3d8:	0800c8a5 	.word	0x0800c8a5
 800c3dc:	0800c6ed 	.word	0x0800c6ed
 800c3e0:	0800c535 	.word	0x0800c535

0800c3e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b095      	sub	sp, #84	; 0x54
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3f4:	e853 3f00 	ldrex	r3, [r3]
 800c3f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c400:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	461a      	mov	r2, r3
 800c408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c40a:	643b      	str	r3, [r7, #64]	; 0x40
 800c40c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c40e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c410:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c412:	e841 2300 	strex	r3, r2, [r1]
 800c416:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d1e6      	bne.n	800c3ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	3308      	adds	r3, #8
 800c424:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c426:	6a3b      	ldr	r3, [r7, #32]
 800c428:	e853 3f00 	ldrex	r3, [r3]
 800c42c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c434:	f023 0301 	bic.w	r3, r3, #1
 800c438:	64bb      	str	r3, [r7, #72]	; 0x48
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	3308      	adds	r3, #8
 800c440:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c442:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c444:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c446:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c44a:	e841 2300 	strex	r3, r2, [r1]
 800c44e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c452:	2b00      	cmp	r3, #0
 800c454:	d1e3      	bne.n	800c41e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	d118      	bne.n	800c490 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	e853 3f00 	ldrex	r3, [r3]
 800c46a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	f023 0310 	bic.w	r3, r3, #16
 800c472:	647b      	str	r3, [r7, #68]	; 0x44
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	461a      	mov	r2, r3
 800c47a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c47c:	61bb      	str	r3, [r7, #24]
 800c47e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c480:	6979      	ldr	r1, [r7, #20]
 800c482:	69ba      	ldr	r2, [r7, #24]
 800c484:	e841 2300 	strex	r3, r2, [r1]
 800c488:	613b      	str	r3, [r7, #16]
   return(result);
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d1e6      	bne.n	800c45e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2220      	movs	r2, #32
 800c494:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2200      	movs	r2, #0
 800c49c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c4a4:	bf00      	nop
 800c4a6:	3754      	adds	r7, #84	; 0x54
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c4ce:	68f8      	ldr	r0, [r7, #12]
 800c4d0:	f7ff fa6e 	bl	800b9b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4d4:	bf00      	nop
 800c4d6:	3710      	adds	r7, #16
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b088      	sub	sp, #32
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	e853 3f00 	ldrex	r3, [r3]
 800c4f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4f8:	61fb      	str	r3, [r7, #28]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	461a      	mov	r2, r3
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	61bb      	str	r3, [r7, #24]
 800c504:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c506:	6979      	ldr	r1, [r7, #20]
 800c508:	69ba      	ldr	r2, [r7, #24]
 800c50a:	e841 2300 	strex	r3, r2, [r1]
 800c50e:	613b      	str	r3, [r7, #16]
   return(result);
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d1e6      	bne.n	800c4e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2220      	movs	r2, #32
 800c51a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2200      	movs	r2, #0
 800c522:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f7ff fa39 	bl	800b99c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c52a:	bf00      	nop
 800c52c:	3720      	adds	r7, #32
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
	...

0800c534 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b09c      	sub	sp, #112	; 0x70
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c542:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c54c:	2b22      	cmp	r3, #34	; 0x22
 800c54e:	f040 80be 	bne.w	800c6ce <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c558:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c55c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c560:	b2d9      	uxtb	r1, r3
 800c562:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c566:	b2da      	uxtb	r2, r3
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c56c:	400a      	ands	r2, r1
 800c56e:	b2d2      	uxtb	r2, r2
 800c570:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c576:	1c5a      	adds	r2, r3, #1
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c582:	b29b      	uxth	r3, r3
 800c584:	3b01      	subs	r3, #1
 800c586:	b29a      	uxth	r2, r3
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c594:	b29b      	uxth	r3, r3
 800c596:	2b00      	cmp	r3, #0
 800c598:	f040 80a1 	bne.w	800c6de <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5a4:	e853 3f00 	ldrex	r3, [r3]
 800c5a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c5aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c5b0:	66bb      	str	r3, [r7, #104]	; 0x68
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c5ba:	65bb      	str	r3, [r7, #88]	; 0x58
 800c5bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c5c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c5c2:	e841 2300 	strex	r3, r2, [r1]
 800c5c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c5c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d1e6      	bne.n	800c59c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	3308      	adds	r3, #8
 800c5d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d8:	e853 3f00 	ldrex	r3, [r3]
 800c5dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c5de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5e0:	f023 0301 	bic.w	r3, r3, #1
 800c5e4:	667b      	str	r3, [r7, #100]	; 0x64
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	3308      	adds	r3, #8
 800c5ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c5ee:	647a      	str	r2, [r7, #68]	; 0x44
 800c5f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c5f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5f6:	e841 2300 	strex	r3, r2, [r1]
 800c5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c5fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d1e5      	bne.n	800c5ce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2220      	movs	r2, #32
 800c606:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2200      	movs	r2, #0
 800c60e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2200      	movs	r2, #0
 800c614:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	4a33      	ldr	r2, [pc, #204]	; (800c6e8 <UART_RxISR_8BIT+0x1b4>)
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d01f      	beq.n	800c660 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	685b      	ldr	r3, [r3, #4]
 800c626:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d018      	beq.n	800c660 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c636:	e853 3f00 	ldrex	r3, [r3]
 800c63a:	623b      	str	r3, [r7, #32]
   return(result);
 800c63c:	6a3b      	ldr	r3, [r7, #32]
 800c63e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c642:	663b      	str	r3, [r7, #96]	; 0x60
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	461a      	mov	r2, r3
 800c64a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c64c:	633b      	str	r3, [r7, #48]	; 0x30
 800c64e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c650:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c654:	e841 2300 	strex	r3, r2, [r1]
 800c658:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d1e6      	bne.n	800c62e <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c664:	2b01      	cmp	r3, #1
 800c666:	d12e      	bne.n	800c6c6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2200      	movs	r2, #0
 800c66c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	e853 3f00 	ldrex	r3, [r3]
 800c67a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f023 0310 	bic.w	r3, r3, #16
 800c682:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	461a      	mov	r2, r3
 800c68a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c68c:	61fb      	str	r3, [r7, #28]
 800c68e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c690:	69b9      	ldr	r1, [r7, #24]
 800c692:	69fa      	ldr	r2, [r7, #28]
 800c694:	e841 2300 	strex	r3, r2, [r1]
 800c698:	617b      	str	r3, [r7, #20]
   return(result);
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d1e6      	bne.n	800c66e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	69db      	ldr	r3, [r3, #28]
 800c6a6:	f003 0310 	and.w	r3, r3, #16
 800c6aa:	2b10      	cmp	r3, #16
 800c6ac:	d103      	bne.n	800c6b6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	2210      	movs	r2, #16
 800c6b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c6bc:	4619      	mov	r1, r3
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f7ff f980 	bl	800b9c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c6c4:	e00b      	b.n	800c6de <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f7f6 ff2e 	bl	8003528 <HAL_UART_RxCpltCallback>
}
 800c6cc:	e007      	b.n	800c6de <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	699a      	ldr	r2, [r3, #24]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f042 0208 	orr.w	r2, r2, #8
 800c6dc:	619a      	str	r2, [r3, #24]
}
 800c6de:	bf00      	nop
 800c6e0:	3770      	adds	r7, #112	; 0x70
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	40008000 	.word	0x40008000

0800c6ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b09c      	sub	sp, #112	; 0x70
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c6fa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c704:	2b22      	cmp	r3, #34	; 0x22
 800c706:	f040 80be 	bne.w	800c886 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c710:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c718:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c71a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800c71e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c722:	4013      	ands	r3, r2
 800c724:	b29a      	uxth	r2, r3
 800c726:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c728:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c72e:	1c9a      	adds	r2, r3, #2
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	3b01      	subs	r3, #1
 800c73e:	b29a      	uxth	r2, r3
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c74c:	b29b      	uxth	r3, r3
 800c74e:	2b00      	cmp	r3, #0
 800c750:	f040 80a1 	bne.w	800c896 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c75c:	e853 3f00 	ldrex	r3, [r3]
 800c760:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c764:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c768:	667b      	str	r3, [r7, #100]	; 0x64
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	461a      	mov	r2, r3
 800c770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c772:	657b      	str	r3, [r7, #84]	; 0x54
 800c774:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c776:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c778:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c77a:	e841 2300 	strex	r3, r2, [r1]
 800c77e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c782:	2b00      	cmp	r3, #0
 800c784:	d1e6      	bne.n	800c754 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	3308      	adds	r3, #8
 800c78c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c78e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c790:	e853 3f00 	ldrex	r3, [r3]
 800c794:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c798:	f023 0301 	bic.w	r3, r3, #1
 800c79c:	663b      	str	r3, [r7, #96]	; 0x60
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	3308      	adds	r3, #8
 800c7a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c7a6:	643a      	str	r2, [r7, #64]	; 0x40
 800c7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c7ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c7ae:	e841 2300 	strex	r3, r2, [r1]
 800c7b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d1e5      	bne.n	800c786 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2220      	movs	r2, #32
 800c7be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	4a33      	ldr	r2, [pc, #204]	; (800c8a0 <UART_RxISR_16BIT+0x1b4>)
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d01f      	beq.n	800c818 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d018      	beq.n	800c818 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ec:	6a3b      	ldr	r3, [r7, #32]
 800c7ee:	e853 3f00 	ldrex	r3, [r3]
 800c7f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c7fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	461a      	mov	r2, r3
 800c802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c804:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c806:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c808:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c80a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c80c:	e841 2300 	strex	r3, r2, [r1]
 800c810:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c814:	2b00      	cmp	r3, #0
 800c816:	d1e6      	bne.n	800c7e6 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d12e      	bne.n	800c87e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2200      	movs	r2, #0
 800c824:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	e853 3f00 	ldrex	r3, [r3]
 800c832:	60bb      	str	r3, [r7, #8]
   return(result);
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	f023 0310 	bic.w	r3, r3, #16
 800c83a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	461a      	mov	r2, r3
 800c842:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c844:	61bb      	str	r3, [r7, #24]
 800c846:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c848:	6979      	ldr	r1, [r7, #20]
 800c84a:	69ba      	ldr	r2, [r7, #24]
 800c84c:	e841 2300 	strex	r3, r2, [r1]
 800c850:	613b      	str	r3, [r7, #16]
   return(result);
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d1e6      	bne.n	800c826 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	69db      	ldr	r3, [r3, #28]
 800c85e:	f003 0310 	and.w	r3, r3, #16
 800c862:	2b10      	cmp	r3, #16
 800c864:	d103      	bne.n	800c86e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	2210      	movs	r2, #16
 800c86c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c874:	4619      	mov	r1, r3
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f7ff f8a4 	bl	800b9c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c87c:	e00b      	b.n	800c896 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f7f6 fe52 	bl	8003528 <HAL_UART_RxCpltCallback>
}
 800c884:	e007      	b.n	800c896 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	699a      	ldr	r2, [r3, #24]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f042 0208 	orr.w	r2, r2, #8
 800c894:	619a      	str	r2, [r3, #24]
}
 800c896:	bf00      	nop
 800c898:	3770      	adds	r7, #112	; 0x70
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	40008000 	.word	0x40008000

0800c8a4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b0ac      	sub	sp, #176	; 0xb0
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c8b2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	69db      	ldr	r3, [r3, #28]
 800c8bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8da:	2b22      	cmp	r3, #34	; 0x22
 800c8dc:	f040 8182 	bne.w	800cbe4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c8e6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c8ea:	e125      	b.n	800cb38 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c8f6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800c8fa:	b2d9      	uxtb	r1, r3
 800c8fc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c900:	b2da      	uxtb	r2, r3
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c906:	400a      	ands	r2, r1
 800c908:	b2d2      	uxtb	r2, r2
 800c90a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c910:	1c5a      	adds	r2, r3, #1
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c91c:	b29b      	uxth	r3, r3
 800c91e:	3b01      	subs	r3, #1
 800c920:	b29a      	uxth	r2, r3
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	69db      	ldr	r3, [r3, #28]
 800c92e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c932:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c936:	f003 0307 	and.w	r3, r3, #7
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d053      	beq.n	800c9e6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c93e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c942:	f003 0301 	and.w	r3, r3, #1
 800c946:	2b00      	cmp	r3, #0
 800c948:	d011      	beq.n	800c96e <UART_RxISR_8BIT_FIFOEN+0xca>
 800c94a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c94e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c952:	2b00      	cmp	r3, #0
 800c954:	d00b      	beq.n	800c96e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	2201      	movs	r2, #1
 800c95c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c964:	f043 0201 	orr.w	r2, r3, #1
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c96e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c972:	f003 0302 	and.w	r3, r3, #2
 800c976:	2b00      	cmp	r3, #0
 800c978:	d011      	beq.n	800c99e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c97a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c97e:	f003 0301 	and.w	r3, r3, #1
 800c982:	2b00      	cmp	r3, #0
 800c984:	d00b      	beq.n	800c99e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	2202      	movs	r2, #2
 800c98c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c994:	f043 0204 	orr.w	r2, r3, #4
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c99e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c9a2:	f003 0304 	and.w	r3, r3, #4
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d011      	beq.n	800c9ce <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c9aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c9ae:	f003 0301 	and.w	r3, r3, #1
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d00b      	beq.n	800c9ce <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	2204      	movs	r2, #4
 800c9bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9c4:	f043 0202 	orr.w	r2, r3, #2
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d006      	beq.n	800c9e6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f7fe ffe9 	bl	800b9b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	f040 80a2 	bne.w	800cb38 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c9fc:	e853 3f00 	ldrex	r3, [r3]
 800ca00:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800ca02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ca08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	461a      	mov	r2, r3
 800ca12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ca16:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ca18:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca1a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ca1c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ca1e:	e841 2300 	strex	r3, r2, [r1]
 800ca22:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800ca24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d1e4      	bne.n	800c9f4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	3308      	adds	r3, #8
 800ca30:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca34:	e853 3f00 	ldrex	r3, [r3]
 800ca38:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800ca3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca40:	f023 0301 	bic.w	r3, r3, #1
 800ca44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	3308      	adds	r3, #8
 800ca4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ca52:	66ba      	str	r2, [r7, #104]	; 0x68
 800ca54:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca56:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ca58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ca5a:	e841 2300 	strex	r3, r2, [r1]
 800ca5e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800ca60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d1e1      	bne.n	800ca2a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2220      	movs	r2, #32
 800ca6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2200      	movs	r2, #0
 800ca72:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2200      	movs	r2, #0
 800ca78:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	4a5f      	ldr	r2, [pc, #380]	; (800cbfc <UART_RxISR_8BIT_FIFOEN+0x358>)
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d021      	beq.n	800cac8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	685b      	ldr	r3, [r3, #4]
 800ca8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d01a      	beq.n	800cac8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca9a:	e853 3f00 	ldrex	r3, [r3]
 800ca9e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800caa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800caa2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800caa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	461a      	mov	r2, r3
 800cab0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cab4:	657b      	str	r3, [r7, #84]	; 0x54
 800cab6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cab8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800caba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cabc:	e841 2300 	strex	r3, r2, [r1]
 800cac0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d1e4      	bne.n	800ca92 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d130      	bne.n	800cb32 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2200      	movs	r2, #0
 800cad4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cadc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cade:	e853 3f00 	ldrex	r3, [r3]
 800cae2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae6:	f023 0310 	bic.w	r3, r3, #16
 800caea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	461a      	mov	r2, r3
 800caf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800caf8:	643b      	str	r3, [r7, #64]	; 0x40
 800cafa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cafc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cafe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cb00:	e841 2300 	strex	r3, r2, [r1]
 800cb04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d1e4      	bne.n	800cad6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	69db      	ldr	r3, [r3, #28]
 800cb12:	f003 0310 	and.w	r3, r3, #16
 800cb16:	2b10      	cmp	r3, #16
 800cb18:	d103      	bne.n	800cb22 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	2210      	movs	r2, #16
 800cb20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cb28:	4619      	mov	r1, r3
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f7fe ff4a 	bl	800b9c4 <HAL_UARTEx_RxEventCallback>
 800cb30:	e002      	b.n	800cb38 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f7f6 fcf8 	bl	8003528 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cb38:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d006      	beq.n	800cb4e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800cb40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cb44:	f003 0320 	and.w	r3, r3, #32
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	f47f aecf 	bne.w	800c8ec <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb54:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cb58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d049      	beq.n	800cbf4 <UART_RxISR_8BIT_FIFOEN+0x350>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cb66:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d242      	bcs.n	800cbf4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	3308      	adds	r3, #8
 800cb74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb76:	6a3b      	ldr	r3, [r7, #32]
 800cb78:	e853 3f00 	ldrex	r3, [r3]
 800cb7c:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb7e:	69fb      	ldr	r3, [r7, #28]
 800cb80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	3308      	adds	r3, #8
 800cb8e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800cb92:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cb94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb9a:	e841 2300 	strex	r3, r2, [r1]
 800cb9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d1e3      	bne.n	800cb6e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	4a15      	ldr	r2, [pc, #84]	; (800cc00 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800cbaa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	e853 3f00 	ldrex	r3, [r3]
 800cbb8:	60bb      	str	r3, [r7, #8]
   return(result);
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	f043 0320 	orr.w	r3, r3, #32
 800cbc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	461a      	mov	r2, r3
 800cbca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cbce:	61bb      	str	r3, [r7, #24]
 800cbd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbd2:	6979      	ldr	r1, [r7, #20]
 800cbd4:	69ba      	ldr	r2, [r7, #24]
 800cbd6:	e841 2300 	strex	r3, r2, [r1]
 800cbda:	613b      	str	r3, [r7, #16]
   return(result);
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d1e4      	bne.n	800cbac <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cbe2:	e007      	b.n	800cbf4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	699a      	ldr	r2, [r3, #24]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f042 0208 	orr.w	r2, r2, #8
 800cbf2:	619a      	str	r2, [r3, #24]
}
 800cbf4:	bf00      	nop
 800cbf6:	37b0      	adds	r7, #176	; 0xb0
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	40008000 	.word	0x40008000
 800cc00:	0800c535 	.word	0x0800c535

0800cc04 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b0ae      	sub	sp, #184	; 0xb8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cc12:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	69db      	ldr	r3, [r3, #28]
 800cc1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	689b      	ldr	r3, [r3, #8]
 800cc30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc3a:	2b22      	cmp	r3, #34	; 0x22
 800cc3c:	f040 8186 	bne.w	800cf4c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cc46:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cc4a:	e129      	b.n	800cea0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc52:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800cc5e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800cc62:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800cc66:	4013      	ands	r3, r2
 800cc68:	b29a      	uxth	r2, r3
 800cc6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cc6e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc74:	1c9a      	adds	r2, r3, #2
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	3b01      	subs	r3, #1
 800cc84:	b29a      	uxth	r2, r3
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	69db      	ldr	r3, [r3, #28]
 800cc92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cc96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cc9a:	f003 0307 	and.w	r3, r3, #7
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d053      	beq.n	800cd4a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cca2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cca6:	f003 0301 	and.w	r3, r3, #1
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d011      	beq.n	800ccd2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800ccae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ccb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d00b      	beq.n	800ccd2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccc8:	f043 0201 	orr.w	r2, r3, #1
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ccd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ccd6:	f003 0302 	and.w	r3, r3, #2
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d011      	beq.n	800cd02 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ccde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cce2:	f003 0301 	and.w	r3, r3, #1
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d00b      	beq.n	800cd02 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2202      	movs	r2, #2
 800ccf0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccf8:	f043 0204 	orr.w	r2, r3, #4
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cd02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cd06:	f003 0304 	and.w	r3, r3, #4
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d011      	beq.n	800cd32 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800cd0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cd12:	f003 0301 	and.w	r3, r3, #1
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d00b      	beq.n	800cd32 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	2204      	movs	r2, #4
 800cd20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd28:	f043 0202 	orr.w	r2, r3, #2
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d006      	beq.n	800cd4a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f7fe fe37 	bl	800b9b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2200      	movs	r2, #0
 800cd46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cd50:	b29b      	uxth	r3, r3
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	f040 80a4 	bne.w	800cea0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd60:	e853 3f00 	ldrex	r3, [r3]
 800cd64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cd66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	461a      	mov	r2, r3
 800cd76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cd7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cd7e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cd82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cd86:	e841 2300 	strex	r3, r2, [r1]
 800cd8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cd8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d1e2      	bne.n	800cd58 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	3308      	adds	r3, #8
 800cd98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd9c:	e853 3f00 	ldrex	r3, [r3]
 800cda0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cda2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cda4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cda8:	f023 0301 	bic.w	r3, r3, #1
 800cdac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	3308      	adds	r3, #8
 800cdb6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800cdba:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cdbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cdc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cdc2:	e841 2300 	strex	r3, r2, [r1]
 800cdc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cdc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d1e1      	bne.n	800cd92 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2220      	movs	r2, #32
 800cdd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2200      	movs	r2, #0
 800cde0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	4a5f      	ldr	r2, [pc, #380]	; (800cf64 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800cde8:	4293      	cmp	r3, r2
 800cdea:	d021      	beq.n	800ce30 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d01a      	beq.n	800ce30 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce02:	e853 3f00 	ldrex	r3, [r3]
 800ce06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ce08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ce0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	461a      	mov	r2, r3
 800ce18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ce1c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ce1e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ce22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ce24:	e841 2300 	strex	r3, r2, [r1]
 800ce28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ce2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d1e4      	bne.n	800cdfa <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce34:	2b01      	cmp	r3, #1
 800ce36:	d130      	bne.n	800ce9a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce46:	e853 3f00 	ldrex	r3, [r3]
 800ce4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ce4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce4e:	f023 0310 	bic.w	r3, r3, #16
 800ce52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	461a      	mov	r2, r3
 800ce5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ce60:	647b      	str	r3, [r7, #68]	; 0x44
 800ce62:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ce66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce68:	e841 2300 	strex	r3, r2, [r1]
 800ce6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ce6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d1e4      	bne.n	800ce3e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	69db      	ldr	r3, [r3, #28]
 800ce7a:	f003 0310 	and.w	r3, r3, #16
 800ce7e:	2b10      	cmp	r3, #16
 800ce80:	d103      	bne.n	800ce8a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	2210      	movs	r2, #16
 800ce88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ce90:	4619      	mov	r1, r3
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f7fe fd96 	bl	800b9c4 <HAL_UARTEx_RxEventCallback>
 800ce98:	e002      	b.n	800cea0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f7f6 fb44 	bl	8003528 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cea0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d006      	beq.n	800ceb6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800cea8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ceac:	f003 0320 	and.w	r3, r3, #32
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f47f aecb 	bne.w	800cc4c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cebc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cec0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d049      	beq.n	800cf5c <UART_RxISR_16BIT_FIFOEN+0x358>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cece:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d242      	bcs.n	800cf5c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	3308      	adds	r3, #8
 800cedc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee0:	e853 3f00 	ldrex	r3, [r3]
 800cee4:	623b      	str	r3, [r7, #32]
   return(result);
 800cee6:	6a3b      	ldr	r3, [r7, #32]
 800cee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ceec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	3308      	adds	r3, #8
 800cef6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800cefa:	633a      	str	r2, [r7, #48]	; 0x30
 800cefc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cefe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf02:	e841 2300 	strex	r3, r2, [r1]
 800cf06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cf08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d1e3      	bne.n	800ced6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	4a15      	ldr	r2, [pc, #84]	; (800cf68 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800cf12:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	e853 3f00 	ldrex	r3, [r3]
 800cf20:	60fb      	str	r3, [r7, #12]
   return(result);
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	f043 0320 	orr.w	r3, r3, #32
 800cf28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	461a      	mov	r2, r3
 800cf32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cf36:	61fb      	str	r3, [r7, #28]
 800cf38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf3a:	69b9      	ldr	r1, [r7, #24]
 800cf3c:	69fa      	ldr	r2, [r7, #28]
 800cf3e:	e841 2300 	strex	r3, r2, [r1]
 800cf42:	617b      	str	r3, [r7, #20]
   return(result);
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d1e4      	bne.n	800cf14 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cf4a:	e007      	b.n	800cf5c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	699a      	ldr	r2, [r3, #24]
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f042 0208 	orr.w	r2, r2, #8
 800cf5a:	619a      	str	r2, [r3, #24]
}
 800cf5c:	bf00      	nop
 800cf5e:	37b8      	adds	r7, #184	; 0xb8
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}
 800cf64:	40008000 	.word	0x40008000
 800cf68:	0800c6ed 	.word	0x0800c6ed

0800cf6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b083      	sub	sp, #12
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cf74:	bf00      	nop
 800cf76:	370c      	adds	r7, #12
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr

0800cf80 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cf88:	bf00      	nop
 800cf8a:	370c      	adds	r7, #12
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr

0800cf94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cf9c:	bf00      	nop
 800cf9e:	370c      	adds	r7, #12
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b085      	sub	sp, #20
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cfb6:	2b01      	cmp	r3, #1
 800cfb8:	d101      	bne.n	800cfbe <HAL_UARTEx_DisableFifoMode+0x16>
 800cfba:	2302      	movs	r3, #2
 800cfbc:	e027      	b.n	800d00e <HAL_UARTEx_DisableFifoMode+0x66>
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2224      	movs	r2, #36	; 0x24
 800cfca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f022 0201 	bic.w	r2, r2, #1
 800cfe4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cfec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2200      	movs	r2, #0
 800cff2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	68fa      	ldr	r2, [r7, #12]
 800cffa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2220      	movs	r2, #32
 800d000:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2200      	movs	r2, #0
 800d008:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d00c:	2300      	movs	r3, #0
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3714      	adds	r7, #20
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr

0800d01a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d01a:	b580      	push	{r7, lr}
 800d01c:	b084      	sub	sp, #16
 800d01e:	af00      	add	r7, sp, #0
 800d020:	6078      	str	r0, [r7, #4]
 800d022:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d101      	bne.n	800d032 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d02e:	2302      	movs	r3, #2
 800d030:	e02d      	b.n	800d08e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2201      	movs	r2, #1
 800d036:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2224      	movs	r2, #36	; 0x24
 800d03e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	681a      	ldr	r2, [r3, #0]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f022 0201 	bic.w	r2, r2, #1
 800d058:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	689b      	ldr	r3, [r3, #8]
 800d060:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	683a      	ldr	r2, [r7, #0]
 800d06a:	430a      	orrs	r2, r1
 800d06c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f000 f850 	bl	800d114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	68fa      	ldr	r2, [r7, #12]
 800d07a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2220      	movs	r2, #32
 800d080:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2200      	movs	r2, #0
 800d088:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d08c:	2300      	movs	r3, #0
}
 800d08e:	4618      	mov	r0, r3
 800d090:	3710      	adds	r7, #16
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}

0800d096 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d096:	b580      	push	{r7, lr}
 800d098:	b084      	sub	sp, #16
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	6078      	str	r0, [r7, #4]
 800d09e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d0a6:	2b01      	cmp	r3, #1
 800d0a8:	d101      	bne.n	800d0ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d0aa:	2302      	movs	r3, #2
 800d0ac:	e02d      	b.n	800d10a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2224      	movs	r2, #36	; 0x24
 800d0ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	681a      	ldr	r2, [r3, #0]
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	f022 0201 	bic.w	r2, r2, #1
 800d0d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	689b      	ldr	r3, [r3, #8]
 800d0dc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	683a      	ldr	r2, [r7, #0]
 800d0e6:	430a      	orrs	r2, r1
 800d0e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f000 f812 	bl	800d114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	68fa      	ldr	r2, [r7, #12]
 800d0f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2220      	movs	r2, #32
 800d0fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2200      	movs	r2, #0
 800d104:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d108:	2300      	movs	r3, #0
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3710      	adds	r7, #16
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
	...

0800d114 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d114:	b480      	push	{r7}
 800d116:	b085      	sub	sp, #20
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d120:	2b00      	cmp	r3, #0
 800d122:	d108      	bne.n	800d136 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2201      	movs	r2, #1
 800d128:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2201      	movs	r2, #1
 800d130:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d134:	e031      	b.n	800d19a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d136:	2308      	movs	r3, #8
 800d138:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d13a:	2308      	movs	r3, #8
 800d13c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	689b      	ldr	r3, [r3, #8]
 800d144:	0e5b      	lsrs	r3, r3, #25
 800d146:	b2db      	uxtb	r3, r3
 800d148:	f003 0307 	and.w	r3, r3, #7
 800d14c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	689b      	ldr	r3, [r3, #8]
 800d154:	0f5b      	lsrs	r3, r3, #29
 800d156:	b2db      	uxtb	r3, r3
 800d158:	f003 0307 	and.w	r3, r3, #7
 800d15c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d15e:	7bbb      	ldrb	r3, [r7, #14]
 800d160:	7b3a      	ldrb	r2, [r7, #12]
 800d162:	4911      	ldr	r1, [pc, #68]	; (800d1a8 <UARTEx_SetNbDataToProcess+0x94>)
 800d164:	5c8a      	ldrb	r2, [r1, r2]
 800d166:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d16a:	7b3a      	ldrb	r2, [r7, #12]
 800d16c:	490f      	ldr	r1, [pc, #60]	; (800d1ac <UARTEx_SetNbDataToProcess+0x98>)
 800d16e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d170:	fb93 f3f2 	sdiv	r3, r3, r2
 800d174:	b29a      	uxth	r2, r3
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d17c:	7bfb      	ldrb	r3, [r7, #15]
 800d17e:	7b7a      	ldrb	r2, [r7, #13]
 800d180:	4909      	ldr	r1, [pc, #36]	; (800d1a8 <UARTEx_SetNbDataToProcess+0x94>)
 800d182:	5c8a      	ldrb	r2, [r1, r2]
 800d184:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d188:	7b7a      	ldrb	r2, [r7, #13]
 800d18a:	4908      	ldr	r1, [pc, #32]	; (800d1ac <UARTEx_SetNbDataToProcess+0x98>)
 800d18c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d18e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d192:	b29a      	uxth	r2, r3
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d19a:	bf00      	nop
 800d19c:	3714      	adds	r7, #20
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a4:	4770      	bx	lr
 800d1a6:	bf00      	nop
 800d1a8:	08015bac 	.word	0x08015bac
 800d1ac:	08015bb4 	.word	0x08015bb4

0800d1b0 <LL_EXTI_EnableIT_0_31>:
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b083      	sub	sp, #12
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800d1b8:	4b06      	ldr	r3, [pc, #24]	; (800d1d4 <LL_EXTI_EnableIT_0_31+0x24>)
 800d1ba:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800d1be:	4905      	ldr	r1, [pc, #20]	; (800d1d4 <LL_EXTI_EnableIT_0_31+0x24>)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	4313      	orrs	r3, r2
 800d1c4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800d1c8:	bf00      	nop
 800d1ca:	370c      	adds	r7, #12
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d2:	4770      	bx	lr
 800d1d4:	58000800 	.word	0x58000800

0800d1d8 <LL_EXTI_EnableIT_32_63>:
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b083      	sub	sp, #12
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800d1e0:	4b06      	ldr	r3, [pc, #24]	; (800d1fc <LL_EXTI_EnableIT_32_63+0x24>)
 800d1e2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800d1e6:	4905      	ldr	r1, [pc, #20]	; (800d1fc <LL_EXTI_EnableIT_32_63+0x24>)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800d1f0:	bf00      	nop
 800d1f2:	370c      	adds	r7, #12
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr
 800d1fc:	58000800 	.word	0x58000800

0800d200 <LL_EXTI_DisableIT_0_31>:
{
 800d200:	b480      	push	{r7}
 800d202:	b083      	sub	sp, #12
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800d208:	4b07      	ldr	r3, [pc, #28]	; (800d228 <LL_EXTI_DisableIT_0_31+0x28>)
 800d20a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	43db      	mvns	r3, r3
 800d212:	4905      	ldr	r1, [pc, #20]	; (800d228 <LL_EXTI_DisableIT_0_31+0x28>)
 800d214:	4013      	ands	r3, r2
 800d216:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800d21a:	bf00      	nop
 800d21c:	370c      	adds	r7, #12
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr
 800d226:	bf00      	nop
 800d228:	58000800 	.word	0x58000800

0800d22c <LL_EXTI_DisableIT_32_63>:
{
 800d22c:	b480      	push	{r7}
 800d22e:	b083      	sub	sp, #12
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800d234:	4b07      	ldr	r3, [pc, #28]	; (800d254 <LL_EXTI_DisableIT_32_63+0x28>)
 800d236:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	43db      	mvns	r3, r3
 800d23e:	4905      	ldr	r1, [pc, #20]	; (800d254 <LL_EXTI_DisableIT_32_63+0x28>)
 800d240:	4013      	ands	r3, r2
 800d242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800d246:	bf00      	nop
 800d248:	370c      	adds	r7, #12
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr
 800d252:	bf00      	nop
 800d254:	58000800 	.word	0x58000800

0800d258 <LL_EXTI_EnableEvent_0_31>:
{
 800d258:	b480      	push	{r7}
 800d25a:	b083      	sub	sp, #12
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800d260:	4b06      	ldr	r3, [pc, #24]	; (800d27c <LL_EXTI_EnableEvent_0_31+0x24>)
 800d262:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800d266:	4905      	ldr	r1, [pc, #20]	; (800d27c <LL_EXTI_EnableEvent_0_31+0x24>)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	4313      	orrs	r3, r2
 800d26c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 800d270:	bf00      	nop
 800d272:	370c      	adds	r7, #12
 800d274:	46bd      	mov	sp, r7
 800d276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27a:	4770      	bx	lr
 800d27c:	58000800 	.word	0x58000800

0800d280 <LL_EXTI_EnableEvent_32_63>:
{
 800d280:	b480      	push	{r7}
 800d282:	b083      	sub	sp, #12
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800d288:	4b06      	ldr	r3, [pc, #24]	; (800d2a4 <LL_EXTI_EnableEvent_32_63+0x24>)
 800d28a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800d28e:	4905      	ldr	r1, [pc, #20]	; (800d2a4 <LL_EXTI_EnableEvent_32_63+0x24>)
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	4313      	orrs	r3, r2
 800d294:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800d298:	bf00      	nop
 800d29a:	370c      	adds	r7, #12
 800d29c:	46bd      	mov	sp, r7
 800d29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a2:	4770      	bx	lr
 800d2a4:	58000800 	.word	0x58000800

0800d2a8 <LL_EXTI_DisableEvent_0_31>:
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b083      	sub	sp, #12
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800d2b0:	4b07      	ldr	r3, [pc, #28]	; (800d2d0 <LL_EXTI_DisableEvent_0_31+0x28>)
 800d2b2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	43db      	mvns	r3, r3
 800d2ba:	4905      	ldr	r1, [pc, #20]	; (800d2d0 <LL_EXTI_DisableEvent_0_31+0x28>)
 800d2bc:	4013      	ands	r3, r2
 800d2be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 800d2c2:	bf00      	nop
 800d2c4:	370c      	adds	r7, #12
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr
 800d2ce:	bf00      	nop
 800d2d0:	58000800 	.word	0x58000800

0800d2d4 <LL_EXTI_DisableEvent_32_63>:
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b083      	sub	sp, #12
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800d2dc:	4b07      	ldr	r3, [pc, #28]	; (800d2fc <LL_EXTI_DisableEvent_32_63+0x28>)
 800d2de:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	43db      	mvns	r3, r3
 800d2e6:	4905      	ldr	r1, [pc, #20]	; (800d2fc <LL_EXTI_DisableEvent_32_63+0x28>)
 800d2e8:	4013      	ands	r3, r2
 800d2ea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800d2ee:	bf00      	nop
 800d2f0:	370c      	adds	r7, #12
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f8:	4770      	bx	lr
 800d2fa:	bf00      	nop
 800d2fc:	58000800 	.word	0x58000800

0800d300 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800d300:	b480      	push	{r7}
 800d302:	b083      	sub	sp, #12
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800d308:	4b05      	ldr	r3, [pc, #20]	; (800d320 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800d30a:	681a      	ldr	r2, [r3, #0]
 800d30c:	4904      	ldr	r1, [pc, #16]	; (800d320 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	4313      	orrs	r3, r2
 800d312:	600b      	str	r3, [r1, #0]
}
 800d314:	bf00      	nop
 800d316:	370c      	adds	r7, #12
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr
 800d320:	58000800 	.word	0x58000800

0800d324 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800d324:	b480      	push	{r7}
 800d326:	b083      	sub	sp, #12
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800d32c:	4b05      	ldr	r3, [pc, #20]	; (800d344 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d32e:	6a1a      	ldr	r2, [r3, #32]
 800d330:	4904      	ldr	r1, [pc, #16]	; (800d344 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	4313      	orrs	r3, r2
 800d336:	620b      	str	r3, [r1, #32]
}
 800d338:	bf00      	nop
 800d33a:	370c      	adds	r7, #12
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr
 800d344:	58000800 	.word	0x58000800

0800d348 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800d348:	b480      	push	{r7}
 800d34a:	b083      	sub	sp, #12
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800d350:	4b06      	ldr	r3, [pc, #24]	; (800d36c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800d352:	681a      	ldr	r2, [r3, #0]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	43db      	mvns	r3, r3
 800d358:	4904      	ldr	r1, [pc, #16]	; (800d36c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800d35a:	4013      	ands	r3, r2
 800d35c:	600b      	str	r3, [r1, #0]

}
 800d35e:	bf00      	nop
 800d360:	370c      	adds	r7, #12
 800d362:	46bd      	mov	sp, r7
 800d364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d368:	4770      	bx	lr
 800d36a:	bf00      	nop
 800d36c:	58000800 	.word	0x58000800

0800d370 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 800d370:	b480      	push	{r7}
 800d372:	b083      	sub	sp, #12
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800d378:	4b06      	ldr	r3, [pc, #24]	; (800d394 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800d37a:	6a1a      	ldr	r2, [r3, #32]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	43db      	mvns	r3, r3
 800d380:	4904      	ldr	r1, [pc, #16]	; (800d394 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800d382:	4013      	ands	r3, r2
 800d384:	620b      	str	r3, [r1, #32]
}
 800d386:	bf00      	nop
 800d388:	370c      	adds	r7, #12
 800d38a:	46bd      	mov	sp, r7
 800d38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d390:	4770      	bx	lr
 800d392:	bf00      	nop
 800d394:	58000800 	.word	0x58000800

0800d398 <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800d398:	b480      	push	{r7}
 800d39a:	b083      	sub	sp, #12
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800d3a0:	4b05      	ldr	r3, [pc, #20]	; (800d3b8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800d3a2:	685a      	ldr	r2, [r3, #4]
 800d3a4:	4904      	ldr	r1, [pc, #16]	; (800d3b8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	604b      	str	r3, [r1, #4]
}
 800d3ac:	bf00      	nop
 800d3ae:	370c      	adds	r7, #12
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr
 800d3b8:	58000800 	.word	0x58000800

0800d3bc <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b083      	sub	sp, #12
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800d3c4:	4b05      	ldr	r3, [pc, #20]	; (800d3dc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800d3c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3c8:	4904      	ldr	r1, [pc, #16]	; (800d3dc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d3d0:	bf00      	nop
 800d3d2:	370c      	adds	r7, #12
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr
 800d3dc:	58000800 	.word	0x58000800

0800d3e0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b083      	sub	sp, #12
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800d3e8:	4b06      	ldr	r3, [pc, #24]	; (800d404 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d3ea:	685a      	ldr	r2, [r3, #4]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	43db      	mvns	r3, r3
 800d3f0:	4904      	ldr	r1, [pc, #16]	; (800d404 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d3f2:	4013      	ands	r3, r2
 800d3f4:	604b      	str	r3, [r1, #4]
}
 800d3f6:	bf00      	nop
 800d3f8:	370c      	adds	r7, #12
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d400:	4770      	bx	lr
 800d402:	bf00      	nop
 800d404:	58000800 	.word	0x58000800

0800d408 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 800d408:	b480      	push	{r7}
 800d40a:	b083      	sub	sp, #12
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800d410:	4b06      	ldr	r3, [pc, #24]	; (800d42c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800d412:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	43db      	mvns	r3, r3
 800d418:	4904      	ldr	r1, [pc, #16]	; (800d42c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800d41a:	4013      	ands	r3, r2
 800d41c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d41e:	bf00      	nop
 800d420:	370c      	adds	r7, #12
 800d422:	46bd      	mov	sp, r7
 800d424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d428:	4770      	bx	lr
 800d42a:	bf00      	nop
 800d42c:	58000800 	.word	0x58000800

0800d430 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800d438:	2300      	movs	r3, #0
 800d43a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	7a1b      	ldrb	r3, [r3, #8]
 800d440:	2b00      	cmp	r3, #0
 800d442:	f000 80cc 	beq.w	800d5de <LL_EXTI_Init+0x1ae>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d061      	beq.n	800d512 <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	7a5b      	ldrb	r3, [r3, #9]
 800d452:	2b02      	cmp	r3, #2
 800d454:	d01c      	beq.n	800d490 <LL_EXTI_Init+0x60>
 800d456:	2b02      	cmp	r3, #2
 800d458:	dc25      	bgt.n	800d4a6 <LL_EXTI_Init+0x76>
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d002      	beq.n	800d464 <LL_EXTI_Init+0x34>
 800d45e:	2b01      	cmp	r3, #1
 800d460:	d00b      	beq.n	800d47a <LL_EXTI_Init+0x4a>
 800d462:	e020      	b.n	800d4a6 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	4618      	mov	r0, r3
 800d46a:	f7ff ff1d 	bl	800d2a8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	4618      	mov	r0, r3
 800d474:	f7ff fe9c 	bl	800d1b0 <LL_EXTI_EnableIT_0_31>
          break;
 800d478:	e018      	b.n	800d4ac <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	4618      	mov	r0, r3
 800d480:	f7ff febe 	bl	800d200 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	4618      	mov	r0, r3
 800d48a:	f7ff fee5 	bl	800d258 <LL_EXTI_EnableEvent_0_31>
          break;
 800d48e:	e00d      	b.n	800d4ac <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	4618      	mov	r0, r3
 800d496:	f7ff fe8b 	bl	800d1b0 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f7ff feda 	bl	800d258 <LL_EXTI_EnableEvent_0_31>
          break;
 800d4a4:	e002      	b.n	800d4ac <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	73fb      	strb	r3, [r7, #15]
          break;
 800d4aa:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	7a9b      	ldrb	r3, [r3, #10]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d02e      	beq.n	800d512 <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	7a9b      	ldrb	r3, [r3, #10]
 800d4b8:	2b03      	cmp	r3, #3
 800d4ba:	d01c      	beq.n	800d4f6 <LL_EXTI_Init+0xc6>
 800d4bc:	2b03      	cmp	r3, #3
 800d4be:	dc25      	bgt.n	800d50c <LL_EXTI_Init+0xdc>
 800d4c0:	2b01      	cmp	r3, #1
 800d4c2:	d002      	beq.n	800d4ca <LL_EXTI_Init+0x9a>
 800d4c4:	2b02      	cmp	r3, #2
 800d4c6:	d00b      	beq.n	800d4e0 <LL_EXTI_Init+0xb0>
 800d4c8:	e020      	b.n	800d50c <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f7ff ff86 	bl	800d3e0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f7ff ff11 	bl	800d300 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800d4de:	e018      	b.n	800d512 <LL_EXTI_Init+0xe2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f7ff ff2f 	bl	800d348 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7ff ff52 	bl	800d398 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800d4f4:	e00d      	b.n	800d512 <LL_EXTI_Init+0xe2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7ff ff00 	bl	800d300 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	4618      	mov	r0, r3
 800d506:	f7ff ff47 	bl	800d398 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800d50a:	e002      	b.n	800d512 <LL_EXTI_Init+0xe2>
          default:
            status = ERROR;
 800d50c:	2301      	movs	r3, #1
 800d50e:	73fb      	strb	r3, [r7, #15]
            break;
 800d510:	bf00      	nop
        }
      }
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d075      	beq.n	800d606 <LL_EXTI_Init+0x1d6>
    {
      switch (EXTI_InitStruct->Mode)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	7a5b      	ldrb	r3, [r3, #9]
 800d51e:	2b02      	cmp	r3, #2
 800d520:	d01c      	beq.n	800d55c <LL_EXTI_Init+0x12c>
 800d522:	2b02      	cmp	r3, #2
 800d524:	dc25      	bgt.n	800d572 <LL_EXTI_Init+0x142>
 800d526:	2b00      	cmp	r3, #0
 800d528:	d002      	beq.n	800d530 <LL_EXTI_Init+0x100>
 800d52a:	2b01      	cmp	r3, #1
 800d52c:	d00b      	beq.n	800d546 <LL_EXTI_Init+0x116>
 800d52e:	e020      	b.n	800d572 <LL_EXTI_Init+0x142>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	685b      	ldr	r3, [r3, #4]
 800d534:	4618      	mov	r0, r3
 800d536:	f7ff fecd 	bl	800d2d4 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	685b      	ldr	r3, [r3, #4]
 800d53e:	4618      	mov	r0, r3
 800d540:	f7ff fe4a 	bl	800d1d8 <LL_EXTI_EnableIT_32_63>
          break;
 800d544:	e018      	b.n	800d578 <LL_EXTI_Init+0x148>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	685b      	ldr	r3, [r3, #4]
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7ff fe6e 	bl	800d22c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	685b      	ldr	r3, [r3, #4]
 800d554:	4618      	mov	r0, r3
 800d556:	f7ff fe93 	bl	800d280 <LL_EXTI_EnableEvent_32_63>
          break;
 800d55a:	e00d      	b.n	800d578 <LL_EXTI_Init+0x148>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	4618      	mov	r0, r3
 800d562:	f7ff fe39 	bl	800d1d8 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7ff fe88 	bl	800d280 <LL_EXTI_EnableEvent_32_63>
          break;
 800d570:	e002      	b.n	800d578 <LL_EXTI_Init+0x148>
        default:
          status = ERROR;
 800d572:	2301      	movs	r3, #1
 800d574:	73fb      	strb	r3, [r7, #15]
          break;
 800d576:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	7a9b      	ldrb	r3, [r3, #10]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d042      	beq.n	800d606 <LL_EXTI_Init+0x1d6>
      {
        switch (EXTI_InitStruct->Trigger)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	7a9b      	ldrb	r3, [r3, #10]
 800d584:	2b03      	cmp	r3, #3
 800d586:	d01c      	beq.n	800d5c2 <LL_EXTI_Init+0x192>
 800d588:	2b03      	cmp	r3, #3
 800d58a:	dc25      	bgt.n	800d5d8 <LL_EXTI_Init+0x1a8>
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	d002      	beq.n	800d596 <LL_EXTI_Init+0x166>
 800d590:	2b02      	cmp	r3, #2
 800d592:	d00b      	beq.n	800d5ac <LL_EXTI_Init+0x17c>
 800d594:	e020      	b.n	800d5d8 <LL_EXTI_Init+0x1a8>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	685b      	ldr	r3, [r3, #4]
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7ff ff34 	bl	800d408 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f7ff febd 	bl	800d324 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800d5aa:	e02c      	b.n	800d606 <LL_EXTI_Init+0x1d6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	685b      	ldr	r3, [r3, #4]
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7ff fedd 	bl	800d370 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f7ff fefe 	bl	800d3bc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800d5c0:	e021      	b.n	800d606 <LL_EXTI_Init+0x1d6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7ff feac 	bl	800d324 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7ff fef3 	bl	800d3bc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800d5d6:	e016      	b.n	800d606 <LL_EXTI_Init+0x1d6>
          default:
            status = ERROR;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	73fb      	strb	r3, [r7, #15]
            break;
 800d5dc:	e013      	b.n	800d606 <LL_EXTI_Init+0x1d6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7ff fe0c 	bl	800d200 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7ff fe5b 	bl	800d2a8 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	685b      	ldr	r3, [r3, #4]
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f7ff fe18 	bl	800d22c <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	4618      	mov	r0, r3
 800d602:	f7ff fe67 	bl	800d2d4 <LL_EXTI_DisableEvent_32_63>
  }
  return status;
 800d606:	7bfb      	ldrb	r3, [r7, #15]
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3710      	adds	r7, #16
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <LL_GPIO_SetPinMode>:
{
 800d610:	b480      	push	{r7}
 800d612:	b08b      	sub	sp, #44	; 0x2c
 800d614:	af00      	add	r7, sp, #0
 800d616:	60f8      	str	r0, [r7, #12]
 800d618:	60b9      	str	r1, [r7, #8]
 800d61a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	681a      	ldr	r2, [r3, #0]
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	fa93 f3a3 	rbit	r3, r3
 800d62a:	613b      	str	r3, [r7, #16]
  return result;
 800d62c:	693b      	ldr	r3, [r7, #16]
 800d62e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800d630:	69bb      	ldr	r3, [r7, #24]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d101      	bne.n	800d63a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800d636:	2320      	movs	r3, #32
 800d638:	e003      	b.n	800d642 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800d63a:	69bb      	ldr	r3, [r7, #24]
 800d63c:	fab3 f383 	clz	r3, r3
 800d640:	b2db      	uxtb	r3, r3
 800d642:	005b      	lsls	r3, r3, #1
 800d644:	2103      	movs	r1, #3
 800d646:	fa01 f303 	lsl.w	r3, r1, r3
 800d64a:	43db      	mvns	r3, r3
 800d64c:	401a      	ands	r2, r3
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d652:	6a3b      	ldr	r3, [r7, #32]
 800d654:	fa93 f3a3 	rbit	r3, r3
 800d658:	61fb      	str	r3, [r7, #28]
  return result;
 800d65a:	69fb      	ldr	r3, [r7, #28]
 800d65c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800d65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d660:	2b00      	cmp	r3, #0
 800d662:	d101      	bne.n	800d668 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800d664:	2320      	movs	r3, #32
 800d666:	e003      	b.n	800d670 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800d668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66a:	fab3 f383 	clz	r3, r3
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	005b      	lsls	r3, r3, #1
 800d672:	6879      	ldr	r1, [r7, #4]
 800d674:	fa01 f303 	lsl.w	r3, r1, r3
 800d678:	431a      	orrs	r2, r3
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	601a      	str	r2, [r3, #0]
}
 800d67e:	bf00      	nop
 800d680:	372c      	adds	r7, #44	; 0x2c
 800d682:	46bd      	mov	sp, r7
 800d684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d688:	4770      	bx	lr

0800d68a <LL_GPIO_SetPinOutputType>:
{
 800d68a:	b480      	push	{r7}
 800d68c:	b085      	sub	sp, #20
 800d68e:	af00      	add	r7, sp, #0
 800d690:	60f8      	str	r0, [r7, #12]
 800d692:	60b9      	str	r1, [r7, #8]
 800d694:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	685a      	ldr	r2, [r3, #4]
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	43db      	mvns	r3, r3
 800d69e:	401a      	ands	r2, r3
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	6879      	ldr	r1, [r7, #4]
 800d6a4:	fb01 f303 	mul.w	r3, r1, r3
 800d6a8:	431a      	orrs	r2, r3
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	605a      	str	r2, [r3, #4]
}
 800d6ae:	bf00      	nop
 800d6b0:	3714      	adds	r7, #20
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b8:	4770      	bx	lr

0800d6ba <LL_GPIO_SetPinSpeed>:
{
 800d6ba:	b480      	push	{r7}
 800d6bc:	b08b      	sub	sp, #44	; 0x2c
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	60f8      	str	r0, [r7, #12]
 800d6c2:	60b9      	str	r1, [r7, #8]
 800d6c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	689a      	ldr	r2, [r3, #8]
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	fa93 f3a3 	rbit	r3, r3
 800d6d4:	613b      	str	r3, [r7, #16]
  return result;
 800d6d6:	693b      	ldr	r3, [r7, #16]
 800d6d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800d6da:	69bb      	ldr	r3, [r7, #24]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d101      	bne.n	800d6e4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800d6e0:	2320      	movs	r3, #32
 800d6e2:	e003      	b.n	800d6ec <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800d6e4:	69bb      	ldr	r3, [r7, #24]
 800d6e6:	fab3 f383 	clz	r3, r3
 800d6ea:	b2db      	uxtb	r3, r3
 800d6ec:	005b      	lsls	r3, r3, #1
 800d6ee:	2103      	movs	r1, #3
 800d6f0:	fa01 f303 	lsl.w	r3, r1, r3
 800d6f4:	43db      	mvns	r3, r3
 800d6f6:	401a      	ands	r2, r3
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d6fc:	6a3b      	ldr	r3, [r7, #32]
 800d6fe:	fa93 f3a3 	rbit	r3, r3
 800d702:	61fb      	str	r3, [r7, #28]
  return result;
 800d704:	69fb      	ldr	r3, [r7, #28]
 800d706:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800d708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d101      	bne.n	800d712 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800d70e:	2320      	movs	r3, #32
 800d710:	e003      	b.n	800d71a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800d712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d714:	fab3 f383 	clz	r3, r3
 800d718:	b2db      	uxtb	r3, r3
 800d71a:	005b      	lsls	r3, r3, #1
 800d71c:	6879      	ldr	r1, [r7, #4]
 800d71e:	fa01 f303 	lsl.w	r3, r1, r3
 800d722:	431a      	orrs	r2, r3
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	609a      	str	r2, [r3, #8]
}
 800d728:	bf00      	nop
 800d72a:	372c      	adds	r7, #44	; 0x2c
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr

0800d734 <LL_GPIO_SetPinPull>:
{
 800d734:	b480      	push	{r7}
 800d736:	b08b      	sub	sp, #44	; 0x2c
 800d738:	af00      	add	r7, sp, #0
 800d73a:	60f8      	str	r0, [r7, #12]
 800d73c:	60b9      	str	r1, [r7, #8]
 800d73e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	68da      	ldr	r2, [r3, #12]
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	fa93 f3a3 	rbit	r3, r3
 800d74e:	613b      	str	r3, [r7, #16]
  return result;
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800d754:	69bb      	ldr	r3, [r7, #24]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d101      	bne.n	800d75e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800d75a:	2320      	movs	r3, #32
 800d75c:	e003      	b.n	800d766 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800d75e:	69bb      	ldr	r3, [r7, #24]
 800d760:	fab3 f383 	clz	r3, r3
 800d764:	b2db      	uxtb	r3, r3
 800d766:	005b      	lsls	r3, r3, #1
 800d768:	2103      	movs	r1, #3
 800d76a:	fa01 f303 	lsl.w	r3, r1, r3
 800d76e:	43db      	mvns	r3, r3
 800d770:	401a      	ands	r2, r3
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d776:	6a3b      	ldr	r3, [r7, #32]
 800d778:	fa93 f3a3 	rbit	r3, r3
 800d77c:	61fb      	str	r3, [r7, #28]
  return result;
 800d77e:	69fb      	ldr	r3, [r7, #28]
 800d780:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800d782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d784:	2b00      	cmp	r3, #0
 800d786:	d101      	bne.n	800d78c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800d788:	2320      	movs	r3, #32
 800d78a:	e003      	b.n	800d794 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800d78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d78e:	fab3 f383 	clz	r3, r3
 800d792:	b2db      	uxtb	r3, r3
 800d794:	005b      	lsls	r3, r3, #1
 800d796:	6879      	ldr	r1, [r7, #4]
 800d798:	fa01 f303 	lsl.w	r3, r1, r3
 800d79c:	431a      	orrs	r2, r3
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	60da      	str	r2, [r3, #12]
}
 800d7a2:	bf00      	nop
 800d7a4:	372c      	adds	r7, #44	; 0x2c
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ac:	4770      	bx	lr

0800d7ae <LL_GPIO_SetAFPin_0_7>:
{
 800d7ae:	b480      	push	{r7}
 800d7b0:	b08b      	sub	sp, #44	; 0x2c
 800d7b2:	af00      	add	r7, sp, #0
 800d7b4:	60f8      	str	r0, [r7, #12]
 800d7b6:	60b9      	str	r1, [r7, #8]
 800d7b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	6a1a      	ldr	r2, [r3, #32]
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	fa93 f3a3 	rbit	r3, r3
 800d7c8:	613b      	str	r3, [r7, #16]
  return result;
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800d7ce:	69bb      	ldr	r3, [r7, #24]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d101      	bne.n	800d7d8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800d7d4:	2320      	movs	r3, #32
 800d7d6:	e003      	b.n	800d7e0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800d7d8:	69bb      	ldr	r3, [r7, #24]
 800d7da:	fab3 f383 	clz	r3, r3
 800d7de:	b2db      	uxtb	r3, r3
 800d7e0:	009b      	lsls	r3, r3, #2
 800d7e2:	210f      	movs	r1, #15
 800d7e4:	fa01 f303 	lsl.w	r3, r1, r3
 800d7e8:	43db      	mvns	r3, r3
 800d7ea:	401a      	ands	r2, r3
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d7f0:	6a3b      	ldr	r3, [r7, #32]
 800d7f2:	fa93 f3a3 	rbit	r3, r3
 800d7f6:	61fb      	str	r3, [r7, #28]
  return result;
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800d7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d101      	bne.n	800d806 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800d802:	2320      	movs	r3, #32
 800d804:	e003      	b.n	800d80e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800d806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d808:	fab3 f383 	clz	r3, r3
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	009b      	lsls	r3, r3, #2
 800d810:	6879      	ldr	r1, [r7, #4]
 800d812:	fa01 f303 	lsl.w	r3, r1, r3
 800d816:	431a      	orrs	r2, r3
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	621a      	str	r2, [r3, #32]
}
 800d81c:	bf00      	nop
 800d81e:	372c      	adds	r7, #44	; 0x2c
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr

0800d828 <LL_GPIO_SetAFPin_8_15>:
{
 800d828:	b480      	push	{r7}
 800d82a:	b08b      	sub	sp, #44	; 0x2c
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	60f8      	str	r0, [r7, #12]
 800d830:	60b9      	str	r1, [r7, #8]
 800d832:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	0a1b      	lsrs	r3, r3, #8
 800d83c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	fa93 f3a3 	rbit	r3, r3
 800d844:	613b      	str	r3, [r7, #16]
  return result;
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800d84a:	69bb      	ldr	r3, [r7, #24]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d101      	bne.n	800d854 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800d850:	2320      	movs	r3, #32
 800d852:	e003      	b.n	800d85c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800d854:	69bb      	ldr	r3, [r7, #24]
 800d856:	fab3 f383 	clz	r3, r3
 800d85a:	b2db      	uxtb	r3, r3
 800d85c:	009b      	lsls	r3, r3, #2
 800d85e:	210f      	movs	r1, #15
 800d860:	fa01 f303 	lsl.w	r3, r1, r3
 800d864:	43db      	mvns	r3, r3
 800d866:	401a      	ands	r2, r3
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	0a1b      	lsrs	r3, r3, #8
 800d86c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d86e:	6a3b      	ldr	r3, [r7, #32]
 800d870:	fa93 f3a3 	rbit	r3, r3
 800d874:	61fb      	str	r3, [r7, #28]
  return result;
 800d876:	69fb      	ldr	r3, [r7, #28]
 800d878:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800d87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d101      	bne.n	800d884 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800d880:	2320      	movs	r3, #32
 800d882:	e003      	b.n	800d88c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800d884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d886:	fab3 f383 	clz	r3, r3
 800d88a:	b2db      	uxtb	r3, r3
 800d88c:	009b      	lsls	r3, r3, #2
 800d88e:	6879      	ldr	r1, [r7, #4]
 800d890:	fa01 f303 	lsl.w	r3, r1, r3
 800d894:	431a      	orrs	r2, r3
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d89a:	bf00      	nop
 800d89c:	372c      	adds	r7, #44	; 0x2c
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a4:	4770      	bx	lr

0800d8a6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800d8a6:	b580      	push	{r7, lr}
 800d8a8:	b08a      	sub	sp, #40	; 0x28
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
 800d8ae:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d8b6:	69bb      	ldr	r3, [r7, #24]
 800d8b8:	fa93 f3a3 	rbit	r3, r3
 800d8bc:	617b      	str	r3, [r7, #20]
  return result;
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800d8c2:	69fb      	ldr	r3, [r7, #28]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d101      	bne.n	800d8cc <LL_GPIO_Init+0x26>
    return 32U;
 800d8c8:	2320      	movs	r3, #32
 800d8ca:	e003      	b.n	800d8d4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800d8cc:	69fb      	ldr	r3, [r7, #28]
 800d8ce:	fab3 f383 	clz	r3, r3
 800d8d2:	b2db      	uxtb	r3, r3
 800d8d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800d8d6:	e057      	b.n	800d988 <LL_GPIO_Init+0xe2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	681a      	ldr	r2, [r3, #0]
 800d8dc:	2101      	movs	r1, #1
 800d8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e0:	fa01 f303 	lsl.w	r3, r1, r3
 800d8e4:	4013      	ands	r3, r2
 800d8e6:	623b      	str	r3, [r7, #32]

    if (currentpin != 0x00u)
 800d8e8:	6a3b      	ldr	r3, [r7, #32]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d049      	beq.n	800d982 <LL_GPIO_Init+0xdc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	685b      	ldr	r3, [r3, #4]
 800d8f2:	2b01      	cmp	r3, #1
 800d8f4:	d003      	beq.n	800d8fe <LL_GPIO_Init+0x58>
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	685b      	ldr	r3, [r3, #4]
 800d8fa:	2b02      	cmp	r3, #2
 800d8fc:	d10d      	bne.n	800d91a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	689b      	ldr	r3, [r3, #8]
 800d902:	461a      	mov	r2, r3
 800d904:	6a39      	ldr	r1, [r7, #32]
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f7ff fed7 	bl	800d6ba <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	68db      	ldr	r3, [r3, #12]
 800d910:	461a      	mov	r2, r3
 800d912:	6a39      	ldr	r1, [r7, #32]
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f7ff feb8 	bl	800d68a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	691b      	ldr	r3, [r3, #16]
 800d91e:	461a      	mov	r2, r3
 800d920:	6a39      	ldr	r1, [r7, #32]
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f7ff ff06 	bl	800d734 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	2b02      	cmp	r3, #2
 800d92e:	d121      	bne.n	800d974 <LL_GPIO_Init+0xce>
 800d930:	6a3b      	ldr	r3, [r7, #32]
 800d932:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	fa93 f3a3 	rbit	r3, r3
 800d93a:	60bb      	str	r3, [r7, #8]
  return result;
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d101      	bne.n	800d94a <LL_GPIO_Init+0xa4>
    return 32U;
 800d946:	2320      	movs	r3, #32
 800d948:	e003      	b.n	800d952 <LL_GPIO_Init+0xac>
  return __builtin_clz(value);
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	fab3 f383 	clz	r3, r3
 800d950:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008uL)
 800d952:	2b07      	cmp	r3, #7
 800d954:	d807      	bhi.n	800d966 <LL_GPIO_Init+0xc0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	695b      	ldr	r3, [r3, #20]
 800d95a:	461a      	mov	r2, r3
 800d95c:	6a39      	ldr	r1, [r7, #32]
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f7ff ff25 	bl	800d7ae <LL_GPIO_SetAFPin_0_7>
 800d964:	e006      	b.n	800d974 <LL_GPIO_Init+0xce>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	695b      	ldr	r3, [r3, #20]
 800d96a:	461a      	mov	r2, r3
 800d96c:	6a39      	ldr	r1, [r7, #32]
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f7ff ff5a 	bl	800d828 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	685b      	ldr	r3, [r3, #4]
 800d978:	461a      	mov	r2, r3
 800d97a:	6a39      	ldr	r1, [r7, #32]
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f7ff fe47 	bl	800d610 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800d982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d984:	3301      	adds	r3, #1
 800d986:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	681a      	ldr	r2, [r3, #0]
 800d98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98e:	fa22 f303 	lsr.w	r3, r2, r3
 800d992:	2b00      	cmp	r3, #0
 800d994:	d1a0      	bne.n	800d8d8 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800d996:	2300      	movs	r3, #0
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3728      	adds	r7, #40	; 0x28
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b085      	sub	sp, #20
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d9a8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800d9ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d9b4:	b29a      	uxth	r2, r3
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	b29b      	uxth	r3, r3
 800d9ba:	43db      	mvns	r3, r3
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	4013      	ands	r3, r2
 800d9c0:	b29a      	uxth	r2, r3
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d9c8:	2300      	movs	r3, #0
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3714      	adds	r7, #20
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d4:	4770      	bx	lr

0800d9d6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800d9d6:	b480      	push	{r7}
 800d9d8:	b085      	sub	sp, #20
 800d9da:	af00      	add	r7, sp, #0
 800d9dc:	60f8      	str	r0, [r7, #12]
 800d9de:	1d3b      	adds	r3, r7, #4
 800d9e0:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	2200      	movs	r2, #0
 800da00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800da04:	2300      	movs	r3, #0
}
 800da06:	4618      	mov	r0, r3
 800da08:	3714      	adds	r7, #20
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr

0800da12 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800da12:	b580      	push	{r7, lr}
 800da14:	b088      	sub	sp, #32
 800da16:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800da18:	2300      	movs	r3, #0
 800da1a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800da1c:	f107 0308 	add.w	r3, r7, #8
 800da20:	2218      	movs	r2, #24
 800da22:	2100      	movs	r1, #0
 800da24:	4618      	mov	r0, r3
 800da26:	f001 f8e1 	bl	800ebec <Osal_MemSet>
  rq.ogf = 0x3f;
 800da2a:	233f      	movs	r3, #63	; 0x3f
 800da2c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800da2e:	2381      	movs	r3, #129	; 0x81
 800da30:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800da32:	1dfb      	adds	r3, r7, #7
 800da34:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800da36:	2301      	movs	r3, #1
 800da38:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800da3a:	f107 0308 	add.w	r3, r7, #8
 800da3e:	2100      	movs	r1, #0
 800da40:	4618      	mov	r0, r3
 800da42:	f001 fc83 	bl	800f34c <hci_send_req>
 800da46:	4603      	mov	r3, r0
 800da48:	2b00      	cmp	r3, #0
 800da4a:	da01      	bge.n	800da50 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800da4c:	23ff      	movs	r3, #255	; 0xff
 800da4e:	e000      	b.n	800da52 <aci_gap_set_non_discoverable+0x40>
  return status;
 800da50:	79fb      	ldrb	r3, [r7, #7]
}
 800da52:	4618      	mov	r0, r3
 800da54:	3720      	adds	r7, #32
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}

0800da5a <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800da5a:	b5b0      	push	{r4, r5, r7, lr}
 800da5c:	b0ce      	sub	sp, #312	; 0x138
 800da5e:	af00      	add	r7, sp, #0
 800da60:	4605      	mov	r5, r0
 800da62:	460c      	mov	r4, r1
 800da64:	4610      	mov	r0, r2
 800da66:	4619      	mov	r1, r3
 800da68:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800da6c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800da70:	462a      	mov	r2, r5
 800da72:	701a      	strb	r2, [r3, #0]
 800da74:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800da78:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800da7c:	4622      	mov	r2, r4
 800da7e:	801a      	strh	r2, [r3, #0]
 800da80:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800da84:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800da88:	4602      	mov	r2, r0
 800da8a:	801a      	strh	r2, [r3, #0]
 800da8c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800da90:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800da94:	460a      	mov	r2, r1
 800da96:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800da98:	f107 0310 	add.w	r3, r7, #16
 800da9c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800daa0:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800daa4:	3308      	adds	r3, #8
 800daa6:	f107 0210 	add.w	r2, r7, #16
 800daaa:	4413      	add	r3, r2
 800daac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800dab0:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800dab4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800dab8:	4413      	add	r3, r2
 800daba:	3309      	adds	r3, #9
 800dabc:	f107 0210 	add.w	r2, r7, #16
 800dac0:	4413      	add	r3, r2
 800dac2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800dac6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800daca:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800dace:	2200      	movs	r2, #0
 800dad0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dad2:	2300      	movs	r3, #0
 800dad4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800dad8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800dadc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800dae0:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800dae4:	7812      	ldrb	r2, [r2, #0]
 800dae6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800dae8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800daec:	3301      	adds	r3, #1
 800daee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800daf2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800daf6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800dafa:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800dafe:	8812      	ldrh	r2, [r2, #0]
 800db00:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800db04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800db08:	3302      	adds	r3, #2
 800db0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800db0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800db12:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800db16:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800db1a:	8812      	ldrh	r2, [r2, #0]
 800db1c:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800db20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800db24:	3302      	adds	r3, #2
 800db26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800db2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800db2e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800db32:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800db36:	7812      	ldrb	r2, [r2, #0]
 800db38:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800db3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800db3e:	3301      	adds	r3, #1
 800db40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800db44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800db48:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800db4c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800db4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800db52:	3301      	adds	r3, #1
 800db54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800db58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800db5c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800db60:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800db62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800db66:	3301      	adds	r3, #1
 800db68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800db6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800db70:	3308      	adds	r3, #8
 800db72:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800db76:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800db7a:	4618      	mov	r0, r3
 800db7c:	f001 f826 	bl	800ebcc <Osal_MemCpy>
    index_input += Local_Name_Length;
 800db80:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800db84:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800db88:	4413      	add	r3, r2
 800db8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800db8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800db92:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800db96:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800db98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800db9c:	3301      	adds	r3, #1
 800db9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800dba2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800dba6:	3301      	adds	r3, #1
 800dba8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800dbac:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f001 f80b 	bl	800ebcc <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800dbb6:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800dbba:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800dbbe:	4413      	add	r3, r2
 800dbc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800dbc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dbc8:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800dbcc:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800dbce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dbd2:	3302      	adds	r3, #2
 800dbd4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800dbd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dbdc:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800dbe0:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800dbe2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dbe6:	3302      	adds	r3, #2
 800dbe8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dbec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800dbf0:	2218      	movs	r2, #24
 800dbf2:	2100      	movs	r1, #0
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f000 fff9 	bl	800ebec <Osal_MemSet>
  rq.ogf = 0x3f;
 800dbfa:	233f      	movs	r3, #63	; 0x3f
 800dbfc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800dc00:	2383      	movs	r3, #131	; 0x83
 800dc02:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800dc06:	f107 0310 	add.w	r3, r7, #16
 800dc0a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800dc0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dc12:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800dc16:	f107 030f 	add.w	r3, r7, #15
 800dc1a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800dc1e:	2301      	movs	r3, #1
 800dc20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dc24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800dc28:	2100      	movs	r1, #0
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f001 fb8e 	bl	800f34c <hci_send_req>
 800dc30:	4603      	mov	r3, r0
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	da01      	bge.n	800dc3a <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800dc36:	23ff      	movs	r3, #255	; 0xff
 800dc38:	e004      	b.n	800dc44 <aci_gap_set_discoverable+0x1ea>
  return status;
 800dc3a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800dc3e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800dc42:	781b      	ldrb	r3, [r3, #0]
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bdb0      	pop	{r4, r5, r7, pc}

0800dc4e <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800dc4e:	b580      	push	{r7, lr}
 800dc50:	b0cc      	sub	sp, #304	; 0x130
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	4602      	mov	r2, r0
 800dc56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dc5a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800dc5e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800dc60:	f107 0310 	add.w	r3, r7, #16
 800dc64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800dc68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dc6c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800dc70:	2200      	movs	r2, #0
 800dc72:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dc74:	2300      	movs	r3, #0
 800dc76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800dc7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dc7e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800dc82:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800dc86:	7812      	ldrb	r2, [r2, #0]
 800dc88:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800dc8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dc8e:	3301      	adds	r3, #1
 800dc90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dc94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800dc98:	2218      	movs	r2, #24
 800dc9a:	2100      	movs	r1, #0
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f000 ffa5 	bl	800ebec <Osal_MemSet>
  rq.ogf = 0x3f;
 800dca2:	233f      	movs	r3, #63	; 0x3f
 800dca4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800dca8:	2385      	movs	r3, #133	; 0x85
 800dcaa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800dcae:	f107 0310 	add.w	r3, r7, #16
 800dcb2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800dcb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dcba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800dcbe:	f107 030f 	add.w	r3, r7, #15
 800dcc2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dccc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800dcd0:	2100      	movs	r1, #0
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f001 fb3a 	bl	800f34c <hci_send_req>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	da01      	bge.n	800dce2 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800dcde:	23ff      	movs	r3, #255	; 0xff
 800dce0:	e004      	b.n	800dcec <aci_gap_set_io_capability+0x9e>
  return status;
 800dce2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dce6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800dcea:	781b      	ldrb	r3, [r3, #0]
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}

0800dcf6 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800dcf6:	b5b0      	push	{r4, r5, r7, lr}
 800dcf8:	b0cc      	sub	sp, #304	; 0x130
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	4605      	mov	r5, r0
 800dcfe:	460c      	mov	r4, r1
 800dd00:	4610      	mov	r0, r2
 800dd02:	4619      	mov	r1, r3
 800dd04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dd08:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800dd0c:	462a      	mov	r2, r5
 800dd0e:	701a      	strb	r2, [r3, #0]
 800dd10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dd14:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800dd18:	4622      	mov	r2, r4
 800dd1a:	701a      	strb	r2, [r3, #0]
 800dd1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dd20:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800dd24:	4602      	mov	r2, r0
 800dd26:	701a      	strb	r2, [r3, #0]
 800dd28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dd2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800dd30:	460a      	mov	r2, r1
 800dd32:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800dd34:	f107 0310 	add.w	r3, r7, #16
 800dd38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800dd3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dd40:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800dd44:	2200      	movs	r2, #0
 800dd46:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800dd4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dd52:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800dd56:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800dd5a:	7812      	ldrb	r2, [r2, #0]
 800dd5c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800dd5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd62:	3301      	adds	r3, #1
 800dd64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800dd68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dd6c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800dd70:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800dd74:	7812      	ldrb	r2, [r2, #0]
 800dd76:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800dd78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd7c:	3301      	adds	r3, #1
 800dd7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800dd82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dd86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800dd8a:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800dd8e:	7812      	ldrb	r2, [r2, #0]
 800dd90:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800dd92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd96:	3301      	adds	r3, #1
 800dd98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800dd9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dda0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800dda4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800dda8:	7812      	ldrb	r2, [r2, #0]
 800ddaa:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800ddac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800ddb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ddba:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800ddbe:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800ddc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ddc4:	3301      	adds	r3, #1
 800ddc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800ddca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ddce:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800ddd2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ddd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ddd8:	3301      	adds	r3, #1
 800ddda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800ddde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dde2:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800dde6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800dde8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ddec:	3301      	adds	r3, #1
 800ddee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800ddf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ddf6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800ddfa:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800ddfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800de02:	3304      	adds	r3, #4
 800de04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800de08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800de0c:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800de10:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800de12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800de16:	3301      	adds	r3, #1
 800de18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800de1c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800de20:	2218      	movs	r2, #24
 800de22:	2100      	movs	r1, #0
 800de24:	4618      	mov	r0, r3
 800de26:	f000 fee1 	bl	800ebec <Osal_MemSet>
  rq.ogf = 0x3f;
 800de2a:	233f      	movs	r3, #63	; 0x3f
 800de2c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800de30:	2386      	movs	r3, #134	; 0x86
 800de32:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800de36:	f107 0310 	add.w	r3, r7, #16
 800de3a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800de3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800de42:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800de46:	f107 030f 	add.w	r3, r7, #15
 800de4a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800de4e:	2301      	movs	r3, #1
 800de50:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800de54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800de58:	2100      	movs	r1, #0
 800de5a:	4618      	mov	r0, r3
 800de5c:	f001 fa76 	bl	800f34c <hci_send_req>
 800de60:	4603      	mov	r3, r0
 800de62:	2b00      	cmp	r3, #0
 800de64:	da01      	bge.n	800de6a <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800de66:	23ff      	movs	r3, #255	; 0xff
 800de68:	e004      	b.n	800de74 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800de6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800de6e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800de72:	781b      	ldrb	r3, [r3, #0]
}
 800de74:	4618      	mov	r0, r3
 800de76:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bdb0      	pop	{r4, r5, r7, pc}

0800de7e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800de7e:	b590      	push	{r4, r7, lr}
 800de80:	b0cd      	sub	sp, #308	; 0x134
 800de82:	af00      	add	r7, sp, #0
 800de84:	4604      	mov	r4, r0
 800de86:	4608      	mov	r0, r1
 800de88:	4611      	mov	r1, r2
 800de8a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800de8e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800de92:	6013      	str	r3, [r2, #0]
 800de94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800de98:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800de9c:	4622      	mov	r2, r4
 800de9e:	701a      	strb	r2, [r3, #0]
 800dea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dea4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800dea8:	4602      	mov	r2, r0
 800deaa:	701a      	strb	r2, [r3, #0]
 800deac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800deb0:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800deb4:	460a      	mov	r2, r1
 800deb6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800deb8:	f107 0310 	add.w	r3, r7, #16
 800debc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800dec0:	f107 0308 	add.w	r3, r7, #8
 800dec4:	2207      	movs	r2, #7
 800dec6:	2100      	movs	r1, #0
 800dec8:	4618      	mov	r0, r3
 800deca:	f000 fe8f 	bl	800ebec <Osal_MemSet>
  int index_input = 0;
 800dece:	2300      	movs	r3, #0
 800ded0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800ded4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ded8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800dedc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800dee0:	7812      	ldrb	r2, [r2, #0]
 800dee2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800dee4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dee8:	3301      	adds	r3, #1
 800deea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800deee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800def2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800def6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800defa:	7812      	ldrb	r2, [r2, #0]
 800defc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800defe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800df02:	3301      	adds	r3, #1
 800df04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800df08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800df0c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800df10:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800df14:	7812      	ldrb	r2, [r2, #0]
 800df16:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800df18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800df1c:	3301      	adds	r3, #1
 800df1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800df22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800df26:	2218      	movs	r2, #24
 800df28:	2100      	movs	r1, #0
 800df2a:	4618      	mov	r0, r3
 800df2c:	f000 fe5e 	bl	800ebec <Osal_MemSet>
  rq.ogf = 0x3f;
 800df30:	233f      	movs	r3, #63	; 0x3f
 800df32:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800df36:	238a      	movs	r3, #138	; 0x8a
 800df38:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800df3c:	f107 0310 	add.w	r3, r7, #16
 800df40:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800df44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800df48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800df4c:	f107 0308 	add.w	r3, r7, #8
 800df50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800df54:	2307      	movs	r3, #7
 800df56:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800df5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800df5e:	2100      	movs	r1, #0
 800df60:	4618      	mov	r0, r3
 800df62:	f001 f9f3 	bl	800f34c <hci_send_req>
 800df66:	4603      	mov	r3, r0
 800df68:	2b00      	cmp	r3, #0
 800df6a:	da01      	bge.n	800df70 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800df6c:	23ff      	movs	r3, #255	; 0xff
 800df6e:	e02e      	b.n	800dfce <aci_gap_init+0x150>
  if ( resp.Status )
 800df70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800df74:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800df78:	781b      	ldrb	r3, [r3, #0]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d005      	beq.n	800df8a <aci_gap_init+0x10c>
    return resp.Status;
 800df7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800df82:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	e021      	b.n	800dfce <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800df8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800df8e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800df92:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800df96:	b29a      	uxth	r2, r3
 800df98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800df9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800dfa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dfa8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800dfac:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800dfb0:	b29a      	uxth	r2, r3
 800dfb2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800dfb6:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800dfb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dfbc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800dfc0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800dfc4:	b29a      	uxth	r2, r3
 800dfc6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800dfca:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800dfcc:	2300      	movs	r3, #0
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd90      	pop	{r4, r7, pc}

0800dfd8 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b0cc      	sub	sp, #304	; 0x130
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	4602      	mov	r2, r0
 800dfe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dfe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800dfe8:	6019      	str	r1, [r3, #0]
 800dfea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dfee:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800dff2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800dff4:	f107 0310 	add.w	r3, r7, #16
 800dff8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800dffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e000:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e004:	2200      	movs	r2, #0
 800e006:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e008:	2300      	movs	r3, #0
 800e00a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800e00e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e012:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e016:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800e01a:	7812      	ldrb	r2, [r2, #0]
 800e01c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e01e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e022:	3301      	adds	r3, #1
 800e024:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800e028:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e02c:	1c58      	adds	r0, r3, #1
 800e02e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e032:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e036:	781a      	ldrb	r2, [r3, #0]
 800e038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e03c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e040:	6819      	ldr	r1, [r3, #0]
 800e042:	f000 fdc3 	bl	800ebcc <Osal_MemCpy>
  index_input += AdvDataLen;
 800e046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e04a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e054:	4413      	add	r3, r2
 800e056:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e05a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e05e:	2218      	movs	r2, #24
 800e060:	2100      	movs	r1, #0
 800e062:	4618      	mov	r0, r3
 800e064:	f000 fdc2 	bl	800ebec <Osal_MemSet>
  rq.ogf = 0x3f;
 800e068:	233f      	movs	r3, #63	; 0x3f
 800e06a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800e06e:	238e      	movs	r3, #142	; 0x8e
 800e070:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e074:	f107 0310 	add.w	r3, r7, #16
 800e078:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e07c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e080:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e084:	f107 030f 	add.w	r3, r7, #15
 800e088:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e08c:	2301      	movs	r3, #1
 800e08e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e092:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e096:	2100      	movs	r1, #0
 800e098:	4618      	mov	r0, r3
 800e09a:	f001 f957 	bl	800f34c <hci_send_req>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	da01      	bge.n	800e0a8 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800e0a4:	23ff      	movs	r3, #255	; 0xff
 800e0a6:	e004      	b.n	800e0b2 <aci_gap_update_adv_data+0xda>
  return status;
 800e0a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e0ac:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e0b0:	781b      	ldrb	r3, [r3, #0]
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}

0800e0bc <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b088      	sub	sp, #32
 800e0c0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e0c6:	f107 0308 	add.w	r3, r7, #8
 800e0ca:	2218      	movs	r2, #24
 800e0cc:	2100      	movs	r1, #0
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f000 fd8c 	bl	800ebec <Osal_MemSet>
  rq.ogf = 0x3f;
 800e0d4:	233f      	movs	r3, #63	; 0x3f
 800e0d6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800e0d8:	2392      	movs	r3, #146	; 0x92
 800e0da:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e0dc:	1dfb      	adds	r3, r7, #7
 800e0de:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e0e4:	f107 0308 	add.w	r3, r7, #8
 800e0e8:	2100      	movs	r1, #0
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f001 f92e 	bl	800f34c <hci_send_req>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	da01      	bge.n	800e0fa <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800e0f6:	23ff      	movs	r3, #255	; 0xff
 800e0f8:	e000      	b.n	800e0fc <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800e0fa:	79fb      	ldrb	r3, [r7, #7]
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3720      	adds	r7, #32
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}

0800e104 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b088      	sub	sp, #32
 800e108:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800e10a:	2300      	movs	r3, #0
 800e10c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e10e:	f107 0308 	add.w	r3, r7, #8
 800e112:	2218      	movs	r2, #24
 800e114:	2100      	movs	r1, #0
 800e116:	4618      	mov	r0, r3
 800e118:	f000 fd68 	bl	800ebec <Osal_MemSet>
  rq.ogf = 0x3f;
 800e11c:	233f      	movs	r3, #63	; 0x3f
 800e11e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800e120:	f240 1301 	movw	r3, #257	; 0x101
 800e124:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e126:	1dfb      	adds	r3, r7, #7
 800e128:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e12a:	2301      	movs	r3, #1
 800e12c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e12e:	f107 0308 	add.w	r3, r7, #8
 800e132:	2100      	movs	r1, #0
 800e134:	4618      	mov	r0, r3
 800e136:	f001 f909 	bl	800f34c <hci_send_req>
 800e13a:	4603      	mov	r3, r0
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	da01      	bge.n	800e144 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800e140:	23ff      	movs	r3, #255	; 0xff
 800e142:	e000      	b.n	800e146 <aci_gatt_init+0x42>
  return status;
 800e144:	79fb      	ldrb	r3, [r7, #7]
}
 800e146:	4618      	mov	r0, r3
 800e148:	3720      	adds	r7, #32
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}

0800e14e <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800e14e:	b590      	push	{r4, r7, lr}
 800e150:	b0cf      	sub	sp, #316	; 0x13c
 800e152:	af00      	add	r7, sp, #0
 800e154:	4604      	mov	r4, r0
 800e156:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800e15a:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800e15e:	6001      	str	r1, [r0, #0]
 800e160:	4610      	mov	r0, r2
 800e162:	4619      	mov	r1, r3
 800e164:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e168:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800e16c:	4622      	mov	r2, r4
 800e16e:	701a      	strb	r2, [r3, #0]
 800e170:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e174:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800e178:	4602      	mov	r2, r0
 800e17a:	701a      	strb	r2, [r3, #0]
 800e17c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e180:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800e184:	460a      	mov	r2, r1
 800e186:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800e188:	f107 0310 	add.w	r3, r7, #16
 800e18c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800e190:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e194:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800e198:	781b      	ldrb	r3, [r3, #0]
 800e19a:	2b01      	cmp	r3, #1
 800e19c:	d00a      	beq.n	800e1b4 <aci_gatt_add_service+0x66>
 800e19e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e1a2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800e1a6:	781b      	ldrb	r3, [r3, #0]
 800e1a8:	2b02      	cmp	r3, #2
 800e1aa:	d101      	bne.n	800e1b0 <aci_gatt_add_service+0x62>
 800e1ac:	2311      	movs	r3, #17
 800e1ae:	e002      	b.n	800e1b6 <aci_gatt_add_service+0x68>
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	e000      	b.n	800e1b6 <aci_gatt_add_service+0x68>
 800e1b4:	2303      	movs	r3, #3
 800e1b6:	f107 0210 	add.w	r2, r7, #16
 800e1ba:	4413      	add	r3, r2
 800e1bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800e1c0:	f107 030c 	add.w	r3, r7, #12
 800e1c4:	2203      	movs	r2, #3
 800e1c6:	2100      	movs	r1, #0
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f000 fd0f 	bl	800ebec <Osal_MemSet>
  int index_input = 0;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800e1d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e1d8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e1dc:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800e1e0:	7812      	ldrb	r2, [r2, #0]
 800e1e2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e1e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800e1ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e1f2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800e1f6:	781b      	ldrb	r3, [r3, #0]
 800e1f8:	2b01      	cmp	r3, #1
 800e1fa:	d002      	beq.n	800e202 <aci_gatt_add_service+0xb4>
 800e1fc:	2b02      	cmp	r3, #2
 800e1fe:	d004      	beq.n	800e20a <aci_gatt_add_service+0xbc>
 800e200:	e007      	b.n	800e212 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800e202:	2302      	movs	r3, #2
 800e204:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800e208:	e005      	b.n	800e216 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800e20a:	2310      	movs	r3, #16
 800e20c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800e210:	e001      	b.n	800e216 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800e212:	2397      	movs	r3, #151	; 0x97
 800e214:	e06c      	b.n	800e2f0 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800e216:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e21a:	1c58      	adds	r0, r3, #1
 800e21c:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800e220:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e224:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e228:	6819      	ldr	r1, [r3, #0]
 800e22a:	f000 fccf 	bl	800ebcc <Osal_MemCpy>
    index_input += size;
 800e22e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800e232:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e236:	4413      	add	r3, r2
 800e238:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800e23c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e240:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e244:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800e248:	7812      	ldrb	r2, [r2, #0]
 800e24a:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800e24c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e250:	3301      	adds	r3, #1
 800e252:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800e256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e25a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e25e:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800e262:	7812      	ldrb	r2, [r2, #0]
 800e264:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800e266:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e26a:	3301      	adds	r3, #1
 800e26c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e270:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e274:	2218      	movs	r2, #24
 800e276:	2100      	movs	r1, #0
 800e278:	4618      	mov	r0, r3
 800e27a:	f000 fcb7 	bl	800ebec <Osal_MemSet>
  rq.ogf = 0x3f;
 800e27e:	233f      	movs	r3, #63	; 0x3f
 800e280:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800e284:	f44f 7381 	mov.w	r3, #258	; 0x102
 800e288:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e28c:	f107 0310 	add.w	r3, r7, #16
 800e290:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e294:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e298:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800e29c:	f107 030c 	add.w	r3, r7, #12
 800e2a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800e2a4:	2303      	movs	r3, #3
 800e2a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e2aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e2ae:	2100      	movs	r1, #0
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f001 f84b 	bl	800f34c <hci_send_req>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	da01      	bge.n	800e2c0 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800e2bc:	23ff      	movs	r3, #255	; 0xff
 800e2be:	e017      	b.n	800e2f0 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800e2c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e2c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e2c8:	781b      	ldrb	r3, [r3, #0]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d005      	beq.n	800e2da <aci_gatt_add_service+0x18c>
    return resp.Status;
 800e2ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e2d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e2d6:	781b      	ldrb	r3, [r3, #0]
 800e2d8:	e00a      	b.n	800e2f0 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800e2da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e2de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e2e2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e2e6:	b29a      	uxth	r2, r3
 800e2e8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e2ec:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800e2ee:	2300      	movs	r3, #0
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd90      	pop	{r4, r7, pc}

0800e2fa <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800e2fa:	b590      	push	{r4, r7, lr}
 800e2fc:	b0d1      	sub	sp, #324	; 0x144
 800e2fe:	af00      	add	r7, sp, #0
 800e300:	4604      	mov	r4, r0
 800e302:	4608      	mov	r0, r1
 800e304:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800e308:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800e30c:	600a      	str	r2, [r1, #0]
 800e30e:	4619      	mov	r1, r3
 800e310:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e314:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800e318:	4622      	mov	r2, r4
 800e31a:	801a      	strh	r2, [r3, #0]
 800e31c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e320:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800e324:	4602      	mov	r2, r0
 800e326:	701a      	strb	r2, [r3, #0]
 800e328:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e32c:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800e330:	460a      	mov	r2, r1
 800e332:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800e334:	f107 0318 	add.w	r3, r7, #24
 800e338:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800e33c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e340:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800e344:	781b      	ldrb	r3, [r3, #0]
 800e346:	2b01      	cmp	r3, #1
 800e348:	d00a      	beq.n	800e360 <aci_gatt_add_char+0x66>
 800e34a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e34e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800e352:	781b      	ldrb	r3, [r3, #0]
 800e354:	2b02      	cmp	r3, #2
 800e356:	d101      	bne.n	800e35c <aci_gatt_add_char+0x62>
 800e358:	2313      	movs	r3, #19
 800e35a:	e002      	b.n	800e362 <aci_gatt_add_char+0x68>
 800e35c:	2303      	movs	r3, #3
 800e35e:	e000      	b.n	800e362 <aci_gatt_add_char+0x68>
 800e360:	2305      	movs	r3, #5
 800e362:	f107 0218 	add.w	r2, r7, #24
 800e366:	4413      	add	r3, r2
 800e368:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800e36c:	f107 0314 	add.w	r3, r7, #20
 800e370:	2203      	movs	r2, #3
 800e372:	2100      	movs	r1, #0
 800e374:	4618      	mov	r0, r3
 800e376:	f000 fc39 	bl	800ebec <Osal_MemSet>
  int index_input = 0;
 800e37a:	2300      	movs	r3, #0
 800e37c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800e380:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e384:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800e388:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800e38c:	8812      	ldrh	r2, [r2, #0]
 800e38e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e390:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e394:	3302      	adds	r3, #2
 800e396:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800e39a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e39e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800e3a2:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800e3a6:	7812      	ldrb	r2, [r2, #0]
 800e3a8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800e3aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800e3b4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e3b8:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	2b01      	cmp	r3, #1
 800e3c0:	d002      	beq.n	800e3c8 <aci_gatt_add_char+0xce>
 800e3c2:	2b02      	cmp	r3, #2
 800e3c4:	d004      	beq.n	800e3d0 <aci_gatt_add_char+0xd6>
 800e3c6:	e007      	b.n	800e3d8 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800e3c8:	2302      	movs	r3, #2
 800e3ca:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800e3ce:	e005      	b.n	800e3dc <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800e3d0:	2310      	movs	r3, #16
 800e3d2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800e3d6:	e001      	b.n	800e3dc <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800e3d8:	2397      	movs	r3, #151	; 0x97
 800e3da:	e091      	b.n	800e500 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800e3dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e3e0:	1cd8      	adds	r0, r3, #3
 800e3e2:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800e3e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e3ea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e3ee:	6819      	ldr	r1, [r3, #0]
 800e3f0:	f000 fbec 	bl	800ebcc <Osal_MemCpy>
    index_input += size;
 800e3f4:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800e3f8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800e3fc:	4413      	add	r3, r2
 800e3fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800e402:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e406:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800e40a:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800e40e:	8812      	ldrh	r2, [r2, #0]
 800e410:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800e412:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e416:	3302      	adds	r3, #2
 800e418:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800e41c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e420:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800e424:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800e426:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e42a:	3301      	adds	r3, #1
 800e42c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800e430:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e434:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800e438:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800e43a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e43e:	3301      	adds	r3, #1
 800e440:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800e444:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e448:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800e44c:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800e44e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e452:	3301      	adds	r3, #1
 800e454:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800e458:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e45c:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800e460:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800e462:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e466:	3301      	adds	r3, #1
 800e468:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800e46c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e470:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800e474:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800e476:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e47a:	3301      	adds	r3, #1
 800e47c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e480:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800e484:	2218      	movs	r2, #24
 800e486:	2100      	movs	r1, #0
 800e488:	4618      	mov	r0, r3
 800e48a:	f000 fbaf 	bl	800ebec <Osal_MemSet>
  rq.ogf = 0x3f;
 800e48e:	233f      	movs	r3, #63	; 0x3f
 800e490:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800e494:	f44f 7382 	mov.w	r3, #260	; 0x104
 800e498:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800e49c:	f107 0318 	add.w	r3, r7, #24
 800e4a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800e4a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e4a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800e4ac:	f107 0314 	add.w	r3, r7, #20
 800e4b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800e4b4:	2303      	movs	r3, #3
 800e4b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e4ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800e4be:	2100      	movs	r1, #0
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f000 ff43 	bl	800f34c <hci_send_req>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	da01      	bge.n	800e4d0 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800e4cc:	23ff      	movs	r3, #255	; 0xff
 800e4ce:	e017      	b.n	800e500 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800e4d0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e4d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e4d8:	781b      	ldrb	r3, [r3, #0]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d005      	beq.n	800e4ea <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800e4de:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e4e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e4e6:	781b      	ldrb	r3, [r3, #0]
 800e4e8:	e00a      	b.n	800e500 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800e4ea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e4ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e4f2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e4f6:	b29a      	uxth	r2, r3
 800e4f8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800e4fc:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800e4fe:	2300      	movs	r3, #0
}
 800e500:	4618      	mov	r0, r3
 800e502:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800e506:	46bd      	mov	sp, r7
 800e508:	bd90      	pop	{r4, r7, pc}

0800e50a <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800e50a:	b5b0      	push	{r4, r5, r7, lr}
 800e50c:	b0cc      	sub	sp, #304	; 0x130
 800e50e:	af00      	add	r7, sp, #0
 800e510:	4605      	mov	r5, r0
 800e512:	460c      	mov	r4, r1
 800e514:	4610      	mov	r0, r2
 800e516:	4619      	mov	r1, r3
 800e518:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e51c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e520:	462a      	mov	r2, r5
 800e522:	801a      	strh	r2, [r3, #0]
 800e524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e528:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e52c:	4622      	mov	r2, r4
 800e52e:	801a      	strh	r2, [r3, #0]
 800e530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e534:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800e538:	4602      	mov	r2, r0
 800e53a:	701a      	strb	r2, [r3, #0]
 800e53c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e540:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800e544:	460a      	mov	r2, r1
 800e546:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800e548:	f107 0310 	add.w	r3, r7, #16
 800e54c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e550:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e554:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e558:	2200      	movs	r2, #0
 800e55a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e55c:	2300      	movs	r3, #0
 800e55e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800e562:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e566:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e56a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e56e:	8812      	ldrh	r2, [r2, #0]
 800e570:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e572:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e576:	3302      	adds	r3, #2
 800e578:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800e57c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e580:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e584:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800e588:	8812      	ldrh	r2, [r2, #0]
 800e58a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800e58c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e590:	3302      	adds	r3, #2
 800e592:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800e596:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e59a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e59e:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800e5a2:	7812      	ldrb	r2, [r2, #0]
 800e5a4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800e5a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800e5b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e5b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e5b8:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800e5bc:	7812      	ldrb	r2, [r2, #0]
 800e5be:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800e5c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e5c4:	3301      	adds	r3, #1
 800e5c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800e5ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e5ce:	1d98      	adds	r0, r3, #6
 800e5d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e5d4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800e5d8:	781b      	ldrb	r3, [r3, #0]
 800e5da:	461a      	mov	r2, r3
 800e5dc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800e5e0:	f000 faf4 	bl	800ebcc <Osal_MemCpy>
  index_input += Char_Value_Length;
 800e5e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e5e8:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800e5ec:	781b      	ldrb	r3, [r3, #0]
 800e5ee:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e5f2:	4413      	add	r3, r2
 800e5f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e5f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e5fc:	2218      	movs	r2, #24
 800e5fe:	2100      	movs	r1, #0
 800e600:	4618      	mov	r0, r3
 800e602:	f000 faf3 	bl	800ebec <Osal_MemSet>
  rq.ogf = 0x3f;
 800e606:	233f      	movs	r3, #63	; 0x3f
 800e608:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800e60c:	f44f 7383 	mov.w	r3, #262	; 0x106
 800e610:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e614:	f107 0310 	add.w	r3, r7, #16
 800e618:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e61c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e620:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e624:	f107 030f 	add.w	r3, r7, #15
 800e628:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e62c:	2301      	movs	r3, #1
 800e62e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e632:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e636:	2100      	movs	r1, #0
 800e638:	4618      	mov	r0, r3
 800e63a:	f000 fe87 	bl	800f34c <hci_send_req>
 800e63e:	4603      	mov	r3, r0
 800e640:	2b00      	cmp	r3, #0
 800e642:	da01      	bge.n	800e648 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800e644:	23ff      	movs	r3, #255	; 0xff
 800e646:	e004      	b.n	800e652 <aci_gatt_update_char_value+0x148>
  return status;
 800e648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e64c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e650:	781b      	ldrb	r3, [r3, #0]
}
 800e652:	4618      	mov	r0, r3
 800e654:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e658:	46bd      	mov	sp, r7
 800e65a:	bdb0      	pop	{r4, r5, r7, pc}

0800e65c <aci_gatt_write_resp>:
                                uint16_t Attr_Handle,
                                uint8_t Write_status,
                                uint8_t Error_Code,
                                uint8_t Attribute_Val_Length,
                                const uint8_t* Attribute_Val )
{
 800e65c:	b5b0      	push	{r4, r5, r7, lr}
 800e65e:	b0cc      	sub	sp, #304	; 0x130
 800e660:	af00      	add	r7, sp, #0
 800e662:	4605      	mov	r5, r0
 800e664:	460c      	mov	r4, r1
 800e666:	4610      	mov	r0, r2
 800e668:	4619      	mov	r1, r3
 800e66a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e66e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e672:	462a      	mov	r2, r5
 800e674:	801a      	strh	r2, [r3, #0]
 800e676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e67a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e67e:	4622      	mov	r2, r4
 800e680:	801a      	strh	r2, [r3, #0]
 800e682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e686:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800e68a:	4602      	mov	r2, r0
 800e68c:	701a      	strb	r2, [r3, #0]
 800e68e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e692:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800e696:	460a      	mov	r2, r1
 800e698:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_resp_cp0 *cp0 = (aci_gatt_write_resp_cp0*)(cmd_buffer);
 800e69a:	f107 0310 	add.w	r3, r7, #16
 800e69e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e6a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e6a6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800e6b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e6b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e6bc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e6c0:	8812      	ldrh	r2, [r2, #0]
 800e6c2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e6c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e6c8:	3302      	adds	r3, #2
 800e6ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Attr_Handle = Attr_Handle;
 800e6ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e6d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e6d6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800e6da:	8812      	ldrh	r2, [r2, #0]
 800e6dc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800e6de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e6e2:	3302      	adds	r3, #2
 800e6e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Write_status = Write_status;
 800e6e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e6ec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e6f0:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800e6f4:	7812      	ldrb	r2, [r2, #0]
 800e6f6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800e6f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Error_Code = Error_Code;
 800e702:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e706:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e70a:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800e70e:	7812      	ldrb	r2, [r2, #0]
 800e710:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800e712:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e716:	3301      	adds	r3, #1
 800e718:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 800e71c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e720:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800e724:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800e726:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e72a:	3301      	adds	r3, #1
 800e72c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 800e730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e734:	3307      	adds	r3, #7
 800e736:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800e73a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800e73e:	4618      	mov	r0, r3
 800e740:	f000 fa44 	bl	800ebcc <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 800e744:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 800e748:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e74c:	4413      	add	r3, r2
 800e74e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e752:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e756:	2218      	movs	r2, #24
 800e758:	2100      	movs	r1, #0
 800e75a:	4618      	mov	r0, r3
 800e75c:	f000 fa46 	bl	800ebec <Osal_MemSet>
  rq.ogf = 0x3f;
 800e760:	233f      	movs	r3, #63	; 0x3f
 800e762:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x126;
 800e766:	f44f 7393 	mov.w	r3, #294	; 0x126
 800e76a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e76e:	f107 0310 	add.w	r3, r7, #16
 800e772:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e776:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e77a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e77e:	f107 030f 	add.w	r3, r7, #15
 800e782:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e786:	2301      	movs	r3, #1
 800e788:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e78c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e790:	2100      	movs	r1, #0
 800e792:	4618      	mov	r0, r3
 800e794:	f000 fdda 	bl	800f34c <hci_send_req>
 800e798:	4603      	mov	r3, r0
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	da01      	bge.n	800e7a2 <aci_gatt_write_resp+0x146>
    return BLE_STATUS_TIMEOUT;
 800e79e:	23ff      	movs	r3, #255	; 0xff
 800e7a0:	e004      	b.n	800e7ac <aci_gatt_write_resp+0x150>
  return status;
 800e7a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e7a6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e7aa:	781b      	ldrb	r3, [r3, #0]
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bdb0      	pop	{r4, r5, r7, pc}

0800e7b6 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800e7b6:	b580      	push	{r7, lr}
 800e7b8:	b0cc      	sub	sp, #304	; 0x130
 800e7ba:	af00      	add	r7, sp, #0
 800e7bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e7c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e7c4:	601a      	str	r2, [r3, #0]
 800e7c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e7ca:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e7ce:	4602      	mov	r2, r0
 800e7d0:	701a      	strb	r2, [r3, #0]
 800e7d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e7d6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e7da:	460a      	mov	r2, r1
 800e7dc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800e7de:	f107 0310 	add.w	r3, r7, #16
 800e7e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e7e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e7ea:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800e7f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e7fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e800:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800e804:	7812      	ldrb	r2, [r2, #0]
 800e806:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e808:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e80c:	3301      	adds	r3, #1
 800e80e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800e812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e816:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e81a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e81e:	7812      	ldrb	r2, [r2, #0]
 800e820:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e822:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e826:	3301      	adds	r3, #1
 800e828:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800e82c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e830:	1c98      	adds	r0, r3, #2
 800e832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e836:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e83a:	781a      	ldrb	r2, [r3, #0]
 800e83c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e844:	6819      	ldr	r1, [r3, #0]
 800e846:	f000 f9c1 	bl	800ebcc <Osal_MemCpy>
  index_input += Length;
 800e84a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e84e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e852:	781b      	ldrb	r3, [r3, #0]
 800e854:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e858:	4413      	add	r3, r2
 800e85a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e85e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e862:	2218      	movs	r2, #24
 800e864:	2100      	movs	r1, #0
 800e866:	4618      	mov	r0, r3
 800e868:	f000 f9c0 	bl	800ebec <Osal_MemSet>
  rq.ogf = 0x3f;
 800e86c:	233f      	movs	r3, #63	; 0x3f
 800e86e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800e872:	230c      	movs	r3, #12
 800e874:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e878:	f107 0310 	add.w	r3, r7, #16
 800e87c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e880:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e884:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e888:	f107 030f 	add.w	r3, r7, #15
 800e88c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e890:	2301      	movs	r3, #1
 800e892:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e896:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e89a:	2100      	movs	r1, #0
 800e89c:	4618      	mov	r0, r3
 800e89e:	f000 fd55 	bl	800f34c <hci_send_req>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	da01      	bge.n	800e8ac <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800e8a8:	23ff      	movs	r3, #255	; 0xff
 800e8aa:	e004      	b.n	800e8b6 <aci_hal_write_config_data+0x100>
  return status;
 800e8ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e8b0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e8b4:	781b      	ldrb	r3, [r3, #0]
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b0cc      	sub	sp, #304	; 0x130
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	4602      	mov	r2, r0
 800e8c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e8cc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e8d0:	701a      	strb	r2, [r3, #0]
 800e8d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e8d6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e8da:	460a      	mov	r2, r1
 800e8dc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800e8de:	f107 0310 	add.w	r3, r7, #16
 800e8e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e8e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e8ea:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800e8f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e8fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e900:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800e904:	7812      	ldrb	r2, [r2, #0]
 800e906:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e908:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e90c:	3301      	adds	r3, #1
 800e90e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800e912:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e916:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e91a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e91e:	7812      	ldrb	r2, [r2, #0]
 800e920:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e922:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e926:	3301      	adds	r3, #1
 800e928:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e92c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e930:	2218      	movs	r2, #24
 800e932:	2100      	movs	r1, #0
 800e934:	4618      	mov	r0, r3
 800e936:	f000 f959 	bl	800ebec <Osal_MemSet>
  rq.ogf = 0x3f;
 800e93a:	233f      	movs	r3, #63	; 0x3f
 800e93c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800e940:	230f      	movs	r3, #15
 800e942:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e946:	f107 0310 	add.w	r3, r7, #16
 800e94a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e94e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e952:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e956:	f107 030f 	add.w	r3, r7, #15
 800e95a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e95e:	2301      	movs	r3, #1
 800e960:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e964:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e968:	2100      	movs	r1, #0
 800e96a:	4618      	mov	r0, r3
 800e96c:	f000 fcee 	bl	800f34c <hci_send_req>
 800e970:	4603      	mov	r3, r0
 800e972:	2b00      	cmp	r3, #0
 800e974:	da01      	bge.n	800e97a <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800e976:	23ff      	movs	r3, #255	; 0xff
 800e978:	e004      	b.n	800e984 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800e97a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e97e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e982:	781b      	ldrb	r3, [r3, #0]
}
 800e984:	4618      	mov	r0, r3
 800e986:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}

0800e98e <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800e98e:	b580      	push	{r7, lr}
 800e990:	b088      	sub	sp, #32
 800e992:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800e994:	2300      	movs	r3, #0
 800e996:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e998:	f107 0308 	add.w	r3, r7, #8
 800e99c:	2218      	movs	r2, #24
 800e99e:	2100      	movs	r1, #0
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f000 f923 	bl	800ebec <Osal_MemSet>
  rq.ogf = 0x03;
 800e9a6:	2303      	movs	r3, #3
 800e9a8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800e9aa:	2303      	movs	r3, #3
 800e9ac:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e9ae:	1dfb      	adds	r3, r7, #7
 800e9b0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e9b6:	f107 0308 	add.w	r3, r7, #8
 800e9ba:	2100      	movs	r1, #0
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f000 fcc5 	bl	800f34c <hci_send_req>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	da01      	bge.n	800e9cc <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800e9c8:	23ff      	movs	r3, #255	; 0xff
 800e9ca:	e000      	b.n	800e9ce <hci_reset+0x40>
  return status;
 800e9cc:	79fb      	ldrb	r3, [r7, #7]
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3720      	adds	r7, #32
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}

0800e9d6 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800e9d6:	b580      	push	{r7, lr}
 800e9d8:	b0ce      	sub	sp, #312	; 0x138
 800e9da:	af00      	add	r7, sp, #0
 800e9dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e9e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e9e4:	6019      	str	r1, [r3, #0]
 800e9e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e9ea:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800e9ee:	601a      	str	r2, [r3, #0]
 800e9f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e9f4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e9f8:	4602      	mov	r2, r0
 800e9fa:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800e9fc:	f107 0318 	add.w	r3, r7, #24
 800ea00:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800ea04:	f107 0310 	add.w	r3, r7, #16
 800ea08:	2205      	movs	r2, #5
 800ea0a:	2100      	movs	r1, #0
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f000 f8ed 	bl	800ebec <Osal_MemSet>
  int index_input = 0;
 800ea12:	2300      	movs	r3, #0
 800ea14:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800ea18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ea1c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ea20:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ea24:	8812      	ldrh	r2, [r2, #0]
 800ea26:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ea28:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ea2c:	3302      	adds	r3, #2
 800ea2e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ea32:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ea36:	2218      	movs	r2, #24
 800ea38:	2100      	movs	r1, #0
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f000 f8d6 	bl	800ebec <Osal_MemSet>
  rq.ogf = 0x08;
 800ea40:	2308      	movs	r3, #8
 800ea42:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800ea46:	2330      	movs	r3, #48	; 0x30
 800ea48:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800ea4c:	f107 0318 	add.w	r3, r7, #24
 800ea50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800ea54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ea58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800ea5c:	f107 0310 	add.w	r3, r7, #16
 800ea60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800ea64:	2305      	movs	r3, #5
 800ea66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ea6a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ea6e:	2100      	movs	r1, #0
 800ea70:	4618      	mov	r0, r3
 800ea72:	f000 fc6b 	bl	800f34c <hci_send_req>
 800ea76:	4603      	mov	r3, r0
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	da01      	bge.n	800ea80 <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 800ea7c:	23ff      	movs	r3, #255	; 0xff
 800ea7e:	e023      	b.n	800eac8 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 800ea80:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ea84:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800ea88:	781b      	ldrb	r3, [r3, #0]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d005      	beq.n	800ea9a <hci_le_read_phy+0xc4>
    return resp.Status;
 800ea8e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ea92:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	e016      	b.n	800eac8 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 800ea9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ea9e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800eaa2:	78da      	ldrb	r2, [r3, #3]
 800eaa4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800eaa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800eab0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800eab4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800eab8:	791a      	ldrb	r2, [r3, #4]
 800eaba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800eabe:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800eac6:	2300      	movs	r3, #0
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}

0800ead2 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800ead2:	b590      	push	{r4, r7, lr}
 800ead4:	b0cd      	sub	sp, #308	; 0x134
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	4604      	mov	r4, r0
 800eada:	4608      	mov	r0, r1
 800eadc:	4611      	mov	r1, r2
 800eade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eae2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800eae6:	4622      	mov	r2, r4
 800eae8:	701a      	strb	r2, [r3, #0]
 800eaea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eaee:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800eaf2:	4602      	mov	r2, r0
 800eaf4:	701a      	strb	r2, [r3, #0]
 800eaf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eafa:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800eafe:	460a      	mov	r2, r1
 800eb00:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800eb02:	f107 0310 	add.w	r3, r7, #16
 800eb06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800eb0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eb0e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800eb12:	2200      	movs	r2, #0
 800eb14:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800eb16:	2300      	movs	r3, #0
 800eb18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800eb1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eb20:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800eb24:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800eb28:	7812      	ldrb	r2, [r2, #0]
 800eb2a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800eb2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eb30:	3301      	adds	r3, #1
 800eb32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800eb36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eb3a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800eb3e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800eb42:	7812      	ldrb	r2, [r2, #0]
 800eb44:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800eb46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800eb50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eb54:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800eb58:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800eb5c:	7812      	ldrb	r2, [r2, #0]
 800eb5e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800eb60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eb64:	3301      	adds	r3, #1
 800eb66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800eb6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800eb6e:	2218      	movs	r2, #24
 800eb70:	2100      	movs	r1, #0
 800eb72:	4618      	mov	r0, r3
 800eb74:	f000 f83a 	bl	800ebec <Osal_MemSet>
  rq.ogf = 0x08;
 800eb78:	2308      	movs	r3, #8
 800eb7a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800eb7e:	2331      	movs	r3, #49	; 0x31
 800eb80:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800eb84:	f107 0310 	add.w	r3, r7, #16
 800eb88:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800eb8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eb90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800eb94:	f107 030f 	add.w	r3, r7, #15
 800eb98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800eba2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800eba6:	2100      	movs	r1, #0
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f000 fbcf 	bl	800f34c <hci_send_req>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	da01      	bge.n	800ebb8 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800ebb4:	23ff      	movs	r3, #255	; 0xff
 800ebb6:	e004      	b.n	800ebc2 <hci_le_set_default_phy+0xf0>
  return status;
 800ebb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ebbc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ebc0:	781b      	ldrb	r3, [r3, #0]
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd90      	pop	{r4, r7, pc}

0800ebcc <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b084      	sub	sp, #16
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	60f8      	str	r0, [r7, #12]
 800ebd4:	60b9      	str	r1, [r7, #8]
 800ebd6:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800ebd8:	687a      	ldr	r2, [r7, #4]
 800ebda:	68b9      	ldr	r1, [r7, #8]
 800ebdc:	68f8      	ldr	r0, [r7, #12]
 800ebde:	f006 fa91 	bl	8015104 <memcpy>
 800ebe2:	4603      	mov	r3, r0
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3710      	adds	r7, #16
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}

0800ebec <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b084      	sub	sp, #16
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	60f8      	str	r0, [r7, #12]
 800ebf4:	60b9      	str	r1, [r7, #8]
 800ebf6:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800ebf8:	687a      	ldr	r2, [r7, #4]
 800ebfa:	68b9      	ldr	r1, [r7, #8]
 800ebfc:	68f8      	ldr	r0, [r7, #12]
 800ebfe:	f006 fa3f 	bl	8015080 <memset>
 800ec02:	4603      	mov	r3, r0
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3710      	adds	r7, #16
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}

0800ec0c <DIS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void DIS_Init(void)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b088      	sub	sp, #32
 800ec10:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult;

  memset ( &DIS_Context, 0, sizeof(DIS_Context_t) );
 800ec12:	2204      	movs	r2, #4
 800ec14:	2100      	movs	r1, #0
 800ec16:	4816      	ldr	r0, [pc, #88]	; (800ec70 <DIS_Init+0x64>)
 800ec18:	f006 fa32 	bl	8015080 <memset>
   */

  /**
   *  Add Device Information Service
   */
  uuid = DEVICE_INFORMATION_SERVICE_UUID;
 800ec1c:	f641 030a 	movw	r3, #6154	; 0x180a
 800ec20:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 800ec22:	1d39      	adds	r1, r7, #4
 800ec24:	4b12      	ldr	r3, [pc, #72]	; (800ec70 <DIS_Init+0x64>)
 800ec26:	9300      	str	r3, [sp, #0]
 800ec28:	2303      	movs	r3, #3
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	2001      	movs	r0, #1
 800ec2e:	f7ff fa8e 	bl	800e14e <aci_gatt_add_service>
 800ec32:	4603      	mov	r3, r0
 800ec34:	71fb      	strb	r3, [r7, #7]

#if (BLE_CFG_DIS_MANUFACTURER_NAME_STRING != 0)
  /**
   *  Add Manufacturer Name String Characteristic
   */
  uuid = MANUFACTURER_NAME_UUID;
 800ec36:	f642 2329 	movw	r3, #10793	; 0x2a29
 800ec3a:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(DIS_Context.DeviceInformationSvcHdle,
 800ec3c:	4b0c      	ldr	r3, [pc, #48]	; (800ec70 <DIS_Init+0x64>)
 800ec3e:	8818      	ldrh	r0, [r3, #0]
 800ec40:	1d3a      	adds	r2, r7, #4
 800ec42:	4b0c      	ldr	r3, [pc, #48]	; (800ec74 <DIS_Init+0x68>)
 800ec44:	9305      	str	r3, [sp, #20]
 800ec46:	2301      	movs	r3, #1
 800ec48:	9304      	str	r3, [sp, #16]
 800ec4a:	230a      	movs	r3, #10
 800ec4c:	9303      	str	r3, [sp, #12]
 800ec4e:	2300      	movs	r3, #0
 800ec50:	9302      	str	r3, [sp, #8]
 800ec52:	2300      	movs	r3, #0
 800ec54:	9301      	str	r3, [sp, #4]
 800ec56:	2302      	movs	r3, #2
 800ec58:	9300      	str	r3, [sp, #0]
 800ec5a:	2320      	movs	r3, #32
 800ec5c:	2101      	movs	r1, #1
 800ec5e:	f7ff fb4c 	bl	800e2fa <aci_gatt_add_char>
 800ec62:	4603      	mov	r3, r0
 800ec64:	71fb      	strb	r3, [r7, #7]
    BLE_DBG_DIS_MSG ("FAILED to add PNP ID Characteristic, Error: %02X !!\n", 
                hciCmdResult);
  }
#endif
      
  return;
 800ec66:	bf00      	nop
}
 800ec68:	3708      	adds	r7, #8
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}
 800ec6e:	bf00      	nop
 800ec70:	20000964 	.word	0x20000964
 800ec74:	20000966 	.word	0x20000966

0800ec78 <HeartRate_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t HeartRate_Event_Handler(void *Event)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b08e      	sub	sp, #56	; 0x38
 800ec7c:	af02      	add	r7, sp, #8
 800ec7e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  HRS_App_Notification_evt_t Notification;
  
  return_value = SVCCTL_EvtNotAck;
 800ec80:	2300      	movs	r3, #0
 800ec82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	3301      	adds	r3, #1
 800ec8a:	62bb      	str	r3, [r7, #40]	; 0x28

  switch(event_pckt->evt)
 800ec8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	2bff      	cmp	r3, #255	; 0xff
 800ec92:	d174      	bne.n	800ed7e <HeartRate_Event_Handler+0x106>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800ec94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec96:	3302      	adds	r3, #2
 800ec98:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blecore_evt->ecode)
 800ec9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec9c:	881b      	ldrh	r3, [r3, #0]
 800ec9e:	b29b      	uxth	r3, r3
 800eca0:	f640 4201 	movw	r2, #3073	; 0xc01
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d03f      	beq.n	800ed28 <HeartRate_Event_Handler+0xb0>
 800eca8:	f640 4213 	movw	r2, #3091	; 0xc13
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d160      	bne.n	800ed72 <HeartRate_Event_Handler+0xfa>
        case ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE:
        {
          aci_gatt_write_permit_req_event_rp0 * write_perm_req;

          BLE_DBG_HRS_MSG("ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE\n");
          write_perm_req = (aci_gatt_write_permit_req_event_rp0*)blecore_evt->data;
 800ecb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb2:	3302      	adds	r3, #2
 800ecb4:	623b      	str	r3, [r7, #32]

          if(write_perm_req->Attribute_Handle == (HRS_Context.ControlPointCharHdle + 1))
 800ecb6:	6a3b      	ldr	r3, [r7, #32]
 800ecb8:	885b      	ldrh	r3, [r3, #2]
 800ecba:	b29b      	uxth	r3, r3
 800ecbc:	461a      	mov	r2, r3
 800ecbe:	4b33      	ldr	r3, [pc, #204]	; (800ed8c <HeartRate_Event_Handler+0x114>)
 800ecc0:	88db      	ldrh	r3, [r3, #6]
 800ecc2:	3301      	adds	r3, #1
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	d156      	bne.n	800ed76 <HeartRate_Event_Handler+0xfe>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800ecc8:	2301      	movs	r3, #1
 800ecca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            if (write_perm_req->Data[0] == HRS_CNTL_POINT_RESET_ENERGY_EXPENDED)
 800ecce:	6a3b      	ldr	r3, [r7, #32]
 800ecd0:	795b      	ldrb	r3, [r3, #5]
 800ecd2:	2b01      	cmp	r3, #1
 800ecd4:	d117      	bne.n	800ed06 <HeartRate_Event_Handler+0x8e>
            {
              /* received a correct value for HRM control point char */
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 800ecd6:	6a3b      	ldr	r3, [r7, #32]
 800ecd8:	881b      	ldrh	r3, [r3, #0]
 800ecda:	b298      	uxth	r0, r3
 800ecdc:	6a3b      	ldr	r3, [r7, #32]
 800ecde:	885b      	ldrh	r3, [r3, #2]
 800ece0:	b299      	uxth	r1, r3
 800ece2:	6a3b      	ldr	r3, [r7, #32]
 800ece4:	791b      	ldrb	r3, [r3, #4]
                                      write_perm_req->Attribute_Handle,
                                      0x00, /* write_status = 0 (no error))*/
                                      (uint8_t)HRS_CNTL_POINT_VALUE_IS_SUPPORTED, /* err_code */
                                      write_perm_req->Data_Length,
                                      (uint8_t *)&write_perm_req->Data[0]);
 800ece6:	6a3a      	ldr	r2, [r7, #32]
 800ece8:	3205      	adds	r2, #5
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 800ecea:	9201      	str	r2, [sp, #4]
 800ecec:	9300      	str	r3, [sp, #0]
 800ecee:	2300      	movs	r3, #0
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	f7ff fcb3 	bl	800e65c <aci_gatt_write_resp>

              /**
               * Notify the application to Reset The Energy Expended Value
               */
              Notification.HRS_Evt_Opcode = HRS_RESET_ENERGY_EXPENDED_EVT;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 800ecfa:	f107 030c 	add.w	r3, r7, #12
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f005 fd77 	bl	80147f2 <HRS_Notification>
                                      write_perm_req->Data_Length,
                                      (uint8_t *)&write_perm_req->Data[0]);
            }
          }
        }
        break;
 800ed04:	e037      	b.n	800ed76 <HeartRate_Event_Handler+0xfe>
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 800ed06:	6a3b      	ldr	r3, [r7, #32]
 800ed08:	881b      	ldrh	r3, [r3, #0]
 800ed0a:	b298      	uxth	r0, r3
 800ed0c:	6a3b      	ldr	r3, [r7, #32]
 800ed0e:	885b      	ldrh	r3, [r3, #2]
 800ed10:	b299      	uxth	r1, r3
 800ed12:	6a3b      	ldr	r3, [r7, #32]
 800ed14:	791b      	ldrb	r3, [r3, #4]
                                      (uint8_t *)&write_perm_req->Data[0]);
 800ed16:	6a3a      	ldr	r2, [r7, #32]
 800ed18:	3205      	adds	r2, #5
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 800ed1a:	9201      	str	r2, [sp, #4]
 800ed1c:	9300      	str	r3, [sp, #0]
 800ed1e:	2380      	movs	r3, #128	; 0x80
 800ed20:	2201      	movs	r2, #1
 800ed22:	f7ff fc9b 	bl	800e65c <aci_gatt_write_resp>
        break;
 800ed26:	e026      	b.n	800ed76 <HeartRate_Event_Handler+0xfe>
#endif

        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
        {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800ed28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed2a:	3302      	adds	r3, #2
 800ed2c:	61fb      	str	r3, [r7, #28]
          if(attribute_modified->Attr_Handle == (HRS_Context.HeartRatemeasurementCharHdle + 2))
 800ed2e:	69fb      	ldr	r3, [r7, #28]
 800ed30:	885b      	ldrh	r3, [r3, #2]
 800ed32:	b29b      	uxth	r3, r3
 800ed34:	461a      	mov	r2, r3
 800ed36:	4b15      	ldr	r3, [pc, #84]	; (800ed8c <HeartRate_Event_Handler+0x114>)
 800ed38:	885b      	ldrh	r3, [r3, #2]
 800ed3a:	3302      	adds	r3, #2
 800ed3c:	429a      	cmp	r2, r3
 800ed3e:	d11c      	bne.n	800ed7a <HeartRate_Event_Handler+0x102>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800ed40:	2301      	movs	r3, #1
 800ed42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            /**
             * Notify the application to start measurement
             */
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800ed46:	69fb      	ldr	r3, [r7, #28]
 800ed48:	7a1b      	ldrb	r3, [r3, #8]
 800ed4a:	f003 0301 	and.w	r3, r3, #1
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d007      	beq.n	800ed62 <HeartRate_Event_Handler+0xea>
            {
              BLE_DBG_HRS_MSG("ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE HRS_NOTIFICATION_ENABLED\n");
              Notification.HRS_Evt_Opcode =HRS_NOTIFICATION_ENABLED;
 800ed52:	2301      	movs	r3, #1
 800ed54:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 800ed56:	f107 030c 	add.w	r3, r7, #12
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f005 fd49 	bl	80147f2 <HRS_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              HRS_Notification(&Notification);
            }
#endif         
        }
        break;
 800ed60:	e00b      	b.n	800ed7a <HeartRate_Event_Handler+0x102>
              Notification.HRS_Evt_Opcode =HRS_NOTIFICATION_DISABLED;
 800ed62:	2302      	movs	r3, #2
 800ed64:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 800ed66:	f107 030c 	add.w	r3, r7, #12
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f005 fd41 	bl	80147f2 <HRS_Notification>
        break;
 800ed70:	e003      	b.n	800ed7a <HeartRate_Event_Handler+0x102>

        default:
          break;
 800ed72:	bf00      	nop
 800ed74:	e004      	b.n	800ed80 <HeartRate_Event_Handler+0x108>
        break;
 800ed76:	bf00      	nop
 800ed78:	e002      	b.n	800ed80 <HeartRate_Event_Handler+0x108>
        break;
 800ed7a:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800ed7c:	e000      	b.n	800ed80 <HeartRate_Event_Handler+0x108>

    default:
      break;
 800ed7e:	bf00      	nop
  }

  return(return_value);
 800ed80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}/* end HeartRate_Event_Handler */
 800ed84:	4618      	mov	r0, r3
 800ed86:	3730      	adds	r7, #48	; 0x30
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}
 800ed8c:	20000968 	.word	0x20000968

0800ed90 <HRS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void HRS_Init(void)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b088      	sub	sp, #32
 800ed94:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult = BLE_STATUS_SUCCESS;
 800ed96:	2300      	movs	r3, #0
 800ed98:	71fb      	strb	r3, [r7, #7]

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(HeartRate_Event_Handler);
 800ed9a:	482e      	ldr	r0, [pc, #184]	; (800ee54 <HRS_Init+0xc4>)
 800ed9c:	f000 f90c 	bl	800efb8 <SVCCTL_RegisterSvcHandler>
   *                                2 for hear rate measurement characteristic +
   *                                1 for client char configuration descriptor +
   *                                2 for body sensor location characteristic +
   *                                2 for control point characteristic
   */
  uuid = HEART_RATE_SERVICE_UUID;
 800eda0:	f641 030d 	movw	r3, #6157	; 0x180d
 800eda4:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 800eda6:	1d39      	adds	r1, r7, #4
 800eda8:	4b2b      	ldr	r3, [pc, #172]	; (800ee58 <HRS_Init+0xc8>)
 800edaa:	9300      	str	r3, [sp, #0]
 800edac:	2308      	movs	r3, #8
 800edae:	2201      	movs	r2, #1
 800edb0:	2001      	movs	r0, #1
 800edb2:	f7ff f9cc 	bl	800e14e <aci_gatt_add_service>
 800edb6:	4603      	mov	r3, r0
 800edb8:	71fb      	strb	r3, [r7, #7]
  }

  /**
   *  Add Heart Rate Measurement Characteristic
   */
  uuid = HEART_RATE_MEASURMENT_UUID;
 800edba:	f642 2337 	movw	r3, #10807	; 0x2a37
 800edbe:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 800edc0:	4b25      	ldr	r3, [pc, #148]	; (800ee58 <HRS_Init+0xc8>)
 800edc2:	8818      	ldrh	r0, [r3, #0]
 800edc4:	1d3a      	adds	r2, r7, #4
 800edc6:	4b25      	ldr	r3, [pc, #148]	; (800ee5c <HRS_Init+0xcc>)
 800edc8:	9305      	str	r3, [sp, #20]
 800edca:	2301      	movs	r3, #1
 800edcc:	9304      	str	r3, [sp, #16]
 800edce:	230a      	movs	r3, #10
 800edd0:	9303      	str	r3, [sp, #12]
 800edd2:	2300      	movs	r3, #0
 800edd4:	9302      	str	r3, [sp, #8]
 800edd6:	2300      	movs	r3, #0
 800edd8:	9301      	str	r3, [sp, #4]
 800edda:	2310      	movs	r3, #16
 800eddc:	9300      	str	r3, [sp, #0]
 800edde:	2307      	movs	r3, #7
 800ede0:	2101      	movs	r1, #1
 800ede2:	f7ff fa8a 	bl	800e2fa <aci_gatt_add_char>
 800ede6:	4603      	mov	r3, r0
 800ede8:	71fb      	strb	r3, [r7, #7]

#if (BLE_CFG_HRS_BODY_SENSOR_LOCATION_CHAR != 0)
  /**
   *  Add Body Sensor Location Characteristic
   */
  uuid = SENSOR_LOCATION_UUID;
 800edea:	f642 2338 	movw	r3, #10808	; 0x2a38
 800edee:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 800edf0:	4b19      	ldr	r3, [pc, #100]	; (800ee58 <HRS_Init+0xc8>)
 800edf2:	8818      	ldrh	r0, [r3, #0]
 800edf4:	1d3a      	adds	r2, r7, #4
 800edf6:	4b1a      	ldr	r3, [pc, #104]	; (800ee60 <HRS_Init+0xd0>)
 800edf8:	9305      	str	r3, [sp, #20]
 800edfa:	2300      	movs	r3, #0
 800edfc:	9304      	str	r3, [sp, #16]
 800edfe:	230a      	movs	r3, #10
 800ee00:	9303      	str	r3, [sp, #12]
 800ee02:	2300      	movs	r3, #0
 800ee04:	9302      	str	r3, [sp, #8]
 800ee06:	2300      	movs	r3, #0
 800ee08:	9301      	str	r3, [sp, #4]
 800ee0a:	2302      	movs	r3, #2
 800ee0c:	9300      	str	r3, [sp, #0]
 800ee0e:	2301      	movs	r3, #1
 800ee10:	2101      	movs	r1, #1
 800ee12:	f7ff fa72 	bl	800e2fa <aci_gatt_add_char>
 800ee16:	4603      	mov	r3, r0
 800ee18:	71fb      	strb	r3, [r7, #7]
  }

#endif

#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  uuid = CONTROL_POINT_UUID;
 800ee1a:	f642 2339 	movw	r3, #10809	; 0x2a39
 800ee1e:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 800ee20:	4b0d      	ldr	r3, [pc, #52]	; (800ee58 <HRS_Init+0xc8>)
 800ee22:	8818      	ldrh	r0, [r3, #0]
 800ee24:	1d3a      	adds	r2, r7, #4
 800ee26:	4b0f      	ldr	r3, [pc, #60]	; (800ee64 <HRS_Init+0xd4>)
 800ee28:	9305      	str	r3, [sp, #20]
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	9304      	str	r3, [sp, #16]
 800ee2e:	230a      	movs	r3, #10
 800ee30:	9303      	str	r3, [sp, #12]
 800ee32:	2302      	movs	r3, #2
 800ee34:	9302      	str	r3, [sp, #8]
 800ee36:	2300      	movs	r3, #0
 800ee38:	9301      	str	r3, [sp, #4]
 800ee3a:	2308      	movs	r3, #8
 800ee3c:	9300      	str	r3, [sp, #0]
 800ee3e:	2301      	movs	r3, #1
 800ee40:	2101      	movs	r1, #1
 800ee42:	f7ff fa5a 	bl	800e2fa <aci_gatt_add_char>
 800ee46:	4603      	mov	r3, r0
 800ee48:	71fb      	strb	r3, [r7, #7]
  }
#endif
  
  
  
  return;
 800ee4a:	bf00      	nop
}
 800ee4c:	3708      	adds	r7, #8
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop
 800ee54:	0800ec79 	.word	0x0800ec79
 800ee58:	20000968 	.word	0x20000968
 800ee5c:	2000096a 	.word	0x2000096a
 800ee60:	2000096c 	.word	0x2000096c
 800ee64:	2000096e 	.word	0x2000096e

0800ee68 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800ee68:	b480      	push	{r7}
 800ee6a:	af00      	add	r7, sp, #0
  return;
 800ee6c:	bf00      	nop
}
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee74:	4770      	bx	lr

0800ee76 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800ee76:	b480      	push	{r7}
 800ee78:	af00      	add	r7, sp, #0
  return;
 800ee7a:	bf00      	nop
}
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee82:	4770      	bx	lr

0800ee84 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800ee84:	b480      	push	{r7}
 800ee86:	af00      	add	r7, sp, #0
  return;
 800ee88:	bf00      	nop
}
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee90:	4770      	bx	lr

0800ee92 <EDS_STM_Init>:
__WEAK void DIS_Init( void )
{
  return;
}
__WEAK void EDS_STM_Init( void )
{
 800ee92:	b480      	push	{r7}
 800ee94:	af00      	add	r7, sp, #0
  return;
 800ee96:	bf00      	nop
}
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9e:	4770      	bx	lr

0800eea0 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800eea0:	b480      	push	{r7}
 800eea2:	af00      	add	r7, sp, #0
  return;
 800eea4:	bf00      	nop
}
 800eea6:	46bd      	mov	sp, r7
 800eea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeac:	4770      	bx	lr

0800eeae <HTS_Init>:
__WEAK void HRS_Init( void )
{
  return;
}
__WEAK void HTS_Init( void )
{
 800eeae:	b480      	push	{r7}
 800eeb0:	af00      	add	r7, sp, #0
  return;
 800eeb2:	bf00      	nop
}
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr

0800eebc <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800eebc:	b480      	push	{r7}
 800eebe:	af00      	add	r7, sp, #0
  return;
 800eec0:	bf00      	nop
}
 800eec2:	46bd      	mov	sp, r7
 800eec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec8:	4770      	bx	lr

0800eeca <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800eeca:	b480      	push	{r7}
 800eecc:	af00      	add	r7, sp, #0
  return;
 800eece:	bf00      	nop
}
 800eed0:	46bd      	mov	sp, r7
 800eed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed6:	4770      	bx	lr

0800eed8 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800eed8:	b480      	push	{r7}
 800eeda:	af00      	add	r7, sp, #0
  return;
 800eedc:	bf00      	nop
}
 800eede:	46bd      	mov	sp, r7
 800eee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee4:	4770      	bx	lr

0800eee6 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800eee6:	b480      	push	{r7}
 800eee8:	af00      	add	r7, sp, #0
  return;
 800eeea:	bf00      	nop
}
 800eeec:	46bd      	mov	sp, r7
 800eeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef2:	4770      	bx	lr

0800eef4 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800eef4:	b480      	push	{r7}
 800eef6:	af00      	add	r7, sp, #0
  return;
 800eef8:	bf00      	nop
}
 800eefa:	46bd      	mov	sp, r7
 800eefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef00:	4770      	bx	lr

0800ef02 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800ef02:	b480      	push	{r7}
 800ef04:	af00      	add	r7, sp, #0
  return;
 800ef06:	bf00      	nop
}
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0e:	4770      	bx	lr

0800ef10 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800ef10:	b480      	push	{r7}
 800ef12:	af00      	add	r7, sp, #0
  return;
 800ef14:	bf00      	nop
}
 800ef16:	46bd      	mov	sp, r7
 800ef18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1c:	4770      	bx	lr

0800ef1e <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800ef1e:	b480      	push	{r7}
 800ef20:	af00      	add	r7, sp, #0
  return;
 800ef22:	bf00      	nop
}
 800ef24:	46bd      	mov	sp, r7
 800ef26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2a:	4770      	bx	lr

0800ef2c <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	af00      	add	r7, sp, #0
  return;
 800ef30:	bf00      	nop
}
 800ef32:	46bd      	mov	sp, r7
 800ef34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef38:	4770      	bx	lr

0800ef3a <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800ef3a:	b480      	push	{r7}
 800ef3c:	af00      	add	r7, sp, #0
  return;
 800ef3e:	bf00      	nop
}
 800ef40:	46bd      	mov	sp, r7
 800ef42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef46:	4770      	bx	lr

0800ef48 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800ef4c:	4b04      	ldr	r3, [pc, #16]	; (800ef60 <SVCCTL_Init+0x18>)
 800ef4e:	2200      	movs	r2, #0
 800ef50:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800ef52:	4b04      	ldr	r3, [pc, #16]	; (800ef64 <SVCCTL_Init+0x1c>)
 800ef54:	2200      	movs	r2, #0
 800ef56:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800ef58:	f000 f806 	bl	800ef68 <SVCCTL_SvcInit>

  return;
 800ef5c:	bf00      	nop
}
 800ef5e:	bd80      	pop	{r7, pc}
 800ef60:	20000970 	.word	0x20000970
 800ef64:	20000990 	.word	0x20000990

0800ef68 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	af00      	add	r7, sp, #0
  BAS_Init();
 800ef6c:	f7ff ff7c 	bl	800ee68 <BAS_Init>

  BLS_Init();
 800ef70:	f7ff ff81 	bl	800ee76 <BLS_Init>

  CRS_STM_Init();
 800ef74:	f7ff ff86 	bl	800ee84 <CRS_STM_Init>

  DIS_Init();
 800ef78:	f7ff fe48 	bl	800ec0c <DIS_Init>

  EDS_STM_Init();
 800ef7c:	f7ff ff89 	bl	800ee92 <EDS_STM_Init>

  HIDS_Init();
 800ef80:	f7ff ff8e 	bl	800eea0 <HIDS_Init>

  HRS_Init();
 800ef84:	f7ff ff04 	bl	800ed90 <HRS_Init>

  HTS_Init();
 800ef88:	f7ff ff91 	bl	800eeae <HTS_Init>

  IAS_Init();
 800ef8c:	f7ff ff96 	bl	800eebc <IAS_Init>

  LLS_Init();
 800ef90:	f7ff ff9b 	bl	800eeca <LLS_Init>

  TPS_Init();
 800ef94:	f7ff ffa0 	bl	800eed8 <TPS_Init>

  MOTENV_STM_Init();
 800ef98:	f7ff ffa5 	bl	800eee6 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800ef9c:	f7ff ffaa 	bl	800eef4 <P2PS_STM_Init>

  ZDD_STM_Init();
 800efa0:	f7ff ffaf 	bl	800ef02 <ZDD_STM_Init>

  OTAS_STM_Init();
 800efa4:	f7ff ffb4 	bl	800ef10 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800efa8:	f7ff ffc0 	bl	800ef2c <BVOPUS_STM_Init>

  MESH_Init();
 800efac:	f7ff ffb7 	bl	800ef1e <MESH_Init>

  SVCCTL_InitCustomSvc();
 800efb0:	f7ff ffc3 	bl	800ef3a <SVCCTL_InitCustomSvc>
  
  return;
 800efb4:	bf00      	nop
}
 800efb6:	bd80      	pop	{r7, pc}

0800efb8 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800efb8:	b480      	push	{r7}
 800efba:	b083      	sub	sp, #12
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800efc0:	4b09      	ldr	r3, [pc, #36]	; (800efe8 <SVCCTL_RegisterSvcHandler+0x30>)
 800efc2:	7f1b      	ldrb	r3, [r3, #28]
 800efc4:	4619      	mov	r1, r3
 800efc6:	4a08      	ldr	r2, [pc, #32]	; (800efe8 <SVCCTL_RegisterSvcHandler+0x30>)
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800efce:	4b06      	ldr	r3, [pc, #24]	; (800efe8 <SVCCTL_RegisterSvcHandler+0x30>)
 800efd0:	7f1b      	ldrb	r3, [r3, #28]
 800efd2:	3301      	adds	r3, #1
 800efd4:	b2da      	uxtb	r2, r3
 800efd6:	4b04      	ldr	r3, [pc, #16]	; (800efe8 <SVCCTL_RegisterSvcHandler+0x30>)
 800efd8:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800efda:	bf00      	nop
}
 800efdc:	370c      	adds	r7, #12
 800efde:	46bd      	mov	sp, r7
 800efe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe4:	4770      	bx	lr
 800efe6:	bf00      	nop
 800efe8:	20000970 	.word	0x20000970

0800efec <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b086      	sub	sp, #24
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	3301      	adds	r3, #1
 800eff8:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800effa:	2300      	movs	r3, #0
 800effc:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	781b      	ldrb	r3, [r3, #0]
 800f002:	2bff      	cmp	r3, #255	; 0xff
 800f004:	d125      	bne.n	800f052 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	3302      	adds	r3, #2
 800f00a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	881b      	ldrh	r3, [r3, #0]
 800f010:	b29b      	uxth	r3, r3
 800f012:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f016:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f01a:	d118      	bne.n	800f04e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800f01c:	2300      	movs	r3, #0
 800f01e:	757b      	strb	r3, [r7, #21]
 800f020:	e00d      	b.n	800f03e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800f022:	7d7b      	ldrb	r3, [r7, #21]
 800f024:	4a1a      	ldr	r2, [pc, #104]	; (800f090 <SVCCTL_UserEvtRx+0xa4>)
 800f026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	4798      	blx	r3
 800f02e:	4603      	mov	r3, r0
 800f030:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800f032:	7dfb      	ldrb	r3, [r7, #23]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d108      	bne.n	800f04a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800f038:	7d7b      	ldrb	r3, [r7, #21]
 800f03a:	3301      	adds	r3, #1
 800f03c:	757b      	strb	r3, [r7, #21]
 800f03e:	4b14      	ldr	r3, [pc, #80]	; (800f090 <SVCCTL_UserEvtRx+0xa4>)
 800f040:	7f1b      	ldrb	r3, [r3, #28]
 800f042:	7d7a      	ldrb	r2, [r7, #21]
 800f044:	429a      	cmp	r2, r3
 800f046:	d3ec      	bcc.n	800f022 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800f048:	e002      	b.n	800f050 <SVCCTL_UserEvtRx+0x64>
              break;
 800f04a:	bf00      	nop
          break;
 800f04c:	e000      	b.n	800f050 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800f04e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800f050:	e000      	b.n	800f054 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800f052:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800f054:	7dfb      	ldrb	r3, [r7, #23]
 800f056:	2b02      	cmp	r3, #2
 800f058:	d00f      	beq.n	800f07a <SVCCTL_UserEvtRx+0x8e>
 800f05a:	2b02      	cmp	r3, #2
 800f05c:	dc10      	bgt.n	800f080 <SVCCTL_UserEvtRx+0x94>
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d002      	beq.n	800f068 <SVCCTL_UserEvtRx+0x7c>
 800f062:	2b01      	cmp	r3, #1
 800f064:	d006      	beq.n	800f074 <SVCCTL_UserEvtRx+0x88>
 800f066:	e00b      	b.n	800f080 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800f068:	6878      	ldr	r0, [r7, #4]
 800f06a:	f005 f8bb 	bl	80141e4 <SVCCTL_App_Notification>
 800f06e:	4603      	mov	r3, r0
 800f070:	75bb      	strb	r3, [r7, #22]
      break;
 800f072:	e008      	b.n	800f086 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800f074:	2301      	movs	r3, #1
 800f076:	75bb      	strb	r3, [r7, #22]
      break;
 800f078:	e005      	b.n	800f086 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800f07a:	2300      	movs	r3, #0
 800f07c:	75bb      	strb	r3, [r7, #22]
      break;
 800f07e:	e002      	b.n	800f086 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800f080:	2301      	movs	r3, #1
 800f082:	75bb      	strb	r3, [r7, #22]
      break;
 800f084:	bf00      	nop
  }

  return (return_status);
 800f086:	7dbb      	ldrb	r3, [r7, #22]
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3718      	adds	r7, #24
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}
 800f090:	20000970 	.word	0x20000970

0800f094 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b088      	sub	sp, #32
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800f09c:	f107 030c 	add.w	r3, r7, #12
 800f0a0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800f0a8:	69fb      	ldr	r3, [r7, #28]
 800f0aa:	212e      	movs	r1, #46	; 0x2e
 800f0ac:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800f0b0:	f000 fae8 	bl	800f684 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800f0b4:	69fb      	ldr	r3, [r7, #28]
 800f0b6:	330b      	adds	r3, #11
 800f0b8:	78db      	ldrb	r3, [r3, #3]
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	3720      	adds	r7, #32
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}

0800f0c2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800f0c2:	b580      	push	{r7, lr}
 800f0c4:	b088      	sub	sp, #32
 800f0c6:	af00      	add	r7, sp, #0
 800f0c8:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800f0ca:	f107 030c 	add.w	r3, r7, #12
 800f0ce:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800f0d6:	69fb      	ldr	r3, [r7, #28]
 800f0d8:	210f      	movs	r1, #15
 800f0da:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800f0de:	f000 fad1 	bl	800f684 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800f0e2:	69fb      	ldr	r3, [r7, #28]
 800f0e4:	330b      	adds	r3, #11
 800f0e6:	78db      	ldrb	r3, [r3, #3]
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3720      	adds	r7, #32
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}

0800f0f0 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b088      	sub	sp, #32
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800f0f8:	f107 030c 	add.w	r3, r7, #12
 800f0fc:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800f0fe:	69fb      	ldr	r3, [r7, #28]
 800f100:	687a      	ldr	r2, [r7, #4]
 800f102:	2110      	movs	r1, #16
 800f104:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800f108:	f000 fabc 	bl	800f684 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800f10c:	69fb      	ldr	r3, [r7, #28]
 800f10e:	330b      	adds	r3, #11
 800f110:	78db      	ldrb	r3, [r3, #3]
}
 800f112:	4618      	mov	r0, r3
 800f114:	3720      	adds	r7, #32
 800f116:	46bd      	mov	sp, r7
 800f118:	bd80      	pop	{r7, pc}
	...

0800f11c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800f11c:	b480      	push	{r7}
 800f11e:	b08b      	sub	sp, #44	; 0x2c
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800f124:	2300      	movs	r3, #0
 800f126:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800f128:	2300      	movs	r3, #0
 800f12a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800f12c:	2300      	movs	r3, #0
 800f12e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800f130:	2300      	movs	r3, #0
 800f132:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800f134:	2300      	movs	r3, #0
 800f136:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800f138:	2300      	movs	r3, #0
 800f13a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800f13c:	2300      	movs	r3, #0
 800f13e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800f140:	2300      	movs	r3, #0
 800f142:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800f144:	4b4a      	ldr	r3, [pc, #296]	; (800f270 <SHCI_GetWirelessFwInfo+0x154>)
 800f146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f148:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f14c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800f14e:	693b      	ldr	r3, [r7, #16]
 800f150:	009b      	lsls	r3, r3, #2
 800f152:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f156:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	4a44      	ldr	r2, [pc, #272]	; (800f274 <SHCI_GetWirelessFwInfo+0x158>)
 800f164:	4293      	cmp	r3, r2
 800f166:	d10f      	bne.n	800f188 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	695b      	ldr	r3, [r3, #20]
 800f16c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800f16e:	68bb      	ldr	r3, [r7, #8]
 800f170:	699b      	ldr	r3, [r3, #24]
 800f172:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	69db      	ldr	r3, [r3, #28]
 800f178:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	68db      	ldr	r3, [r3, #12]
 800f17e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	691b      	ldr	r3, [r3, #16]
 800f184:	617b      	str	r3, [r7, #20]
 800f186:	e01a      	b.n	800f1be <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800f188:	693b      	ldr	r3, [r7, #16]
 800f18a:	009b      	lsls	r3, r3, #2
 800f18c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f190:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800f194:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	691b      	ldr	r3, [r3, #16]
 800f19c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	695b      	ldr	r3, [r3, #20]
 800f1a4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	699b      	ldr	r3, [r3, #24]
 800f1ac:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	685b      	ldr	r3, [r3, #4]
 800f1b4:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	689b      	ldr	r3, [r3, #8]
 800f1bc:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800f1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c0:	0e1b      	lsrs	r3, r3, #24
 800f1c2:	b2da      	uxtb	r2, r3
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800f1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ca:	0c1b      	lsrs	r3, r3, #16
 800f1cc:	b2da      	uxtb	r2, r3
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800f1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d4:	0a1b      	lsrs	r3, r3, #8
 800f1d6:	b2da      	uxtb	r2, r3
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800f1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1de:	091b      	lsrs	r3, r3, #4
 800f1e0:	b2db      	uxtb	r3, r3
 800f1e2:	f003 030f 	and.w	r3, r3, #15
 800f1e6:	b2da      	uxtb	r2, r3
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800f1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ee:	b2db      	uxtb	r3, r3
 800f1f0:	f003 030f 	and.w	r3, r3, #15
 800f1f4:	b2da      	uxtb	r2, r3
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800f1fa:	6a3b      	ldr	r3, [r7, #32]
 800f1fc:	0e1b      	lsrs	r3, r3, #24
 800f1fe:	b2da      	uxtb	r2, r3
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800f204:	6a3b      	ldr	r3, [r7, #32]
 800f206:	0c1b      	lsrs	r3, r3, #16
 800f208:	b2da      	uxtb	r2, r3
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800f20e:	6a3b      	ldr	r3, [r7, #32]
 800f210:	0a1b      	lsrs	r3, r3, #8
 800f212:	b2da      	uxtb	r2, r3
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800f218:	6a3b      	ldr	r3, [r7, #32]
 800f21a:	b2da      	uxtb	r2, r3
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800f220:	69fb      	ldr	r3, [r7, #28]
 800f222:	b2da      	uxtb	r2, r3
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800f228:	69bb      	ldr	r3, [r7, #24]
 800f22a:	0e1b      	lsrs	r3, r3, #24
 800f22c:	b2da      	uxtb	r2, r3
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800f232:	69bb      	ldr	r3, [r7, #24]
 800f234:	0c1b      	lsrs	r3, r3, #16
 800f236:	b2da      	uxtb	r2, r3
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800f23c:	69bb      	ldr	r3, [r7, #24]
 800f23e:	0a1b      	lsrs	r3, r3, #8
 800f240:	b2da      	uxtb	r2, r3
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	0e1b      	lsrs	r3, r3, #24
 800f24a:	b2da      	uxtb	r2, r3
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	0c1b      	lsrs	r3, r3, #16
 800f254:	b2da      	uxtb	r2, r3
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	b2da      	uxtb	r2, r3
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800f262:	2300      	movs	r3, #0
}
 800f264:	4618      	mov	r0, r3
 800f266:	372c      	adds	r7, #44	; 0x2c
 800f268:	46bd      	mov	sp, r7
 800f26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26e:	4770      	bx	lr
 800f270:	58004000 	.word	0x58004000
 800f274:	a94656b9 	.word	0xa94656b9

0800f278 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b082      	sub	sp, #8
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
 800f280:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	685b      	ldr	r3, [r3, #4]
 800f286:	4a08      	ldr	r2, [pc, #32]	; (800f2a8 <hci_init+0x30>)
 800f288:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800f28a:	4a08      	ldr	r2, [pc, #32]	; (800f2ac <hci_init+0x34>)
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800f290:	4806      	ldr	r0, [pc, #24]	; (800f2ac <hci_init+0x34>)
 800f292:	f000 f979 	bl	800f588 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	4618      	mov	r0, r3
 800f29c:	f000 f8da 	bl	800f454 <TlInit>

  return;
 800f2a0:	bf00      	nop
}
 800f2a2:	3708      	adds	r7, #8
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}
 800f2a8:	20001838 	.word	0x20001838
 800f2ac:	20001810 	.word	0x20001810

0800f2b0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b084      	sub	sp, #16
 800f2b4:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800f2b6:	4822      	ldr	r0, [pc, #136]	; (800f340 <hci_user_evt_proc+0x90>)
 800f2b8:	f000 fd32 	bl	800fd20 <LST_is_empty>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d12b      	bne.n	800f31a <hci_user_evt_proc+0x6a>
 800f2c2:	4b20      	ldr	r3, [pc, #128]	; (800f344 <hci_user_evt_proc+0x94>)
 800f2c4:	781b      	ldrb	r3, [r3, #0]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d027      	beq.n	800f31a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800f2ca:	f107 030c 	add.w	r3, r7, #12
 800f2ce:	4619      	mov	r1, r3
 800f2d0:	481b      	ldr	r0, [pc, #108]	; (800f340 <hci_user_evt_proc+0x90>)
 800f2d2:	f000 fdb4 	bl	800fe3e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800f2d6:	4b1c      	ldr	r3, [pc, #112]	; (800f348 <hci_user_evt_proc+0x98>)
 800f2d8:	69db      	ldr	r3, [r3, #28]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d00c      	beq.n	800f2f8 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800f2e6:	4b18      	ldr	r3, [pc, #96]	; (800f348 <hci_user_evt_proc+0x98>)
 800f2e8:	69db      	ldr	r3, [r3, #28]
 800f2ea:	1d3a      	adds	r2, r7, #4
 800f2ec:	4610      	mov	r0, r2
 800f2ee:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800f2f0:	793a      	ldrb	r2, [r7, #4]
 800f2f2:	4b14      	ldr	r3, [pc, #80]	; (800f344 <hci_user_evt_proc+0x94>)
 800f2f4:	701a      	strb	r2, [r3, #0]
 800f2f6:	e002      	b.n	800f2fe <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800f2f8:	4b12      	ldr	r3, [pc, #72]	; (800f344 <hci_user_evt_proc+0x94>)
 800f2fa:	2201      	movs	r2, #1
 800f2fc:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800f2fe:	4b11      	ldr	r3, [pc, #68]	; (800f344 <hci_user_evt_proc+0x94>)
 800f300:	781b      	ldrb	r3, [r3, #0]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d004      	beq.n	800f310 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	4618      	mov	r0, r3
 800f30a:	f000 fc0d 	bl	800fb28 <TL_MM_EvtDone>
 800f30e:	e004      	b.n	800f31a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	4619      	mov	r1, r3
 800f314:	480a      	ldr	r0, [pc, #40]	; (800f340 <hci_user_evt_proc+0x90>)
 800f316:	f000 fd25 	bl	800fd64 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800f31a:	4809      	ldr	r0, [pc, #36]	; (800f340 <hci_user_evt_proc+0x90>)
 800f31c:	f000 fd00 	bl	800fd20 <LST_is_empty>
 800f320:	4603      	mov	r3, r0
 800f322:	2b00      	cmp	r3, #0
 800f324:	d107      	bne.n	800f336 <hci_user_evt_proc+0x86>
 800f326:	4b07      	ldr	r3, [pc, #28]	; (800f344 <hci_user_evt_proc+0x94>)
 800f328:	781b      	ldrb	r3, [r3, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d003      	beq.n	800f336 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800f32e:	4804      	ldr	r0, [pc, #16]	; (800f340 <hci_user_evt_proc+0x90>)
 800f330:	f005 f9ea 	bl	8014708 <hci_notify_asynch_evt>
  }


  return;
 800f334:	bf00      	nop
 800f336:	bf00      	nop
}
 800f338:	3710      	adds	r7, #16
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}
 800f33e:	bf00      	nop
 800f340:	20000998 	.word	0x20000998
 800f344:	200009a4 	.word	0x200009a4
 800f348:	20001810 	.word	0x20001810

0800f34c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b088      	sub	sp, #32
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	460b      	mov	r3, r1
 800f356:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800f358:	2000      	movs	r0, #0
 800f35a:	f000 f8d1 	bl	800f500 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800f35e:	2300      	movs	r3, #0
 800f360:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	885b      	ldrh	r3, [r3, #2]
 800f366:	b21b      	sxth	r3, r3
 800f368:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f36c:	b21a      	sxth	r2, r3
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	881b      	ldrh	r3, [r3, #0]
 800f372:	029b      	lsls	r3, r3, #10
 800f374:	b21b      	sxth	r3, r3
 800f376:	4313      	orrs	r3, r2
 800f378:	b21b      	sxth	r3, r3
 800f37a:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800f37c:	4b33      	ldr	r3, [pc, #204]	; (800f44c <hci_send_req+0x100>)
 800f37e:	2201      	movs	r2, #1
 800f380:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	68db      	ldr	r3, [r3, #12]
 800f386:	b2d9      	uxtb	r1, r3
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	689a      	ldr	r2, [r3, #8]
 800f38c:	8bbb      	ldrh	r3, [r7, #28]
 800f38e:	4618      	mov	r0, r3
 800f390:	f000 f890 	bl	800f4b4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800f394:	e04e      	b.n	800f434 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800f396:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800f39a:	f005 f9d5 	bl	8014748 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800f39e:	e043      	b.n	800f428 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800f3a0:	f107 030c 	add.w	r3, r7, #12
 800f3a4:	4619      	mov	r1, r3
 800f3a6:	482a      	ldr	r0, [pc, #168]	; (800f450 <hci_send_req+0x104>)
 800f3a8:	f000 fd49 	bl	800fe3e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	7a5b      	ldrb	r3, [r3, #9]
 800f3b0:	2b0f      	cmp	r3, #15
 800f3b2:	d114      	bne.n	800f3de <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	330b      	adds	r3, #11
 800f3b8:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800f3ba:	693b      	ldr	r3, [r7, #16]
 800f3bc:	885b      	ldrh	r3, [r3, #2]
 800f3be:	b29b      	uxth	r3, r3
 800f3c0:	8bba      	ldrh	r2, [r7, #28]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d104      	bne.n	800f3d0 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	691b      	ldr	r3, [r3, #16]
 800f3ca:	693a      	ldr	r2, [r7, #16]
 800f3cc:	7812      	ldrb	r2, [r2, #0]
 800f3ce:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	785b      	ldrb	r3, [r3, #1]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d027      	beq.n	800f428 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800f3d8:	2301      	movs	r3, #1
 800f3da:	77fb      	strb	r3, [r7, #31]
 800f3dc:	e024      	b.n	800f428 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	330b      	adds	r3, #11
 800f3e2:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800f3e4:	69bb      	ldr	r3, [r7, #24]
 800f3e6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f3ea:	b29b      	uxth	r3, r3
 800f3ec:	8bba      	ldrh	r2, [r7, #28]
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	d114      	bne.n	800f41c <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	7a9b      	ldrb	r3, [r3, #10]
 800f3f6:	3b03      	subs	r3, #3
 800f3f8:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	695a      	ldr	r2, [r3, #20]
 800f3fe:	7dfb      	ldrb	r3, [r7, #23]
 800f400:	429a      	cmp	r2, r3
 800f402:	bfa8      	it	ge
 800f404:	461a      	movge	r2, r3
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6918      	ldr	r0, [r3, #16]
 800f40e:	69bb      	ldr	r3, [r7, #24]
 800f410:	1cd9      	adds	r1, r3, #3
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	695b      	ldr	r3, [r3, #20]
 800f416:	461a      	mov	r2, r3
 800f418:	f005 fe74 	bl	8015104 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800f41c:	69bb      	ldr	r3, [r7, #24]
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d001      	beq.n	800f428 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800f424:	2301      	movs	r3, #1
 800f426:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800f428:	4809      	ldr	r0, [pc, #36]	; (800f450 <hci_send_req+0x104>)
 800f42a:	f000 fc79 	bl	800fd20 <LST_is_empty>
 800f42e:	4603      	mov	r3, r0
 800f430:	2b00      	cmp	r3, #0
 800f432:	d0b5      	beq.n	800f3a0 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800f434:	7ffb      	ldrb	r3, [r7, #31]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d0ad      	beq.n	800f396 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800f43a:	2001      	movs	r0, #1
 800f43c:	f000 f860 	bl	800f500 <NotifyCmdStatus>

  return 0;
 800f440:	2300      	movs	r3, #0
}
 800f442:	4618      	mov	r0, r3
 800f444:	3720      	adds	r7, #32
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}
 800f44a:	bf00      	nop
 800f44c:	2000183c 	.word	0x2000183c
 800f450:	20001830 	.word	0x20001830

0800f454 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b086      	sub	sp, #24
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800f45c:	480f      	ldr	r0, [pc, #60]	; (800f49c <TlInit+0x48>)
 800f45e:	f000 fc4f 	bl	800fd00 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800f462:	4a0f      	ldr	r2, [pc, #60]	; (800f4a0 <TlInit+0x4c>)
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800f468:	480e      	ldr	r0, [pc, #56]	; (800f4a4 <TlInit+0x50>)
 800f46a:	f000 fc49 	bl	800fd00 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800f46e:	4b0e      	ldr	r3, [pc, #56]	; (800f4a8 <TlInit+0x54>)
 800f470:	2201      	movs	r2, #1
 800f472:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800f474:	4b0d      	ldr	r3, [pc, #52]	; (800f4ac <TlInit+0x58>)
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d00a      	beq.n	800f492 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800f480:	4b0b      	ldr	r3, [pc, #44]	; (800f4b0 <TlInit+0x5c>)
 800f482:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800f484:	4b09      	ldr	r3, [pc, #36]	; (800f4ac <TlInit+0x58>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	f107 0208 	add.w	r2, r7, #8
 800f48c:	4610      	mov	r0, r2
 800f48e:	4798      	blx	r3
  }

  return;
 800f490:	bf00      	nop
 800f492:	bf00      	nop
}
 800f494:	3718      	adds	r7, #24
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}
 800f49a:	bf00      	nop
 800f49c:	20001830 	.word	0x20001830
 800f4a0:	200009a0 	.word	0x200009a0
 800f4a4:	20000998 	.word	0x20000998
 800f4a8:	200009a4 	.word	0x200009a4
 800f4ac:	20001810 	.word	0x20001810
 800f4b0:	0800f541 	.word	0x0800f541

0800f4b4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b082      	sub	sp, #8
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	603a      	str	r2, [r7, #0]
 800f4be:	80fb      	strh	r3, [r7, #6]
 800f4c0:	460b      	mov	r3, r1
 800f4c2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800f4c4:	4b0c      	ldr	r3, [pc, #48]	; (800f4f8 <SendCmd+0x44>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	88fa      	ldrh	r2, [r7, #6]
 800f4ca:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800f4ce:	4b0a      	ldr	r3, [pc, #40]	; (800f4f8 <SendCmd+0x44>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	797a      	ldrb	r2, [r7, #5]
 800f4d4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800f4d6:	4b08      	ldr	r3, [pc, #32]	; (800f4f8 <SendCmd+0x44>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	330c      	adds	r3, #12
 800f4dc:	797a      	ldrb	r2, [r7, #5]
 800f4de:	6839      	ldr	r1, [r7, #0]
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f005 fe0f 	bl	8015104 <memcpy>

  hciContext.io.Send(0,0);
 800f4e6:	4b05      	ldr	r3, [pc, #20]	; (800f4fc <SendCmd+0x48>)
 800f4e8:	691b      	ldr	r3, [r3, #16]
 800f4ea:	2100      	movs	r1, #0
 800f4ec:	2000      	movs	r0, #0
 800f4ee:	4798      	blx	r3

  return;
 800f4f0:	bf00      	nop
}
 800f4f2:	3708      	adds	r7, #8
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}
 800f4f8:	200009a0 	.word	0x200009a0
 800f4fc:	20001810 	.word	0x20001810

0800f500 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
 800f506:	4603      	mov	r3, r0
 800f508:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800f50a:	79fb      	ldrb	r3, [r7, #7]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d108      	bne.n	800f522 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800f510:	4b0a      	ldr	r3, [pc, #40]	; (800f53c <NotifyCmdStatus+0x3c>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d00d      	beq.n	800f534 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800f518:	4b08      	ldr	r3, [pc, #32]	; (800f53c <NotifyCmdStatus+0x3c>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	2000      	movs	r0, #0
 800f51e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800f520:	e008      	b.n	800f534 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800f522:	4b06      	ldr	r3, [pc, #24]	; (800f53c <NotifyCmdStatus+0x3c>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d004      	beq.n	800f534 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800f52a:	4b04      	ldr	r3, [pc, #16]	; (800f53c <NotifyCmdStatus+0x3c>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	2001      	movs	r0, #1
 800f530:	4798      	blx	r3
  return;
 800f532:	bf00      	nop
 800f534:	bf00      	nop
}
 800f536:	3708      	adds	r7, #8
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}
 800f53c:	20001838 	.word	0x20001838

0800f540 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b082      	sub	sp, #8
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	7a5b      	ldrb	r3, [r3, #9]
 800f54c:	2b0f      	cmp	r3, #15
 800f54e:	d003      	beq.n	800f558 <TlEvtReceived+0x18>
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	7a5b      	ldrb	r3, [r3, #9]
 800f554:	2b0e      	cmp	r3, #14
 800f556:	d107      	bne.n	800f568 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800f558:	6879      	ldr	r1, [r7, #4]
 800f55a:	4809      	ldr	r0, [pc, #36]	; (800f580 <TlEvtReceived+0x40>)
 800f55c:	f000 fc28 	bl	800fdb0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800f560:	2000      	movs	r0, #0
 800f562:	f005 f8e1 	bl	8014728 <hci_cmd_resp_release>
 800f566:	e006      	b.n	800f576 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800f568:	6879      	ldr	r1, [r7, #4]
 800f56a:	4806      	ldr	r0, [pc, #24]	; (800f584 <TlEvtReceived+0x44>)
 800f56c:	f000 fc20 	bl	800fdb0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800f570:	4804      	ldr	r0, [pc, #16]	; (800f584 <TlEvtReceived+0x44>)
 800f572:	f005 f8c9 	bl	8014708 <hci_notify_asynch_evt>
  }

  return;
 800f576:	bf00      	nop
}
 800f578:	3708      	adds	r7, #8
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}
 800f57e:	bf00      	nop
 800f580:	20001830 	.word	0x20001830
 800f584:	20000998 	.word	0x20000998

0800f588 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800f588:	b480      	push	{r7}
 800f58a:	b083      	sub	sp, #12
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	4a05      	ldr	r2, [pc, #20]	; (800f5a8 <hci_register_io_bus+0x20>)
 800f594:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	4a04      	ldr	r2, [pc, #16]	; (800f5ac <hci_register_io_bus+0x24>)
 800f59a:	611a      	str	r2, [r3, #16]

  return;
 800f59c:	bf00      	nop
}
 800f59e:	370c      	adds	r7, #12
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a6:	4770      	bx	lr
 800f5a8:	0800f8a1 	.word	0x0800f8a1
 800f5ac:	0800f909 	.word	0x0800f909

0800f5b0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b082      	sub	sp, #8
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	685b      	ldr	r3, [r3, #4]
 800f5be:	4a08      	ldr	r2, [pc, #32]	; (800f5e0 <shci_init+0x30>)
 800f5c0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800f5c2:	4a08      	ldr	r2, [pc, #32]	; (800f5e4 <shci_init+0x34>)
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800f5c8:	4806      	ldr	r0, [pc, #24]	; (800f5e4 <shci_init+0x34>)
 800f5ca:	f000 f915 	bl	800f7f8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f000 f898 	bl	800f708 <TlInit>

  return;
 800f5d8:	bf00      	nop
}
 800f5da:	3708      	adds	r7, #8
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}
 800f5e0:	20001860 	.word	0x20001860
 800f5e4:	20001840 	.word	0x20001840

0800f5e8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b084      	sub	sp, #16
 800f5ec:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800f5ee:	4822      	ldr	r0, [pc, #136]	; (800f678 <shci_user_evt_proc+0x90>)
 800f5f0:	f000 fb96 	bl	800fd20 <LST_is_empty>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d12b      	bne.n	800f652 <shci_user_evt_proc+0x6a>
 800f5fa:	4b20      	ldr	r3, [pc, #128]	; (800f67c <shci_user_evt_proc+0x94>)
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d027      	beq.n	800f652 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800f602:	f107 030c 	add.w	r3, r7, #12
 800f606:	4619      	mov	r1, r3
 800f608:	481b      	ldr	r0, [pc, #108]	; (800f678 <shci_user_evt_proc+0x90>)
 800f60a:	f000 fc18 	bl	800fe3e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800f60e:	4b1c      	ldr	r3, [pc, #112]	; (800f680 <shci_user_evt_proc+0x98>)
 800f610:	69db      	ldr	r3, [r3, #28]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d00c      	beq.n	800f630 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800f61a:	2301      	movs	r3, #1
 800f61c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800f61e:	4b18      	ldr	r3, [pc, #96]	; (800f680 <shci_user_evt_proc+0x98>)
 800f620:	69db      	ldr	r3, [r3, #28]
 800f622:	1d3a      	adds	r2, r7, #4
 800f624:	4610      	mov	r0, r2
 800f626:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800f628:	793a      	ldrb	r2, [r7, #4]
 800f62a:	4b14      	ldr	r3, [pc, #80]	; (800f67c <shci_user_evt_proc+0x94>)
 800f62c:	701a      	strb	r2, [r3, #0]
 800f62e:	e002      	b.n	800f636 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800f630:	4b12      	ldr	r3, [pc, #72]	; (800f67c <shci_user_evt_proc+0x94>)
 800f632:	2201      	movs	r2, #1
 800f634:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800f636:	4b11      	ldr	r3, [pc, #68]	; (800f67c <shci_user_evt_proc+0x94>)
 800f638:	781b      	ldrb	r3, [r3, #0]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d004      	beq.n	800f648 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	4618      	mov	r0, r3
 800f642:	f000 fa71 	bl	800fb28 <TL_MM_EvtDone>
 800f646:	e004      	b.n	800f652 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	4619      	mov	r1, r3
 800f64c:	480a      	ldr	r0, [pc, #40]	; (800f678 <shci_user_evt_proc+0x90>)
 800f64e:	f000 fb89 	bl	800fd64 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800f652:	4809      	ldr	r0, [pc, #36]	; (800f678 <shci_user_evt_proc+0x90>)
 800f654:	f000 fb64 	bl	800fd20 <LST_is_empty>
 800f658:	4603      	mov	r3, r0
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d107      	bne.n	800f66e <shci_user_evt_proc+0x86>
 800f65e:	4b07      	ldr	r3, [pc, #28]	; (800f67c <shci_user_evt_proc+0x94>)
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d003      	beq.n	800f66e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800f666:	4804      	ldr	r0, [pc, #16]	; (800f678 <shci_user_evt_proc+0x90>)
 800f668:	f7f1 fd48 	bl	80010fc <shci_notify_asynch_evt>
  }


  return;
 800f66c:	bf00      	nop
 800f66e:	bf00      	nop
}
 800f670:	3710      	adds	r7, #16
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
 800f676:	bf00      	nop
 800f678:	200009a8 	.word	0x200009a8
 800f67c:	200009b8 	.word	0x200009b8
 800f680:	20001840 	.word	0x20001840

0800f684 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b084      	sub	sp, #16
 800f688:	af00      	add	r7, sp, #0
 800f68a:	60ba      	str	r2, [r7, #8]
 800f68c:	607b      	str	r3, [r7, #4]
 800f68e:	4603      	mov	r3, r0
 800f690:	81fb      	strh	r3, [r7, #14]
 800f692:	460b      	mov	r3, r1
 800f694:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800f696:	2000      	movs	r0, #0
 800f698:	f000 f868 	bl	800f76c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800f69c:	4b17      	ldr	r3, [pc, #92]	; (800f6fc <shci_send+0x78>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	89fa      	ldrh	r2, [r7, #14]
 800f6a2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800f6a6:	4b15      	ldr	r3, [pc, #84]	; (800f6fc <shci_send+0x78>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	7b7a      	ldrb	r2, [r7, #13]
 800f6ac:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800f6ae:	4b13      	ldr	r3, [pc, #76]	; (800f6fc <shci_send+0x78>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	330c      	adds	r3, #12
 800f6b4:	7b7a      	ldrb	r2, [r7, #13]
 800f6b6:	68b9      	ldr	r1, [r7, #8]
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f005 fd23 	bl	8015104 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800f6be:	4b10      	ldr	r3, [pc, #64]	; (800f700 <shci_send+0x7c>)
 800f6c0:	2201      	movs	r2, #1
 800f6c2:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800f6c4:	4b0f      	ldr	r3, [pc, #60]	; (800f704 <shci_send+0x80>)
 800f6c6:	691b      	ldr	r3, [r3, #16]
 800f6c8:	2100      	movs	r1, #0
 800f6ca:	2000      	movs	r0, #0
 800f6cc:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800f6ce:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800f6d2:	f7f1 fd33 	bl	800113c <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f103 0008 	add.w	r0, r3, #8
 800f6dc:	4b07      	ldr	r3, [pc, #28]	; (800f6fc <shci_send+0x78>)
 800f6de:	6819      	ldr	r1, [r3, #0]
 800f6e0:	4b06      	ldr	r3, [pc, #24]	; (800f6fc <shci_send+0x78>)
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	789b      	ldrb	r3, [r3, #2]
 800f6e6:	3303      	adds	r3, #3
 800f6e8:	461a      	mov	r2, r3
 800f6ea:	f005 fd0b 	bl	8015104 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800f6ee:	2001      	movs	r0, #1
 800f6f0:	f000 f83c 	bl	800f76c <Cmd_SetStatus>

  return;
 800f6f4:	bf00      	nop
}
 800f6f6:	3710      	adds	r7, #16
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}
 800f6fc:	200009b4 	.word	0x200009b4
 800f700:	20001864 	.word	0x20001864
 800f704:	20001840 	.word	0x20001840

0800f708 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b086      	sub	sp, #24
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800f710:	4a10      	ldr	r2, [pc, #64]	; (800f754 <TlInit+0x4c>)
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800f716:	4810      	ldr	r0, [pc, #64]	; (800f758 <TlInit+0x50>)
 800f718:	f000 faf2 	bl	800fd00 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800f71c:	2001      	movs	r0, #1
 800f71e:	f000 f825 	bl	800f76c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800f722:	4b0e      	ldr	r3, [pc, #56]	; (800f75c <TlInit+0x54>)
 800f724:	2201      	movs	r2, #1
 800f726:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800f728:	4b0d      	ldr	r3, [pc, #52]	; (800f760 <TlInit+0x58>)
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d00c      	beq.n	800f74a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800f734:	4b0b      	ldr	r3, [pc, #44]	; (800f764 <TlInit+0x5c>)
 800f736:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800f738:	4b0b      	ldr	r3, [pc, #44]	; (800f768 <TlInit+0x60>)
 800f73a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800f73c:	4b08      	ldr	r3, [pc, #32]	; (800f760 <TlInit+0x58>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	f107 020c 	add.w	r2, r7, #12
 800f744:	4610      	mov	r0, r2
 800f746:	4798      	blx	r3
  }

  return;
 800f748:	bf00      	nop
 800f74a:	bf00      	nop
}
 800f74c:	3718      	adds	r7, #24
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}
 800f752:	bf00      	nop
 800f754:	200009b4 	.word	0x200009b4
 800f758:	200009a8 	.word	0x200009a8
 800f75c:	200009b8 	.word	0x200009b8
 800f760:	20001840 	.word	0x20001840
 800f764:	0800f7bd 	.word	0x0800f7bd
 800f768:	0800f7d5 	.word	0x0800f7d5

0800f76c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b082      	sub	sp, #8
 800f770:	af00      	add	r7, sp, #0
 800f772:	4603      	mov	r3, r0
 800f774:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800f776:	79fb      	ldrb	r3, [r7, #7]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d10b      	bne.n	800f794 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800f77c:	4b0d      	ldr	r3, [pc, #52]	; (800f7b4 <Cmd_SetStatus+0x48>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d003      	beq.n	800f78c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800f784:	4b0b      	ldr	r3, [pc, #44]	; (800f7b4 <Cmd_SetStatus+0x48>)
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	2000      	movs	r0, #0
 800f78a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800f78c:	4b0a      	ldr	r3, [pc, #40]	; (800f7b8 <Cmd_SetStatus+0x4c>)
 800f78e:	2200      	movs	r2, #0
 800f790:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800f792:	e00b      	b.n	800f7ac <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800f794:	4b08      	ldr	r3, [pc, #32]	; (800f7b8 <Cmd_SetStatus+0x4c>)
 800f796:	2201      	movs	r2, #1
 800f798:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800f79a:	4b06      	ldr	r3, [pc, #24]	; (800f7b4 <Cmd_SetStatus+0x48>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d004      	beq.n	800f7ac <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800f7a2:	4b04      	ldr	r3, [pc, #16]	; (800f7b4 <Cmd_SetStatus+0x48>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	2001      	movs	r0, #1
 800f7a8:	4798      	blx	r3
  return;
 800f7aa:	bf00      	nop
 800f7ac:	bf00      	nop
}
 800f7ae:	3708      	adds	r7, #8
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}
 800f7b4:	20001860 	.word	0x20001860
 800f7b8:	200009b0 	.word	0x200009b0

0800f7bc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b082      	sub	sp, #8
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800f7c4:	2000      	movs	r0, #0
 800f7c6:	f7f1 fca9 	bl	800111c <shci_cmd_resp_release>

  return;
 800f7ca:	bf00      	nop
}
 800f7cc:	3708      	adds	r7, #8
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}
	...

0800f7d4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b082      	sub	sp, #8
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800f7dc:	6879      	ldr	r1, [r7, #4]
 800f7de:	4805      	ldr	r0, [pc, #20]	; (800f7f4 <TlUserEvtReceived+0x20>)
 800f7e0:	f000 fae6 	bl	800fdb0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800f7e4:	4803      	ldr	r0, [pc, #12]	; (800f7f4 <TlUserEvtReceived+0x20>)
 800f7e6:	f7f1 fc89 	bl	80010fc <shci_notify_asynch_evt>

  return;
 800f7ea:	bf00      	nop
}
 800f7ec:	3708      	adds	r7, #8
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bd80      	pop	{r7, pc}
 800f7f2:	bf00      	nop
 800f7f4:	200009a8 	.word	0x200009a8

0800f7f8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800f7f8:	b480      	push	{r7}
 800f7fa:	b083      	sub	sp, #12
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	4a05      	ldr	r2, [pc, #20]	; (800f818 <shci_register_io_bus+0x20>)
 800f804:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	4a04      	ldr	r2, [pc, #16]	; (800f81c <shci_register_io_bus+0x24>)
 800f80a:	611a      	str	r2, [r3, #16]

  return;
 800f80c:	bf00      	nop
}
 800f80e:	370c      	adds	r7, #12
 800f810:	46bd      	mov	sp, r7
 800f812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f816:	4770      	bx	lr
 800f818:	0800f9b5 	.word	0x0800f9b5
 800f81c:	0800fa09 	.word	0x0800fa09

0800f820 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800f820:	b580      	push	{r7, lr}
 800f822:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800f824:	f005 f99e 	bl	8014b64 <HW_IPCC_Enable>

  return;
 800f828:	bf00      	nop
}
 800f82a:	bd80      	pop	{r7, pc}

0800f82c <TL_Init>:


void TL_Init( void )
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800f830:	4b10      	ldr	r3, [pc, #64]	; (800f874 <TL_Init+0x48>)
 800f832:	4a11      	ldr	r2, [pc, #68]	; (800f878 <TL_Init+0x4c>)
 800f834:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800f836:	4b0f      	ldr	r3, [pc, #60]	; (800f874 <TL_Init+0x48>)
 800f838:	4a10      	ldr	r2, [pc, #64]	; (800f87c <TL_Init+0x50>)
 800f83a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800f83c:	4b0d      	ldr	r3, [pc, #52]	; (800f874 <TL_Init+0x48>)
 800f83e:	4a10      	ldr	r2, [pc, #64]	; (800f880 <TL_Init+0x54>)
 800f840:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800f842:	4b0c      	ldr	r3, [pc, #48]	; (800f874 <TL_Init+0x48>)
 800f844:	4a0f      	ldr	r2, [pc, #60]	; (800f884 <TL_Init+0x58>)
 800f846:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800f848:	4b0a      	ldr	r3, [pc, #40]	; (800f874 <TL_Init+0x48>)
 800f84a:	4a0f      	ldr	r2, [pc, #60]	; (800f888 <TL_Init+0x5c>)
 800f84c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800f84e:	4b09      	ldr	r3, [pc, #36]	; (800f874 <TL_Init+0x48>)
 800f850:	4a0e      	ldr	r2, [pc, #56]	; (800f88c <TL_Init+0x60>)
 800f852:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800f854:	4b07      	ldr	r3, [pc, #28]	; (800f874 <TL_Init+0x48>)
 800f856:	4a0e      	ldr	r2, [pc, #56]	; (800f890 <TL_Init+0x64>)
 800f858:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800f85a:	4b06      	ldr	r3, [pc, #24]	; (800f874 <TL_Init+0x48>)
 800f85c:	4a0d      	ldr	r2, [pc, #52]	; (800f894 <TL_Init+0x68>)
 800f85e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800f860:	4b04      	ldr	r3, [pc, #16]	; (800f874 <TL_Init+0x48>)
 800f862:	4a0d      	ldr	r2, [pc, #52]	; (800f898 <TL_Init+0x6c>)
 800f864:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800f866:	4b03      	ldr	r3, [pc, #12]	; (800f874 <TL_Init+0x48>)
 800f868:	4a0c      	ldr	r2, [pc, #48]	; (800f89c <TL_Init+0x70>)
 800f86a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800f86c:	f005 f98e 	bl	8014b8c <HW_IPCC_Init>

  return;
 800f870:	bf00      	nop
}
 800f872:	bd80      	pop	{r7, pc}
 800f874:	20030000 	.word	0x20030000
 800f878:	20030028 	.word	0x20030028
 800f87c:	20030048 	.word	0x20030048
 800f880:	20030058 	.word	0x20030058
 800f884:	20030068 	.word	0x20030068
 800f888:	20030070 	.word	0x20030070
 800f88c:	20030078 	.word	0x20030078
 800f890:	20030080 	.word	0x20030080
 800f894:	2003009c 	.word	0x2003009c
 800f898:	200300a0 	.word	0x200300a0
 800f89c:	200300ac 	.word	0x200300ac

0800f8a0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b084      	sub	sp, #16
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800f8ac:	4811      	ldr	r0, [pc, #68]	; (800f8f4 <TL_BLE_Init+0x54>)
 800f8ae:	f000 fa27 	bl	800fd00 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800f8b2:	4b11      	ldr	r3, [pc, #68]	; (800f8f8 <TL_BLE_Init+0x58>)
 800f8b4:	685b      	ldr	r3, [r3, #4]
 800f8b6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	689a      	ldr	r2, [r3, #8]
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	68da      	ldr	r2, [r3, #12]
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	4a0c      	ldr	r2, [pc, #48]	; (800f8fc <TL_BLE_Init+0x5c>)
 800f8cc:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	4a08      	ldr	r2, [pc, #32]	; (800f8f4 <TL_BLE_Init+0x54>)
 800f8d2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800f8d4:	f005 f970 	bl	8014bb8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	4a08      	ldr	r2, [pc, #32]	; (800f900 <TL_BLE_Init+0x60>)
 800f8de:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	685b      	ldr	r3, [r3, #4]
 800f8e4:	4a07      	ldr	r2, [pc, #28]	; (800f904 <TL_BLE_Init+0x64>)
 800f8e6:	6013      	str	r3, [r2, #0]

  return 0;
 800f8e8:	2300      	movs	r3, #0
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	3710      	adds	r7, #16
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bd80      	pop	{r7, pc}
 800f8f2:	bf00      	nop
 800f8f4:	200300c8 	.word	0x200300c8
 800f8f8:	20030000 	.word	0x20030000
 800f8fc:	20000954 	.word	0x20000954
 800f900:	20001870 	.word	0x20001870
 800f904:	20001874 	.word	0x20001874

0800f908 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b082      	sub	sp, #8
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
 800f910:	460b      	mov	r3, r1
 800f912:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800f914:	4b09      	ldr	r3, [pc, #36]	; (800f93c <TL_BLE_SendCmd+0x34>)
 800f916:	685b      	ldr	r3, [r3, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	2201      	movs	r2, #1
 800f91c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800f91e:	4b07      	ldr	r3, [pc, #28]	; (800f93c <TL_BLE_SendCmd+0x34>)
 800f920:	685b      	ldr	r3, [r3, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	4619      	mov	r1, r3
 800f926:	2001      	movs	r0, #1
 800f928:	f000 f96c 	bl	800fc04 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800f92c:	f005 f94e 	bl	8014bcc <HW_IPCC_BLE_SendCmd>

  return 0;
 800f930:	2300      	movs	r3, #0
}
 800f932:	4618      	mov	r0, r3
 800f934:	3708      	adds	r7, #8
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}
 800f93a:	bf00      	nop
 800f93c:	20030000 	.word	0x20030000

0800f940 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b082      	sub	sp, #8
 800f944:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800f946:	e01c      	b.n	800f982 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800f948:	1d3b      	adds	r3, r7, #4
 800f94a:	4619      	mov	r1, r3
 800f94c:	4812      	ldr	r0, [pc, #72]	; (800f998 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800f94e:	f000 fa76 	bl	800fe3e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	7a5b      	ldrb	r3, [r3, #9]
 800f956:	2b0f      	cmp	r3, #15
 800f958:	d003      	beq.n	800f962 <HW_IPCC_BLE_RxEvtNot+0x22>
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	7a5b      	ldrb	r3, [r3, #9]
 800f95e:	2b0e      	cmp	r3, #14
 800f960:	d105      	bne.n	800f96e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	4619      	mov	r1, r3
 800f966:	2002      	movs	r0, #2
 800f968:	f000 f94c 	bl	800fc04 <OutputDbgTrace>
 800f96c:	e004      	b.n	800f978 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	4619      	mov	r1, r3
 800f972:	2003      	movs	r0, #3
 800f974:	f000 f946 	bl	800fc04 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800f978:	4b08      	ldr	r3, [pc, #32]	; (800f99c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	687a      	ldr	r2, [r7, #4]
 800f97e:	4610      	mov	r0, r2
 800f980:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800f982:	4805      	ldr	r0, [pc, #20]	; (800f998 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800f984:	f000 f9cc 	bl	800fd20 <LST_is_empty>
 800f988:	4603      	mov	r3, r0
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d0dc      	beq.n	800f948 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800f98e:	bf00      	nop
}
 800f990:	3708      	adds	r7, #8
 800f992:	46bd      	mov	sp, r7
 800f994:	bd80      	pop	{r7, pc}
 800f996:	bf00      	nop
 800f998:	200300c8 	.word	0x200300c8
 800f99c:	20001870 	.word	0x20001870

0800f9a0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800f9a4:	4b02      	ldr	r3, [pc, #8]	; (800f9b0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	4798      	blx	r3

  return;
 800f9aa:	bf00      	nop
}
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	20001874 	.word	0x20001874

0800f9b4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b084      	sub	sp, #16
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800f9c0:	480d      	ldr	r0, [pc, #52]	; (800f9f8 <TL_SYS_Init+0x44>)
 800f9c2:	f000 f99d 	bl	800fd00 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800f9c6:	4b0d      	ldr	r3, [pc, #52]	; (800f9fc <TL_SYS_Init+0x48>)
 800f9c8:	68db      	ldr	r3, [r3, #12]
 800f9ca:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	689a      	ldr	r2, [r3, #8]
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	4a08      	ldr	r2, [pc, #32]	; (800f9f8 <TL_SYS_Init+0x44>)
 800f9d8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800f9da:	f005 f919 	bl	8014c10 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	4a07      	ldr	r2, [pc, #28]	; (800fa00 <TL_SYS_Init+0x4c>)
 800f9e4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	685b      	ldr	r3, [r3, #4]
 800f9ea:	4a06      	ldr	r2, [pc, #24]	; (800fa04 <TL_SYS_Init+0x50>)
 800f9ec:	6013      	str	r3, [r2, #0]

  return 0;
 800f9ee:	2300      	movs	r3, #0
}
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	3710      	adds	r7, #16
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}
 800f9f8:	200300d0 	.word	0x200300d0
 800f9fc:	20030000 	.word	0x20030000
 800fa00:	20001878 	.word	0x20001878
 800fa04:	2000187c 	.word	0x2000187c

0800fa08 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b082      	sub	sp, #8
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
 800fa10:	460b      	mov	r3, r1
 800fa12:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800fa14:	4b09      	ldr	r3, [pc, #36]	; (800fa3c <TL_SYS_SendCmd+0x34>)
 800fa16:	68db      	ldr	r3, [r3, #12]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	2210      	movs	r2, #16
 800fa1c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800fa1e:	4b07      	ldr	r3, [pc, #28]	; (800fa3c <TL_SYS_SendCmd+0x34>)
 800fa20:	68db      	ldr	r3, [r3, #12]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	4619      	mov	r1, r3
 800fa26:	2004      	movs	r0, #4
 800fa28:	f000 f8ec 	bl	800fc04 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800fa2c:	f005 f8fa 	bl	8014c24 <HW_IPCC_SYS_SendCmd>

  return 0;
 800fa30:	2300      	movs	r3, #0
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3708      	adds	r7, #8
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}
 800fa3a:	bf00      	nop
 800fa3c:	20030000 	.word	0x20030000

0800fa40 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800fa44:	4b07      	ldr	r3, [pc, #28]	; (800fa64 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800fa46:	68db      	ldr	r3, [r3, #12]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	4619      	mov	r1, r3
 800fa4c:	2005      	movs	r0, #5
 800fa4e:	f000 f8d9 	bl	800fc04 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800fa52:	4b05      	ldr	r3, [pc, #20]	; (800fa68 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	4a03      	ldr	r2, [pc, #12]	; (800fa64 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800fa58:	68d2      	ldr	r2, [r2, #12]
 800fa5a:	6812      	ldr	r2, [r2, #0]
 800fa5c:	4610      	mov	r0, r2
 800fa5e:	4798      	blx	r3

  return;
 800fa60:	bf00      	nop
}
 800fa62:	bd80      	pop	{r7, pc}
 800fa64:	20030000 	.word	0x20030000
 800fa68:	20001878 	.word	0x20001878

0800fa6c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b082      	sub	sp, #8
 800fa70:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800fa72:	e00e      	b.n	800fa92 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800fa74:	1d3b      	adds	r3, r7, #4
 800fa76:	4619      	mov	r1, r3
 800fa78:	480b      	ldr	r0, [pc, #44]	; (800faa8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800fa7a:	f000 f9e0 	bl	800fe3e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	4619      	mov	r1, r3
 800fa82:	2006      	movs	r0, #6
 800fa84:	f000 f8be 	bl	800fc04 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800fa88:	4b08      	ldr	r3, [pc, #32]	; (800faac <HW_IPCC_SYS_EvtNot+0x40>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	687a      	ldr	r2, [r7, #4]
 800fa8e:	4610      	mov	r0, r2
 800fa90:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800fa92:	4805      	ldr	r0, [pc, #20]	; (800faa8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800fa94:	f000 f944 	bl	800fd20 <LST_is_empty>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d0ea      	beq.n	800fa74 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800fa9e:	bf00      	nop
}
 800faa0:	3708      	adds	r7, #8
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}
 800faa6:	bf00      	nop
 800faa8:	200300d0 	.word	0x200300d0
 800faac:	2000187c 	.word	0x2000187c

0800fab0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b082      	sub	sp, #8
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800fab8:	4817      	ldr	r0, [pc, #92]	; (800fb18 <TL_MM_Init+0x68>)
 800faba:	f000 f921 	bl	800fd00 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800fabe:	4817      	ldr	r0, [pc, #92]	; (800fb1c <TL_MM_Init+0x6c>)
 800fac0:	f000 f91e 	bl	800fd00 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800fac4:	4b16      	ldr	r3, [pc, #88]	; (800fb20 <TL_MM_Init+0x70>)
 800fac6:	691b      	ldr	r3, [r3, #16]
 800fac8:	4a16      	ldr	r2, [pc, #88]	; (800fb24 <TL_MM_Init+0x74>)
 800faca:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800facc:	4b15      	ldr	r3, [pc, #84]	; (800fb24 <TL_MM_Init+0x74>)
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	687a      	ldr	r2, [r7, #4]
 800fad2:	6892      	ldr	r2, [r2, #8]
 800fad4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800fad6:	4b13      	ldr	r3, [pc, #76]	; (800fb24 <TL_MM_Init+0x74>)
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	687a      	ldr	r2, [r7, #4]
 800fadc:	68d2      	ldr	r2, [r2, #12]
 800fade:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800fae0:	4b10      	ldr	r3, [pc, #64]	; (800fb24 <TL_MM_Init+0x74>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	4a0c      	ldr	r2, [pc, #48]	; (800fb18 <TL_MM_Init+0x68>)
 800fae6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800fae8:	4b0e      	ldr	r3, [pc, #56]	; (800fb24 <TL_MM_Init+0x74>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	687a      	ldr	r2, [r7, #4]
 800faee:	6812      	ldr	r2, [r2, #0]
 800faf0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800faf2:	4b0c      	ldr	r3, [pc, #48]	; (800fb24 <TL_MM_Init+0x74>)
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	687a      	ldr	r2, [r7, #4]
 800faf8:	6852      	ldr	r2, [r2, #4]
 800fafa:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800fafc:	4b09      	ldr	r3, [pc, #36]	; (800fb24 <TL_MM_Init+0x74>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	687a      	ldr	r2, [r7, #4]
 800fb02:	6912      	ldr	r2, [r2, #16]
 800fb04:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800fb06:	4b07      	ldr	r3, [pc, #28]	; (800fb24 <TL_MM_Init+0x74>)
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	687a      	ldr	r2, [r7, #4]
 800fb0c:	6952      	ldr	r2, [r2, #20]
 800fb0e:	619a      	str	r2, [r3, #24]

  return;
 800fb10:	bf00      	nop
}
 800fb12:	3708      	adds	r7, #8
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}
 800fb18:	200300b8 	.word	0x200300b8
 800fb1c:	20001868 	.word	0x20001868
 800fb20:	20030000 	.word	0x20030000
 800fb24:	20001880 	.word	0x20001880

0800fb28 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b082      	sub	sp, #8
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800fb30:	6879      	ldr	r1, [r7, #4]
 800fb32:	4807      	ldr	r0, [pc, #28]	; (800fb50 <TL_MM_EvtDone+0x28>)
 800fb34:	f000 f93c 	bl	800fdb0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800fb38:	6879      	ldr	r1, [r7, #4]
 800fb3a:	2000      	movs	r0, #0
 800fb3c:	f000 f862 	bl	800fc04 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800fb40:	4804      	ldr	r0, [pc, #16]	; (800fb54 <TL_MM_EvtDone+0x2c>)
 800fb42:	f005 f895 	bl	8014c70 <HW_IPCC_MM_SendFreeBuf>

  return;
 800fb46:	bf00      	nop
}
 800fb48:	3708      	adds	r7, #8
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}
 800fb4e:	bf00      	nop
 800fb50:	20001868 	.word	0x20001868
 800fb54:	0800fb59 	.word	0x0800fb59

0800fb58 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b082      	sub	sp, #8
 800fb5c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800fb5e:	e00c      	b.n	800fb7a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800fb60:	1d3b      	adds	r3, r7, #4
 800fb62:	4619      	mov	r1, r3
 800fb64:	480a      	ldr	r0, [pc, #40]	; (800fb90 <SendFreeBuf+0x38>)
 800fb66:	f000 f96a 	bl	800fe3e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800fb6a:	4b0a      	ldr	r3, [pc, #40]	; (800fb94 <SendFreeBuf+0x3c>)
 800fb6c:	691b      	ldr	r3, [r3, #16]
 800fb6e:	691b      	ldr	r3, [r3, #16]
 800fb70:	687a      	ldr	r2, [r7, #4]
 800fb72:	4611      	mov	r1, r2
 800fb74:	4618      	mov	r0, r3
 800fb76:	f000 f91b 	bl	800fdb0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800fb7a:	4805      	ldr	r0, [pc, #20]	; (800fb90 <SendFreeBuf+0x38>)
 800fb7c:	f000 f8d0 	bl	800fd20 <LST_is_empty>
 800fb80:	4603      	mov	r3, r0
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d0ec      	beq.n	800fb60 <SendFreeBuf+0x8>
  }

  return;
 800fb86:	bf00      	nop
}
 800fb88:	3708      	adds	r7, #8
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}
 800fb8e:	bf00      	nop
 800fb90:	20001868 	.word	0x20001868
 800fb94:	20030000 	.word	0x20030000

0800fb98 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800fb9c:	4805      	ldr	r0, [pc, #20]	; (800fbb4 <TL_TRACES_Init+0x1c>)
 800fb9e:	f000 f8af 	bl	800fd00 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800fba2:	4b05      	ldr	r3, [pc, #20]	; (800fbb8 <TL_TRACES_Init+0x20>)
 800fba4:	695b      	ldr	r3, [r3, #20]
 800fba6:	4a03      	ldr	r2, [pc, #12]	; (800fbb4 <TL_TRACES_Init+0x1c>)
 800fba8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800fbaa:	f005 f897 	bl	8014cdc <HW_IPCC_TRACES_Init>

  return;
 800fbae:	bf00      	nop
}
 800fbb0:	bd80      	pop	{r7, pc}
 800fbb2:	bf00      	nop
 800fbb4:	200300c0 	.word	0x200300c0
 800fbb8:	20030000 	.word	0x20030000

0800fbbc <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b082      	sub	sp, #8
 800fbc0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800fbc2:	e008      	b.n	800fbd6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800fbc4:	1d3b      	adds	r3, r7, #4
 800fbc6:	4619      	mov	r1, r3
 800fbc8:	4808      	ldr	r0, [pc, #32]	; (800fbec <HW_IPCC_TRACES_EvtNot+0x30>)
 800fbca:	f000 f938 	bl	800fe3e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f000 f80d 	bl	800fbf0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800fbd6:	4805      	ldr	r0, [pc, #20]	; (800fbec <HW_IPCC_TRACES_EvtNot+0x30>)
 800fbd8:	f000 f8a2 	bl	800fd20 <LST_is_empty>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d0f0      	beq.n	800fbc4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800fbe2:	bf00      	nop
}
 800fbe4:	3708      	adds	r7, #8
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
 800fbea:	bf00      	nop
 800fbec:	200300c0 	.word	0x200300c0

0800fbf0 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800fbf0:	b480      	push	{r7}
 800fbf2:	b083      	sub	sp, #12
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800fbf8:	bf00      	nop
 800fbfa:	370c      	adds	r7, #12
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc02:	4770      	bx	lr

0800fc04 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800fc04:	b480      	push	{r7}
 800fc06:	b085      	sub	sp, #20
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	6039      	str	r1, [r7, #0]
 800fc0e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800fc10:	79fb      	ldrb	r3, [r7, #7]
 800fc12:	2b06      	cmp	r3, #6
 800fc14:	d845      	bhi.n	800fca2 <OutputDbgTrace+0x9e>
 800fc16:	a201      	add	r2, pc, #4	; (adr r2, 800fc1c <OutputDbgTrace+0x18>)
 800fc18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc1c:	0800fc39 	.word	0x0800fc39
 800fc20:	0800fc5d 	.word	0x0800fc5d
 800fc24:	0800fc63 	.word	0x0800fc63
 800fc28:	0800fc77 	.word	0x0800fc77
 800fc2c:	0800fc83 	.word	0x0800fc83
 800fc30:	0800fc89 	.word	0x0800fc89
 800fc34:	0800fc97 	.word	0x0800fc97
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	7a5b      	ldrb	r3, [r3, #9]
 800fc40:	2bff      	cmp	r3, #255	; 0xff
 800fc42:	d005      	beq.n	800fc50 <OutputDbgTrace+0x4c>
 800fc44:	2bff      	cmp	r3, #255	; 0xff
 800fc46:	dc05      	bgt.n	800fc54 <OutputDbgTrace+0x50>
 800fc48:	2b0e      	cmp	r3, #14
 800fc4a:	d005      	beq.n	800fc58 <OutputDbgTrace+0x54>
 800fc4c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800fc4e:	e001      	b.n	800fc54 <OutputDbgTrace+0x50>
          break;
 800fc50:	bf00      	nop
 800fc52:	e027      	b.n	800fca4 <OutputDbgTrace+0xa0>
          break;
 800fc54:	bf00      	nop
 800fc56:	e025      	b.n	800fca4 <OutputDbgTrace+0xa0>
          break;
 800fc58:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800fc5a:	e023      	b.n	800fca4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800fc60:	e020      	b.n	800fca4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	7a5b      	ldrb	r3, [r3, #9]
 800fc6a:	2b0e      	cmp	r3, #14
 800fc6c:	d001      	beq.n	800fc72 <OutputDbgTrace+0x6e>
 800fc6e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800fc70:	e000      	b.n	800fc74 <OutputDbgTrace+0x70>
          break;
 800fc72:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800fc74:	e016      	b.n	800fca4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	7a5b      	ldrb	r3, [r3, #9]
 800fc7e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800fc80:	e010      	b.n	800fca4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800fc86:	e00d      	b.n	800fca4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	7a5b      	ldrb	r3, [r3, #9]
 800fc90:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800fc92:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800fc94:	e006      	b.n	800fca4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	7a5b      	ldrb	r3, [r3, #9]
 800fc9e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800fca0:	e000      	b.n	800fca4 <OutputDbgTrace+0xa0>

    default:
      break;
 800fca2:	bf00      	nop
  }

  return;
 800fca4:	bf00      	nop
}
 800fca6:	3714      	adds	r7, #20
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcae:	4770      	bx	lr

0800fcb0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800fcb0:	b480      	push	{r7}
 800fcb2:	b085      	sub	sp, #20
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800fcba:	4b0f      	ldr	r3, [pc, #60]	; (800fcf8 <OTP_Read+0x48>)
 800fcbc:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800fcbe:	e002      	b.n	800fcc6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	3b08      	subs	r3, #8
 800fcc4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	3307      	adds	r3, #7
 800fcca:	781b      	ldrb	r3, [r3, #0]
 800fccc:	79fa      	ldrb	r2, [r7, #7]
 800fcce:	429a      	cmp	r2, r3
 800fcd0:	d003      	beq.n	800fcda <OTP_Read+0x2a>
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	4a09      	ldr	r2, [pc, #36]	; (800fcfc <OTP_Read+0x4c>)
 800fcd6:	4293      	cmp	r3, r2
 800fcd8:	d1f2      	bne.n	800fcc0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	3307      	adds	r3, #7
 800fcde:	781b      	ldrb	r3, [r3, #0]
 800fce0:	79fa      	ldrb	r2, [r7, #7]
 800fce2:	429a      	cmp	r2, r3
 800fce4:	d001      	beq.n	800fcea <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800fce6:	2300      	movs	r3, #0
 800fce8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800fcea:	68fb      	ldr	r3, [r7, #12]
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3714      	adds	r7, #20
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf6:	4770      	bx	lr
 800fcf8:	1fff73f8 	.word	0x1fff73f8
 800fcfc:	1fff7000 	.word	0x1fff7000

0800fd00 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800fd00:	b480      	push	{r7}
 800fd02:	b083      	sub	sp, #12
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	687a      	ldr	r2, [r7, #4]
 800fd0c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	687a      	ldr	r2, [r7, #4]
 800fd12:	605a      	str	r2, [r3, #4]
}
 800fd14:	bf00      	nop
 800fd16:	370c      	adds	r7, #12
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1e:	4770      	bx	lr

0800fd20 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800fd20:	b480      	push	{r7}
 800fd22:	b087      	sub	sp, #28
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd28:	f3ef 8310 	mrs	r3, PRIMASK
 800fd2c:	60fb      	str	r3, [r7, #12]
  return(result);
 800fd2e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fd30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800fd32:	b672      	cpsid	i
}
 800fd34:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	687a      	ldr	r2, [r7, #4]
 800fd3c:	429a      	cmp	r2, r3
 800fd3e:	d102      	bne.n	800fd46 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800fd40:	2301      	movs	r3, #1
 800fd42:	75fb      	strb	r3, [r7, #23]
 800fd44:	e001      	b.n	800fd4a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800fd46:	2300      	movs	r3, #0
 800fd48:	75fb      	strb	r3, [r7, #23]
 800fd4a:	693b      	ldr	r3, [r7, #16]
 800fd4c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	f383 8810 	msr	PRIMASK, r3
}
 800fd54:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800fd56:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	371c      	adds	r7, #28
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd62:	4770      	bx	lr

0800fd64 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800fd64:	b480      	push	{r7}
 800fd66:	b087      	sub	sp, #28
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
 800fd6c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd6e:	f3ef 8310 	mrs	r3, PRIMASK
 800fd72:	60fb      	str	r3, [r7, #12]
  return(result);
 800fd74:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fd76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fd78:	b672      	cpsid	i
}
 800fd7a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681a      	ldr	r2, [r3, #0]
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	687a      	ldr	r2, [r7, #4]
 800fd88:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	683a      	ldr	r2, [r7, #0]
 800fd8e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	683a      	ldr	r2, [r7, #0]
 800fd96:	605a      	str	r2, [r3, #4]
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd9c:	693b      	ldr	r3, [r7, #16]
 800fd9e:	f383 8810 	msr	PRIMASK, r3
}
 800fda2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800fda4:	bf00      	nop
 800fda6:	371c      	adds	r7, #28
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdae:	4770      	bx	lr

0800fdb0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800fdb0:	b480      	push	{r7}
 800fdb2:	b087      	sub	sp, #28
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
 800fdb8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fdba:	f3ef 8310 	mrs	r3, PRIMASK
 800fdbe:	60fb      	str	r3, [r7, #12]
  return(result);
 800fdc0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fdc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fdc4:	b672      	cpsid	i
}
 800fdc6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	687a      	ldr	r2, [r7, #4]
 800fdcc:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	685a      	ldr	r2, [r3, #4]
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	683a      	ldr	r2, [r7, #0]
 800fdda:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800fddc:	683b      	ldr	r3, [r7, #0]
 800fdde:	685b      	ldr	r3, [r3, #4]
 800fde0:	683a      	ldr	r2, [r7, #0]
 800fde2:	601a      	str	r2, [r3, #0]
 800fde4:	697b      	ldr	r3, [r7, #20]
 800fde6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fde8:	693b      	ldr	r3, [r7, #16]
 800fdea:	f383 8810 	msr	PRIMASK, r3
}
 800fdee:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800fdf0:	bf00      	nop
 800fdf2:	371c      	adds	r7, #28
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfa:	4770      	bx	lr

0800fdfc <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800fdfc:	b480      	push	{r7}
 800fdfe:	b087      	sub	sp, #28
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe04:	f3ef 8310 	mrs	r3, PRIMASK
 800fe08:	60fb      	str	r3, [r7, #12]
  return(result);
 800fe0a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fe0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fe0e:	b672      	cpsid	i
}
 800fe10:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	685b      	ldr	r3, [r3, #4]
 800fe16:	687a      	ldr	r2, [r7, #4]
 800fe18:	6812      	ldr	r2, [r2, #0]
 800fe1a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	687a      	ldr	r2, [r7, #4]
 800fe22:	6852      	ldr	r2, [r2, #4]
 800fe24:	605a      	str	r2, [r3, #4]
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fe2a:	693b      	ldr	r3, [r7, #16]
 800fe2c:	f383 8810 	msr	PRIMASK, r3
}
 800fe30:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800fe32:	bf00      	nop
 800fe34:	371c      	adds	r7, #28
 800fe36:	46bd      	mov	sp, r7
 800fe38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3c:	4770      	bx	lr

0800fe3e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800fe3e:	b580      	push	{r7, lr}
 800fe40:	b086      	sub	sp, #24
 800fe42:	af00      	add	r7, sp, #0
 800fe44:	6078      	str	r0, [r7, #4]
 800fe46:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe48:	f3ef 8310 	mrs	r3, PRIMASK
 800fe4c:	60fb      	str	r3, [r7, #12]
  return(result);
 800fe4e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fe50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fe52:	b672      	cpsid	i
}
 800fe54:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681a      	ldr	r2, [r3, #0]
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	4618      	mov	r0, r3
 800fe64:	f7ff ffca 	bl	800fdfc <LST_remove_node>
 800fe68:	697b      	ldr	r3, [r7, #20]
 800fe6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	f383 8810 	msr	PRIMASK, r3
}
 800fe72:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800fe74:	bf00      	nop
 800fe76:	3718      	adds	r7, #24
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}

0800fe7c <__NVIC_SetPriority>:
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	b083      	sub	sp, #12
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	4603      	mov	r3, r0
 800fe84:	6039      	str	r1, [r7, #0]
 800fe86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fe88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	db0a      	blt.n	800fea6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	b2da      	uxtb	r2, r3
 800fe94:	490c      	ldr	r1, [pc, #48]	; (800fec8 <__NVIC_SetPriority+0x4c>)
 800fe96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe9a:	0112      	lsls	r2, r2, #4
 800fe9c:	b2d2      	uxtb	r2, r2
 800fe9e:	440b      	add	r3, r1
 800fea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800fea4:	e00a      	b.n	800febc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	b2da      	uxtb	r2, r3
 800feaa:	4908      	ldr	r1, [pc, #32]	; (800fecc <__NVIC_SetPriority+0x50>)
 800feac:	79fb      	ldrb	r3, [r7, #7]
 800feae:	f003 030f 	and.w	r3, r3, #15
 800feb2:	3b04      	subs	r3, #4
 800feb4:	0112      	lsls	r2, r2, #4
 800feb6:	b2d2      	uxtb	r2, r2
 800feb8:	440b      	add	r3, r1
 800feba:	761a      	strb	r2, [r3, #24]
}
 800febc:	bf00      	nop
 800febe:	370c      	adds	r7, #12
 800fec0:	46bd      	mov	sp, r7
 800fec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec6:	4770      	bx	lr
 800fec8:	e000e100 	.word	0xe000e100
 800fecc:	e000ed00 	.word	0xe000ed00

0800fed0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800fed0:	b580      	push	{r7, lr}
 800fed2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800fed4:	4b05      	ldr	r3, [pc, #20]	; (800feec <SysTick_Handler+0x1c>)
 800fed6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800fed8:	f002 fcde 	bl	8012898 <xTaskGetSchedulerState>
 800fedc:	4603      	mov	r3, r0
 800fede:	2b01      	cmp	r3, #1
 800fee0:	d001      	beq.n	800fee6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800fee2:	f003 fe69 	bl	8013bb8 <xPortSysTickHandler>
  }
}
 800fee6:	bf00      	nop
 800fee8:	bd80      	pop	{r7, pc}
 800feea:	bf00      	nop
 800feec:	e000e010 	.word	0xe000e010

0800fef0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fef0:	b580      	push	{r7, lr}
 800fef2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800fef4:	2100      	movs	r1, #0
 800fef6:	f06f 0004 	mvn.w	r0, #4
 800fefa:	f7ff ffbf 	bl	800fe7c <__NVIC_SetPriority>
#endif
}
 800fefe:	bf00      	nop
 800ff00:	bd80      	pop	{r7, pc}
	...

0800ff04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ff04:	b480      	push	{r7}
 800ff06:	b083      	sub	sp, #12
 800ff08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff0a:	f3ef 8305 	mrs	r3, IPSR
 800ff0e:	603b      	str	r3, [r7, #0]
  return(result);
 800ff10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d003      	beq.n	800ff1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ff16:	f06f 0305 	mvn.w	r3, #5
 800ff1a:	607b      	str	r3, [r7, #4]
 800ff1c:	e00c      	b.n	800ff38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ff1e:	4b0a      	ldr	r3, [pc, #40]	; (800ff48 <osKernelInitialize+0x44>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d105      	bne.n	800ff32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ff26:	4b08      	ldr	r3, [pc, #32]	; (800ff48 <osKernelInitialize+0x44>)
 800ff28:	2201      	movs	r2, #1
 800ff2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	607b      	str	r3, [r7, #4]
 800ff30:	e002      	b.n	800ff38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ff32:	f04f 33ff 	mov.w	r3, #4294967295
 800ff36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ff38:	687b      	ldr	r3, [r7, #4]
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	370c      	adds	r7, #12
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff44:	4770      	bx	lr
 800ff46:	bf00      	nop
 800ff48:	20001884 	.word	0x20001884

0800ff4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b082      	sub	sp, #8
 800ff50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff52:	f3ef 8305 	mrs	r3, IPSR
 800ff56:	603b      	str	r3, [r7, #0]
  return(result);
 800ff58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d003      	beq.n	800ff66 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ff5e:	f06f 0305 	mvn.w	r3, #5
 800ff62:	607b      	str	r3, [r7, #4]
 800ff64:	e010      	b.n	800ff88 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ff66:	4b0b      	ldr	r3, [pc, #44]	; (800ff94 <osKernelStart+0x48>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	2b01      	cmp	r3, #1
 800ff6c:	d109      	bne.n	800ff82 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ff6e:	f7ff ffbf 	bl	800fef0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ff72:	4b08      	ldr	r3, [pc, #32]	; (800ff94 <osKernelStart+0x48>)
 800ff74:	2202      	movs	r2, #2
 800ff76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ff78:	f002 f836 	bl	8011fe8 <vTaskStartScheduler>
      stat = osOK;
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	607b      	str	r3, [r7, #4]
 800ff80:	e002      	b.n	800ff88 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ff82:	f04f 33ff 	mov.w	r3, #4294967295
 800ff86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ff88:	687b      	ldr	r3, [r7, #4]
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	3708      	adds	r7, #8
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd80      	pop	{r7, pc}
 800ff92:	bf00      	nop
 800ff94:	20001884 	.word	0x20001884

0800ff98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b08e      	sub	sp, #56	; 0x38
 800ff9c:	af04      	add	r7, sp, #16
 800ff9e:	60f8      	str	r0, [r7, #12]
 800ffa0:	60b9      	str	r1, [r7, #8]
 800ffa2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ffa8:	f3ef 8305 	mrs	r3, IPSR
 800ffac:	617b      	str	r3, [r7, #20]
  return(result);
 800ffae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d17e      	bne.n	80100b2 <osThreadNew+0x11a>
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d07b      	beq.n	80100b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ffba:	2380      	movs	r3, #128	; 0x80
 800ffbc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ffbe:	2318      	movs	r3, #24
 800ffc0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ffc6:	f04f 33ff 	mov.w	r3, #4294967295
 800ffca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d045      	beq.n	801005e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d002      	beq.n	800ffe0 <osThreadNew+0x48>
        name = attr->name;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	699b      	ldr	r3, [r3, #24]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d002      	beq.n	800ffee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	699b      	ldr	r3, [r3, #24]
 800ffec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ffee:	69fb      	ldr	r3, [r7, #28]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d008      	beq.n	8010006 <osThreadNew+0x6e>
 800fff4:	69fb      	ldr	r3, [r7, #28]
 800fff6:	2b38      	cmp	r3, #56	; 0x38
 800fff8:	d805      	bhi.n	8010006 <osThreadNew+0x6e>
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	685b      	ldr	r3, [r3, #4]
 800fffe:	f003 0301 	and.w	r3, r3, #1
 8010002:	2b00      	cmp	r3, #0
 8010004:	d001      	beq.n	801000a <osThreadNew+0x72>
        return (NULL);
 8010006:	2300      	movs	r3, #0
 8010008:	e054      	b.n	80100b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	695b      	ldr	r3, [r3, #20]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d003      	beq.n	801001a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	695b      	ldr	r3, [r3, #20]
 8010016:	089b      	lsrs	r3, r3, #2
 8010018:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	689b      	ldr	r3, [r3, #8]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d00e      	beq.n	8010040 <osThreadNew+0xa8>
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	68db      	ldr	r3, [r3, #12]
 8010026:	2b5b      	cmp	r3, #91	; 0x5b
 8010028:	d90a      	bls.n	8010040 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801002e:	2b00      	cmp	r3, #0
 8010030:	d006      	beq.n	8010040 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	695b      	ldr	r3, [r3, #20]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d002      	beq.n	8010040 <osThreadNew+0xa8>
        mem = 1;
 801003a:	2301      	movs	r3, #1
 801003c:	61bb      	str	r3, [r7, #24]
 801003e:	e010      	b.n	8010062 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	689b      	ldr	r3, [r3, #8]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d10c      	bne.n	8010062 <osThreadNew+0xca>
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	68db      	ldr	r3, [r3, #12]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d108      	bne.n	8010062 <osThreadNew+0xca>
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	691b      	ldr	r3, [r3, #16]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d104      	bne.n	8010062 <osThreadNew+0xca>
          mem = 0;
 8010058:	2300      	movs	r3, #0
 801005a:	61bb      	str	r3, [r7, #24]
 801005c:	e001      	b.n	8010062 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801005e:	2300      	movs	r3, #0
 8010060:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010062:	69bb      	ldr	r3, [r7, #24]
 8010064:	2b01      	cmp	r3, #1
 8010066:	d110      	bne.n	801008a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801006c:	687a      	ldr	r2, [r7, #4]
 801006e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010070:	9202      	str	r2, [sp, #8]
 8010072:	9301      	str	r3, [sp, #4]
 8010074:	69fb      	ldr	r3, [r7, #28]
 8010076:	9300      	str	r3, [sp, #0]
 8010078:	68bb      	ldr	r3, [r7, #8]
 801007a:	6a3a      	ldr	r2, [r7, #32]
 801007c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801007e:	68f8      	ldr	r0, [r7, #12]
 8010080:	f001 fddc 	bl	8011c3c <xTaskCreateStatic>
 8010084:	4603      	mov	r3, r0
 8010086:	613b      	str	r3, [r7, #16]
 8010088:	e013      	b.n	80100b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801008a:	69bb      	ldr	r3, [r7, #24]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d110      	bne.n	80100b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010090:	6a3b      	ldr	r3, [r7, #32]
 8010092:	b29a      	uxth	r2, r3
 8010094:	f107 0310 	add.w	r3, r7, #16
 8010098:	9301      	str	r3, [sp, #4]
 801009a:	69fb      	ldr	r3, [r7, #28]
 801009c:	9300      	str	r3, [sp, #0]
 801009e:	68bb      	ldr	r3, [r7, #8]
 80100a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80100a2:	68f8      	ldr	r0, [r7, #12]
 80100a4:	f001 fe27 	bl	8011cf6 <xTaskCreate>
 80100a8:	4603      	mov	r3, r0
 80100aa:	2b01      	cmp	r3, #1
 80100ac:	d001      	beq.n	80100b2 <osThreadNew+0x11a>
            hTask = NULL;
 80100ae:	2300      	movs	r3, #0
 80100b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80100b2:	693b      	ldr	r3, [r7, #16]
}
 80100b4:	4618      	mov	r0, r3
 80100b6:	3728      	adds	r7, #40	; 0x28
 80100b8:	46bd      	mov	sp, r7
 80100ba:	bd80      	pop	{r7, pc}

080100bc <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80100bc:	b580      	push	{r7, lr}
 80100be:	b088      	sub	sp, #32
 80100c0:	af02      	add	r7, sp, #8
 80100c2:	6078      	str	r0, [r7, #4]
 80100c4:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80100ca:	697b      	ldr	r3, [r7, #20]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d002      	beq.n	80100d6 <osThreadFlagsSet+0x1a>
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	da03      	bge.n	80100de <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80100d6:	f06f 0303 	mvn.w	r3, #3
 80100da:	60fb      	str	r3, [r7, #12]
 80100dc:	e035      	b.n	801014a <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 80100de:	f04f 33ff 	mov.w	r3, #4294967295
 80100e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80100e4:	f3ef 8305 	mrs	r3, IPSR
 80100e8:	613b      	str	r3, [r7, #16]
  return(result);
 80100ea:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d01f      	beq.n	8010130 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 80100f0:	2300      	movs	r3, #0
 80100f2:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80100f4:	f107 0308 	add.w	r3, r7, #8
 80100f8:	9300      	str	r3, [sp, #0]
 80100fa:	2300      	movs	r3, #0
 80100fc:	2201      	movs	r2, #1
 80100fe:	6839      	ldr	r1, [r7, #0]
 8010100:	6978      	ldr	r0, [r7, #20]
 8010102:	f002 fe65 	bl	8012dd0 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8010106:	f107 030c 	add.w	r3, r7, #12
 801010a:	2200      	movs	r2, #0
 801010c:	9200      	str	r2, [sp, #0]
 801010e:	2200      	movs	r2, #0
 8010110:	2100      	movs	r1, #0
 8010112:	6978      	ldr	r0, [r7, #20]
 8010114:	f002 fe5c 	bl	8012dd0 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d015      	beq.n	801014a <osThreadFlagsSet+0x8e>
 801011e:	4b0d      	ldr	r3, [pc, #52]	; (8010154 <osThreadFlagsSet+0x98>)
 8010120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010124:	601a      	str	r2, [r3, #0]
 8010126:	f3bf 8f4f 	dsb	sy
 801012a:	f3bf 8f6f 	isb	sy
 801012e:	e00c      	b.n	801014a <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8010130:	2300      	movs	r3, #0
 8010132:	2201      	movs	r2, #1
 8010134:	6839      	ldr	r1, [r7, #0]
 8010136:	6978      	ldr	r0, [r7, #20]
 8010138:	f002 fd92 	bl	8012c60 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 801013c:	f107 030c 	add.w	r3, r7, #12
 8010140:	2200      	movs	r2, #0
 8010142:	2100      	movs	r1, #0
 8010144:	6978      	ldr	r0, [r7, #20]
 8010146:	f002 fd8b 	bl	8012c60 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 801014a:	68fb      	ldr	r3, [r7, #12]
}
 801014c:	4618      	mov	r0, r3
 801014e:	3718      	adds	r7, #24
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}
 8010154:	e000ed04 	.word	0xe000ed04

08010158 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8010158:	b580      	push	{r7, lr}
 801015a:	b08c      	sub	sp, #48	; 0x30
 801015c:	af00      	add	r7, sp, #0
 801015e:	60f8      	str	r0, [r7, #12]
 8010160:	60b9      	str	r1, [r7, #8]
 8010162:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010164:	f3ef 8305 	mrs	r3, IPSR
 8010168:	617b      	str	r3, [r7, #20]
  return(result);
 801016a:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 801016c:	2b00      	cmp	r3, #0
 801016e:	d003      	beq.n	8010178 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8010170:	f06f 0305 	mvn.w	r3, #5
 8010174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010176:	e06b      	b.n	8010250 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	2b00      	cmp	r3, #0
 801017c:	da03      	bge.n	8010186 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 801017e:	f06f 0303 	mvn.w	r3, #3
 8010182:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010184:	e064      	b.n	8010250 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	f003 0302 	and.w	r3, r3, #2
 801018c:	2b00      	cmp	r3, #0
 801018e:	d002      	beq.n	8010196 <osThreadFlagsWait+0x3e>
      clear = 0U;
 8010190:	2300      	movs	r3, #0
 8010192:	62bb      	str	r3, [r7, #40]	; 0x28
 8010194:	e001      	b.n	801019a <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 801019a:	2300      	movs	r3, #0
 801019c:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 80101a2:	f002 f833 	bl	801220c <xTaskGetTickCount>
 80101a6:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80101a8:	f107 0210 	add.w	r2, r7, #16
 80101ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80101b0:	2000      	movs	r0, #0
 80101b2:	f002 fcfb 	bl	8012bac <xTaskNotifyWait>
 80101b6:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 80101b8:	69fb      	ldr	r3, [r7, #28]
 80101ba:	2b01      	cmp	r3, #1
 80101bc:	d137      	bne.n	801022e <osThreadFlagsWait+0xd6>
        rflags &= flags;
 80101be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	4013      	ands	r3, r2
 80101c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 80101c6:	693b      	ldr	r3, [r7, #16]
 80101c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101ca:	4313      	orrs	r3, r2
 80101cc:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80101ce:	68bb      	ldr	r3, [r7, #8]
 80101d0:	f003 0301 	and.w	r3, r3, #1
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d00c      	beq.n	80101f2 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 80101d8:	68fa      	ldr	r2, [r7, #12]
 80101da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101dc:	4013      	ands	r3, r2
 80101de:	68fa      	ldr	r2, [r7, #12]
 80101e0:	429a      	cmp	r2, r3
 80101e2:	d032      	beq.n	801024a <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d10f      	bne.n	801020a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80101ea:	f06f 0302 	mvn.w	r3, #2
 80101ee:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80101f0:	e02e      	b.n	8010250 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80101f2:	68fa      	ldr	r2, [r7, #12]
 80101f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101f6:	4013      	ands	r3, r2
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d128      	bne.n	801024e <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d103      	bne.n	801020a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8010202:	f06f 0302 	mvn.w	r3, #2
 8010206:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8010208:	e022      	b.n	8010250 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 801020a:	f001 ffff 	bl	801220c <xTaskGetTickCount>
 801020e:	4602      	mov	r2, r0
 8010210:	6a3b      	ldr	r3, [r7, #32]
 8010212:	1ad3      	subs	r3, r2, r3
 8010214:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8010216:	69ba      	ldr	r2, [r7, #24]
 8010218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801021a:	429a      	cmp	r2, r3
 801021c:	d902      	bls.n	8010224 <osThreadFlagsWait+0xcc>
          tout  = 0;
 801021e:	2300      	movs	r3, #0
 8010220:	627b      	str	r3, [r7, #36]	; 0x24
 8010222:	e00e      	b.n	8010242 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8010224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010226:	69bb      	ldr	r3, [r7, #24]
 8010228:	1ad3      	subs	r3, r2, r3
 801022a:	627b      	str	r3, [r7, #36]	; 0x24
 801022c:	e009      	b.n	8010242 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d103      	bne.n	801023c <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8010234:	f06f 0302 	mvn.w	r3, #2
 8010238:	62fb      	str	r3, [r7, #44]	; 0x2c
 801023a:	e002      	b.n	8010242 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 801023c:	f06f 0301 	mvn.w	r3, #1
 8010240:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8010242:	69fb      	ldr	r3, [r7, #28]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d1af      	bne.n	80101a8 <osThreadFlagsWait+0x50>
 8010248:	e002      	b.n	8010250 <osThreadFlagsWait+0xf8>
            break;
 801024a:	bf00      	nop
 801024c:	e000      	b.n	8010250 <osThreadFlagsWait+0xf8>
            break;
 801024e:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8010250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010252:	4618      	mov	r0, r3
 8010254:	3730      	adds	r7, #48	; 0x30
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}

0801025a <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 801025a:	b580      	push	{r7, lr}
 801025c:	b084      	sub	sp, #16
 801025e:	af00      	add	r7, sp, #0
 8010260:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f003 facc 	bl	8013800 <pvTimerGetTimerID>
 8010268:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d005      	beq.n	801027c <TimerCallback+0x22>
    callb->func (callb->arg);
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	68fa      	ldr	r2, [r7, #12]
 8010276:	6852      	ldr	r2, [r2, #4]
 8010278:	4610      	mov	r0, r2
 801027a:	4798      	blx	r3
  }
}
 801027c:	bf00      	nop
 801027e:	3710      	adds	r7, #16
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}

08010284 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8010284:	b580      	push	{r7, lr}
 8010286:	b08c      	sub	sp, #48	; 0x30
 8010288:	af02      	add	r7, sp, #8
 801028a:	60f8      	str	r0, [r7, #12]
 801028c:	607a      	str	r2, [r7, #4]
 801028e:	603b      	str	r3, [r7, #0]
 8010290:	460b      	mov	r3, r1
 8010292:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8010294:	2300      	movs	r3, #0
 8010296:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010298:	f3ef 8305 	mrs	r3, IPSR
 801029c:	613b      	str	r3, [r7, #16]
  return(result);
 801029e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d163      	bne.n	801036c <osTimerNew+0xe8>
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d060      	beq.n	801036c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80102aa:	2008      	movs	r0, #8
 80102ac:	f003 fd14 	bl	8013cd8 <pvPortMalloc>
 80102b0:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80102b2:	697b      	ldr	r3, [r7, #20]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d059      	beq.n	801036c <osTimerNew+0xe8>
      callb->func = func;
 80102b8:	697b      	ldr	r3, [r7, #20]
 80102ba:	68fa      	ldr	r2, [r7, #12]
 80102bc:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80102be:	697b      	ldr	r3, [r7, #20]
 80102c0:	687a      	ldr	r2, [r7, #4]
 80102c2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80102c4:	7afb      	ldrb	r3, [r7, #11]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d102      	bne.n	80102d0 <osTimerNew+0x4c>
        reload = pdFALSE;
 80102ca:	2300      	movs	r3, #0
 80102cc:	61fb      	str	r3, [r7, #28]
 80102ce:	e001      	b.n	80102d4 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80102d0:	2301      	movs	r3, #1
 80102d2:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80102d4:	f04f 33ff 	mov.w	r3, #4294967295
 80102d8:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80102da:	2300      	movs	r3, #0
 80102dc:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d01c      	beq.n	801031e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d002      	beq.n	80102f2 <osTimerNew+0x6e>
          name = attr->name;
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	689b      	ldr	r3, [r3, #8]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d006      	beq.n	8010308 <osTimerNew+0x84>
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	68db      	ldr	r3, [r3, #12]
 80102fe:	2b2b      	cmp	r3, #43	; 0x2b
 8010300:	d902      	bls.n	8010308 <osTimerNew+0x84>
          mem = 1;
 8010302:	2301      	movs	r3, #1
 8010304:	61bb      	str	r3, [r7, #24]
 8010306:	e00c      	b.n	8010322 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	689b      	ldr	r3, [r3, #8]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d108      	bne.n	8010322 <osTimerNew+0x9e>
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	68db      	ldr	r3, [r3, #12]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d104      	bne.n	8010322 <osTimerNew+0x9e>
            mem = 0;
 8010318:	2300      	movs	r3, #0
 801031a:	61bb      	str	r3, [r7, #24]
 801031c:	e001      	b.n	8010322 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 801031e:	2300      	movs	r3, #0
 8010320:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8010322:	69bb      	ldr	r3, [r7, #24]
 8010324:	2b01      	cmp	r3, #1
 8010326:	d10c      	bne.n	8010342 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8010328:	683b      	ldr	r3, [r7, #0]
 801032a:	689b      	ldr	r3, [r3, #8]
 801032c:	9301      	str	r3, [sp, #4]
 801032e:	4b12      	ldr	r3, [pc, #72]	; (8010378 <osTimerNew+0xf4>)
 8010330:	9300      	str	r3, [sp, #0]
 8010332:	697b      	ldr	r3, [r7, #20]
 8010334:	69fa      	ldr	r2, [r7, #28]
 8010336:	2101      	movs	r1, #1
 8010338:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801033a:	f002 fee2 	bl	8013102 <xTimerCreateStatic>
 801033e:	6238      	str	r0, [r7, #32]
 8010340:	e00b      	b.n	801035a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8010342:	69bb      	ldr	r3, [r7, #24]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d108      	bne.n	801035a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8010348:	4b0b      	ldr	r3, [pc, #44]	; (8010378 <osTimerNew+0xf4>)
 801034a:	9300      	str	r3, [sp, #0]
 801034c:	697b      	ldr	r3, [r7, #20]
 801034e:	69fa      	ldr	r2, [r7, #28]
 8010350:	2101      	movs	r1, #1
 8010352:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010354:	f002 feb4 	bl	80130c0 <xTimerCreate>
 8010358:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 801035a:	6a3b      	ldr	r3, [r7, #32]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d105      	bne.n	801036c <osTimerNew+0xe8>
 8010360:	697b      	ldr	r3, [r7, #20]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d002      	beq.n	801036c <osTimerNew+0xe8>
        vPortFree (callb);
 8010366:	6978      	ldr	r0, [r7, #20]
 8010368:	f003 fd82 	bl	8013e70 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 801036c:	6a3b      	ldr	r3, [r7, #32]
}
 801036e:	4618      	mov	r0, r3
 8010370:	3728      	adds	r7, #40	; 0x28
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}
 8010376:	bf00      	nop
 8010378:	0801025b 	.word	0x0801025b

0801037c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 801037c:	b580      	push	{r7, lr}
 801037e:	b088      	sub	sp, #32
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8010384:	2300      	movs	r3, #0
 8010386:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010388:	f3ef 8305 	mrs	r3, IPSR
 801038c:	60bb      	str	r3, [r7, #8]
  return(result);
 801038e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8010390:	2b00      	cmp	r3, #0
 8010392:	d174      	bne.n	801047e <osMutexNew+0x102>
    if (attr != NULL) {
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d003      	beq.n	80103a2 <osMutexNew+0x26>
      type = attr->attr_bits;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	685b      	ldr	r3, [r3, #4]
 801039e:	61bb      	str	r3, [r7, #24]
 80103a0:	e001      	b.n	80103a6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80103a2:	2300      	movs	r3, #0
 80103a4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80103a6:	69bb      	ldr	r3, [r7, #24]
 80103a8:	f003 0301 	and.w	r3, r3, #1
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d002      	beq.n	80103b6 <osMutexNew+0x3a>
      rmtx = 1U;
 80103b0:	2301      	movs	r3, #1
 80103b2:	617b      	str	r3, [r7, #20]
 80103b4:	e001      	b.n	80103ba <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80103b6:	2300      	movs	r3, #0
 80103b8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80103ba:	69bb      	ldr	r3, [r7, #24]
 80103bc:	f003 0308 	and.w	r3, r3, #8
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d15c      	bne.n	801047e <osMutexNew+0x102>
      mem = -1;
 80103c4:	f04f 33ff 	mov.w	r3, #4294967295
 80103c8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d015      	beq.n	80103fc <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	689b      	ldr	r3, [r3, #8]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d006      	beq.n	80103e6 <osMutexNew+0x6a>
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	68db      	ldr	r3, [r3, #12]
 80103dc:	2b4f      	cmp	r3, #79	; 0x4f
 80103de:	d902      	bls.n	80103e6 <osMutexNew+0x6a>
          mem = 1;
 80103e0:	2301      	movs	r3, #1
 80103e2:	613b      	str	r3, [r7, #16]
 80103e4:	e00c      	b.n	8010400 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	689b      	ldr	r3, [r3, #8]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d108      	bne.n	8010400 <osMutexNew+0x84>
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	68db      	ldr	r3, [r3, #12]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d104      	bne.n	8010400 <osMutexNew+0x84>
            mem = 0;
 80103f6:	2300      	movs	r3, #0
 80103f8:	613b      	str	r3, [r7, #16]
 80103fa:	e001      	b.n	8010400 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80103fc:	2300      	movs	r3, #0
 80103fe:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8010400:	693b      	ldr	r3, [r7, #16]
 8010402:	2b01      	cmp	r3, #1
 8010404:	d112      	bne.n	801042c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8010406:	697b      	ldr	r3, [r7, #20]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d007      	beq.n	801041c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	689b      	ldr	r3, [r3, #8]
 8010410:	4619      	mov	r1, r3
 8010412:	2004      	movs	r0, #4
 8010414:	f000 fc37 	bl	8010c86 <xQueueCreateMutexStatic>
 8010418:	61f8      	str	r0, [r7, #28]
 801041a:	e016      	b.n	801044a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	689b      	ldr	r3, [r3, #8]
 8010420:	4619      	mov	r1, r3
 8010422:	2001      	movs	r0, #1
 8010424:	f000 fc2f 	bl	8010c86 <xQueueCreateMutexStatic>
 8010428:	61f8      	str	r0, [r7, #28]
 801042a:	e00e      	b.n	801044a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 801042c:	693b      	ldr	r3, [r7, #16]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d10b      	bne.n	801044a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8010432:	697b      	ldr	r3, [r7, #20]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d004      	beq.n	8010442 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8010438:	2004      	movs	r0, #4
 801043a:	f000 fc0c 	bl	8010c56 <xQueueCreateMutex>
 801043e:	61f8      	str	r0, [r7, #28]
 8010440:	e003      	b.n	801044a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8010442:	2001      	movs	r0, #1
 8010444:	f000 fc07 	bl	8010c56 <xQueueCreateMutex>
 8010448:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 801044a:	69fb      	ldr	r3, [r7, #28]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d00c      	beq.n	801046a <osMutexNew+0xee>
        if (attr != NULL) {
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d003      	beq.n	801045e <osMutexNew+0xe2>
          name = attr->name;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	60fb      	str	r3, [r7, #12]
 801045c:	e001      	b.n	8010462 <osMutexNew+0xe6>
        } else {
          name = NULL;
 801045e:	2300      	movs	r3, #0
 8010460:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8010462:	68f9      	ldr	r1, [r7, #12]
 8010464:	69f8      	ldr	r0, [r7, #28]
 8010466:	f001 fb61 	bl	8011b2c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 801046a:	69fb      	ldr	r3, [r7, #28]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d006      	beq.n	801047e <osMutexNew+0x102>
 8010470:	697b      	ldr	r3, [r7, #20]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d003      	beq.n	801047e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8010476:	69fb      	ldr	r3, [r7, #28]
 8010478:	f043 0301 	orr.w	r3, r3, #1
 801047c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 801047e:	69fb      	ldr	r3, [r7, #28]
}
 8010480:	4618      	mov	r0, r3
 8010482:	3720      	adds	r7, #32
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8010488:	b580      	push	{r7, lr}
 801048a:	b086      	sub	sp, #24
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f023 0301 	bic.w	r3, r3, #1
 8010498:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f003 0301 	and.w	r3, r3, #1
 80104a0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80104a2:	2300      	movs	r3, #0
 80104a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80104a6:	f3ef 8305 	mrs	r3, IPSR
 80104aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80104ac:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d003      	beq.n	80104ba <osMutexAcquire+0x32>
    stat = osErrorISR;
 80104b2:	f06f 0305 	mvn.w	r3, #5
 80104b6:	617b      	str	r3, [r7, #20]
 80104b8:	e02c      	b.n	8010514 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80104ba:	693b      	ldr	r3, [r7, #16]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d103      	bne.n	80104c8 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80104c0:	f06f 0303 	mvn.w	r3, #3
 80104c4:	617b      	str	r3, [r7, #20]
 80104c6:	e025      	b.n	8010514 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d011      	beq.n	80104f2 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80104ce:	6839      	ldr	r1, [r7, #0]
 80104d0:	6938      	ldr	r0, [r7, #16]
 80104d2:	f000 fc27 	bl	8010d24 <xQueueTakeMutexRecursive>
 80104d6:	4603      	mov	r3, r0
 80104d8:	2b01      	cmp	r3, #1
 80104da:	d01b      	beq.n	8010514 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d003      	beq.n	80104ea <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80104e2:	f06f 0301 	mvn.w	r3, #1
 80104e6:	617b      	str	r3, [r7, #20]
 80104e8:	e014      	b.n	8010514 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80104ea:	f06f 0302 	mvn.w	r3, #2
 80104ee:	617b      	str	r3, [r7, #20]
 80104f0:	e010      	b.n	8010514 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80104f2:	6839      	ldr	r1, [r7, #0]
 80104f4:	6938      	ldr	r0, [r7, #16]
 80104f6:	f000 ffbb 	bl	8011470 <xQueueSemaphoreTake>
 80104fa:	4603      	mov	r3, r0
 80104fc:	2b01      	cmp	r3, #1
 80104fe:	d009      	beq.n	8010514 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d003      	beq.n	801050e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8010506:	f06f 0301 	mvn.w	r3, #1
 801050a:	617b      	str	r3, [r7, #20]
 801050c:	e002      	b.n	8010514 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 801050e:	f06f 0302 	mvn.w	r3, #2
 8010512:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8010514:	697b      	ldr	r3, [r7, #20]
}
 8010516:	4618      	mov	r0, r3
 8010518:	3718      	adds	r7, #24
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}

0801051e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 801051e:	b580      	push	{r7, lr}
 8010520:	b086      	sub	sp, #24
 8010522:	af00      	add	r7, sp, #0
 8010524:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f023 0301 	bic.w	r3, r3, #1
 801052c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f003 0301 	and.w	r3, r3, #1
 8010534:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8010536:	2300      	movs	r3, #0
 8010538:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801053a:	f3ef 8305 	mrs	r3, IPSR
 801053e:	60bb      	str	r3, [r7, #8]
  return(result);
 8010540:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8010542:	2b00      	cmp	r3, #0
 8010544:	d003      	beq.n	801054e <osMutexRelease+0x30>
    stat = osErrorISR;
 8010546:	f06f 0305 	mvn.w	r3, #5
 801054a:	617b      	str	r3, [r7, #20]
 801054c:	e01f      	b.n	801058e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 801054e:	693b      	ldr	r3, [r7, #16]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d103      	bne.n	801055c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8010554:	f06f 0303 	mvn.w	r3, #3
 8010558:	617b      	str	r3, [r7, #20]
 801055a:	e018      	b.n	801058e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d009      	beq.n	8010576 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8010562:	6938      	ldr	r0, [r7, #16]
 8010564:	f000 fbaa 	bl	8010cbc <xQueueGiveMutexRecursive>
 8010568:	4603      	mov	r3, r0
 801056a:	2b01      	cmp	r3, #1
 801056c:	d00f      	beq.n	801058e <osMutexRelease+0x70>
        stat = osErrorResource;
 801056e:	f06f 0302 	mvn.w	r3, #2
 8010572:	617b      	str	r3, [r7, #20]
 8010574:	e00b      	b.n	801058e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8010576:	2300      	movs	r3, #0
 8010578:	2200      	movs	r2, #0
 801057a:	2100      	movs	r1, #0
 801057c:	6938      	ldr	r0, [r7, #16]
 801057e:	f000 fc71 	bl	8010e64 <xQueueGenericSend>
 8010582:	4603      	mov	r3, r0
 8010584:	2b01      	cmp	r3, #1
 8010586:	d002      	beq.n	801058e <osMutexRelease+0x70>
        stat = osErrorResource;
 8010588:	f06f 0302 	mvn.w	r3, #2
 801058c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 801058e:	697b      	ldr	r3, [r7, #20]
}
 8010590:	4618      	mov	r0, r3
 8010592:	3718      	adds	r7, #24
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}

08010598 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010598:	b580      	push	{r7, lr}
 801059a:	b08a      	sub	sp, #40	; 0x28
 801059c:	af02      	add	r7, sp, #8
 801059e:	60f8      	str	r0, [r7, #12]
 80105a0:	60b9      	str	r1, [r7, #8]
 80105a2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80105a4:	2300      	movs	r3, #0
 80105a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80105a8:	f3ef 8305 	mrs	r3, IPSR
 80105ac:	613b      	str	r3, [r7, #16]
  return(result);
 80105ae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d175      	bne.n	80106a0 <osSemaphoreNew+0x108>
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d072      	beq.n	80106a0 <osSemaphoreNew+0x108>
 80105ba:	68ba      	ldr	r2, [r7, #8]
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	429a      	cmp	r2, r3
 80105c0:	d86e      	bhi.n	80106a0 <osSemaphoreNew+0x108>
    mem = -1;
 80105c2:	f04f 33ff 	mov.w	r3, #4294967295
 80105c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d015      	beq.n	80105fa <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	689b      	ldr	r3, [r3, #8]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d006      	beq.n	80105e4 <osSemaphoreNew+0x4c>
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	68db      	ldr	r3, [r3, #12]
 80105da:	2b4f      	cmp	r3, #79	; 0x4f
 80105dc:	d902      	bls.n	80105e4 <osSemaphoreNew+0x4c>
        mem = 1;
 80105de:	2301      	movs	r3, #1
 80105e0:	61bb      	str	r3, [r7, #24]
 80105e2:	e00c      	b.n	80105fe <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	689b      	ldr	r3, [r3, #8]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d108      	bne.n	80105fe <osSemaphoreNew+0x66>
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	68db      	ldr	r3, [r3, #12]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d104      	bne.n	80105fe <osSemaphoreNew+0x66>
          mem = 0;
 80105f4:	2300      	movs	r3, #0
 80105f6:	61bb      	str	r3, [r7, #24]
 80105f8:	e001      	b.n	80105fe <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80105fa:	2300      	movs	r3, #0
 80105fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80105fe:	69bb      	ldr	r3, [r7, #24]
 8010600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010604:	d04c      	beq.n	80106a0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	2b01      	cmp	r3, #1
 801060a:	d128      	bne.n	801065e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 801060c:	69bb      	ldr	r3, [r7, #24]
 801060e:	2b01      	cmp	r3, #1
 8010610:	d10a      	bne.n	8010628 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	689b      	ldr	r3, [r3, #8]
 8010616:	2203      	movs	r2, #3
 8010618:	9200      	str	r2, [sp, #0]
 801061a:	2200      	movs	r2, #0
 801061c:	2100      	movs	r1, #0
 801061e:	2001      	movs	r0, #1
 8010620:	f000 fa2a 	bl	8010a78 <xQueueGenericCreateStatic>
 8010624:	61f8      	str	r0, [r7, #28]
 8010626:	e005      	b.n	8010634 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8010628:	2203      	movs	r2, #3
 801062a:	2100      	movs	r1, #0
 801062c:	2001      	movs	r0, #1
 801062e:	f000 fa9b 	bl	8010b68 <xQueueGenericCreate>
 8010632:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010634:	69fb      	ldr	r3, [r7, #28]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d022      	beq.n	8010680 <osSemaphoreNew+0xe8>
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d01f      	beq.n	8010680 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010640:	2300      	movs	r3, #0
 8010642:	2200      	movs	r2, #0
 8010644:	2100      	movs	r1, #0
 8010646:	69f8      	ldr	r0, [r7, #28]
 8010648:	f000 fc0c 	bl	8010e64 <xQueueGenericSend>
 801064c:	4603      	mov	r3, r0
 801064e:	2b01      	cmp	r3, #1
 8010650:	d016      	beq.n	8010680 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8010652:	69f8      	ldr	r0, [r7, #28]
 8010654:	f001 f91f 	bl	8011896 <vQueueDelete>
            hSemaphore = NULL;
 8010658:	2300      	movs	r3, #0
 801065a:	61fb      	str	r3, [r7, #28]
 801065c:	e010      	b.n	8010680 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 801065e:	69bb      	ldr	r3, [r7, #24]
 8010660:	2b01      	cmp	r3, #1
 8010662:	d108      	bne.n	8010676 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	689b      	ldr	r3, [r3, #8]
 8010668:	461a      	mov	r2, r3
 801066a:	68b9      	ldr	r1, [r7, #8]
 801066c:	68f8      	ldr	r0, [r7, #12]
 801066e:	f000 fb8f 	bl	8010d90 <xQueueCreateCountingSemaphoreStatic>
 8010672:	61f8      	str	r0, [r7, #28]
 8010674:	e004      	b.n	8010680 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010676:	68b9      	ldr	r1, [r7, #8]
 8010678:	68f8      	ldr	r0, [r7, #12]
 801067a:	f000 fbc0 	bl	8010dfe <xQueueCreateCountingSemaphore>
 801067e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8010680:	69fb      	ldr	r3, [r7, #28]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d00c      	beq.n	80106a0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d003      	beq.n	8010694 <osSemaphoreNew+0xfc>
          name = attr->name;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	617b      	str	r3, [r7, #20]
 8010692:	e001      	b.n	8010698 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8010694:	2300      	movs	r3, #0
 8010696:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8010698:	6979      	ldr	r1, [r7, #20]
 801069a:	69f8      	ldr	r0, [r7, #28]
 801069c:	f001 fa46 	bl	8011b2c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80106a0:	69fb      	ldr	r3, [r7, #28]
}
 80106a2:	4618      	mov	r0, r3
 80106a4:	3720      	adds	r7, #32
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd80      	pop	{r7, pc}
	...

080106ac <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b086      	sub	sp, #24
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
 80106b4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80106ba:	2300      	movs	r3, #0
 80106bc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80106be:	693b      	ldr	r3, [r7, #16]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d103      	bne.n	80106cc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80106c4:	f06f 0303 	mvn.w	r3, #3
 80106c8:	617b      	str	r3, [r7, #20]
 80106ca:	e039      	b.n	8010740 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80106cc:	f3ef 8305 	mrs	r3, IPSR
 80106d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80106d2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d022      	beq.n	801071e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d003      	beq.n	80106e6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80106de:	f06f 0303 	mvn.w	r3, #3
 80106e2:	617b      	str	r3, [r7, #20]
 80106e4:	e02c      	b.n	8010740 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80106e6:	2300      	movs	r3, #0
 80106e8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80106ea:	f107 0308 	add.w	r3, r7, #8
 80106ee:	461a      	mov	r2, r3
 80106f0:	2100      	movs	r1, #0
 80106f2:	6938      	ldr	r0, [r7, #16]
 80106f4:	f000 ffc8 	bl	8011688 <xQueueReceiveFromISR>
 80106f8:	4603      	mov	r3, r0
 80106fa:	2b01      	cmp	r3, #1
 80106fc:	d003      	beq.n	8010706 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80106fe:	f06f 0302 	mvn.w	r3, #2
 8010702:	617b      	str	r3, [r7, #20]
 8010704:	e01c      	b.n	8010740 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d019      	beq.n	8010740 <osSemaphoreAcquire+0x94>
 801070c:	4b0f      	ldr	r3, [pc, #60]	; (801074c <osSemaphoreAcquire+0xa0>)
 801070e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010712:	601a      	str	r2, [r3, #0]
 8010714:	f3bf 8f4f 	dsb	sy
 8010718:	f3bf 8f6f 	isb	sy
 801071c:	e010      	b.n	8010740 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801071e:	6839      	ldr	r1, [r7, #0]
 8010720:	6938      	ldr	r0, [r7, #16]
 8010722:	f000 fea5 	bl	8011470 <xQueueSemaphoreTake>
 8010726:	4603      	mov	r3, r0
 8010728:	2b01      	cmp	r3, #1
 801072a:	d009      	beq.n	8010740 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d003      	beq.n	801073a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8010732:	f06f 0301 	mvn.w	r3, #1
 8010736:	617b      	str	r3, [r7, #20]
 8010738:	e002      	b.n	8010740 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 801073a:	f06f 0302 	mvn.w	r3, #2
 801073e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8010740:	697b      	ldr	r3, [r7, #20]
}
 8010742:	4618      	mov	r0, r3
 8010744:	3718      	adds	r7, #24
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}
 801074a:	bf00      	nop
 801074c:	e000ed04 	.word	0xe000ed04

08010750 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010750:	b580      	push	{r7, lr}
 8010752:	b086      	sub	sp, #24
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801075c:	2300      	movs	r3, #0
 801075e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8010760:	693b      	ldr	r3, [r7, #16]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d103      	bne.n	801076e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8010766:	f06f 0303 	mvn.w	r3, #3
 801076a:	617b      	str	r3, [r7, #20]
 801076c:	e02c      	b.n	80107c8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801076e:	f3ef 8305 	mrs	r3, IPSR
 8010772:	60fb      	str	r3, [r7, #12]
  return(result);
 8010774:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8010776:	2b00      	cmp	r3, #0
 8010778:	d01a      	beq.n	80107b0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801077a:	2300      	movs	r3, #0
 801077c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801077e:	f107 0308 	add.w	r3, r7, #8
 8010782:	4619      	mov	r1, r3
 8010784:	6938      	ldr	r0, [r7, #16]
 8010786:	f000 fd06 	bl	8011196 <xQueueGiveFromISR>
 801078a:	4603      	mov	r3, r0
 801078c:	2b01      	cmp	r3, #1
 801078e:	d003      	beq.n	8010798 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8010790:	f06f 0302 	mvn.w	r3, #2
 8010794:	617b      	str	r3, [r7, #20]
 8010796:	e017      	b.n	80107c8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d014      	beq.n	80107c8 <osSemaphoreRelease+0x78>
 801079e:	4b0d      	ldr	r3, [pc, #52]	; (80107d4 <osSemaphoreRelease+0x84>)
 80107a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107a4:	601a      	str	r2, [r3, #0]
 80107a6:	f3bf 8f4f 	dsb	sy
 80107aa:	f3bf 8f6f 	isb	sy
 80107ae:	e00b      	b.n	80107c8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80107b0:	2300      	movs	r3, #0
 80107b2:	2200      	movs	r2, #0
 80107b4:	2100      	movs	r1, #0
 80107b6:	6938      	ldr	r0, [r7, #16]
 80107b8:	f000 fb54 	bl	8010e64 <xQueueGenericSend>
 80107bc:	4603      	mov	r3, r0
 80107be:	2b01      	cmp	r3, #1
 80107c0:	d002      	beq.n	80107c8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80107c2:	f06f 0302 	mvn.w	r3, #2
 80107c6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80107c8:	697b      	ldr	r3, [r7, #20]
}
 80107ca:	4618      	mov	r0, r3
 80107cc:	3718      	adds	r7, #24
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd80      	pop	{r7, pc}
 80107d2:	bf00      	nop
 80107d4:	e000ed04 	.word	0xe000ed04

080107d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80107d8:	b480      	push	{r7}
 80107da:	b085      	sub	sp, #20
 80107dc:	af00      	add	r7, sp, #0
 80107de:	60f8      	str	r0, [r7, #12]
 80107e0:	60b9      	str	r1, [r7, #8]
 80107e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	4a07      	ldr	r2, [pc, #28]	; (8010804 <vApplicationGetIdleTaskMemory+0x2c>)
 80107e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	4a06      	ldr	r2, [pc, #24]	; (8010808 <vApplicationGetIdleTaskMemory+0x30>)
 80107ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2280      	movs	r2, #128	; 0x80
 80107f4:	601a      	str	r2, [r3, #0]
}
 80107f6:	bf00      	nop
 80107f8:	3714      	adds	r7, #20
 80107fa:	46bd      	mov	sp, r7
 80107fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010800:	4770      	bx	lr
 8010802:	bf00      	nop
 8010804:	20001888 	.word	0x20001888
 8010808:	200018e4 	.word	0x200018e4

0801080c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801080c:	b480      	push	{r7}
 801080e:	b085      	sub	sp, #20
 8010810:	af00      	add	r7, sp, #0
 8010812:	60f8      	str	r0, [r7, #12]
 8010814:	60b9      	str	r1, [r7, #8]
 8010816:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	4a07      	ldr	r2, [pc, #28]	; (8010838 <vApplicationGetTimerTaskMemory+0x2c>)
 801081c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801081e:	68bb      	ldr	r3, [r7, #8]
 8010820:	4a06      	ldr	r2, [pc, #24]	; (801083c <vApplicationGetTimerTaskMemory+0x30>)
 8010822:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	f44f 7280 	mov.w	r2, #256	; 0x100
 801082a:	601a      	str	r2, [r3, #0]
}
 801082c:	bf00      	nop
 801082e:	3714      	adds	r7, #20
 8010830:	46bd      	mov	sp, r7
 8010832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010836:	4770      	bx	lr
 8010838:	20001ae4 	.word	0x20001ae4
 801083c:	20001b40 	.word	0x20001b40

08010840 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010840:	b480      	push	{r7}
 8010842:	b083      	sub	sp, #12
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f103 0208 	add.w	r2, r3, #8
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	f04f 32ff 	mov.w	r2, #4294967295
 8010858:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	f103 0208 	add.w	r2, r3, #8
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f103 0208 	add.w	r2, r3, #8
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2200      	movs	r2, #0
 8010872:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010874:	bf00      	nop
 8010876:	370c      	adds	r7, #12
 8010878:	46bd      	mov	sp, r7
 801087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087e:	4770      	bx	lr

08010880 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010880:	b480      	push	{r7}
 8010882:	b083      	sub	sp, #12
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2200      	movs	r2, #0
 801088c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801088e:	bf00      	nop
 8010890:	370c      	adds	r7, #12
 8010892:	46bd      	mov	sp, r7
 8010894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010898:	4770      	bx	lr

0801089a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801089a:	b480      	push	{r7}
 801089c:	b085      	sub	sp, #20
 801089e:	af00      	add	r7, sp, #0
 80108a0:	6078      	str	r0, [r7, #4]
 80108a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	685b      	ldr	r3, [r3, #4]
 80108a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	68fa      	ldr	r2, [r7, #12]
 80108ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	689a      	ldr	r2, [r3, #8]
 80108b4:	683b      	ldr	r3, [r7, #0]
 80108b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	689b      	ldr	r3, [r3, #8]
 80108bc:	683a      	ldr	r2, [r7, #0]
 80108be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	683a      	ldr	r2, [r7, #0]
 80108c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80108c6:	683b      	ldr	r3, [r7, #0]
 80108c8:	687a      	ldr	r2, [r7, #4]
 80108ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	1c5a      	adds	r2, r3, #1
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	601a      	str	r2, [r3, #0]
}
 80108d6:	bf00      	nop
 80108d8:	3714      	adds	r7, #20
 80108da:	46bd      	mov	sp, r7
 80108dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e0:	4770      	bx	lr

080108e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80108e2:	b480      	push	{r7}
 80108e4:	b085      	sub	sp, #20
 80108e6:	af00      	add	r7, sp, #0
 80108e8:	6078      	str	r0, [r7, #4]
 80108ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108f8:	d103      	bne.n	8010902 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	691b      	ldr	r3, [r3, #16]
 80108fe:	60fb      	str	r3, [r7, #12]
 8010900:	e00c      	b.n	801091c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	3308      	adds	r3, #8
 8010906:	60fb      	str	r3, [r7, #12]
 8010908:	e002      	b.n	8010910 <vListInsert+0x2e>
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	685b      	ldr	r3, [r3, #4]
 801090e:	60fb      	str	r3, [r7, #12]
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	685b      	ldr	r3, [r3, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	68ba      	ldr	r2, [r7, #8]
 8010918:	429a      	cmp	r2, r3
 801091a:	d2f6      	bcs.n	801090a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	685a      	ldr	r2, [r3, #4]
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010924:	683b      	ldr	r3, [r7, #0]
 8010926:	685b      	ldr	r3, [r3, #4]
 8010928:	683a      	ldr	r2, [r7, #0]
 801092a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	68fa      	ldr	r2, [r7, #12]
 8010930:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	683a      	ldr	r2, [r7, #0]
 8010936:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010938:	683b      	ldr	r3, [r7, #0]
 801093a:	687a      	ldr	r2, [r7, #4]
 801093c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	1c5a      	adds	r2, r3, #1
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	601a      	str	r2, [r3, #0]
}
 8010948:	bf00      	nop
 801094a:	3714      	adds	r7, #20
 801094c:	46bd      	mov	sp, r7
 801094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010952:	4770      	bx	lr

08010954 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010954:	b480      	push	{r7}
 8010956:	b085      	sub	sp, #20
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	691b      	ldr	r3, [r3, #16]
 8010960:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	685b      	ldr	r3, [r3, #4]
 8010966:	687a      	ldr	r2, [r7, #4]
 8010968:	6892      	ldr	r2, [r2, #8]
 801096a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	689b      	ldr	r3, [r3, #8]
 8010970:	687a      	ldr	r2, [r7, #4]
 8010972:	6852      	ldr	r2, [r2, #4]
 8010974:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	685b      	ldr	r3, [r3, #4]
 801097a:	687a      	ldr	r2, [r7, #4]
 801097c:	429a      	cmp	r2, r3
 801097e:	d103      	bne.n	8010988 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	689a      	ldr	r2, [r3, #8]
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2200      	movs	r2, #0
 801098c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	1e5a      	subs	r2, r3, #1
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	681b      	ldr	r3, [r3, #0]
}
 801099c:	4618      	mov	r0, r3
 801099e:	3714      	adds	r7, #20
 80109a0:	46bd      	mov	sp, r7
 80109a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a6:	4770      	bx	lr

080109a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b084      	sub	sp, #16
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d10a      	bne.n	80109d2 <xQueueGenericReset+0x2a>
	__asm volatile
 80109bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109c0:	f383 8811 	msr	BASEPRI, r3
 80109c4:	f3bf 8f6f 	isb	sy
 80109c8:	f3bf 8f4f 	dsb	sy
 80109cc:	60bb      	str	r3, [r7, #8]
}
 80109ce:	bf00      	nop
 80109d0:	e7fe      	b.n	80109d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80109d2:	f003 f85f 	bl	8013a94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	681a      	ldr	r2, [r3, #0]
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109de:	68f9      	ldr	r1, [r7, #12]
 80109e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80109e2:	fb01 f303 	mul.w	r3, r1, r3
 80109e6:	441a      	add	r2, r3
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	2200      	movs	r2, #0
 80109f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	681a      	ldr	r2, [r3, #0]
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	681a      	ldr	r2, [r3, #0]
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a02:	3b01      	subs	r3, #1
 8010a04:	68f9      	ldr	r1, [r7, #12]
 8010a06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010a08:	fb01 f303 	mul.w	r3, r1, r3
 8010a0c:	441a      	add	r2, r3
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	22ff      	movs	r2, #255	; 0xff
 8010a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	22ff      	movs	r2, #255	; 0xff
 8010a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d114      	bne.n	8010a52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	691b      	ldr	r3, [r3, #16]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d01a      	beq.n	8010a66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	3310      	adds	r3, #16
 8010a34:	4618      	mov	r0, r3
 8010a36:	f001 fd61 	bl	80124fc <xTaskRemoveFromEventList>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d012      	beq.n	8010a66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010a40:	4b0c      	ldr	r3, [pc, #48]	; (8010a74 <xQueueGenericReset+0xcc>)
 8010a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a46:	601a      	str	r2, [r3, #0]
 8010a48:	f3bf 8f4f 	dsb	sy
 8010a4c:	f3bf 8f6f 	isb	sy
 8010a50:	e009      	b.n	8010a66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	3310      	adds	r3, #16
 8010a56:	4618      	mov	r0, r3
 8010a58:	f7ff fef2 	bl	8010840 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	3324      	adds	r3, #36	; 0x24
 8010a60:	4618      	mov	r0, r3
 8010a62:	f7ff feed 	bl	8010840 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010a66:	f003 f845 	bl	8013af4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010a6a:	2301      	movs	r3, #1
}
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	3710      	adds	r7, #16
 8010a70:	46bd      	mov	sp, r7
 8010a72:	bd80      	pop	{r7, pc}
 8010a74:	e000ed04 	.word	0xe000ed04

08010a78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b08e      	sub	sp, #56	; 0x38
 8010a7c:	af02      	add	r7, sp, #8
 8010a7e:	60f8      	str	r0, [r7, #12]
 8010a80:	60b9      	str	r1, [r7, #8]
 8010a82:	607a      	str	r2, [r7, #4]
 8010a84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d10a      	bne.n	8010aa2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a90:	f383 8811 	msr	BASEPRI, r3
 8010a94:	f3bf 8f6f 	isb	sy
 8010a98:	f3bf 8f4f 	dsb	sy
 8010a9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010a9e:	bf00      	nop
 8010aa0:	e7fe      	b.n	8010aa0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d10a      	bne.n	8010abe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aac:	f383 8811 	msr	BASEPRI, r3
 8010ab0:	f3bf 8f6f 	isb	sy
 8010ab4:	f3bf 8f4f 	dsb	sy
 8010ab8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010aba:	bf00      	nop
 8010abc:	e7fe      	b.n	8010abc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d002      	beq.n	8010aca <xQueueGenericCreateStatic+0x52>
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d001      	beq.n	8010ace <xQueueGenericCreateStatic+0x56>
 8010aca:	2301      	movs	r3, #1
 8010acc:	e000      	b.n	8010ad0 <xQueueGenericCreateStatic+0x58>
 8010ace:	2300      	movs	r3, #0
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d10a      	bne.n	8010aea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ad8:	f383 8811 	msr	BASEPRI, r3
 8010adc:	f3bf 8f6f 	isb	sy
 8010ae0:	f3bf 8f4f 	dsb	sy
 8010ae4:	623b      	str	r3, [r7, #32]
}
 8010ae6:	bf00      	nop
 8010ae8:	e7fe      	b.n	8010ae8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d102      	bne.n	8010af6 <xQueueGenericCreateStatic+0x7e>
 8010af0:	68bb      	ldr	r3, [r7, #8]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d101      	bne.n	8010afa <xQueueGenericCreateStatic+0x82>
 8010af6:	2301      	movs	r3, #1
 8010af8:	e000      	b.n	8010afc <xQueueGenericCreateStatic+0x84>
 8010afa:	2300      	movs	r3, #0
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d10a      	bne.n	8010b16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b04:	f383 8811 	msr	BASEPRI, r3
 8010b08:	f3bf 8f6f 	isb	sy
 8010b0c:	f3bf 8f4f 	dsb	sy
 8010b10:	61fb      	str	r3, [r7, #28]
}
 8010b12:	bf00      	nop
 8010b14:	e7fe      	b.n	8010b14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010b16:	2350      	movs	r3, #80	; 0x50
 8010b18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010b1a:	697b      	ldr	r3, [r7, #20]
 8010b1c:	2b50      	cmp	r3, #80	; 0x50
 8010b1e:	d00a      	beq.n	8010b36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b24:	f383 8811 	msr	BASEPRI, r3
 8010b28:	f3bf 8f6f 	isb	sy
 8010b2c:	f3bf 8f4f 	dsb	sy
 8010b30:	61bb      	str	r3, [r7, #24]
}
 8010b32:	bf00      	nop
 8010b34:	e7fe      	b.n	8010b34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010b36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d00d      	beq.n	8010b5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b44:	2201      	movs	r2, #1
 8010b46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010b4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b50:	9300      	str	r3, [sp, #0]
 8010b52:	4613      	mov	r3, r2
 8010b54:	687a      	ldr	r2, [r7, #4]
 8010b56:	68b9      	ldr	r1, [r7, #8]
 8010b58:	68f8      	ldr	r0, [r7, #12]
 8010b5a:	f000 f83f 	bl	8010bdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010b60:	4618      	mov	r0, r3
 8010b62:	3730      	adds	r7, #48	; 0x30
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bd80      	pop	{r7, pc}

08010b68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b08a      	sub	sp, #40	; 0x28
 8010b6c:	af02      	add	r7, sp, #8
 8010b6e:	60f8      	str	r0, [r7, #12]
 8010b70:	60b9      	str	r1, [r7, #8]
 8010b72:	4613      	mov	r3, r2
 8010b74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d10a      	bne.n	8010b92 <xQueueGenericCreate+0x2a>
	__asm volatile
 8010b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b80:	f383 8811 	msr	BASEPRI, r3
 8010b84:	f3bf 8f6f 	isb	sy
 8010b88:	f3bf 8f4f 	dsb	sy
 8010b8c:	613b      	str	r3, [r7, #16]
}
 8010b8e:	bf00      	nop
 8010b90:	e7fe      	b.n	8010b90 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	68ba      	ldr	r2, [r7, #8]
 8010b96:	fb02 f303 	mul.w	r3, r2, r3
 8010b9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010b9c:	69fb      	ldr	r3, [r7, #28]
 8010b9e:	3350      	adds	r3, #80	; 0x50
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f003 f899 	bl	8013cd8 <pvPortMalloc>
 8010ba6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010ba8:	69bb      	ldr	r3, [r7, #24]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d011      	beq.n	8010bd2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010bae:	69bb      	ldr	r3, [r7, #24]
 8010bb0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	3350      	adds	r3, #80	; 0x50
 8010bb6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010bb8:	69bb      	ldr	r3, [r7, #24]
 8010bba:	2200      	movs	r2, #0
 8010bbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010bc0:	79fa      	ldrb	r2, [r7, #7]
 8010bc2:	69bb      	ldr	r3, [r7, #24]
 8010bc4:	9300      	str	r3, [sp, #0]
 8010bc6:	4613      	mov	r3, r2
 8010bc8:	697a      	ldr	r2, [r7, #20]
 8010bca:	68b9      	ldr	r1, [r7, #8]
 8010bcc:	68f8      	ldr	r0, [r7, #12]
 8010bce:	f000 f805 	bl	8010bdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010bd2:	69bb      	ldr	r3, [r7, #24]
	}
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	3720      	adds	r7, #32
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}

08010bdc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b084      	sub	sp, #16
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	60f8      	str	r0, [r7, #12]
 8010be4:	60b9      	str	r1, [r7, #8]
 8010be6:	607a      	str	r2, [r7, #4]
 8010be8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010bea:	68bb      	ldr	r3, [r7, #8]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d103      	bne.n	8010bf8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010bf0:	69bb      	ldr	r3, [r7, #24]
 8010bf2:	69ba      	ldr	r2, [r7, #24]
 8010bf4:	601a      	str	r2, [r3, #0]
 8010bf6:	e002      	b.n	8010bfe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010bf8:	69bb      	ldr	r3, [r7, #24]
 8010bfa:	687a      	ldr	r2, [r7, #4]
 8010bfc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010bfe:	69bb      	ldr	r3, [r7, #24]
 8010c00:	68fa      	ldr	r2, [r7, #12]
 8010c02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010c04:	69bb      	ldr	r3, [r7, #24]
 8010c06:	68ba      	ldr	r2, [r7, #8]
 8010c08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010c0a:	2101      	movs	r1, #1
 8010c0c:	69b8      	ldr	r0, [r7, #24]
 8010c0e:	f7ff fecb 	bl	80109a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010c12:	69bb      	ldr	r3, [r7, #24]
 8010c14:	78fa      	ldrb	r2, [r7, #3]
 8010c16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010c1a:	bf00      	nop
 8010c1c:	3710      	adds	r7, #16
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}

08010c22 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8010c22:	b580      	push	{r7, lr}
 8010c24:	b082      	sub	sp, #8
 8010c26:	af00      	add	r7, sp, #0
 8010c28:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d00e      	beq.n	8010c4e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2200      	movs	r2, #0
 8010c34:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	2200      	movs	r2, #0
 8010c3a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2200      	movs	r2, #0
 8010c40:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010c42:	2300      	movs	r3, #0
 8010c44:	2200      	movs	r2, #0
 8010c46:	2100      	movs	r1, #0
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f000 f90b 	bl	8010e64 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010c4e:	bf00      	nop
 8010c50:	3708      	adds	r7, #8
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}

08010c56 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010c56:	b580      	push	{r7, lr}
 8010c58:	b086      	sub	sp, #24
 8010c5a:	af00      	add	r7, sp, #0
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010c60:	2301      	movs	r3, #1
 8010c62:	617b      	str	r3, [r7, #20]
 8010c64:	2300      	movs	r3, #0
 8010c66:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010c68:	79fb      	ldrb	r3, [r7, #7]
 8010c6a:	461a      	mov	r2, r3
 8010c6c:	6939      	ldr	r1, [r7, #16]
 8010c6e:	6978      	ldr	r0, [r7, #20]
 8010c70:	f7ff ff7a 	bl	8010b68 <xQueueGenericCreate>
 8010c74:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010c76:	68f8      	ldr	r0, [r7, #12]
 8010c78:	f7ff ffd3 	bl	8010c22 <prvInitialiseMutex>

		return xNewQueue;
 8010c7c:	68fb      	ldr	r3, [r7, #12]
	}
 8010c7e:	4618      	mov	r0, r3
 8010c80:	3718      	adds	r7, #24
 8010c82:	46bd      	mov	sp, r7
 8010c84:	bd80      	pop	{r7, pc}

08010c86 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8010c86:	b580      	push	{r7, lr}
 8010c88:	b088      	sub	sp, #32
 8010c8a:	af02      	add	r7, sp, #8
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	6039      	str	r1, [r7, #0]
 8010c90:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010c92:	2301      	movs	r3, #1
 8010c94:	617b      	str	r3, [r7, #20]
 8010c96:	2300      	movs	r3, #0
 8010c98:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010c9a:	79fb      	ldrb	r3, [r7, #7]
 8010c9c:	9300      	str	r3, [sp, #0]
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	6939      	ldr	r1, [r7, #16]
 8010ca4:	6978      	ldr	r0, [r7, #20]
 8010ca6:	f7ff fee7 	bl	8010a78 <xQueueGenericCreateStatic>
 8010caa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010cac:	68f8      	ldr	r0, [r7, #12]
 8010cae:	f7ff ffb8 	bl	8010c22 <prvInitialiseMutex>

		return xNewQueue;
 8010cb2:	68fb      	ldr	r3, [r7, #12]
	}
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	3718      	adds	r7, #24
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}

08010cbc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8010cbc:	b590      	push	{r4, r7, lr}
 8010cbe:	b087      	sub	sp, #28
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8010cc8:	693b      	ldr	r3, [r7, #16]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d10a      	bne.n	8010ce4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8010cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cd2:	f383 8811 	msr	BASEPRI, r3
 8010cd6:	f3bf 8f6f 	isb	sy
 8010cda:	f3bf 8f4f 	dsb	sy
 8010cde:	60fb      	str	r3, [r7, #12]
}
 8010ce0:	bf00      	nop
 8010ce2:	e7fe      	b.n	8010ce2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8010ce4:	693b      	ldr	r3, [r7, #16]
 8010ce6:	689c      	ldr	r4, [r3, #8]
 8010ce8:	f001 fdc6 	bl	8012878 <xTaskGetCurrentTaskHandle>
 8010cec:	4603      	mov	r3, r0
 8010cee:	429c      	cmp	r4, r3
 8010cf0:	d111      	bne.n	8010d16 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8010cf2:	693b      	ldr	r3, [r7, #16]
 8010cf4:	68db      	ldr	r3, [r3, #12]
 8010cf6:	1e5a      	subs	r2, r3, #1
 8010cf8:	693b      	ldr	r3, [r7, #16]
 8010cfa:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8010cfc:	693b      	ldr	r3, [r7, #16]
 8010cfe:	68db      	ldr	r3, [r3, #12]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d105      	bne.n	8010d10 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8010d04:	2300      	movs	r3, #0
 8010d06:	2200      	movs	r2, #0
 8010d08:	2100      	movs	r1, #0
 8010d0a:	6938      	ldr	r0, [r7, #16]
 8010d0c:	f000 f8aa 	bl	8010e64 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8010d10:	2301      	movs	r3, #1
 8010d12:	617b      	str	r3, [r7, #20]
 8010d14:	e001      	b.n	8010d1a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8010d16:	2300      	movs	r3, #0
 8010d18:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8010d1a:	697b      	ldr	r3, [r7, #20]
	}
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	371c      	adds	r7, #28
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd90      	pop	{r4, r7, pc}

08010d24 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8010d24:	b590      	push	{r4, r7, lr}
 8010d26:	b087      	sub	sp, #28
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
 8010d2c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8010d32:	693b      	ldr	r3, [r7, #16]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d10a      	bne.n	8010d4e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8010d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d3c:	f383 8811 	msr	BASEPRI, r3
 8010d40:	f3bf 8f6f 	isb	sy
 8010d44:	f3bf 8f4f 	dsb	sy
 8010d48:	60fb      	str	r3, [r7, #12]
}
 8010d4a:	bf00      	nop
 8010d4c:	e7fe      	b.n	8010d4c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8010d4e:	693b      	ldr	r3, [r7, #16]
 8010d50:	689c      	ldr	r4, [r3, #8]
 8010d52:	f001 fd91 	bl	8012878 <xTaskGetCurrentTaskHandle>
 8010d56:	4603      	mov	r3, r0
 8010d58:	429c      	cmp	r4, r3
 8010d5a:	d107      	bne.n	8010d6c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010d5c:	693b      	ldr	r3, [r7, #16]
 8010d5e:	68db      	ldr	r3, [r3, #12]
 8010d60:	1c5a      	adds	r2, r3, #1
 8010d62:	693b      	ldr	r3, [r7, #16]
 8010d64:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8010d66:	2301      	movs	r3, #1
 8010d68:	617b      	str	r3, [r7, #20]
 8010d6a:	e00c      	b.n	8010d86 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8010d6c:	6839      	ldr	r1, [r7, #0]
 8010d6e:	6938      	ldr	r0, [r7, #16]
 8010d70:	f000 fb7e 	bl	8011470 <xQueueSemaphoreTake>
 8010d74:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8010d76:	697b      	ldr	r3, [r7, #20]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d004      	beq.n	8010d86 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010d7c:	693b      	ldr	r3, [r7, #16]
 8010d7e:	68db      	ldr	r3, [r3, #12]
 8010d80:	1c5a      	adds	r2, r3, #1
 8010d82:	693b      	ldr	r3, [r7, #16]
 8010d84:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8010d86:	697b      	ldr	r3, [r7, #20]
	}
 8010d88:	4618      	mov	r0, r3
 8010d8a:	371c      	adds	r7, #28
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bd90      	pop	{r4, r7, pc}

08010d90 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b08a      	sub	sp, #40	; 0x28
 8010d94:	af02      	add	r7, sp, #8
 8010d96:	60f8      	str	r0, [r7, #12]
 8010d98:	60b9      	str	r1, [r7, #8]
 8010d9a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d10a      	bne.n	8010db8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8010da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010da6:	f383 8811 	msr	BASEPRI, r3
 8010daa:	f3bf 8f6f 	isb	sy
 8010dae:	f3bf 8f4f 	dsb	sy
 8010db2:	61bb      	str	r3, [r7, #24]
}
 8010db4:	bf00      	nop
 8010db6:	e7fe      	b.n	8010db6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010db8:	68ba      	ldr	r2, [r7, #8]
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	429a      	cmp	r2, r3
 8010dbe:	d90a      	bls.n	8010dd6 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8010dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc4:	f383 8811 	msr	BASEPRI, r3
 8010dc8:	f3bf 8f6f 	isb	sy
 8010dcc:	f3bf 8f4f 	dsb	sy
 8010dd0:	617b      	str	r3, [r7, #20]
}
 8010dd2:	bf00      	nop
 8010dd4:	e7fe      	b.n	8010dd4 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010dd6:	2302      	movs	r3, #2
 8010dd8:	9300      	str	r3, [sp, #0]
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2200      	movs	r2, #0
 8010dde:	2100      	movs	r1, #0
 8010de0:	68f8      	ldr	r0, [r7, #12]
 8010de2:	f7ff fe49 	bl	8010a78 <xQueueGenericCreateStatic>
 8010de6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8010de8:	69fb      	ldr	r3, [r7, #28]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d002      	beq.n	8010df4 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010dee:	69fb      	ldr	r3, [r7, #28]
 8010df0:	68ba      	ldr	r2, [r7, #8]
 8010df2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010df4:	69fb      	ldr	r3, [r7, #28]
	}
 8010df6:	4618      	mov	r0, r3
 8010df8:	3720      	adds	r7, #32
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}

08010dfe <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010dfe:	b580      	push	{r7, lr}
 8010e00:	b086      	sub	sp, #24
 8010e02:	af00      	add	r7, sp, #0
 8010e04:	6078      	str	r0, [r7, #4]
 8010e06:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d10a      	bne.n	8010e24 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8010e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e12:	f383 8811 	msr	BASEPRI, r3
 8010e16:	f3bf 8f6f 	isb	sy
 8010e1a:	f3bf 8f4f 	dsb	sy
 8010e1e:	613b      	str	r3, [r7, #16]
}
 8010e20:	bf00      	nop
 8010e22:	e7fe      	b.n	8010e22 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010e24:	683a      	ldr	r2, [r7, #0]
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	429a      	cmp	r2, r3
 8010e2a:	d90a      	bls.n	8010e42 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8010e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e30:	f383 8811 	msr	BASEPRI, r3
 8010e34:	f3bf 8f6f 	isb	sy
 8010e38:	f3bf 8f4f 	dsb	sy
 8010e3c:	60fb      	str	r3, [r7, #12]
}
 8010e3e:	bf00      	nop
 8010e40:	e7fe      	b.n	8010e40 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010e42:	2202      	movs	r2, #2
 8010e44:	2100      	movs	r1, #0
 8010e46:	6878      	ldr	r0, [r7, #4]
 8010e48:	f7ff fe8e 	bl	8010b68 <xQueueGenericCreate>
 8010e4c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d002      	beq.n	8010e5a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010e54:	697b      	ldr	r3, [r7, #20]
 8010e56:	683a      	ldr	r2, [r7, #0]
 8010e58:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010e5a:	697b      	ldr	r3, [r7, #20]
	}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3718      	adds	r7, #24
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}

08010e64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b08e      	sub	sp, #56	; 0x38
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	60f8      	str	r0, [r7, #12]
 8010e6c:	60b9      	str	r1, [r7, #8]
 8010e6e:	607a      	str	r2, [r7, #4]
 8010e70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010e72:	2300      	movs	r3, #0
 8010e74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d10a      	bne.n	8010e96 <xQueueGenericSend+0x32>
	__asm volatile
 8010e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e84:	f383 8811 	msr	BASEPRI, r3
 8010e88:	f3bf 8f6f 	isb	sy
 8010e8c:	f3bf 8f4f 	dsb	sy
 8010e90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010e92:	bf00      	nop
 8010e94:	e7fe      	b.n	8010e94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010e96:	68bb      	ldr	r3, [r7, #8]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d103      	bne.n	8010ea4 <xQueueGenericSend+0x40>
 8010e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d101      	bne.n	8010ea8 <xQueueGenericSend+0x44>
 8010ea4:	2301      	movs	r3, #1
 8010ea6:	e000      	b.n	8010eaa <xQueueGenericSend+0x46>
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d10a      	bne.n	8010ec4 <xQueueGenericSend+0x60>
	__asm volatile
 8010eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eb2:	f383 8811 	msr	BASEPRI, r3
 8010eb6:	f3bf 8f6f 	isb	sy
 8010eba:	f3bf 8f4f 	dsb	sy
 8010ebe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010ec0:	bf00      	nop
 8010ec2:	e7fe      	b.n	8010ec2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	2b02      	cmp	r3, #2
 8010ec8:	d103      	bne.n	8010ed2 <xQueueGenericSend+0x6e>
 8010eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ece:	2b01      	cmp	r3, #1
 8010ed0:	d101      	bne.n	8010ed6 <xQueueGenericSend+0x72>
 8010ed2:	2301      	movs	r3, #1
 8010ed4:	e000      	b.n	8010ed8 <xQueueGenericSend+0x74>
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d10a      	bne.n	8010ef2 <xQueueGenericSend+0x8e>
	__asm volatile
 8010edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ee0:	f383 8811 	msr	BASEPRI, r3
 8010ee4:	f3bf 8f6f 	isb	sy
 8010ee8:	f3bf 8f4f 	dsb	sy
 8010eec:	623b      	str	r3, [r7, #32]
}
 8010eee:	bf00      	nop
 8010ef0:	e7fe      	b.n	8010ef0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010ef2:	f001 fcd1 	bl	8012898 <xTaskGetSchedulerState>
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d102      	bne.n	8010f02 <xQueueGenericSend+0x9e>
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d101      	bne.n	8010f06 <xQueueGenericSend+0xa2>
 8010f02:	2301      	movs	r3, #1
 8010f04:	e000      	b.n	8010f08 <xQueueGenericSend+0xa4>
 8010f06:	2300      	movs	r3, #0
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d10a      	bne.n	8010f22 <xQueueGenericSend+0xbe>
	__asm volatile
 8010f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f10:	f383 8811 	msr	BASEPRI, r3
 8010f14:	f3bf 8f6f 	isb	sy
 8010f18:	f3bf 8f4f 	dsb	sy
 8010f1c:	61fb      	str	r3, [r7, #28]
}
 8010f1e:	bf00      	nop
 8010f20:	e7fe      	b.n	8010f20 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010f22:	f002 fdb7 	bl	8013a94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f2e:	429a      	cmp	r2, r3
 8010f30:	d302      	bcc.n	8010f38 <xQueueGenericSend+0xd4>
 8010f32:	683b      	ldr	r3, [r7, #0]
 8010f34:	2b02      	cmp	r3, #2
 8010f36:	d129      	bne.n	8010f8c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010f38:	683a      	ldr	r2, [r7, #0]
 8010f3a:	68b9      	ldr	r1, [r7, #8]
 8010f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f3e:	f000 fce5 	bl	801190c <prvCopyDataToQueue>
 8010f42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d010      	beq.n	8010f6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f4e:	3324      	adds	r3, #36	; 0x24
 8010f50:	4618      	mov	r0, r3
 8010f52:	f001 fad3 	bl	80124fc <xTaskRemoveFromEventList>
 8010f56:	4603      	mov	r3, r0
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d013      	beq.n	8010f84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010f5c:	4b3f      	ldr	r3, [pc, #252]	; (801105c <xQueueGenericSend+0x1f8>)
 8010f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f62:	601a      	str	r2, [r3, #0]
 8010f64:	f3bf 8f4f 	dsb	sy
 8010f68:	f3bf 8f6f 	isb	sy
 8010f6c:	e00a      	b.n	8010f84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d007      	beq.n	8010f84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010f74:	4b39      	ldr	r3, [pc, #228]	; (801105c <xQueueGenericSend+0x1f8>)
 8010f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f7a:	601a      	str	r2, [r3, #0]
 8010f7c:	f3bf 8f4f 	dsb	sy
 8010f80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010f84:	f002 fdb6 	bl	8013af4 <vPortExitCritical>
				return pdPASS;
 8010f88:	2301      	movs	r3, #1
 8010f8a:	e063      	b.n	8011054 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d103      	bne.n	8010f9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010f92:	f002 fdaf 	bl	8013af4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010f96:	2300      	movs	r3, #0
 8010f98:	e05c      	b.n	8011054 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d106      	bne.n	8010fae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010fa0:	f107 0314 	add.w	r3, r7, #20
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f001 fb0d 	bl	80125c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010faa:	2301      	movs	r3, #1
 8010fac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010fae:	f002 fda1 	bl	8013af4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010fb2:	f001 f87f 	bl	80120b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010fb6:	f002 fd6d 	bl	8013a94 <vPortEnterCritical>
 8010fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010fc0:	b25b      	sxtb	r3, r3
 8010fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fc6:	d103      	bne.n	8010fd0 <xQueueGenericSend+0x16c>
 8010fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fca:	2200      	movs	r2, #0
 8010fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010fd6:	b25b      	sxtb	r3, r3
 8010fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fdc:	d103      	bne.n	8010fe6 <xQueueGenericSend+0x182>
 8010fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010fe6:	f002 fd85 	bl	8013af4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010fea:	1d3a      	adds	r2, r7, #4
 8010fec:	f107 0314 	add.w	r3, r7, #20
 8010ff0:	4611      	mov	r1, r2
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f001 fafc 	bl	80125f0 <xTaskCheckForTimeOut>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d124      	bne.n	8011048 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010ffe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011000:	f000 fd7c 	bl	8011afc <prvIsQueueFull>
 8011004:	4603      	mov	r3, r0
 8011006:	2b00      	cmp	r3, #0
 8011008:	d018      	beq.n	801103c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801100a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801100c:	3310      	adds	r3, #16
 801100e:	687a      	ldr	r2, [r7, #4]
 8011010:	4611      	mov	r1, r2
 8011012:	4618      	mov	r0, r3
 8011014:	f001 fa22 	bl	801245c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801101a:	f000 fd07 	bl	8011a2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801101e:	f001 f857 	bl	80120d0 <xTaskResumeAll>
 8011022:	4603      	mov	r3, r0
 8011024:	2b00      	cmp	r3, #0
 8011026:	f47f af7c 	bne.w	8010f22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801102a:	4b0c      	ldr	r3, [pc, #48]	; (801105c <xQueueGenericSend+0x1f8>)
 801102c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011030:	601a      	str	r2, [r3, #0]
 8011032:	f3bf 8f4f 	dsb	sy
 8011036:	f3bf 8f6f 	isb	sy
 801103a:	e772      	b.n	8010f22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801103c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801103e:	f000 fcf5 	bl	8011a2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011042:	f001 f845 	bl	80120d0 <xTaskResumeAll>
 8011046:	e76c      	b.n	8010f22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801104a:	f000 fcef 	bl	8011a2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801104e:	f001 f83f 	bl	80120d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011052:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011054:	4618      	mov	r0, r3
 8011056:	3738      	adds	r7, #56	; 0x38
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}
 801105c:	e000ed04 	.word	0xe000ed04

08011060 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b090      	sub	sp, #64	; 0x40
 8011064:	af00      	add	r7, sp, #0
 8011066:	60f8      	str	r0, [r7, #12]
 8011068:	60b9      	str	r1, [r7, #8]
 801106a:	607a      	str	r2, [r7, #4]
 801106c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8011072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011074:	2b00      	cmp	r3, #0
 8011076:	d10a      	bne.n	801108e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8011078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801107c:	f383 8811 	msr	BASEPRI, r3
 8011080:	f3bf 8f6f 	isb	sy
 8011084:	f3bf 8f4f 	dsb	sy
 8011088:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801108a:	bf00      	nop
 801108c:	e7fe      	b.n	801108c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d103      	bne.n	801109c <xQueueGenericSendFromISR+0x3c>
 8011094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011098:	2b00      	cmp	r3, #0
 801109a:	d101      	bne.n	80110a0 <xQueueGenericSendFromISR+0x40>
 801109c:	2301      	movs	r3, #1
 801109e:	e000      	b.n	80110a2 <xQueueGenericSendFromISR+0x42>
 80110a0:	2300      	movs	r3, #0
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d10a      	bne.n	80110bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80110a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110aa:	f383 8811 	msr	BASEPRI, r3
 80110ae:	f3bf 8f6f 	isb	sy
 80110b2:	f3bf 8f4f 	dsb	sy
 80110b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80110b8:	bf00      	nop
 80110ba:	e7fe      	b.n	80110ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	2b02      	cmp	r3, #2
 80110c0:	d103      	bne.n	80110ca <xQueueGenericSendFromISR+0x6a>
 80110c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110c6:	2b01      	cmp	r3, #1
 80110c8:	d101      	bne.n	80110ce <xQueueGenericSendFromISR+0x6e>
 80110ca:	2301      	movs	r3, #1
 80110cc:	e000      	b.n	80110d0 <xQueueGenericSendFromISR+0x70>
 80110ce:	2300      	movs	r3, #0
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d10a      	bne.n	80110ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80110d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110d8:	f383 8811 	msr	BASEPRI, r3
 80110dc:	f3bf 8f6f 	isb	sy
 80110e0:	f3bf 8f4f 	dsb	sy
 80110e4:	623b      	str	r3, [r7, #32]
}
 80110e6:	bf00      	nop
 80110e8:	e7fe      	b.n	80110e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80110ea:	f002 fdb5 	bl	8013c58 <vPortValidateInterruptPriority>
	__asm volatile
 80110ee:	f3ef 8211 	mrs	r2, BASEPRI
 80110f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110f6:	f383 8811 	msr	BASEPRI, r3
 80110fa:	f3bf 8f6f 	isb	sy
 80110fe:	f3bf 8f4f 	dsb	sy
 8011102:	61fa      	str	r2, [r7, #28]
 8011104:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8011106:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011108:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801110a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801110c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801110e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011112:	429a      	cmp	r2, r3
 8011114:	d302      	bcc.n	801111c <xQueueGenericSendFromISR+0xbc>
 8011116:	683b      	ldr	r3, [r7, #0]
 8011118:	2b02      	cmp	r3, #2
 801111a:	d12f      	bne.n	801117c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801111c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801111e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801112a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801112c:	683a      	ldr	r2, [r7, #0]
 801112e:	68b9      	ldr	r1, [r7, #8]
 8011130:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011132:	f000 fbeb 	bl	801190c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011136:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801113a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801113e:	d112      	bne.n	8011166 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011144:	2b00      	cmp	r3, #0
 8011146:	d016      	beq.n	8011176 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801114a:	3324      	adds	r3, #36	; 0x24
 801114c:	4618      	mov	r0, r3
 801114e:	f001 f9d5 	bl	80124fc <xTaskRemoveFromEventList>
 8011152:	4603      	mov	r3, r0
 8011154:	2b00      	cmp	r3, #0
 8011156:	d00e      	beq.n	8011176 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d00b      	beq.n	8011176 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	2201      	movs	r2, #1
 8011162:	601a      	str	r2, [r3, #0]
 8011164:	e007      	b.n	8011176 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011166:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801116a:	3301      	adds	r3, #1
 801116c:	b2db      	uxtb	r3, r3
 801116e:	b25a      	sxtb	r2, r3
 8011170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011176:	2301      	movs	r3, #1
 8011178:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801117a:	e001      	b.n	8011180 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801117c:	2300      	movs	r3, #0
 801117e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011182:	617b      	str	r3, [r7, #20]
	__asm volatile
 8011184:	697b      	ldr	r3, [r7, #20]
 8011186:	f383 8811 	msr	BASEPRI, r3
}
 801118a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801118c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801118e:	4618      	mov	r0, r3
 8011190:	3740      	adds	r7, #64	; 0x40
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}

08011196 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011196:	b580      	push	{r7, lr}
 8011198:	b08e      	sub	sp, #56	; 0x38
 801119a:	af00      	add	r7, sp, #0
 801119c:	6078      	str	r0, [r7, #4]
 801119e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80111a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d10a      	bne.n	80111c0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80111aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111ae:	f383 8811 	msr	BASEPRI, r3
 80111b2:	f3bf 8f6f 	isb	sy
 80111b6:	f3bf 8f4f 	dsb	sy
 80111ba:	623b      	str	r3, [r7, #32]
}
 80111bc:	bf00      	nop
 80111be:	e7fe      	b.n	80111be <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80111c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d00a      	beq.n	80111de <xQueueGiveFromISR+0x48>
	__asm volatile
 80111c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111cc:	f383 8811 	msr	BASEPRI, r3
 80111d0:	f3bf 8f6f 	isb	sy
 80111d4:	f3bf 8f4f 	dsb	sy
 80111d8:	61fb      	str	r3, [r7, #28]
}
 80111da:	bf00      	nop
 80111dc:	e7fe      	b.n	80111dc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80111de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d103      	bne.n	80111ee <xQueueGiveFromISR+0x58>
 80111e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111e8:	689b      	ldr	r3, [r3, #8]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d101      	bne.n	80111f2 <xQueueGiveFromISR+0x5c>
 80111ee:	2301      	movs	r3, #1
 80111f0:	e000      	b.n	80111f4 <xQueueGiveFromISR+0x5e>
 80111f2:	2300      	movs	r3, #0
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d10a      	bne.n	801120e <xQueueGiveFromISR+0x78>
	__asm volatile
 80111f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111fc:	f383 8811 	msr	BASEPRI, r3
 8011200:	f3bf 8f6f 	isb	sy
 8011204:	f3bf 8f4f 	dsb	sy
 8011208:	61bb      	str	r3, [r7, #24]
}
 801120a:	bf00      	nop
 801120c:	e7fe      	b.n	801120c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801120e:	f002 fd23 	bl	8013c58 <vPortValidateInterruptPriority>
	__asm volatile
 8011212:	f3ef 8211 	mrs	r2, BASEPRI
 8011216:	f04f 0350 	mov.w	r3, #80	; 0x50
 801121a:	f383 8811 	msr	BASEPRI, r3
 801121e:	f3bf 8f6f 	isb	sy
 8011222:	f3bf 8f4f 	dsb	sy
 8011226:	617a      	str	r2, [r7, #20]
 8011228:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801122a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801122c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801122e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011232:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011238:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801123a:	429a      	cmp	r2, r3
 801123c:	d22b      	bcs.n	8011296 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801123e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011240:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801124a:	1c5a      	adds	r2, r3, #1
 801124c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801124e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011250:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011258:	d112      	bne.n	8011280 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801125a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801125c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801125e:	2b00      	cmp	r3, #0
 8011260:	d016      	beq.n	8011290 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011264:	3324      	adds	r3, #36	; 0x24
 8011266:	4618      	mov	r0, r3
 8011268:	f001 f948 	bl	80124fc <xTaskRemoveFromEventList>
 801126c:	4603      	mov	r3, r0
 801126e:	2b00      	cmp	r3, #0
 8011270:	d00e      	beq.n	8011290 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d00b      	beq.n	8011290 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	2201      	movs	r2, #1
 801127c:	601a      	str	r2, [r3, #0]
 801127e:	e007      	b.n	8011290 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011284:	3301      	adds	r3, #1
 8011286:	b2db      	uxtb	r3, r3
 8011288:	b25a      	sxtb	r2, r3
 801128a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801128c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011290:	2301      	movs	r3, #1
 8011292:	637b      	str	r3, [r7, #52]	; 0x34
 8011294:	e001      	b.n	801129a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011296:	2300      	movs	r3, #0
 8011298:	637b      	str	r3, [r7, #52]	; 0x34
 801129a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801129c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	f383 8811 	msr	BASEPRI, r3
}
 80112a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80112a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80112a8:	4618      	mov	r0, r3
 80112aa:	3738      	adds	r7, #56	; 0x38
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}

080112b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b08c      	sub	sp, #48	; 0x30
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	60f8      	str	r0, [r7, #12]
 80112b8:	60b9      	str	r1, [r7, #8]
 80112ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80112bc:	2300      	movs	r3, #0
 80112be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80112c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d10a      	bne.n	80112e0 <xQueueReceive+0x30>
	__asm volatile
 80112ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ce:	f383 8811 	msr	BASEPRI, r3
 80112d2:	f3bf 8f6f 	isb	sy
 80112d6:	f3bf 8f4f 	dsb	sy
 80112da:	623b      	str	r3, [r7, #32]
}
 80112dc:	bf00      	nop
 80112de:	e7fe      	b.n	80112de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80112e0:	68bb      	ldr	r3, [r7, #8]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d103      	bne.n	80112ee <xQueueReceive+0x3e>
 80112e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d101      	bne.n	80112f2 <xQueueReceive+0x42>
 80112ee:	2301      	movs	r3, #1
 80112f0:	e000      	b.n	80112f4 <xQueueReceive+0x44>
 80112f2:	2300      	movs	r3, #0
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d10a      	bne.n	801130e <xQueueReceive+0x5e>
	__asm volatile
 80112f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112fc:	f383 8811 	msr	BASEPRI, r3
 8011300:	f3bf 8f6f 	isb	sy
 8011304:	f3bf 8f4f 	dsb	sy
 8011308:	61fb      	str	r3, [r7, #28]
}
 801130a:	bf00      	nop
 801130c:	e7fe      	b.n	801130c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801130e:	f001 fac3 	bl	8012898 <xTaskGetSchedulerState>
 8011312:	4603      	mov	r3, r0
 8011314:	2b00      	cmp	r3, #0
 8011316:	d102      	bne.n	801131e <xQueueReceive+0x6e>
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d101      	bne.n	8011322 <xQueueReceive+0x72>
 801131e:	2301      	movs	r3, #1
 8011320:	e000      	b.n	8011324 <xQueueReceive+0x74>
 8011322:	2300      	movs	r3, #0
 8011324:	2b00      	cmp	r3, #0
 8011326:	d10a      	bne.n	801133e <xQueueReceive+0x8e>
	__asm volatile
 8011328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801132c:	f383 8811 	msr	BASEPRI, r3
 8011330:	f3bf 8f6f 	isb	sy
 8011334:	f3bf 8f4f 	dsb	sy
 8011338:	61bb      	str	r3, [r7, #24]
}
 801133a:	bf00      	nop
 801133c:	e7fe      	b.n	801133c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801133e:	f002 fba9 	bl	8013a94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011346:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801134a:	2b00      	cmp	r3, #0
 801134c:	d01f      	beq.n	801138e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801134e:	68b9      	ldr	r1, [r7, #8]
 8011350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011352:	f000 fb45 	bl	80119e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011358:	1e5a      	subs	r2, r3, #1
 801135a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801135c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801135e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011360:	691b      	ldr	r3, [r3, #16]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d00f      	beq.n	8011386 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011368:	3310      	adds	r3, #16
 801136a:	4618      	mov	r0, r3
 801136c:	f001 f8c6 	bl	80124fc <xTaskRemoveFromEventList>
 8011370:	4603      	mov	r3, r0
 8011372:	2b00      	cmp	r3, #0
 8011374:	d007      	beq.n	8011386 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011376:	4b3d      	ldr	r3, [pc, #244]	; (801146c <xQueueReceive+0x1bc>)
 8011378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801137c:	601a      	str	r2, [r3, #0]
 801137e:	f3bf 8f4f 	dsb	sy
 8011382:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011386:	f002 fbb5 	bl	8013af4 <vPortExitCritical>
				return pdPASS;
 801138a:	2301      	movs	r3, #1
 801138c:	e069      	b.n	8011462 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d103      	bne.n	801139c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011394:	f002 fbae 	bl	8013af4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011398:	2300      	movs	r3, #0
 801139a:	e062      	b.n	8011462 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801139c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d106      	bne.n	80113b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80113a2:	f107 0310 	add.w	r3, r7, #16
 80113a6:	4618      	mov	r0, r3
 80113a8:	f001 f90c 	bl	80125c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80113ac:	2301      	movs	r3, #1
 80113ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80113b0:	f002 fba0 	bl	8013af4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80113b4:	f000 fe7e 	bl	80120b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80113b8:	f002 fb6c 	bl	8013a94 <vPortEnterCritical>
 80113bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80113c2:	b25b      	sxtb	r3, r3
 80113c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113c8:	d103      	bne.n	80113d2 <xQueueReceive+0x122>
 80113ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113cc:	2200      	movs	r2, #0
 80113ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80113d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80113d8:	b25b      	sxtb	r3, r3
 80113da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113de:	d103      	bne.n	80113e8 <xQueueReceive+0x138>
 80113e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e2:	2200      	movs	r2, #0
 80113e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80113e8:	f002 fb84 	bl	8013af4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80113ec:	1d3a      	adds	r2, r7, #4
 80113ee:	f107 0310 	add.w	r3, r7, #16
 80113f2:	4611      	mov	r1, r2
 80113f4:	4618      	mov	r0, r3
 80113f6:	f001 f8fb 	bl	80125f0 <xTaskCheckForTimeOut>
 80113fa:	4603      	mov	r3, r0
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d123      	bne.n	8011448 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011402:	f000 fb65 	bl	8011ad0 <prvIsQueueEmpty>
 8011406:	4603      	mov	r3, r0
 8011408:	2b00      	cmp	r3, #0
 801140a:	d017      	beq.n	801143c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801140c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801140e:	3324      	adds	r3, #36	; 0x24
 8011410:	687a      	ldr	r2, [r7, #4]
 8011412:	4611      	mov	r1, r2
 8011414:	4618      	mov	r0, r3
 8011416:	f001 f821 	bl	801245c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801141a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801141c:	f000 fb06 	bl	8011a2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011420:	f000 fe56 	bl	80120d0 <xTaskResumeAll>
 8011424:	4603      	mov	r3, r0
 8011426:	2b00      	cmp	r3, #0
 8011428:	d189      	bne.n	801133e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801142a:	4b10      	ldr	r3, [pc, #64]	; (801146c <xQueueReceive+0x1bc>)
 801142c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011430:	601a      	str	r2, [r3, #0]
 8011432:	f3bf 8f4f 	dsb	sy
 8011436:	f3bf 8f6f 	isb	sy
 801143a:	e780      	b.n	801133e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801143c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801143e:	f000 faf5 	bl	8011a2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011442:	f000 fe45 	bl	80120d0 <xTaskResumeAll>
 8011446:	e77a      	b.n	801133e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801144a:	f000 faef 	bl	8011a2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801144e:	f000 fe3f 	bl	80120d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011454:	f000 fb3c 	bl	8011ad0 <prvIsQueueEmpty>
 8011458:	4603      	mov	r3, r0
 801145a:	2b00      	cmp	r3, #0
 801145c:	f43f af6f 	beq.w	801133e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011460:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011462:	4618      	mov	r0, r3
 8011464:	3730      	adds	r7, #48	; 0x30
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}
 801146a:	bf00      	nop
 801146c:	e000ed04 	.word	0xe000ed04

08011470 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b08e      	sub	sp, #56	; 0x38
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
 8011478:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801147a:	2300      	movs	r3, #0
 801147c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011482:	2300      	movs	r3, #0
 8011484:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011488:	2b00      	cmp	r3, #0
 801148a:	d10a      	bne.n	80114a2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801148c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011490:	f383 8811 	msr	BASEPRI, r3
 8011494:	f3bf 8f6f 	isb	sy
 8011498:	f3bf 8f4f 	dsb	sy
 801149c:	623b      	str	r3, [r7, #32]
}
 801149e:	bf00      	nop
 80114a0:	e7fe      	b.n	80114a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80114a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d00a      	beq.n	80114c0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80114aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114ae:	f383 8811 	msr	BASEPRI, r3
 80114b2:	f3bf 8f6f 	isb	sy
 80114b6:	f3bf 8f4f 	dsb	sy
 80114ba:	61fb      	str	r3, [r7, #28]
}
 80114bc:	bf00      	nop
 80114be:	e7fe      	b.n	80114be <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80114c0:	f001 f9ea 	bl	8012898 <xTaskGetSchedulerState>
 80114c4:	4603      	mov	r3, r0
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d102      	bne.n	80114d0 <xQueueSemaphoreTake+0x60>
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d101      	bne.n	80114d4 <xQueueSemaphoreTake+0x64>
 80114d0:	2301      	movs	r3, #1
 80114d2:	e000      	b.n	80114d6 <xQueueSemaphoreTake+0x66>
 80114d4:	2300      	movs	r3, #0
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d10a      	bne.n	80114f0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80114da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114de:	f383 8811 	msr	BASEPRI, r3
 80114e2:	f3bf 8f6f 	isb	sy
 80114e6:	f3bf 8f4f 	dsb	sy
 80114ea:	61bb      	str	r3, [r7, #24]
}
 80114ec:	bf00      	nop
 80114ee:	e7fe      	b.n	80114ee <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80114f0:	f002 fad0 	bl	8013a94 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80114f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114f8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80114fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d024      	beq.n	801154a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011502:	1e5a      	subs	r2, r3, #1
 8011504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011506:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d104      	bne.n	801151a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011510:	f001 fb38 	bl	8012b84 <pvTaskIncrementMutexHeldCount>
 8011514:	4602      	mov	r2, r0
 8011516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011518:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801151a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801151c:	691b      	ldr	r3, [r3, #16]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d00f      	beq.n	8011542 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011524:	3310      	adds	r3, #16
 8011526:	4618      	mov	r0, r3
 8011528:	f000 ffe8 	bl	80124fc <xTaskRemoveFromEventList>
 801152c:	4603      	mov	r3, r0
 801152e:	2b00      	cmp	r3, #0
 8011530:	d007      	beq.n	8011542 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011532:	4b54      	ldr	r3, [pc, #336]	; (8011684 <xQueueSemaphoreTake+0x214>)
 8011534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011538:	601a      	str	r2, [r3, #0]
 801153a:	f3bf 8f4f 	dsb	sy
 801153e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011542:	f002 fad7 	bl	8013af4 <vPortExitCritical>
				return pdPASS;
 8011546:	2301      	movs	r3, #1
 8011548:	e097      	b.n	801167a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801154a:	683b      	ldr	r3, [r7, #0]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d111      	bne.n	8011574 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011552:	2b00      	cmp	r3, #0
 8011554:	d00a      	beq.n	801156c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8011556:	f04f 0350 	mov.w	r3, #80	; 0x50
 801155a:	f383 8811 	msr	BASEPRI, r3
 801155e:	f3bf 8f6f 	isb	sy
 8011562:	f3bf 8f4f 	dsb	sy
 8011566:	617b      	str	r3, [r7, #20]
}
 8011568:	bf00      	nop
 801156a:	e7fe      	b.n	801156a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801156c:	f002 fac2 	bl	8013af4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011570:	2300      	movs	r3, #0
 8011572:	e082      	b.n	801167a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011576:	2b00      	cmp	r3, #0
 8011578:	d106      	bne.n	8011588 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801157a:	f107 030c 	add.w	r3, r7, #12
 801157e:	4618      	mov	r0, r3
 8011580:	f001 f820 	bl	80125c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011584:	2301      	movs	r3, #1
 8011586:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011588:	f002 fab4 	bl	8013af4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801158c:	f000 fd92 	bl	80120b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011590:	f002 fa80 	bl	8013a94 <vPortEnterCritical>
 8011594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011596:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801159a:	b25b      	sxtb	r3, r3
 801159c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115a0:	d103      	bne.n	80115aa <xQueueSemaphoreTake+0x13a>
 80115a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115a4:	2200      	movs	r2, #0
 80115a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80115aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80115b0:	b25b      	sxtb	r3, r3
 80115b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115b6:	d103      	bne.n	80115c0 <xQueueSemaphoreTake+0x150>
 80115b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ba:	2200      	movs	r2, #0
 80115bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80115c0:	f002 fa98 	bl	8013af4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80115c4:	463a      	mov	r2, r7
 80115c6:	f107 030c 	add.w	r3, r7, #12
 80115ca:	4611      	mov	r1, r2
 80115cc:	4618      	mov	r0, r3
 80115ce:	f001 f80f 	bl	80125f0 <xTaskCheckForTimeOut>
 80115d2:	4603      	mov	r3, r0
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d132      	bne.n	801163e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80115d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80115da:	f000 fa79 	bl	8011ad0 <prvIsQueueEmpty>
 80115de:	4603      	mov	r3, r0
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d026      	beq.n	8011632 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80115e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d109      	bne.n	8011600 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80115ec:	f002 fa52 	bl	8013a94 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80115f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115f2:	689b      	ldr	r3, [r3, #8]
 80115f4:	4618      	mov	r0, r3
 80115f6:	f001 f96d 	bl	80128d4 <xTaskPriorityInherit>
 80115fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80115fc:	f002 fa7a 	bl	8013af4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011602:	3324      	adds	r3, #36	; 0x24
 8011604:	683a      	ldr	r2, [r7, #0]
 8011606:	4611      	mov	r1, r2
 8011608:	4618      	mov	r0, r3
 801160a:	f000 ff27 	bl	801245c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801160e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011610:	f000 fa0c 	bl	8011a2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011614:	f000 fd5c 	bl	80120d0 <xTaskResumeAll>
 8011618:	4603      	mov	r3, r0
 801161a:	2b00      	cmp	r3, #0
 801161c:	f47f af68 	bne.w	80114f0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8011620:	4b18      	ldr	r3, [pc, #96]	; (8011684 <xQueueSemaphoreTake+0x214>)
 8011622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011626:	601a      	str	r2, [r3, #0]
 8011628:	f3bf 8f4f 	dsb	sy
 801162c:	f3bf 8f6f 	isb	sy
 8011630:	e75e      	b.n	80114f0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011632:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011634:	f000 f9fa 	bl	8011a2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011638:	f000 fd4a 	bl	80120d0 <xTaskResumeAll>
 801163c:	e758      	b.n	80114f0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801163e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011640:	f000 f9f4 	bl	8011a2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011644:	f000 fd44 	bl	80120d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011648:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801164a:	f000 fa41 	bl	8011ad0 <prvIsQueueEmpty>
 801164e:	4603      	mov	r3, r0
 8011650:	2b00      	cmp	r3, #0
 8011652:	f43f af4d 	beq.w	80114f0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011658:	2b00      	cmp	r3, #0
 801165a:	d00d      	beq.n	8011678 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801165c:	f002 fa1a 	bl	8013a94 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011660:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011662:	f000 f93b 	bl	80118dc <prvGetDisinheritPriorityAfterTimeout>
 8011666:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801166a:	689b      	ldr	r3, [r3, #8]
 801166c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801166e:	4618      	mov	r0, r3
 8011670:	f001 fa06 	bl	8012a80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011674:	f002 fa3e 	bl	8013af4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011678:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801167a:	4618      	mov	r0, r3
 801167c:	3738      	adds	r7, #56	; 0x38
 801167e:	46bd      	mov	sp, r7
 8011680:	bd80      	pop	{r7, pc}
 8011682:	bf00      	nop
 8011684:	e000ed04 	.word	0xe000ed04

08011688 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011688:	b580      	push	{r7, lr}
 801168a:	b08e      	sub	sp, #56	; 0x38
 801168c:	af00      	add	r7, sp, #0
 801168e:	60f8      	str	r0, [r7, #12]
 8011690:	60b9      	str	r1, [r7, #8]
 8011692:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801169a:	2b00      	cmp	r3, #0
 801169c:	d10a      	bne.n	80116b4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801169e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116a2:	f383 8811 	msr	BASEPRI, r3
 80116a6:	f3bf 8f6f 	isb	sy
 80116aa:	f3bf 8f4f 	dsb	sy
 80116ae:	623b      	str	r3, [r7, #32]
}
 80116b0:	bf00      	nop
 80116b2:	e7fe      	b.n	80116b2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80116b4:	68bb      	ldr	r3, [r7, #8]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d103      	bne.n	80116c2 <xQueueReceiveFromISR+0x3a>
 80116ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d101      	bne.n	80116c6 <xQueueReceiveFromISR+0x3e>
 80116c2:	2301      	movs	r3, #1
 80116c4:	e000      	b.n	80116c8 <xQueueReceiveFromISR+0x40>
 80116c6:	2300      	movs	r3, #0
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d10a      	bne.n	80116e2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80116cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116d0:	f383 8811 	msr	BASEPRI, r3
 80116d4:	f3bf 8f6f 	isb	sy
 80116d8:	f3bf 8f4f 	dsb	sy
 80116dc:	61fb      	str	r3, [r7, #28]
}
 80116de:	bf00      	nop
 80116e0:	e7fe      	b.n	80116e0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80116e2:	f002 fab9 	bl	8013c58 <vPortValidateInterruptPriority>
	__asm volatile
 80116e6:	f3ef 8211 	mrs	r2, BASEPRI
 80116ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116ee:	f383 8811 	msr	BASEPRI, r3
 80116f2:	f3bf 8f6f 	isb	sy
 80116f6:	f3bf 8f4f 	dsb	sy
 80116fa:	61ba      	str	r2, [r7, #24]
 80116fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80116fe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011700:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011706:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801170a:	2b00      	cmp	r3, #0
 801170c:	d02f      	beq.n	801176e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801170e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011710:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011718:	68b9      	ldr	r1, [r7, #8]
 801171a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801171c:	f000 f960 	bl	80119e0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011722:	1e5a      	subs	r2, r3, #1
 8011724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011726:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011728:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801172c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011730:	d112      	bne.n	8011758 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011734:	691b      	ldr	r3, [r3, #16]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d016      	beq.n	8011768 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801173a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801173c:	3310      	adds	r3, #16
 801173e:	4618      	mov	r0, r3
 8011740:	f000 fedc 	bl	80124fc <xTaskRemoveFromEventList>
 8011744:	4603      	mov	r3, r0
 8011746:	2b00      	cmp	r3, #0
 8011748:	d00e      	beq.n	8011768 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d00b      	beq.n	8011768 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	2201      	movs	r2, #1
 8011754:	601a      	str	r2, [r3, #0]
 8011756:	e007      	b.n	8011768 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801175c:	3301      	adds	r3, #1
 801175e:	b2db      	uxtb	r3, r3
 8011760:	b25a      	sxtb	r2, r3
 8011762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011768:	2301      	movs	r3, #1
 801176a:	637b      	str	r3, [r7, #52]	; 0x34
 801176c:	e001      	b.n	8011772 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801176e:	2300      	movs	r3, #0
 8011770:	637b      	str	r3, [r7, #52]	; 0x34
 8011772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011774:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011776:	693b      	ldr	r3, [r7, #16]
 8011778:	f383 8811 	msr	BASEPRI, r3
}
 801177c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801177e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011780:	4618      	mov	r0, r3
 8011782:	3738      	adds	r7, #56	; 0x38
 8011784:	46bd      	mov	sp, r7
 8011786:	bd80      	pop	{r7, pc}

08011788 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b08c      	sub	sp, #48	; 0x30
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
 8011790:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 8011796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011798:	2b00      	cmp	r3, #0
 801179a:	d10a      	bne.n	80117b2 <xQueuePeekFromISR+0x2a>
	__asm volatile
 801179c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117a0:	f383 8811 	msr	BASEPRI, r3
 80117a4:	f3bf 8f6f 	isb	sy
 80117a8:	f3bf 8f4f 	dsb	sy
 80117ac:	61fb      	str	r3, [r7, #28]
}
 80117ae:	bf00      	nop
 80117b0:	e7fe      	b.n	80117b0 <xQueuePeekFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d103      	bne.n	80117c0 <xQueuePeekFromISR+0x38>
 80117b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d101      	bne.n	80117c4 <xQueuePeekFromISR+0x3c>
 80117c0:	2301      	movs	r3, #1
 80117c2:	e000      	b.n	80117c6 <xQueuePeekFromISR+0x3e>
 80117c4:	2300      	movs	r3, #0
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d10a      	bne.n	80117e0 <xQueuePeekFromISR+0x58>
	__asm volatile
 80117ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117ce:	f383 8811 	msr	BASEPRI, r3
 80117d2:	f3bf 8f6f 	isb	sy
 80117d6:	f3bf 8f4f 	dsb	sy
 80117da:	61bb      	str	r3, [r7, #24]
}
 80117dc:	bf00      	nop
 80117de:	e7fe      	b.n	80117de <xQueuePeekFromISR+0x56>
	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 80117e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d10a      	bne.n	80117fe <xQueuePeekFromISR+0x76>
	__asm volatile
 80117e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117ec:	f383 8811 	msr	BASEPRI, r3
 80117f0:	f3bf 8f6f 	isb	sy
 80117f4:	f3bf 8f4f 	dsb	sy
 80117f8:	617b      	str	r3, [r7, #20]
}
 80117fa:	bf00      	nop
 80117fc:	e7fe      	b.n	80117fc <xQueuePeekFromISR+0x74>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80117fe:	f002 fa2b 	bl	8013c58 <vPortValidateInterruptPriority>
	__asm volatile
 8011802:	f3ef 8211 	mrs	r2, BASEPRI
 8011806:	f04f 0350 	mov.w	r3, #80	; 0x50
 801180a:	f383 8811 	msr	BASEPRI, r3
 801180e:	f3bf 8f6f 	isb	sy
 8011812:	f3bf 8f4f 	dsb	sy
 8011816:	613a      	str	r2, [r7, #16]
 8011818:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 801181a:	693b      	ldr	r3, [r7, #16]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801181c:	627b      	str	r3, [r7, #36]	; 0x24
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 801181e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011822:	2b00      	cmp	r3, #0
 8011824:	d00c      	beq.n	8011840 <xQueuePeekFromISR+0xb8>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8011826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011828:	68db      	ldr	r3, [r3, #12]
 801182a:	623b      	str	r3, [r7, #32]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801182c:	6839      	ldr	r1, [r7, #0]
 801182e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011830:	f000 f8d6 	bl	80119e0 <prvCopyDataFromQueue>
			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8011834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011836:	6a3a      	ldr	r2, [r7, #32]
 8011838:	60da      	str	r2, [r3, #12]

			xReturn = pdPASS;
 801183a:	2301      	movs	r3, #1
 801183c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801183e:	e001      	b.n	8011844 <xQueuePeekFromISR+0xbc>
		}
		else
		{
			xReturn = pdFAIL;
 8011840:	2300      	movs	r3, #0
 8011842:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011846:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8011848:	68bb      	ldr	r3, [r7, #8]
 801184a:	f383 8811 	msr	BASEPRI, r3
}
 801184e:	bf00      	nop
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8011852:	4618      	mov	r0, r3
 8011854:	3730      	adds	r7, #48	; 0x30
 8011856:	46bd      	mov	sp, r7
 8011858:	bd80      	pop	{r7, pc}

0801185a <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 801185a:	b480      	push	{r7}
 801185c:	b087      	sub	sp, #28
 801185e:	af00      	add	r7, sp, #0
 8011860:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8011866:	697b      	ldr	r3, [r7, #20]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d10a      	bne.n	8011882 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 801186c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011870:	f383 8811 	msr	BASEPRI, r3
 8011874:	f3bf 8f6f 	isb	sy
 8011878:	f3bf 8f4f 	dsb	sy
 801187c:	60fb      	str	r3, [r7, #12]
}
 801187e:	bf00      	nop
 8011880:	e7fe      	b.n	8011880 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8011882:	697b      	ldr	r3, [r7, #20]
 8011884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011886:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8011888:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801188a:	4618      	mov	r0, r3
 801188c:	371c      	adds	r7, #28
 801188e:	46bd      	mov	sp, r7
 8011890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011894:	4770      	bx	lr

08011896 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011896:	b580      	push	{r7, lr}
 8011898:	b084      	sub	sp, #16
 801189a:	af00      	add	r7, sp, #0
 801189c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d10a      	bne.n	80118be <vQueueDelete+0x28>
	__asm volatile
 80118a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118ac:	f383 8811 	msr	BASEPRI, r3
 80118b0:	f3bf 8f6f 	isb	sy
 80118b4:	f3bf 8f4f 	dsb	sy
 80118b8:	60bb      	str	r3, [r7, #8]
}
 80118ba:	bf00      	nop
 80118bc:	e7fe      	b.n	80118bc <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80118be:	68f8      	ldr	r0, [r7, #12]
 80118c0:	f000 f95e 	bl	8011b80 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d102      	bne.n	80118d4 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80118ce:	68f8      	ldr	r0, [r7, #12]
 80118d0:	f002 face 	bl	8013e70 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80118d4:	bf00      	nop
 80118d6:	3710      	adds	r7, #16
 80118d8:	46bd      	mov	sp, r7
 80118da:	bd80      	pop	{r7, pc}

080118dc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80118dc:	b480      	push	{r7}
 80118de:	b085      	sub	sp, #20
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d006      	beq.n	80118fa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80118f6:	60fb      	str	r3, [r7, #12]
 80118f8:	e001      	b.n	80118fe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80118fa:	2300      	movs	r3, #0
 80118fc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80118fe:	68fb      	ldr	r3, [r7, #12]
	}
 8011900:	4618      	mov	r0, r3
 8011902:	3714      	adds	r7, #20
 8011904:	46bd      	mov	sp, r7
 8011906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190a:	4770      	bx	lr

0801190c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b086      	sub	sp, #24
 8011910:	af00      	add	r7, sp, #0
 8011912:	60f8      	str	r0, [r7, #12]
 8011914:	60b9      	str	r1, [r7, #8]
 8011916:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011918:	2300      	movs	r3, #0
 801191a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011920:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011926:	2b00      	cmp	r3, #0
 8011928:	d10d      	bne.n	8011946 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d14d      	bne.n	80119ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	689b      	ldr	r3, [r3, #8]
 8011936:	4618      	mov	r0, r3
 8011938:	f001 f834 	bl	80129a4 <xTaskPriorityDisinherit>
 801193c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	2200      	movs	r2, #0
 8011942:	609a      	str	r2, [r3, #8]
 8011944:	e043      	b.n	80119ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d119      	bne.n	8011980 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	6858      	ldr	r0, [r3, #4]
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011954:	461a      	mov	r2, r3
 8011956:	68b9      	ldr	r1, [r7, #8]
 8011958:	f003 fbd4 	bl	8015104 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	685a      	ldr	r2, [r3, #4]
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011964:	441a      	add	r2, r3
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	685a      	ldr	r2, [r3, #4]
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	689b      	ldr	r3, [r3, #8]
 8011972:	429a      	cmp	r2, r3
 8011974:	d32b      	bcc.n	80119ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	681a      	ldr	r2, [r3, #0]
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	605a      	str	r2, [r3, #4]
 801197e:	e026      	b.n	80119ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	68d8      	ldr	r0, [r3, #12]
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011988:	461a      	mov	r2, r3
 801198a:	68b9      	ldr	r1, [r7, #8]
 801198c:	f003 fbba 	bl	8015104 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	68da      	ldr	r2, [r3, #12]
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011998:	425b      	negs	r3, r3
 801199a:	441a      	add	r2, r3
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	68da      	ldr	r2, [r3, #12]
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	429a      	cmp	r2, r3
 80119aa:	d207      	bcs.n	80119bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	689a      	ldr	r2, [r3, #8]
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119b4:	425b      	negs	r3, r3
 80119b6:	441a      	add	r2, r3
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	2b02      	cmp	r3, #2
 80119c0:	d105      	bne.n	80119ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80119c2:	693b      	ldr	r3, [r7, #16]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d002      	beq.n	80119ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80119c8:	693b      	ldr	r3, [r7, #16]
 80119ca:	3b01      	subs	r3, #1
 80119cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80119ce:	693b      	ldr	r3, [r7, #16]
 80119d0:	1c5a      	adds	r2, r3, #1
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80119d6:	697b      	ldr	r3, [r7, #20]
}
 80119d8:	4618      	mov	r0, r3
 80119da:	3718      	adds	r7, #24
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}

080119e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b082      	sub	sp, #8
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
 80119e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d018      	beq.n	8011a24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	68da      	ldr	r2, [r3, #12]
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119fa:	441a      	add	r2, r3
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	68da      	ldr	r2, [r3, #12]
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	689b      	ldr	r3, [r3, #8]
 8011a08:	429a      	cmp	r2, r3
 8011a0a:	d303      	bcc.n	8011a14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681a      	ldr	r2, [r3, #0]
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	68d9      	ldr	r1, [r3, #12]
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a1c:	461a      	mov	r2, r3
 8011a1e:	6838      	ldr	r0, [r7, #0]
 8011a20:	f003 fb70 	bl	8015104 <memcpy>
	}
}
 8011a24:	bf00      	nop
 8011a26:	3708      	adds	r7, #8
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bd80      	pop	{r7, pc}

08011a2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b084      	sub	sp, #16
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011a34:	f002 f82e 	bl	8013a94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011a3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011a40:	e011      	b.n	8011a66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d012      	beq.n	8011a70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	3324      	adds	r3, #36	; 0x24
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f000 fd54 	bl	80124fc <xTaskRemoveFromEventList>
 8011a54:	4603      	mov	r3, r0
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d001      	beq.n	8011a5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011a5a:	f000 fe2b 	bl	80126b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011a5e:	7bfb      	ldrb	r3, [r7, #15]
 8011a60:	3b01      	subs	r3, #1
 8011a62:	b2db      	uxtb	r3, r3
 8011a64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	dce9      	bgt.n	8011a42 <prvUnlockQueue+0x16>
 8011a6e:	e000      	b.n	8011a72 <prvUnlockQueue+0x46>
					break;
 8011a70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	22ff      	movs	r2, #255	; 0xff
 8011a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011a7a:	f002 f83b 	bl	8013af4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011a7e:	f002 f809 	bl	8013a94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011a88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011a8a:	e011      	b.n	8011ab0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	691b      	ldr	r3, [r3, #16]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d012      	beq.n	8011aba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	3310      	adds	r3, #16
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f000 fd2f 	bl	80124fc <xTaskRemoveFromEventList>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d001      	beq.n	8011aa8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011aa4:	f000 fe06 	bl	80126b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011aa8:	7bbb      	ldrb	r3, [r7, #14]
 8011aaa:	3b01      	subs	r3, #1
 8011aac:	b2db      	uxtb	r3, r3
 8011aae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011ab0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	dce9      	bgt.n	8011a8c <prvUnlockQueue+0x60>
 8011ab8:	e000      	b.n	8011abc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011aba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	22ff      	movs	r2, #255	; 0xff
 8011ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011ac4:	f002 f816 	bl	8013af4 <vPortExitCritical>
}
 8011ac8:	bf00      	nop
 8011aca:	3710      	adds	r7, #16
 8011acc:	46bd      	mov	sp, r7
 8011ace:	bd80      	pop	{r7, pc}

08011ad0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b084      	sub	sp, #16
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011ad8:	f001 ffdc 	bl	8013a94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d102      	bne.n	8011aea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011ae4:	2301      	movs	r3, #1
 8011ae6:	60fb      	str	r3, [r7, #12]
 8011ae8:	e001      	b.n	8011aee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011aea:	2300      	movs	r3, #0
 8011aec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011aee:	f002 f801 	bl	8013af4 <vPortExitCritical>

	return xReturn;
 8011af2:	68fb      	ldr	r3, [r7, #12]
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	3710      	adds	r7, #16
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}

08011afc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b084      	sub	sp, #16
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011b04:	f001 ffc6 	bl	8013a94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b10:	429a      	cmp	r2, r3
 8011b12:	d102      	bne.n	8011b1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011b14:	2301      	movs	r3, #1
 8011b16:	60fb      	str	r3, [r7, #12]
 8011b18:	e001      	b.n	8011b1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011b1e:	f001 ffe9 	bl	8013af4 <vPortExitCritical>

	return xReturn;
 8011b22:	68fb      	ldr	r3, [r7, #12]
}
 8011b24:	4618      	mov	r0, r3
 8011b26:	3710      	adds	r7, #16
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	bd80      	pop	{r7, pc}

08011b2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011b2c:	b480      	push	{r7}
 8011b2e:	b085      	sub	sp, #20
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
 8011b34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011b36:	2300      	movs	r3, #0
 8011b38:	60fb      	str	r3, [r7, #12]
 8011b3a:	e014      	b.n	8011b66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011b3c:	4a0f      	ldr	r2, [pc, #60]	; (8011b7c <vQueueAddToRegistry+0x50>)
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d10b      	bne.n	8011b60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011b48:	490c      	ldr	r1, [pc, #48]	; (8011b7c <vQueueAddToRegistry+0x50>)
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	683a      	ldr	r2, [r7, #0]
 8011b4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011b52:	4a0a      	ldr	r2, [pc, #40]	; (8011b7c <vQueueAddToRegistry+0x50>)
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	00db      	lsls	r3, r3, #3
 8011b58:	4413      	add	r3, r2
 8011b5a:	687a      	ldr	r2, [r7, #4]
 8011b5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011b5e:	e006      	b.n	8011b6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	3301      	adds	r3, #1
 8011b64:	60fb      	str	r3, [r7, #12]
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	2b07      	cmp	r3, #7
 8011b6a:	d9e7      	bls.n	8011b3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011b6c:	bf00      	nop
 8011b6e:	bf00      	nop
 8011b70:	3714      	adds	r7, #20
 8011b72:	46bd      	mov	sp, r7
 8011b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b78:	4770      	bx	lr
 8011b7a:	bf00      	nop
 8011b7c:	20001f40 	.word	0x20001f40

08011b80 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011b80:	b480      	push	{r7}
 8011b82:	b085      	sub	sp, #20
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011b88:	2300      	movs	r3, #0
 8011b8a:	60fb      	str	r3, [r7, #12]
 8011b8c:	e016      	b.n	8011bbc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011b8e:	4a10      	ldr	r2, [pc, #64]	; (8011bd0 <vQueueUnregisterQueue+0x50>)
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	00db      	lsls	r3, r3, #3
 8011b94:	4413      	add	r3, r2
 8011b96:	685b      	ldr	r3, [r3, #4]
 8011b98:	687a      	ldr	r2, [r7, #4]
 8011b9a:	429a      	cmp	r2, r3
 8011b9c:	d10b      	bne.n	8011bb6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011b9e:	4a0c      	ldr	r2, [pc, #48]	; (8011bd0 <vQueueUnregisterQueue+0x50>)
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	2100      	movs	r1, #0
 8011ba4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011ba8:	4a09      	ldr	r2, [pc, #36]	; (8011bd0 <vQueueUnregisterQueue+0x50>)
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	00db      	lsls	r3, r3, #3
 8011bae:	4413      	add	r3, r2
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	605a      	str	r2, [r3, #4]
				break;
 8011bb4:	e006      	b.n	8011bc4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	3301      	adds	r3, #1
 8011bba:	60fb      	str	r3, [r7, #12]
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	2b07      	cmp	r3, #7
 8011bc0:	d9e5      	bls.n	8011b8e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011bc2:	bf00      	nop
 8011bc4:	bf00      	nop
 8011bc6:	3714      	adds	r7, #20
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bce:	4770      	bx	lr
 8011bd0:	20001f40 	.word	0x20001f40

08011bd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b086      	sub	sp, #24
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	60f8      	str	r0, [r7, #12]
 8011bdc:	60b9      	str	r1, [r7, #8]
 8011bde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011be4:	f001 ff56 	bl	8013a94 <vPortEnterCritical>
 8011be8:	697b      	ldr	r3, [r7, #20]
 8011bea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011bee:	b25b      	sxtb	r3, r3
 8011bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bf4:	d103      	bne.n	8011bfe <vQueueWaitForMessageRestricted+0x2a>
 8011bf6:	697b      	ldr	r3, [r7, #20]
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011bfe:	697b      	ldr	r3, [r7, #20]
 8011c00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011c04:	b25b      	sxtb	r3, r3
 8011c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c0a:	d103      	bne.n	8011c14 <vQueueWaitForMessageRestricted+0x40>
 8011c0c:	697b      	ldr	r3, [r7, #20]
 8011c0e:	2200      	movs	r2, #0
 8011c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011c14:	f001 ff6e 	bl	8013af4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011c18:	697b      	ldr	r3, [r7, #20]
 8011c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d106      	bne.n	8011c2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011c20:	697b      	ldr	r3, [r7, #20]
 8011c22:	3324      	adds	r3, #36	; 0x24
 8011c24:	687a      	ldr	r2, [r7, #4]
 8011c26:	68b9      	ldr	r1, [r7, #8]
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f000 fc3b 	bl	80124a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011c2e:	6978      	ldr	r0, [r7, #20]
 8011c30:	f7ff fefc 	bl	8011a2c <prvUnlockQueue>
	}
 8011c34:	bf00      	nop
 8011c36:	3718      	adds	r7, #24
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	bd80      	pop	{r7, pc}

08011c3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b08e      	sub	sp, #56	; 0x38
 8011c40:	af04      	add	r7, sp, #16
 8011c42:	60f8      	str	r0, [r7, #12]
 8011c44:	60b9      	str	r1, [r7, #8]
 8011c46:	607a      	str	r2, [r7, #4]
 8011c48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d10a      	bne.n	8011c66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8011c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c54:	f383 8811 	msr	BASEPRI, r3
 8011c58:	f3bf 8f6f 	isb	sy
 8011c5c:	f3bf 8f4f 	dsb	sy
 8011c60:	623b      	str	r3, [r7, #32]
}
 8011c62:	bf00      	nop
 8011c64:	e7fe      	b.n	8011c64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d10a      	bne.n	8011c82 <xTaskCreateStatic+0x46>
	__asm volatile
 8011c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c70:	f383 8811 	msr	BASEPRI, r3
 8011c74:	f3bf 8f6f 	isb	sy
 8011c78:	f3bf 8f4f 	dsb	sy
 8011c7c:	61fb      	str	r3, [r7, #28]
}
 8011c7e:	bf00      	nop
 8011c80:	e7fe      	b.n	8011c80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011c82:	235c      	movs	r3, #92	; 0x5c
 8011c84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011c86:	693b      	ldr	r3, [r7, #16]
 8011c88:	2b5c      	cmp	r3, #92	; 0x5c
 8011c8a:	d00a      	beq.n	8011ca2 <xTaskCreateStatic+0x66>
	__asm volatile
 8011c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c90:	f383 8811 	msr	BASEPRI, r3
 8011c94:	f3bf 8f6f 	isb	sy
 8011c98:	f3bf 8f4f 	dsb	sy
 8011c9c:	61bb      	str	r3, [r7, #24]
}
 8011c9e:	bf00      	nop
 8011ca0:	e7fe      	b.n	8011ca0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011ca2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d01e      	beq.n	8011ce8 <xTaskCreateStatic+0xac>
 8011caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d01b      	beq.n	8011ce8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011cb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cbc:	2202      	movs	r2, #2
 8011cbe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	9303      	str	r3, [sp, #12]
 8011cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cc8:	9302      	str	r3, [sp, #8]
 8011cca:	f107 0314 	add.w	r3, r7, #20
 8011cce:	9301      	str	r3, [sp, #4]
 8011cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cd2:	9300      	str	r3, [sp, #0]
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	687a      	ldr	r2, [r7, #4]
 8011cd8:	68b9      	ldr	r1, [r7, #8]
 8011cda:	68f8      	ldr	r0, [r7, #12]
 8011cdc:	f000 f850 	bl	8011d80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011ce0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ce2:	f000 f8dd 	bl	8011ea0 <prvAddNewTaskToReadyList>
 8011ce6:	e001      	b.n	8011cec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011ce8:	2300      	movs	r3, #0
 8011cea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011cec:	697b      	ldr	r3, [r7, #20]
	}
 8011cee:	4618      	mov	r0, r3
 8011cf0:	3728      	adds	r7, #40	; 0x28
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bd80      	pop	{r7, pc}

08011cf6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011cf6:	b580      	push	{r7, lr}
 8011cf8:	b08c      	sub	sp, #48	; 0x30
 8011cfa:	af04      	add	r7, sp, #16
 8011cfc:	60f8      	str	r0, [r7, #12]
 8011cfe:	60b9      	str	r1, [r7, #8]
 8011d00:	603b      	str	r3, [r7, #0]
 8011d02:	4613      	mov	r3, r2
 8011d04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011d06:	88fb      	ldrh	r3, [r7, #6]
 8011d08:	009b      	lsls	r3, r3, #2
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	f001 ffe4 	bl	8013cd8 <pvPortMalloc>
 8011d10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011d12:	697b      	ldr	r3, [r7, #20]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d00e      	beq.n	8011d36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011d18:	205c      	movs	r0, #92	; 0x5c
 8011d1a:	f001 ffdd 	bl	8013cd8 <pvPortMalloc>
 8011d1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011d20:	69fb      	ldr	r3, [r7, #28]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d003      	beq.n	8011d2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011d26:	69fb      	ldr	r3, [r7, #28]
 8011d28:	697a      	ldr	r2, [r7, #20]
 8011d2a:	631a      	str	r2, [r3, #48]	; 0x30
 8011d2c:	e005      	b.n	8011d3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011d2e:	6978      	ldr	r0, [r7, #20]
 8011d30:	f002 f89e 	bl	8013e70 <vPortFree>
 8011d34:	e001      	b.n	8011d3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011d36:	2300      	movs	r3, #0
 8011d38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011d3a:	69fb      	ldr	r3, [r7, #28]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d017      	beq.n	8011d70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011d40:	69fb      	ldr	r3, [r7, #28]
 8011d42:	2200      	movs	r2, #0
 8011d44:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011d48:	88fa      	ldrh	r2, [r7, #6]
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	9303      	str	r3, [sp, #12]
 8011d4e:	69fb      	ldr	r3, [r7, #28]
 8011d50:	9302      	str	r3, [sp, #8]
 8011d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d54:	9301      	str	r3, [sp, #4]
 8011d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d58:	9300      	str	r3, [sp, #0]
 8011d5a:	683b      	ldr	r3, [r7, #0]
 8011d5c:	68b9      	ldr	r1, [r7, #8]
 8011d5e:	68f8      	ldr	r0, [r7, #12]
 8011d60:	f000 f80e 	bl	8011d80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011d64:	69f8      	ldr	r0, [r7, #28]
 8011d66:	f000 f89b 	bl	8011ea0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011d6a:	2301      	movs	r3, #1
 8011d6c:	61bb      	str	r3, [r7, #24]
 8011d6e:	e002      	b.n	8011d76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011d70:	f04f 33ff 	mov.w	r3, #4294967295
 8011d74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011d76:	69bb      	ldr	r3, [r7, #24]
	}
 8011d78:	4618      	mov	r0, r3
 8011d7a:	3720      	adds	r7, #32
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd80      	pop	{r7, pc}

08011d80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b088      	sub	sp, #32
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	60f8      	str	r0, [r7, #12]
 8011d88:	60b9      	str	r1, [r7, #8]
 8011d8a:	607a      	str	r2, [r7, #4]
 8011d8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	009b      	lsls	r3, r3, #2
 8011d96:	461a      	mov	r2, r3
 8011d98:	21a5      	movs	r1, #165	; 0xa5
 8011d9a:	f003 f971 	bl	8015080 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011da8:	3b01      	subs	r3, #1
 8011daa:	009b      	lsls	r3, r3, #2
 8011dac:	4413      	add	r3, r2
 8011dae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011db0:	69bb      	ldr	r3, [r7, #24]
 8011db2:	f023 0307 	bic.w	r3, r3, #7
 8011db6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011db8:	69bb      	ldr	r3, [r7, #24]
 8011dba:	f003 0307 	and.w	r3, r3, #7
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d00a      	beq.n	8011dd8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8011dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dc6:	f383 8811 	msr	BASEPRI, r3
 8011dca:	f3bf 8f6f 	isb	sy
 8011dce:	f3bf 8f4f 	dsb	sy
 8011dd2:	617b      	str	r3, [r7, #20]
}
 8011dd4:	bf00      	nop
 8011dd6:	e7fe      	b.n	8011dd6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011dd8:	68bb      	ldr	r3, [r7, #8]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d01f      	beq.n	8011e1e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011dde:	2300      	movs	r3, #0
 8011de0:	61fb      	str	r3, [r7, #28]
 8011de2:	e012      	b.n	8011e0a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011de4:	68ba      	ldr	r2, [r7, #8]
 8011de6:	69fb      	ldr	r3, [r7, #28]
 8011de8:	4413      	add	r3, r2
 8011dea:	7819      	ldrb	r1, [r3, #0]
 8011dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011dee:	69fb      	ldr	r3, [r7, #28]
 8011df0:	4413      	add	r3, r2
 8011df2:	3334      	adds	r3, #52	; 0x34
 8011df4:	460a      	mov	r2, r1
 8011df6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011df8:	68ba      	ldr	r2, [r7, #8]
 8011dfa:	69fb      	ldr	r3, [r7, #28]
 8011dfc:	4413      	add	r3, r2
 8011dfe:	781b      	ldrb	r3, [r3, #0]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d006      	beq.n	8011e12 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011e04:	69fb      	ldr	r3, [r7, #28]
 8011e06:	3301      	adds	r3, #1
 8011e08:	61fb      	str	r3, [r7, #28]
 8011e0a:	69fb      	ldr	r3, [r7, #28]
 8011e0c:	2b0f      	cmp	r3, #15
 8011e0e:	d9e9      	bls.n	8011de4 <prvInitialiseNewTask+0x64>
 8011e10:	e000      	b.n	8011e14 <prvInitialiseNewTask+0x94>
			{
				break;
 8011e12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e16:	2200      	movs	r2, #0
 8011e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011e1c:	e003      	b.n	8011e26 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e20:	2200      	movs	r2, #0
 8011e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e28:	2b37      	cmp	r3, #55	; 0x37
 8011e2a:	d901      	bls.n	8011e30 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011e2c:	2337      	movs	r3, #55	; 0x37
 8011e2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e3a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e3e:	2200      	movs	r2, #0
 8011e40:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e44:	3304      	adds	r3, #4
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7fe fd1a 	bl	8010880 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e4e:	3318      	adds	r3, #24
 8011e50:	4618      	mov	r0, r3
 8011e52:	f7fe fd15 	bl	8010880 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e6e:	2200      	movs	r2, #0
 8011e70:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e74:	2200      	movs	r2, #0
 8011e76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011e7a:	683a      	ldr	r2, [r7, #0]
 8011e7c:	68f9      	ldr	r1, [r7, #12]
 8011e7e:	69b8      	ldr	r0, [r7, #24]
 8011e80:	f001 fcde 	bl	8013840 <pxPortInitialiseStack>
 8011e84:	4602      	mov	r2, r0
 8011e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d002      	beq.n	8011e96 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011e96:	bf00      	nop
 8011e98:	3720      	adds	r7, #32
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}
	...

08011ea0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b082      	sub	sp, #8
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011ea8:	f001 fdf4 	bl	8013a94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011eac:	4b2d      	ldr	r3, [pc, #180]	; (8011f64 <prvAddNewTaskToReadyList+0xc4>)
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	3301      	adds	r3, #1
 8011eb2:	4a2c      	ldr	r2, [pc, #176]	; (8011f64 <prvAddNewTaskToReadyList+0xc4>)
 8011eb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011eb6:	4b2c      	ldr	r3, [pc, #176]	; (8011f68 <prvAddNewTaskToReadyList+0xc8>)
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d109      	bne.n	8011ed2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011ebe:	4a2a      	ldr	r2, [pc, #168]	; (8011f68 <prvAddNewTaskToReadyList+0xc8>)
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011ec4:	4b27      	ldr	r3, [pc, #156]	; (8011f64 <prvAddNewTaskToReadyList+0xc4>)
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	2b01      	cmp	r3, #1
 8011eca:	d110      	bne.n	8011eee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011ecc:	f000 fc16 	bl	80126fc <prvInitialiseTaskLists>
 8011ed0:	e00d      	b.n	8011eee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011ed2:	4b26      	ldr	r3, [pc, #152]	; (8011f6c <prvAddNewTaskToReadyList+0xcc>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d109      	bne.n	8011eee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011eda:	4b23      	ldr	r3, [pc, #140]	; (8011f68 <prvAddNewTaskToReadyList+0xc8>)
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ee4:	429a      	cmp	r2, r3
 8011ee6:	d802      	bhi.n	8011eee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011ee8:	4a1f      	ldr	r2, [pc, #124]	; (8011f68 <prvAddNewTaskToReadyList+0xc8>)
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011eee:	4b20      	ldr	r3, [pc, #128]	; (8011f70 <prvAddNewTaskToReadyList+0xd0>)
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	3301      	adds	r3, #1
 8011ef4:	4a1e      	ldr	r2, [pc, #120]	; (8011f70 <prvAddNewTaskToReadyList+0xd0>)
 8011ef6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011ef8:	4b1d      	ldr	r3, [pc, #116]	; (8011f70 <prvAddNewTaskToReadyList+0xd0>)
 8011efa:	681a      	ldr	r2, [r3, #0]
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f04:	4b1b      	ldr	r3, [pc, #108]	; (8011f74 <prvAddNewTaskToReadyList+0xd4>)
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	429a      	cmp	r2, r3
 8011f0a:	d903      	bls.n	8011f14 <prvAddNewTaskToReadyList+0x74>
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f10:	4a18      	ldr	r2, [pc, #96]	; (8011f74 <prvAddNewTaskToReadyList+0xd4>)
 8011f12:	6013      	str	r3, [r2, #0]
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f18:	4613      	mov	r3, r2
 8011f1a:	009b      	lsls	r3, r3, #2
 8011f1c:	4413      	add	r3, r2
 8011f1e:	009b      	lsls	r3, r3, #2
 8011f20:	4a15      	ldr	r2, [pc, #84]	; (8011f78 <prvAddNewTaskToReadyList+0xd8>)
 8011f22:	441a      	add	r2, r3
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	3304      	adds	r3, #4
 8011f28:	4619      	mov	r1, r3
 8011f2a:	4610      	mov	r0, r2
 8011f2c:	f7fe fcb5 	bl	801089a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011f30:	f001 fde0 	bl	8013af4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011f34:	4b0d      	ldr	r3, [pc, #52]	; (8011f6c <prvAddNewTaskToReadyList+0xcc>)
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d00e      	beq.n	8011f5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011f3c:	4b0a      	ldr	r3, [pc, #40]	; (8011f68 <prvAddNewTaskToReadyList+0xc8>)
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f46:	429a      	cmp	r2, r3
 8011f48:	d207      	bcs.n	8011f5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011f4a:	4b0c      	ldr	r3, [pc, #48]	; (8011f7c <prvAddNewTaskToReadyList+0xdc>)
 8011f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f50:	601a      	str	r2, [r3, #0]
 8011f52:	f3bf 8f4f 	dsb	sy
 8011f56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011f5a:	bf00      	nop
 8011f5c:	3708      	adds	r7, #8
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}
 8011f62:	bf00      	nop
 8011f64:	20002454 	.word	0x20002454
 8011f68:	20001f80 	.word	0x20001f80
 8011f6c:	20002460 	.word	0x20002460
 8011f70:	20002470 	.word	0x20002470
 8011f74:	2000245c 	.word	0x2000245c
 8011f78:	20001f84 	.word	0x20001f84
 8011f7c:	e000ed04 	.word	0xe000ed04

08011f80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b084      	sub	sp, #16
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011f88:	2300      	movs	r3, #0
 8011f8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d017      	beq.n	8011fc2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011f92:	4b13      	ldr	r3, [pc, #76]	; (8011fe0 <vTaskDelay+0x60>)
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d00a      	beq.n	8011fb0 <vTaskDelay+0x30>
	__asm volatile
 8011f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f9e:	f383 8811 	msr	BASEPRI, r3
 8011fa2:	f3bf 8f6f 	isb	sy
 8011fa6:	f3bf 8f4f 	dsb	sy
 8011faa:	60bb      	str	r3, [r7, #8]
}
 8011fac:	bf00      	nop
 8011fae:	e7fe      	b.n	8011fae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011fb0:	f000 f880 	bl	80120b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011fb4:	2100      	movs	r1, #0
 8011fb6:	6878      	ldr	r0, [r7, #4]
 8011fb8:	f000 ffe6 	bl	8012f88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011fbc:	f000 f888 	bl	80120d0 <xTaskResumeAll>
 8011fc0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d107      	bne.n	8011fd8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011fc8:	4b06      	ldr	r3, [pc, #24]	; (8011fe4 <vTaskDelay+0x64>)
 8011fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fce:	601a      	str	r2, [r3, #0]
 8011fd0:	f3bf 8f4f 	dsb	sy
 8011fd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011fd8:	bf00      	nop
 8011fda:	3710      	adds	r7, #16
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	bd80      	pop	{r7, pc}
 8011fe0:	2000247c 	.word	0x2000247c
 8011fe4:	e000ed04 	.word	0xe000ed04

08011fe8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b08a      	sub	sp, #40	; 0x28
 8011fec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011fee:	2300      	movs	r3, #0
 8011ff0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011ff6:	463a      	mov	r2, r7
 8011ff8:	1d39      	adds	r1, r7, #4
 8011ffa:	f107 0308 	add.w	r3, r7, #8
 8011ffe:	4618      	mov	r0, r3
 8012000:	f7fe fbea 	bl	80107d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012004:	6839      	ldr	r1, [r7, #0]
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	68ba      	ldr	r2, [r7, #8]
 801200a:	9202      	str	r2, [sp, #8]
 801200c:	9301      	str	r3, [sp, #4]
 801200e:	2300      	movs	r3, #0
 8012010:	9300      	str	r3, [sp, #0]
 8012012:	2300      	movs	r3, #0
 8012014:	460a      	mov	r2, r1
 8012016:	4921      	ldr	r1, [pc, #132]	; (801209c <vTaskStartScheduler+0xb4>)
 8012018:	4821      	ldr	r0, [pc, #132]	; (80120a0 <vTaskStartScheduler+0xb8>)
 801201a:	f7ff fe0f 	bl	8011c3c <xTaskCreateStatic>
 801201e:	4603      	mov	r3, r0
 8012020:	4a20      	ldr	r2, [pc, #128]	; (80120a4 <vTaskStartScheduler+0xbc>)
 8012022:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012024:	4b1f      	ldr	r3, [pc, #124]	; (80120a4 <vTaskStartScheduler+0xbc>)
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d002      	beq.n	8012032 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801202c:	2301      	movs	r3, #1
 801202e:	617b      	str	r3, [r7, #20]
 8012030:	e001      	b.n	8012036 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012032:	2300      	movs	r3, #0
 8012034:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012036:	697b      	ldr	r3, [r7, #20]
 8012038:	2b01      	cmp	r3, #1
 801203a:	d102      	bne.n	8012042 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801203c:	f000 fff8 	bl	8013030 <xTimerCreateTimerTask>
 8012040:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012042:	697b      	ldr	r3, [r7, #20]
 8012044:	2b01      	cmp	r3, #1
 8012046:	d116      	bne.n	8012076 <vTaskStartScheduler+0x8e>
	__asm volatile
 8012048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801204c:	f383 8811 	msr	BASEPRI, r3
 8012050:	f3bf 8f6f 	isb	sy
 8012054:	f3bf 8f4f 	dsb	sy
 8012058:	613b      	str	r3, [r7, #16]
}
 801205a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801205c:	4b12      	ldr	r3, [pc, #72]	; (80120a8 <vTaskStartScheduler+0xc0>)
 801205e:	f04f 32ff 	mov.w	r2, #4294967295
 8012062:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012064:	4b11      	ldr	r3, [pc, #68]	; (80120ac <vTaskStartScheduler+0xc4>)
 8012066:	2201      	movs	r2, #1
 8012068:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801206a:	4b11      	ldr	r3, [pc, #68]	; (80120b0 <vTaskStartScheduler+0xc8>)
 801206c:	2200      	movs	r2, #0
 801206e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012070:	f001 fc6e 	bl	8013950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012074:	e00e      	b.n	8012094 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012076:	697b      	ldr	r3, [r7, #20]
 8012078:	f1b3 3fff 	cmp.w	r3, #4294967295
 801207c:	d10a      	bne.n	8012094 <vTaskStartScheduler+0xac>
	__asm volatile
 801207e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012082:	f383 8811 	msr	BASEPRI, r3
 8012086:	f3bf 8f6f 	isb	sy
 801208a:	f3bf 8f4f 	dsb	sy
 801208e:	60fb      	str	r3, [r7, #12]
}
 8012090:	bf00      	nop
 8012092:	e7fe      	b.n	8012092 <vTaskStartScheduler+0xaa>
}
 8012094:	bf00      	nop
 8012096:	3718      	adds	r7, #24
 8012098:	46bd      	mov	sp, r7
 801209a:	bd80      	pop	{r7, pc}
 801209c:	080158d8 	.word	0x080158d8
 80120a0:	080126cd 	.word	0x080126cd
 80120a4:	20002478 	.word	0x20002478
 80120a8:	20002474 	.word	0x20002474
 80120ac:	20002460 	.word	0x20002460
 80120b0:	20002458 	.word	0x20002458

080120b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80120b4:	b480      	push	{r7}
 80120b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80120b8:	4b04      	ldr	r3, [pc, #16]	; (80120cc <vTaskSuspendAll+0x18>)
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	3301      	adds	r3, #1
 80120be:	4a03      	ldr	r2, [pc, #12]	; (80120cc <vTaskSuspendAll+0x18>)
 80120c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80120c2:	bf00      	nop
 80120c4:	46bd      	mov	sp, r7
 80120c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ca:	4770      	bx	lr
 80120cc:	2000247c 	.word	0x2000247c

080120d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b084      	sub	sp, #16
 80120d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80120d6:	2300      	movs	r3, #0
 80120d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80120da:	2300      	movs	r3, #0
 80120dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80120de:	4b42      	ldr	r3, [pc, #264]	; (80121e8 <xTaskResumeAll+0x118>)
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d10a      	bne.n	80120fc <xTaskResumeAll+0x2c>
	__asm volatile
 80120e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120ea:	f383 8811 	msr	BASEPRI, r3
 80120ee:	f3bf 8f6f 	isb	sy
 80120f2:	f3bf 8f4f 	dsb	sy
 80120f6:	603b      	str	r3, [r7, #0]
}
 80120f8:	bf00      	nop
 80120fa:	e7fe      	b.n	80120fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80120fc:	f001 fcca 	bl	8013a94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012100:	4b39      	ldr	r3, [pc, #228]	; (80121e8 <xTaskResumeAll+0x118>)
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	3b01      	subs	r3, #1
 8012106:	4a38      	ldr	r2, [pc, #224]	; (80121e8 <xTaskResumeAll+0x118>)
 8012108:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801210a:	4b37      	ldr	r3, [pc, #220]	; (80121e8 <xTaskResumeAll+0x118>)
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d162      	bne.n	80121d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012112:	4b36      	ldr	r3, [pc, #216]	; (80121ec <xTaskResumeAll+0x11c>)
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d05e      	beq.n	80121d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801211a:	e02f      	b.n	801217c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801211c:	4b34      	ldr	r3, [pc, #208]	; (80121f0 <xTaskResumeAll+0x120>)
 801211e:	68db      	ldr	r3, [r3, #12]
 8012120:	68db      	ldr	r3, [r3, #12]
 8012122:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	3318      	adds	r3, #24
 8012128:	4618      	mov	r0, r3
 801212a:	f7fe fc13 	bl	8010954 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	3304      	adds	r3, #4
 8012132:	4618      	mov	r0, r3
 8012134:	f7fe fc0e 	bl	8010954 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801213c:	4b2d      	ldr	r3, [pc, #180]	; (80121f4 <xTaskResumeAll+0x124>)
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	429a      	cmp	r2, r3
 8012142:	d903      	bls.n	801214c <xTaskResumeAll+0x7c>
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012148:	4a2a      	ldr	r2, [pc, #168]	; (80121f4 <xTaskResumeAll+0x124>)
 801214a:	6013      	str	r3, [r2, #0]
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012150:	4613      	mov	r3, r2
 8012152:	009b      	lsls	r3, r3, #2
 8012154:	4413      	add	r3, r2
 8012156:	009b      	lsls	r3, r3, #2
 8012158:	4a27      	ldr	r2, [pc, #156]	; (80121f8 <xTaskResumeAll+0x128>)
 801215a:	441a      	add	r2, r3
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	3304      	adds	r3, #4
 8012160:	4619      	mov	r1, r3
 8012162:	4610      	mov	r0, r2
 8012164:	f7fe fb99 	bl	801089a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801216c:	4b23      	ldr	r3, [pc, #140]	; (80121fc <xTaskResumeAll+0x12c>)
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012172:	429a      	cmp	r2, r3
 8012174:	d302      	bcc.n	801217c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8012176:	4b22      	ldr	r3, [pc, #136]	; (8012200 <xTaskResumeAll+0x130>)
 8012178:	2201      	movs	r2, #1
 801217a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801217c:	4b1c      	ldr	r3, [pc, #112]	; (80121f0 <xTaskResumeAll+0x120>)
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d1cb      	bne.n	801211c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d001      	beq.n	801218e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801218a:	f000 fb55 	bl	8012838 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801218e:	4b1d      	ldr	r3, [pc, #116]	; (8012204 <xTaskResumeAll+0x134>)
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d010      	beq.n	80121bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801219a:	f000 f847 	bl	801222c <xTaskIncrementTick>
 801219e:	4603      	mov	r3, r0
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d002      	beq.n	80121aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80121a4:	4b16      	ldr	r3, [pc, #88]	; (8012200 <xTaskResumeAll+0x130>)
 80121a6:	2201      	movs	r2, #1
 80121a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	3b01      	subs	r3, #1
 80121ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d1f1      	bne.n	801219a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80121b6:	4b13      	ldr	r3, [pc, #76]	; (8012204 <xTaskResumeAll+0x134>)
 80121b8:	2200      	movs	r2, #0
 80121ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80121bc:	4b10      	ldr	r3, [pc, #64]	; (8012200 <xTaskResumeAll+0x130>)
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d009      	beq.n	80121d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80121c4:	2301      	movs	r3, #1
 80121c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80121c8:	4b0f      	ldr	r3, [pc, #60]	; (8012208 <xTaskResumeAll+0x138>)
 80121ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121ce:	601a      	str	r2, [r3, #0]
 80121d0:	f3bf 8f4f 	dsb	sy
 80121d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80121d8:	f001 fc8c 	bl	8013af4 <vPortExitCritical>

	return xAlreadyYielded;
 80121dc:	68bb      	ldr	r3, [r7, #8]
}
 80121de:	4618      	mov	r0, r3
 80121e0:	3710      	adds	r7, #16
 80121e2:	46bd      	mov	sp, r7
 80121e4:	bd80      	pop	{r7, pc}
 80121e6:	bf00      	nop
 80121e8:	2000247c 	.word	0x2000247c
 80121ec:	20002454 	.word	0x20002454
 80121f0:	20002414 	.word	0x20002414
 80121f4:	2000245c 	.word	0x2000245c
 80121f8:	20001f84 	.word	0x20001f84
 80121fc:	20001f80 	.word	0x20001f80
 8012200:	20002468 	.word	0x20002468
 8012204:	20002464 	.word	0x20002464
 8012208:	e000ed04 	.word	0xe000ed04

0801220c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801220c:	b480      	push	{r7}
 801220e:	b083      	sub	sp, #12
 8012210:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012212:	4b05      	ldr	r3, [pc, #20]	; (8012228 <xTaskGetTickCount+0x1c>)
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012218:	687b      	ldr	r3, [r7, #4]
}
 801221a:	4618      	mov	r0, r3
 801221c:	370c      	adds	r7, #12
 801221e:	46bd      	mov	sp, r7
 8012220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012224:	4770      	bx	lr
 8012226:	bf00      	nop
 8012228:	20002458 	.word	0x20002458

0801222c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b086      	sub	sp, #24
 8012230:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012232:	2300      	movs	r3, #0
 8012234:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012236:	4b4f      	ldr	r3, [pc, #316]	; (8012374 <xTaskIncrementTick+0x148>)
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	2b00      	cmp	r3, #0
 801223c:	f040 808f 	bne.w	801235e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012240:	4b4d      	ldr	r3, [pc, #308]	; (8012378 <xTaskIncrementTick+0x14c>)
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	3301      	adds	r3, #1
 8012246:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012248:	4a4b      	ldr	r2, [pc, #300]	; (8012378 <xTaskIncrementTick+0x14c>)
 801224a:	693b      	ldr	r3, [r7, #16]
 801224c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801224e:	693b      	ldr	r3, [r7, #16]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d120      	bne.n	8012296 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012254:	4b49      	ldr	r3, [pc, #292]	; (801237c <xTaskIncrementTick+0x150>)
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d00a      	beq.n	8012274 <xTaskIncrementTick+0x48>
	__asm volatile
 801225e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012262:	f383 8811 	msr	BASEPRI, r3
 8012266:	f3bf 8f6f 	isb	sy
 801226a:	f3bf 8f4f 	dsb	sy
 801226e:	603b      	str	r3, [r7, #0]
}
 8012270:	bf00      	nop
 8012272:	e7fe      	b.n	8012272 <xTaskIncrementTick+0x46>
 8012274:	4b41      	ldr	r3, [pc, #260]	; (801237c <xTaskIncrementTick+0x150>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	60fb      	str	r3, [r7, #12]
 801227a:	4b41      	ldr	r3, [pc, #260]	; (8012380 <xTaskIncrementTick+0x154>)
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	4a3f      	ldr	r2, [pc, #252]	; (801237c <xTaskIncrementTick+0x150>)
 8012280:	6013      	str	r3, [r2, #0]
 8012282:	4a3f      	ldr	r2, [pc, #252]	; (8012380 <xTaskIncrementTick+0x154>)
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	6013      	str	r3, [r2, #0]
 8012288:	4b3e      	ldr	r3, [pc, #248]	; (8012384 <xTaskIncrementTick+0x158>)
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	3301      	adds	r3, #1
 801228e:	4a3d      	ldr	r2, [pc, #244]	; (8012384 <xTaskIncrementTick+0x158>)
 8012290:	6013      	str	r3, [r2, #0]
 8012292:	f000 fad1 	bl	8012838 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012296:	4b3c      	ldr	r3, [pc, #240]	; (8012388 <xTaskIncrementTick+0x15c>)
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	693a      	ldr	r2, [r7, #16]
 801229c:	429a      	cmp	r2, r3
 801229e:	d349      	bcc.n	8012334 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80122a0:	4b36      	ldr	r3, [pc, #216]	; (801237c <xTaskIncrementTick+0x150>)
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d104      	bne.n	80122b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122aa:	4b37      	ldr	r3, [pc, #220]	; (8012388 <xTaskIncrementTick+0x15c>)
 80122ac:	f04f 32ff 	mov.w	r2, #4294967295
 80122b0:	601a      	str	r2, [r3, #0]
					break;
 80122b2:	e03f      	b.n	8012334 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80122b4:	4b31      	ldr	r3, [pc, #196]	; (801237c <xTaskIncrementTick+0x150>)
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	68db      	ldr	r3, [r3, #12]
 80122ba:	68db      	ldr	r3, [r3, #12]
 80122bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80122be:	68bb      	ldr	r3, [r7, #8]
 80122c0:	685b      	ldr	r3, [r3, #4]
 80122c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80122c4:	693a      	ldr	r2, [r7, #16]
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	429a      	cmp	r2, r3
 80122ca:	d203      	bcs.n	80122d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80122cc:	4a2e      	ldr	r2, [pc, #184]	; (8012388 <xTaskIncrementTick+0x15c>)
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80122d2:	e02f      	b.n	8012334 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80122d4:	68bb      	ldr	r3, [r7, #8]
 80122d6:	3304      	adds	r3, #4
 80122d8:	4618      	mov	r0, r3
 80122da:	f7fe fb3b 	bl	8010954 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80122de:	68bb      	ldr	r3, [r7, #8]
 80122e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d004      	beq.n	80122f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80122e6:	68bb      	ldr	r3, [r7, #8]
 80122e8:	3318      	adds	r3, #24
 80122ea:	4618      	mov	r0, r3
 80122ec:	f7fe fb32 	bl	8010954 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80122f0:	68bb      	ldr	r3, [r7, #8]
 80122f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122f4:	4b25      	ldr	r3, [pc, #148]	; (801238c <xTaskIncrementTick+0x160>)
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	429a      	cmp	r2, r3
 80122fa:	d903      	bls.n	8012304 <xTaskIncrementTick+0xd8>
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012300:	4a22      	ldr	r2, [pc, #136]	; (801238c <xTaskIncrementTick+0x160>)
 8012302:	6013      	str	r3, [r2, #0]
 8012304:	68bb      	ldr	r3, [r7, #8]
 8012306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012308:	4613      	mov	r3, r2
 801230a:	009b      	lsls	r3, r3, #2
 801230c:	4413      	add	r3, r2
 801230e:	009b      	lsls	r3, r3, #2
 8012310:	4a1f      	ldr	r2, [pc, #124]	; (8012390 <xTaskIncrementTick+0x164>)
 8012312:	441a      	add	r2, r3
 8012314:	68bb      	ldr	r3, [r7, #8]
 8012316:	3304      	adds	r3, #4
 8012318:	4619      	mov	r1, r3
 801231a:	4610      	mov	r0, r2
 801231c:	f7fe fabd 	bl	801089a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012320:	68bb      	ldr	r3, [r7, #8]
 8012322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012324:	4b1b      	ldr	r3, [pc, #108]	; (8012394 <xTaskIncrementTick+0x168>)
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801232a:	429a      	cmp	r2, r3
 801232c:	d3b8      	bcc.n	80122a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801232e:	2301      	movs	r3, #1
 8012330:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012332:	e7b5      	b.n	80122a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012334:	4b17      	ldr	r3, [pc, #92]	; (8012394 <xTaskIncrementTick+0x168>)
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801233a:	4915      	ldr	r1, [pc, #84]	; (8012390 <xTaskIncrementTick+0x164>)
 801233c:	4613      	mov	r3, r2
 801233e:	009b      	lsls	r3, r3, #2
 8012340:	4413      	add	r3, r2
 8012342:	009b      	lsls	r3, r3, #2
 8012344:	440b      	add	r3, r1
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	2b01      	cmp	r3, #1
 801234a:	d901      	bls.n	8012350 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801234c:	2301      	movs	r3, #1
 801234e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012350:	4b11      	ldr	r3, [pc, #68]	; (8012398 <xTaskIncrementTick+0x16c>)
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d007      	beq.n	8012368 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8012358:	2301      	movs	r3, #1
 801235a:	617b      	str	r3, [r7, #20]
 801235c:	e004      	b.n	8012368 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801235e:	4b0f      	ldr	r3, [pc, #60]	; (801239c <xTaskIncrementTick+0x170>)
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	3301      	adds	r3, #1
 8012364:	4a0d      	ldr	r2, [pc, #52]	; (801239c <xTaskIncrementTick+0x170>)
 8012366:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012368:	697b      	ldr	r3, [r7, #20]
}
 801236a:	4618      	mov	r0, r3
 801236c:	3718      	adds	r7, #24
 801236e:	46bd      	mov	sp, r7
 8012370:	bd80      	pop	{r7, pc}
 8012372:	bf00      	nop
 8012374:	2000247c 	.word	0x2000247c
 8012378:	20002458 	.word	0x20002458
 801237c:	2000240c 	.word	0x2000240c
 8012380:	20002410 	.word	0x20002410
 8012384:	2000246c 	.word	0x2000246c
 8012388:	20002474 	.word	0x20002474
 801238c:	2000245c 	.word	0x2000245c
 8012390:	20001f84 	.word	0x20001f84
 8012394:	20001f80 	.word	0x20001f80
 8012398:	20002468 	.word	0x20002468
 801239c:	20002464 	.word	0x20002464

080123a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80123a0:	b480      	push	{r7}
 80123a2:	b085      	sub	sp, #20
 80123a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80123a6:	4b28      	ldr	r3, [pc, #160]	; (8012448 <vTaskSwitchContext+0xa8>)
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d003      	beq.n	80123b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80123ae:	4b27      	ldr	r3, [pc, #156]	; (801244c <vTaskSwitchContext+0xac>)
 80123b0:	2201      	movs	r2, #1
 80123b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80123b4:	e041      	b.n	801243a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80123b6:	4b25      	ldr	r3, [pc, #148]	; (801244c <vTaskSwitchContext+0xac>)
 80123b8:	2200      	movs	r2, #0
 80123ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80123bc:	4b24      	ldr	r3, [pc, #144]	; (8012450 <vTaskSwitchContext+0xb0>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	60fb      	str	r3, [r7, #12]
 80123c2:	e010      	b.n	80123e6 <vTaskSwitchContext+0x46>
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d10a      	bne.n	80123e0 <vTaskSwitchContext+0x40>
	__asm volatile
 80123ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123ce:	f383 8811 	msr	BASEPRI, r3
 80123d2:	f3bf 8f6f 	isb	sy
 80123d6:	f3bf 8f4f 	dsb	sy
 80123da:	607b      	str	r3, [r7, #4]
}
 80123dc:	bf00      	nop
 80123de:	e7fe      	b.n	80123de <vTaskSwitchContext+0x3e>
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	3b01      	subs	r3, #1
 80123e4:	60fb      	str	r3, [r7, #12]
 80123e6:	491b      	ldr	r1, [pc, #108]	; (8012454 <vTaskSwitchContext+0xb4>)
 80123e8:	68fa      	ldr	r2, [r7, #12]
 80123ea:	4613      	mov	r3, r2
 80123ec:	009b      	lsls	r3, r3, #2
 80123ee:	4413      	add	r3, r2
 80123f0:	009b      	lsls	r3, r3, #2
 80123f2:	440b      	add	r3, r1
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d0e4      	beq.n	80123c4 <vTaskSwitchContext+0x24>
 80123fa:	68fa      	ldr	r2, [r7, #12]
 80123fc:	4613      	mov	r3, r2
 80123fe:	009b      	lsls	r3, r3, #2
 8012400:	4413      	add	r3, r2
 8012402:	009b      	lsls	r3, r3, #2
 8012404:	4a13      	ldr	r2, [pc, #76]	; (8012454 <vTaskSwitchContext+0xb4>)
 8012406:	4413      	add	r3, r2
 8012408:	60bb      	str	r3, [r7, #8]
 801240a:	68bb      	ldr	r3, [r7, #8]
 801240c:	685b      	ldr	r3, [r3, #4]
 801240e:	685a      	ldr	r2, [r3, #4]
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	605a      	str	r2, [r3, #4]
 8012414:	68bb      	ldr	r3, [r7, #8]
 8012416:	685a      	ldr	r2, [r3, #4]
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	3308      	adds	r3, #8
 801241c:	429a      	cmp	r2, r3
 801241e:	d104      	bne.n	801242a <vTaskSwitchContext+0x8a>
 8012420:	68bb      	ldr	r3, [r7, #8]
 8012422:	685b      	ldr	r3, [r3, #4]
 8012424:	685a      	ldr	r2, [r3, #4]
 8012426:	68bb      	ldr	r3, [r7, #8]
 8012428:	605a      	str	r2, [r3, #4]
 801242a:	68bb      	ldr	r3, [r7, #8]
 801242c:	685b      	ldr	r3, [r3, #4]
 801242e:	68db      	ldr	r3, [r3, #12]
 8012430:	4a09      	ldr	r2, [pc, #36]	; (8012458 <vTaskSwitchContext+0xb8>)
 8012432:	6013      	str	r3, [r2, #0]
 8012434:	4a06      	ldr	r2, [pc, #24]	; (8012450 <vTaskSwitchContext+0xb0>)
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	6013      	str	r3, [r2, #0]
}
 801243a:	bf00      	nop
 801243c:	3714      	adds	r7, #20
 801243e:	46bd      	mov	sp, r7
 8012440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012444:	4770      	bx	lr
 8012446:	bf00      	nop
 8012448:	2000247c 	.word	0x2000247c
 801244c:	20002468 	.word	0x20002468
 8012450:	2000245c 	.word	0x2000245c
 8012454:	20001f84 	.word	0x20001f84
 8012458:	20001f80 	.word	0x20001f80

0801245c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801245c:	b580      	push	{r7, lr}
 801245e:	b084      	sub	sp, #16
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
 8012464:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d10a      	bne.n	8012482 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801246c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012470:	f383 8811 	msr	BASEPRI, r3
 8012474:	f3bf 8f6f 	isb	sy
 8012478:	f3bf 8f4f 	dsb	sy
 801247c:	60fb      	str	r3, [r7, #12]
}
 801247e:	bf00      	nop
 8012480:	e7fe      	b.n	8012480 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012482:	4b07      	ldr	r3, [pc, #28]	; (80124a0 <vTaskPlaceOnEventList+0x44>)
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	3318      	adds	r3, #24
 8012488:	4619      	mov	r1, r3
 801248a:	6878      	ldr	r0, [r7, #4]
 801248c:	f7fe fa29 	bl	80108e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012490:	2101      	movs	r1, #1
 8012492:	6838      	ldr	r0, [r7, #0]
 8012494:	f000 fd78 	bl	8012f88 <prvAddCurrentTaskToDelayedList>
}
 8012498:	bf00      	nop
 801249a:	3710      	adds	r7, #16
 801249c:	46bd      	mov	sp, r7
 801249e:	bd80      	pop	{r7, pc}
 80124a0:	20001f80 	.word	0x20001f80

080124a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b086      	sub	sp, #24
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	60f8      	str	r0, [r7, #12]
 80124ac:	60b9      	str	r1, [r7, #8]
 80124ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d10a      	bne.n	80124cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80124b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ba:	f383 8811 	msr	BASEPRI, r3
 80124be:	f3bf 8f6f 	isb	sy
 80124c2:	f3bf 8f4f 	dsb	sy
 80124c6:	617b      	str	r3, [r7, #20]
}
 80124c8:	bf00      	nop
 80124ca:	e7fe      	b.n	80124ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80124cc:	4b0a      	ldr	r3, [pc, #40]	; (80124f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	3318      	adds	r3, #24
 80124d2:	4619      	mov	r1, r3
 80124d4:	68f8      	ldr	r0, [r7, #12]
 80124d6:	f7fe f9e0 	bl	801089a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d002      	beq.n	80124e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80124e0:	f04f 33ff 	mov.w	r3, #4294967295
 80124e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80124e6:	6879      	ldr	r1, [r7, #4]
 80124e8:	68b8      	ldr	r0, [r7, #8]
 80124ea:	f000 fd4d 	bl	8012f88 <prvAddCurrentTaskToDelayedList>
	}
 80124ee:	bf00      	nop
 80124f0:	3718      	adds	r7, #24
 80124f2:	46bd      	mov	sp, r7
 80124f4:	bd80      	pop	{r7, pc}
 80124f6:	bf00      	nop
 80124f8:	20001f80 	.word	0x20001f80

080124fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b086      	sub	sp, #24
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	68db      	ldr	r3, [r3, #12]
 8012508:	68db      	ldr	r3, [r3, #12]
 801250a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801250c:	693b      	ldr	r3, [r7, #16]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d10a      	bne.n	8012528 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8012512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012516:	f383 8811 	msr	BASEPRI, r3
 801251a:	f3bf 8f6f 	isb	sy
 801251e:	f3bf 8f4f 	dsb	sy
 8012522:	60fb      	str	r3, [r7, #12]
}
 8012524:	bf00      	nop
 8012526:	e7fe      	b.n	8012526 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012528:	693b      	ldr	r3, [r7, #16]
 801252a:	3318      	adds	r3, #24
 801252c:	4618      	mov	r0, r3
 801252e:	f7fe fa11 	bl	8010954 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012532:	4b1e      	ldr	r3, [pc, #120]	; (80125ac <xTaskRemoveFromEventList+0xb0>)
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d11d      	bne.n	8012576 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801253a:	693b      	ldr	r3, [r7, #16]
 801253c:	3304      	adds	r3, #4
 801253e:	4618      	mov	r0, r3
 8012540:	f7fe fa08 	bl	8010954 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012544:	693b      	ldr	r3, [r7, #16]
 8012546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012548:	4b19      	ldr	r3, [pc, #100]	; (80125b0 <xTaskRemoveFromEventList+0xb4>)
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	429a      	cmp	r2, r3
 801254e:	d903      	bls.n	8012558 <xTaskRemoveFromEventList+0x5c>
 8012550:	693b      	ldr	r3, [r7, #16]
 8012552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012554:	4a16      	ldr	r2, [pc, #88]	; (80125b0 <xTaskRemoveFromEventList+0xb4>)
 8012556:	6013      	str	r3, [r2, #0]
 8012558:	693b      	ldr	r3, [r7, #16]
 801255a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801255c:	4613      	mov	r3, r2
 801255e:	009b      	lsls	r3, r3, #2
 8012560:	4413      	add	r3, r2
 8012562:	009b      	lsls	r3, r3, #2
 8012564:	4a13      	ldr	r2, [pc, #76]	; (80125b4 <xTaskRemoveFromEventList+0xb8>)
 8012566:	441a      	add	r2, r3
 8012568:	693b      	ldr	r3, [r7, #16]
 801256a:	3304      	adds	r3, #4
 801256c:	4619      	mov	r1, r3
 801256e:	4610      	mov	r0, r2
 8012570:	f7fe f993 	bl	801089a <vListInsertEnd>
 8012574:	e005      	b.n	8012582 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012576:	693b      	ldr	r3, [r7, #16]
 8012578:	3318      	adds	r3, #24
 801257a:	4619      	mov	r1, r3
 801257c:	480e      	ldr	r0, [pc, #56]	; (80125b8 <xTaskRemoveFromEventList+0xbc>)
 801257e:	f7fe f98c 	bl	801089a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012582:	693b      	ldr	r3, [r7, #16]
 8012584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012586:	4b0d      	ldr	r3, [pc, #52]	; (80125bc <xTaskRemoveFromEventList+0xc0>)
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801258c:	429a      	cmp	r2, r3
 801258e:	d905      	bls.n	801259c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012590:	2301      	movs	r3, #1
 8012592:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012594:	4b0a      	ldr	r3, [pc, #40]	; (80125c0 <xTaskRemoveFromEventList+0xc4>)
 8012596:	2201      	movs	r2, #1
 8012598:	601a      	str	r2, [r3, #0]
 801259a:	e001      	b.n	80125a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801259c:	2300      	movs	r3, #0
 801259e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80125a0:	697b      	ldr	r3, [r7, #20]
}
 80125a2:	4618      	mov	r0, r3
 80125a4:	3718      	adds	r7, #24
 80125a6:	46bd      	mov	sp, r7
 80125a8:	bd80      	pop	{r7, pc}
 80125aa:	bf00      	nop
 80125ac:	2000247c 	.word	0x2000247c
 80125b0:	2000245c 	.word	0x2000245c
 80125b4:	20001f84 	.word	0x20001f84
 80125b8:	20002414 	.word	0x20002414
 80125bc:	20001f80 	.word	0x20001f80
 80125c0:	20002468 	.word	0x20002468

080125c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80125c4:	b480      	push	{r7}
 80125c6:	b083      	sub	sp, #12
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80125cc:	4b06      	ldr	r3, [pc, #24]	; (80125e8 <vTaskInternalSetTimeOutState+0x24>)
 80125ce:	681a      	ldr	r2, [r3, #0]
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80125d4:	4b05      	ldr	r3, [pc, #20]	; (80125ec <vTaskInternalSetTimeOutState+0x28>)
 80125d6:	681a      	ldr	r2, [r3, #0]
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	605a      	str	r2, [r3, #4]
}
 80125dc:	bf00      	nop
 80125de:	370c      	adds	r7, #12
 80125e0:	46bd      	mov	sp, r7
 80125e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e6:	4770      	bx	lr
 80125e8:	2000246c 	.word	0x2000246c
 80125ec:	20002458 	.word	0x20002458

080125f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b088      	sub	sp, #32
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
 80125f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d10a      	bne.n	8012616 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012604:	f383 8811 	msr	BASEPRI, r3
 8012608:	f3bf 8f6f 	isb	sy
 801260c:	f3bf 8f4f 	dsb	sy
 8012610:	613b      	str	r3, [r7, #16]
}
 8012612:	bf00      	nop
 8012614:	e7fe      	b.n	8012614 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d10a      	bne.n	8012632 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801261c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012620:	f383 8811 	msr	BASEPRI, r3
 8012624:	f3bf 8f6f 	isb	sy
 8012628:	f3bf 8f4f 	dsb	sy
 801262c:	60fb      	str	r3, [r7, #12]
}
 801262e:	bf00      	nop
 8012630:	e7fe      	b.n	8012630 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8012632:	f001 fa2f 	bl	8013a94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012636:	4b1d      	ldr	r3, [pc, #116]	; (80126ac <xTaskCheckForTimeOut+0xbc>)
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	685b      	ldr	r3, [r3, #4]
 8012640:	69ba      	ldr	r2, [r7, #24]
 8012642:	1ad3      	subs	r3, r2, r3
 8012644:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012646:	683b      	ldr	r3, [r7, #0]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801264e:	d102      	bne.n	8012656 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012650:	2300      	movs	r3, #0
 8012652:	61fb      	str	r3, [r7, #28]
 8012654:	e023      	b.n	801269e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	681a      	ldr	r2, [r3, #0]
 801265a:	4b15      	ldr	r3, [pc, #84]	; (80126b0 <xTaskCheckForTimeOut+0xc0>)
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	429a      	cmp	r2, r3
 8012660:	d007      	beq.n	8012672 <xTaskCheckForTimeOut+0x82>
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	685b      	ldr	r3, [r3, #4]
 8012666:	69ba      	ldr	r2, [r7, #24]
 8012668:	429a      	cmp	r2, r3
 801266a:	d302      	bcc.n	8012672 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801266c:	2301      	movs	r3, #1
 801266e:	61fb      	str	r3, [r7, #28]
 8012670:	e015      	b.n	801269e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012672:	683b      	ldr	r3, [r7, #0]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	697a      	ldr	r2, [r7, #20]
 8012678:	429a      	cmp	r2, r3
 801267a:	d20b      	bcs.n	8012694 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801267c:	683b      	ldr	r3, [r7, #0]
 801267e:	681a      	ldr	r2, [r3, #0]
 8012680:	697b      	ldr	r3, [r7, #20]
 8012682:	1ad2      	subs	r2, r2, r3
 8012684:	683b      	ldr	r3, [r7, #0]
 8012686:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f7ff ff9b 	bl	80125c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801268e:	2300      	movs	r3, #0
 8012690:	61fb      	str	r3, [r7, #28]
 8012692:	e004      	b.n	801269e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012694:	683b      	ldr	r3, [r7, #0]
 8012696:	2200      	movs	r2, #0
 8012698:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801269a:	2301      	movs	r3, #1
 801269c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801269e:	f001 fa29 	bl	8013af4 <vPortExitCritical>

	return xReturn;
 80126a2:	69fb      	ldr	r3, [r7, #28]
}
 80126a4:	4618      	mov	r0, r3
 80126a6:	3720      	adds	r7, #32
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd80      	pop	{r7, pc}
 80126ac:	20002458 	.word	0x20002458
 80126b0:	2000246c 	.word	0x2000246c

080126b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80126b4:	b480      	push	{r7}
 80126b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80126b8:	4b03      	ldr	r3, [pc, #12]	; (80126c8 <vTaskMissedYield+0x14>)
 80126ba:	2201      	movs	r2, #1
 80126bc:	601a      	str	r2, [r3, #0]
}
 80126be:	bf00      	nop
 80126c0:	46bd      	mov	sp, r7
 80126c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c6:	4770      	bx	lr
 80126c8:	20002468 	.word	0x20002468

080126cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b082      	sub	sp, #8
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80126d4:	f000 f852 	bl	801277c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80126d8:	4b06      	ldr	r3, [pc, #24]	; (80126f4 <prvIdleTask+0x28>)
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	2b01      	cmp	r3, #1
 80126de:	d9f9      	bls.n	80126d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80126e0:	4b05      	ldr	r3, [pc, #20]	; (80126f8 <prvIdleTask+0x2c>)
 80126e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80126e6:	601a      	str	r2, [r3, #0]
 80126e8:	f3bf 8f4f 	dsb	sy
 80126ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80126f0:	e7f0      	b.n	80126d4 <prvIdleTask+0x8>
 80126f2:	bf00      	nop
 80126f4:	20001f84 	.word	0x20001f84
 80126f8:	e000ed04 	.word	0xe000ed04

080126fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b082      	sub	sp, #8
 8012700:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012702:	2300      	movs	r3, #0
 8012704:	607b      	str	r3, [r7, #4]
 8012706:	e00c      	b.n	8012722 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012708:	687a      	ldr	r2, [r7, #4]
 801270a:	4613      	mov	r3, r2
 801270c:	009b      	lsls	r3, r3, #2
 801270e:	4413      	add	r3, r2
 8012710:	009b      	lsls	r3, r3, #2
 8012712:	4a12      	ldr	r2, [pc, #72]	; (801275c <prvInitialiseTaskLists+0x60>)
 8012714:	4413      	add	r3, r2
 8012716:	4618      	mov	r0, r3
 8012718:	f7fe f892 	bl	8010840 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	3301      	adds	r3, #1
 8012720:	607b      	str	r3, [r7, #4]
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	2b37      	cmp	r3, #55	; 0x37
 8012726:	d9ef      	bls.n	8012708 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012728:	480d      	ldr	r0, [pc, #52]	; (8012760 <prvInitialiseTaskLists+0x64>)
 801272a:	f7fe f889 	bl	8010840 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801272e:	480d      	ldr	r0, [pc, #52]	; (8012764 <prvInitialiseTaskLists+0x68>)
 8012730:	f7fe f886 	bl	8010840 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012734:	480c      	ldr	r0, [pc, #48]	; (8012768 <prvInitialiseTaskLists+0x6c>)
 8012736:	f7fe f883 	bl	8010840 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801273a:	480c      	ldr	r0, [pc, #48]	; (801276c <prvInitialiseTaskLists+0x70>)
 801273c:	f7fe f880 	bl	8010840 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012740:	480b      	ldr	r0, [pc, #44]	; (8012770 <prvInitialiseTaskLists+0x74>)
 8012742:	f7fe f87d 	bl	8010840 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012746:	4b0b      	ldr	r3, [pc, #44]	; (8012774 <prvInitialiseTaskLists+0x78>)
 8012748:	4a05      	ldr	r2, [pc, #20]	; (8012760 <prvInitialiseTaskLists+0x64>)
 801274a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801274c:	4b0a      	ldr	r3, [pc, #40]	; (8012778 <prvInitialiseTaskLists+0x7c>)
 801274e:	4a05      	ldr	r2, [pc, #20]	; (8012764 <prvInitialiseTaskLists+0x68>)
 8012750:	601a      	str	r2, [r3, #0]
}
 8012752:	bf00      	nop
 8012754:	3708      	adds	r7, #8
 8012756:	46bd      	mov	sp, r7
 8012758:	bd80      	pop	{r7, pc}
 801275a:	bf00      	nop
 801275c:	20001f84 	.word	0x20001f84
 8012760:	200023e4 	.word	0x200023e4
 8012764:	200023f8 	.word	0x200023f8
 8012768:	20002414 	.word	0x20002414
 801276c:	20002428 	.word	0x20002428
 8012770:	20002440 	.word	0x20002440
 8012774:	2000240c 	.word	0x2000240c
 8012778:	20002410 	.word	0x20002410

0801277c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801277c:	b580      	push	{r7, lr}
 801277e:	b082      	sub	sp, #8
 8012780:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012782:	e019      	b.n	80127b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012784:	f001 f986 	bl	8013a94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012788:	4b10      	ldr	r3, [pc, #64]	; (80127cc <prvCheckTasksWaitingTermination+0x50>)
 801278a:	68db      	ldr	r3, [r3, #12]
 801278c:	68db      	ldr	r3, [r3, #12]
 801278e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	3304      	adds	r3, #4
 8012794:	4618      	mov	r0, r3
 8012796:	f7fe f8dd 	bl	8010954 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801279a:	4b0d      	ldr	r3, [pc, #52]	; (80127d0 <prvCheckTasksWaitingTermination+0x54>)
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	3b01      	subs	r3, #1
 80127a0:	4a0b      	ldr	r2, [pc, #44]	; (80127d0 <prvCheckTasksWaitingTermination+0x54>)
 80127a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80127a4:	4b0b      	ldr	r3, [pc, #44]	; (80127d4 <prvCheckTasksWaitingTermination+0x58>)
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	3b01      	subs	r3, #1
 80127aa:	4a0a      	ldr	r2, [pc, #40]	; (80127d4 <prvCheckTasksWaitingTermination+0x58>)
 80127ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80127ae:	f001 f9a1 	bl	8013af4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80127b2:	6878      	ldr	r0, [r7, #4]
 80127b4:	f000 f810 	bl	80127d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80127b8:	4b06      	ldr	r3, [pc, #24]	; (80127d4 <prvCheckTasksWaitingTermination+0x58>)
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d1e1      	bne.n	8012784 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80127c0:	bf00      	nop
 80127c2:	bf00      	nop
 80127c4:	3708      	adds	r7, #8
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}
 80127ca:	bf00      	nop
 80127cc:	20002428 	.word	0x20002428
 80127d0:	20002454 	.word	0x20002454
 80127d4:	2000243c 	.word	0x2000243c

080127d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b084      	sub	sp, #16
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d108      	bne.n	80127fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127ee:	4618      	mov	r0, r3
 80127f0:	f001 fb3e 	bl	8013e70 <vPortFree>
				vPortFree( pxTCB );
 80127f4:	6878      	ldr	r0, [r7, #4]
 80127f6:	f001 fb3b 	bl	8013e70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80127fa:	e018      	b.n	801282e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012802:	2b01      	cmp	r3, #1
 8012804:	d103      	bne.n	801280e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012806:	6878      	ldr	r0, [r7, #4]
 8012808:	f001 fb32 	bl	8013e70 <vPortFree>
	}
 801280c:	e00f      	b.n	801282e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012814:	2b02      	cmp	r3, #2
 8012816:	d00a      	beq.n	801282e <prvDeleteTCB+0x56>
	__asm volatile
 8012818:	f04f 0350 	mov.w	r3, #80	; 0x50
 801281c:	f383 8811 	msr	BASEPRI, r3
 8012820:	f3bf 8f6f 	isb	sy
 8012824:	f3bf 8f4f 	dsb	sy
 8012828:	60fb      	str	r3, [r7, #12]
}
 801282a:	bf00      	nop
 801282c:	e7fe      	b.n	801282c <prvDeleteTCB+0x54>
	}
 801282e:	bf00      	nop
 8012830:	3710      	adds	r7, #16
 8012832:	46bd      	mov	sp, r7
 8012834:	bd80      	pop	{r7, pc}
	...

08012838 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012838:	b480      	push	{r7}
 801283a:	b083      	sub	sp, #12
 801283c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801283e:	4b0c      	ldr	r3, [pc, #48]	; (8012870 <prvResetNextTaskUnblockTime+0x38>)
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d104      	bne.n	8012852 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012848:	4b0a      	ldr	r3, [pc, #40]	; (8012874 <prvResetNextTaskUnblockTime+0x3c>)
 801284a:	f04f 32ff 	mov.w	r2, #4294967295
 801284e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012850:	e008      	b.n	8012864 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012852:	4b07      	ldr	r3, [pc, #28]	; (8012870 <prvResetNextTaskUnblockTime+0x38>)
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	68db      	ldr	r3, [r3, #12]
 8012858:	68db      	ldr	r3, [r3, #12]
 801285a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	685b      	ldr	r3, [r3, #4]
 8012860:	4a04      	ldr	r2, [pc, #16]	; (8012874 <prvResetNextTaskUnblockTime+0x3c>)
 8012862:	6013      	str	r3, [r2, #0]
}
 8012864:	bf00      	nop
 8012866:	370c      	adds	r7, #12
 8012868:	46bd      	mov	sp, r7
 801286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286e:	4770      	bx	lr
 8012870:	2000240c 	.word	0x2000240c
 8012874:	20002474 	.word	0x20002474

08012878 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8012878:	b480      	push	{r7}
 801287a:	b083      	sub	sp, #12
 801287c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801287e:	4b05      	ldr	r3, [pc, #20]	; (8012894 <xTaskGetCurrentTaskHandle+0x1c>)
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	607b      	str	r3, [r7, #4]

		return xReturn;
 8012884:	687b      	ldr	r3, [r7, #4]
	}
 8012886:	4618      	mov	r0, r3
 8012888:	370c      	adds	r7, #12
 801288a:	46bd      	mov	sp, r7
 801288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012890:	4770      	bx	lr
 8012892:	bf00      	nop
 8012894:	20001f80 	.word	0x20001f80

08012898 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012898:	b480      	push	{r7}
 801289a:	b083      	sub	sp, #12
 801289c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801289e:	4b0b      	ldr	r3, [pc, #44]	; (80128cc <xTaskGetSchedulerState+0x34>)
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d102      	bne.n	80128ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80128a6:	2301      	movs	r3, #1
 80128a8:	607b      	str	r3, [r7, #4]
 80128aa:	e008      	b.n	80128be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80128ac:	4b08      	ldr	r3, [pc, #32]	; (80128d0 <xTaskGetSchedulerState+0x38>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d102      	bne.n	80128ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80128b4:	2302      	movs	r3, #2
 80128b6:	607b      	str	r3, [r7, #4]
 80128b8:	e001      	b.n	80128be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80128ba:	2300      	movs	r3, #0
 80128bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80128be:	687b      	ldr	r3, [r7, #4]
	}
 80128c0:	4618      	mov	r0, r3
 80128c2:	370c      	adds	r7, #12
 80128c4:	46bd      	mov	sp, r7
 80128c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ca:	4770      	bx	lr
 80128cc:	20002460 	.word	0x20002460
 80128d0:	2000247c 	.word	0x2000247c

080128d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b084      	sub	sp, #16
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80128e0:	2300      	movs	r3, #0
 80128e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d051      	beq.n	801298e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80128ea:	68bb      	ldr	r3, [r7, #8]
 80128ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128ee:	4b2a      	ldr	r3, [pc, #168]	; (8012998 <xTaskPriorityInherit+0xc4>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128f4:	429a      	cmp	r2, r3
 80128f6:	d241      	bcs.n	801297c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80128f8:	68bb      	ldr	r3, [r7, #8]
 80128fa:	699b      	ldr	r3, [r3, #24]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	db06      	blt.n	801290e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012900:	4b25      	ldr	r3, [pc, #148]	; (8012998 <xTaskPriorityInherit+0xc4>)
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012906:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801290a:	68bb      	ldr	r3, [r7, #8]
 801290c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801290e:	68bb      	ldr	r3, [r7, #8]
 8012910:	6959      	ldr	r1, [r3, #20]
 8012912:	68bb      	ldr	r3, [r7, #8]
 8012914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012916:	4613      	mov	r3, r2
 8012918:	009b      	lsls	r3, r3, #2
 801291a:	4413      	add	r3, r2
 801291c:	009b      	lsls	r3, r3, #2
 801291e:	4a1f      	ldr	r2, [pc, #124]	; (801299c <xTaskPriorityInherit+0xc8>)
 8012920:	4413      	add	r3, r2
 8012922:	4299      	cmp	r1, r3
 8012924:	d122      	bne.n	801296c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012926:	68bb      	ldr	r3, [r7, #8]
 8012928:	3304      	adds	r3, #4
 801292a:	4618      	mov	r0, r3
 801292c:	f7fe f812 	bl	8010954 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012930:	4b19      	ldr	r3, [pc, #100]	; (8012998 <xTaskPriorityInherit+0xc4>)
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012936:	68bb      	ldr	r3, [r7, #8]
 8012938:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801293a:	68bb      	ldr	r3, [r7, #8]
 801293c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801293e:	4b18      	ldr	r3, [pc, #96]	; (80129a0 <xTaskPriorityInherit+0xcc>)
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	429a      	cmp	r2, r3
 8012944:	d903      	bls.n	801294e <xTaskPriorityInherit+0x7a>
 8012946:	68bb      	ldr	r3, [r7, #8]
 8012948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801294a:	4a15      	ldr	r2, [pc, #84]	; (80129a0 <xTaskPriorityInherit+0xcc>)
 801294c:	6013      	str	r3, [r2, #0]
 801294e:	68bb      	ldr	r3, [r7, #8]
 8012950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012952:	4613      	mov	r3, r2
 8012954:	009b      	lsls	r3, r3, #2
 8012956:	4413      	add	r3, r2
 8012958:	009b      	lsls	r3, r3, #2
 801295a:	4a10      	ldr	r2, [pc, #64]	; (801299c <xTaskPriorityInherit+0xc8>)
 801295c:	441a      	add	r2, r3
 801295e:	68bb      	ldr	r3, [r7, #8]
 8012960:	3304      	adds	r3, #4
 8012962:	4619      	mov	r1, r3
 8012964:	4610      	mov	r0, r2
 8012966:	f7fd ff98 	bl	801089a <vListInsertEnd>
 801296a:	e004      	b.n	8012976 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801296c:	4b0a      	ldr	r3, [pc, #40]	; (8012998 <xTaskPriorityInherit+0xc4>)
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012972:	68bb      	ldr	r3, [r7, #8]
 8012974:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012976:	2301      	movs	r3, #1
 8012978:	60fb      	str	r3, [r7, #12]
 801297a:	e008      	b.n	801298e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801297c:	68bb      	ldr	r3, [r7, #8]
 801297e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012980:	4b05      	ldr	r3, [pc, #20]	; (8012998 <xTaskPriorityInherit+0xc4>)
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012986:	429a      	cmp	r2, r3
 8012988:	d201      	bcs.n	801298e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801298a:	2301      	movs	r3, #1
 801298c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801298e:	68fb      	ldr	r3, [r7, #12]
	}
 8012990:	4618      	mov	r0, r3
 8012992:	3710      	adds	r7, #16
 8012994:	46bd      	mov	sp, r7
 8012996:	bd80      	pop	{r7, pc}
 8012998:	20001f80 	.word	0x20001f80
 801299c:	20001f84 	.word	0x20001f84
 80129a0:	2000245c 	.word	0x2000245c

080129a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b086      	sub	sp, #24
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80129b0:	2300      	movs	r3, #0
 80129b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d056      	beq.n	8012a68 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80129ba:	4b2e      	ldr	r3, [pc, #184]	; (8012a74 <xTaskPriorityDisinherit+0xd0>)
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	693a      	ldr	r2, [r7, #16]
 80129c0:	429a      	cmp	r2, r3
 80129c2:	d00a      	beq.n	80129da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80129c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129c8:	f383 8811 	msr	BASEPRI, r3
 80129cc:	f3bf 8f6f 	isb	sy
 80129d0:	f3bf 8f4f 	dsb	sy
 80129d4:	60fb      	str	r3, [r7, #12]
}
 80129d6:	bf00      	nop
 80129d8:	e7fe      	b.n	80129d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80129da:	693b      	ldr	r3, [r7, #16]
 80129dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d10a      	bne.n	80129f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80129e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129e6:	f383 8811 	msr	BASEPRI, r3
 80129ea:	f3bf 8f6f 	isb	sy
 80129ee:	f3bf 8f4f 	dsb	sy
 80129f2:	60bb      	str	r3, [r7, #8]
}
 80129f4:	bf00      	nop
 80129f6:	e7fe      	b.n	80129f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80129f8:	693b      	ldr	r3, [r7, #16]
 80129fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80129fc:	1e5a      	subs	r2, r3, #1
 80129fe:	693b      	ldr	r3, [r7, #16]
 8012a00:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012a02:	693b      	ldr	r3, [r7, #16]
 8012a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a06:	693b      	ldr	r3, [r7, #16]
 8012a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012a0a:	429a      	cmp	r2, r3
 8012a0c:	d02c      	beq.n	8012a68 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012a0e:	693b      	ldr	r3, [r7, #16]
 8012a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d128      	bne.n	8012a68 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012a16:	693b      	ldr	r3, [r7, #16]
 8012a18:	3304      	adds	r3, #4
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	f7fd ff9a 	bl	8010954 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012a20:	693b      	ldr	r3, [r7, #16]
 8012a22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012a24:	693b      	ldr	r3, [r7, #16]
 8012a26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a28:	693b      	ldr	r3, [r7, #16]
 8012a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a2c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012a30:	693b      	ldr	r3, [r7, #16]
 8012a32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012a34:	693b      	ldr	r3, [r7, #16]
 8012a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a38:	4b0f      	ldr	r3, [pc, #60]	; (8012a78 <xTaskPriorityDisinherit+0xd4>)
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d903      	bls.n	8012a48 <xTaskPriorityDisinherit+0xa4>
 8012a40:	693b      	ldr	r3, [r7, #16]
 8012a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a44:	4a0c      	ldr	r2, [pc, #48]	; (8012a78 <xTaskPriorityDisinherit+0xd4>)
 8012a46:	6013      	str	r3, [r2, #0]
 8012a48:	693b      	ldr	r3, [r7, #16]
 8012a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a4c:	4613      	mov	r3, r2
 8012a4e:	009b      	lsls	r3, r3, #2
 8012a50:	4413      	add	r3, r2
 8012a52:	009b      	lsls	r3, r3, #2
 8012a54:	4a09      	ldr	r2, [pc, #36]	; (8012a7c <xTaskPriorityDisinherit+0xd8>)
 8012a56:	441a      	add	r2, r3
 8012a58:	693b      	ldr	r3, [r7, #16]
 8012a5a:	3304      	adds	r3, #4
 8012a5c:	4619      	mov	r1, r3
 8012a5e:	4610      	mov	r0, r2
 8012a60:	f7fd ff1b 	bl	801089a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012a64:	2301      	movs	r3, #1
 8012a66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012a68:	697b      	ldr	r3, [r7, #20]
	}
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	3718      	adds	r7, #24
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	bd80      	pop	{r7, pc}
 8012a72:	bf00      	nop
 8012a74:	20001f80 	.word	0x20001f80
 8012a78:	2000245c 	.word	0x2000245c
 8012a7c:	20001f84 	.word	0x20001f84

08012a80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b088      	sub	sp, #32
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
 8012a88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012a8e:	2301      	movs	r3, #1
 8012a90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d06a      	beq.n	8012b6e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012a98:	69bb      	ldr	r3, [r7, #24]
 8012a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d10a      	bne.n	8012ab6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8012aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aa4:	f383 8811 	msr	BASEPRI, r3
 8012aa8:	f3bf 8f6f 	isb	sy
 8012aac:	f3bf 8f4f 	dsb	sy
 8012ab0:	60fb      	str	r3, [r7, #12]
}
 8012ab2:	bf00      	nop
 8012ab4:	e7fe      	b.n	8012ab4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012ab6:	69bb      	ldr	r3, [r7, #24]
 8012ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012aba:	683a      	ldr	r2, [r7, #0]
 8012abc:	429a      	cmp	r2, r3
 8012abe:	d902      	bls.n	8012ac6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012ac0:	683b      	ldr	r3, [r7, #0]
 8012ac2:	61fb      	str	r3, [r7, #28]
 8012ac4:	e002      	b.n	8012acc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012ac6:	69bb      	ldr	r3, [r7, #24]
 8012ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012aca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012acc:	69bb      	ldr	r3, [r7, #24]
 8012ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ad0:	69fa      	ldr	r2, [r7, #28]
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	d04b      	beq.n	8012b6e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012ad6:	69bb      	ldr	r3, [r7, #24]
 8012ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ada:	697a      	ldr	r2, [r7, #20]
 8012adc:	429a      	cmp	r2, r3
 8012ade:	d146      	bne.n	8012b6e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012ae0:	4b25      	ldr	r3, [pc, #148]	; (8012b78 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	69ba      	ldr	r2, [r7, #24]
 8012ae6:	429a      	cmp	r2, r3
 8012ae8:	d10a      	bne.n	8012b00 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8012aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aee:	f383 8811 	msr	BASEPRI, r3
 8012af2:	f3bf 8f6f 	isb	sy
 8012af6:	f3bf 8f4f 	dsb	sy
 8012afa:	60bb      	str	r3, [r7, #8]
}
 8012afc:	bf00      	nop
 8012afe:	e7fe      	b.n	8012afe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012b00:	69bb      	ldr	r3, [r7, #24]
 8012b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b04:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012b06:	69bb      	ldr	r3, [r7, #24]
 8012b08:	69fa      	ldr	r2, [r7, #28]
 8012b0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012b0c:	69bb      	ldr	r3, [r7, #24]
 8012b0e:	699b      	ldr	r3, [r3, #24]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	db04      	blt.n	8012b1e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b14:	69fb      	ldr	r3, [r7, #28]
 8012b16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012b1a:	69bb      	ldr	r3, [r7, #24]
 8012b1c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012b1e:	69bb      	ldr	r3, [r7, #24]
 8012b20:	6959      	ldr	r1, [r3, #20]
 8012b22:	693a      	ldr	r2, [r7, #16]
 8012b24:	4613      	mov	r3, r2
 8012b26:	009b      	lsls	r3, r3, #2
 8012b28:	4413      	add	r3, r2
 8012b2a:	009b      	lsls	r3, r3, #2
 8012b2c:	4a13      	ldr	r2, [pc, #76]	; (8012b7c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012b2e:	4413      	add	r3, r2
 8012b30:	4299      	cmp	r1, r3
 8012b32:	d11c      	bne.n	8012b6e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012b34:	69bb      	ldr	r3, [r7, #24]
 8012b36:	3304      	adds	r3, #4
 8012b38:	4618      	mov	r0, r3
 8012b3a:	f7fd ff0b 	bl	8010954 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012b3e:	69bb      	ldr	r3, [r7, #24]
 8012b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b42:	4b0f      	ldr	r3, [pc, #60]	; (8012b80 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	429a      	cmp	r2, r3
 8012b48:	d903      	bls.n	8012b52 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8012b4a:	69bb      	ldr	r3, [r7, #24]
 8012b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b4e:	4a0c      	ldr	r2, [pc, #48]	; (8012b80 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012b50:	6013      	str	r3, [r2, #0]
 8012b52:	69bb      	ldr	r3, [r7, #24]
 8012b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b56:	4613      	mov	r3, r2
 8012b58:	009b      	lsls	r3, r3, #2
 8012b5a:	4413      	add	r3, r2
 8012b5c:	009b      	lsls	r3, r3, #2
 8012b5e:	4a07      	ldr	r2, [pc, #28]	; (8012b7c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012b60:	441a      	add	r2, r3
 8012b62:	69bb      	ldr	r3, [r7, #24]
 8012b64:	3304      	adds	r3, #4
 8012b66:	4619      	mov	r1, r3
 8012b68:	4610      	mov	r0, r2
 8012b6a:	f7fd fe96 	bl	801089a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012b6e:	bf00      	nop
 8012b70:	3720      	adds	r7, #32
 8012b72:	46bd      	mov	sp, r7
 8012b74:	bd80      	pop	{r7, pc}
 8012b76:	bf00      	nop
 8012b78:	20001f80 	.word	0x20001f80
 8012b7c:	20001f84 	.word	0x20001f84
 8012b80:	2000245c 	.word	0x2000245c

08012b84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012b84:	b480      	push	{r7}
 8012b86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012b88:	4b07      	ldr	r3, [pc, #28]	; (8012ba8 <pvTaskIncrementMutexHeldCount+0x24>)
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d004      	beq.n	8012b9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012b90:	4b05      	ldr	r3, [pc, #20]	; (8012ba8 <pvTaskIncrementMutexHeldCount+0x24>)
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012b96:	3201      	adds	r2, #1
 8012b98:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8012b9a:	4b03      	ldr	r3, [pc, #12]	; (8012ba8 <pvTaskIncrementMutexHeldCount+0x24>)
 8012b9c:	681b      	ldr	r3, [r3, #0]
	}
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba6:	4770      	bx	lr
 8012ba8:	20001f80 	.word	0x20001f80

08012bac <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b086      	sub	sp, #24
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	60f8      	str	r0, [r7, #12]
 8012bb4:	60b9      	str	r1, [r7, #8]
 8012bb6:	607a      	str	r2, [r7, #4]
 8012bb8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8012bba:	f000 ff6b 	bl	8013a94 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8012bbe:	4b26      	ldr	r3, [pc, #152]	; (8012c58 <xTaskNotifyWait+0xac>)
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012bc6:	b2db      	uxtb	r3, r3
 8012bc8:	2b02      	cmp	r3, #2
 8012bca:	d01a      	beq.n	8012c02 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8012bcc:	4b22      	ldr	r3, [pc, #136]	; (8012c58 <xTaskNotifyWait+0xac>)
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012bd2:	68fa      	ldr	r2, [r7, #12]
 8012bd4:	43d2      	mvns	r2, r2
 8012bd6:	400a      	ands	r2, r1
 8012bd8:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8012bda:	4b1f      	ldr	r3, [pc, #124]	; (8012c58 <xTaskNotifyWait+0xac>)
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	2201      	movs	r2, #1
 8012be0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d00b      	beq.n	8012c02 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012bea:	2101      	movs	r1, #1
 8012bec:	6838      	ldr	r0, [r7, #0]
 8012bee:	f000 f9cb 	bl	8012f88 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8012bf2:	4b1a      	ldr	r3, [pc, #104]	; (8012c5c <xTaskNotifyWait+0xb0>)
 8012bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bf8:	601a      	str	r2, [r3, #0]
 8012bfa:	f3bf 8f4f 	dsb	sy
 8012bfe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012c02:	f000 ff77 	bl	8013af4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8012c06:	f000 ff45 	bl	8013a94 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d004      	beq.n	8012c1a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8012c10:	4b11      	ldr	r3, [pc, #68]	; (8012c58 <xTaskNotifyWait+0xac>)
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8012c1a:	4b0f      	ldr	r3, [pc, #60]	; (8012c58 <xTaskNotifyWait+0xac>)
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012c22:	b2db      	uxtb	r3, r3
 8012c24:	2b02      	cmp	r3, #2
 8012c26:	d002      	beq.n	8012c2e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8012c28:	2300      	movs	r3, #0
 8012c2a:	617b      	str	r3, [r7, #20]
 8012c2c:	e008      	b.n	8012c40 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8012c2e:	4b0a      	ldr	r3, [pc, #40]	; (8012c58 <xTaskNotifyWait+0xac>)
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012c34:	68ba      	ldr	r2, [r7, #8]
 8012c36:	43d2      	mvns	r2, r2
 8012c38:	400a      	ands	r2, r1
 8012c3a:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8012c3c:	2301      	movs	r3, #1
 8012c3e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012c40:	4b05      	ldr	r3, [pc, #20]	; (8012c58 <xTaskNotifyWait+0xac>)
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	2200      	movs	r2, #0
 8012c46:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8012c4a:	f000 ff53 	bl	8013af4 <vPortExitCritical>

		return xReturn;
 8012c4e:	697b      	ldr	r3, [r7, #20]
	}
 8012c50:	4618      	mov	r0, r3
 8012c52:	3718      	adds	r7, #24
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bd80      	pop	{r7, pc}
 8012c58:	20001f80 	.word	0x20001f80
 8012c5c:	e000ed04 	.word	0xe000ed04

08012c60 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b08a      	sub	sp, #40	; 0x28
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	60f8      	str	r0, [r7, #12]
 8012c68:	60b9      	str	r1, [r7, #8]
 8012c6a:	603b      	str	r3, [r7, #0]
 8012c6c:	4613      	mov	r3, r2
 8012c6e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8012c70:	2301      	movs	r3, #1
 8012c72:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d10a      	bne.n	8012c90 <xTaskGenericNotify+0x30>
	__asm volatile
 8012c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c7e:	f383 8811 	msr	BASEPRI, r3
 8012c82:	f3bf 8f6f 	isb	sy
 8012c86:	f3bf 8f4f 	dsb	sy
 8012c8a:	61bb      	str	r3, [r7, #24]
}
 8012c8c:	bf00      	nop
 8012c8e:	e7fe      	b.n	8012c8e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8012c94:	f000 fefe 	bl	8013a94 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8012c98:	683b      	ldr	r3, [r7, #0]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d003      	beq.n	8012ca6 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8012c9e:	6a3b      	ldr	r3, [r7, #32]
 8012ca0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012ca2:	683b      	ldr	r3, [r7, #0]
 8012ca4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012ca6:	6a3b      	ldr	r3, [r7, #32]
 8012ca8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012cac:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8012cae:	6a3b      	ldr	r3, [r7, #32]
 8012cb0:	2202      	movs	r2, #2
 8012cb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8012cb6:	79fb      	ldrb	r3, [r7, #7]
 8012cb8:	2b04      	cmp	r3, #4
 8012cba:	d828      	bhi.n	8012d0e <xTaskGenericNotify+0xae>
 8012cbc:	a201      	add	r2, pc, #4	; (adr r2, 8012cc4 <xTaskGenericNotify+0x64>)
 8012cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cc2:	bf00      	nop
 8012cc4:	08012d2f 	.word	0x08012d2f
 8012cc8:	08012cd9 	.word	0x08012cd9
 8012ccc:	08012ce7 	.word	0x08012ce7
 8012cd0:	08012cf3 	.word	0x08012cf3
 8012cd4:	08012cfb 	.word	0x08012cfb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8012cd8:	6a3b      	ldr	r3, [r7, #32]
 8012cda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012cdc:	68bb      	ldr	r3, [r7, #8]
 8012cde:	431a      	orrs	r2, r3
 8012ce0:	6a3b      	ldr	r3, [r7, #32]
 8012ce2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012ce4:	e026      	b.n	8012d34 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8012ce6:	6a3b      	ldr	r3, [r7, #32]
 8012ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012cea:	1c5a      	adds	r2, r3, #1
 8012cec:	6a3b      	ldr	r3, [r7, #32]
 8012cee:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012cf0:	e020      	b.n	8012d34 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8012cf2:	6a3b      	ldr	r3, [r7, #32]
 8012cf4:	68ba      	ldr	r2, [r7, #8]
 8012cf6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012cf8:	e01c      	b.n	8012d34 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8012cfa:	7ffb      	ldrb	r3, [r7, #31]
 8012cfc:	2b02      	cmp	r3, #2
 8012cfe:	d003      	beq.n	8012d08 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8012d00:	6a3b      	ldr	r3, [r7, #32]
 8012d02:	68ba      	ldr	r2, [r7, #8]
 8012d04:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8012d06:	e015      	b.n	8012d34 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8012d08:	2300      	movs	r3, #0
 8012d0a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8012d0c:	e012      	b.n	8012d34 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8012d0e:	6a3b      	ldr	r3, [r7, #32]
 8012d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d16:	d00c      	beq.n	8012d32 <xTaskGenericNotify+0xd2>
	__asm volatile
 8012d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d1c:	f383 8811 	msr	BASEPRI, r3
 8012d20:	f3bf 8f6f 	isb	sy
 8012d24:	f3bf 8f4f 	dsb	sy
 8012d28:	617b      	str	r3, [r7, #20]
}
 8012d2a:	bf00      	nop
 8012d2c:	e7fe      	b.n	8012d2c <xTaskGenericNotify+0xcc>
					break;
 8012d2e:	bf00      	nop
 8012d30:	e000      	b.n	8012d34 <xTaskGenericNotify+0xd4>

					break;
 8012d32:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8012d34:	7ffb      	ldrb	r3, [r7, #31]
 8012d36:	2b01      	cmp	r3, #1
 8012d38:	d13a      	bne.n	8012db0 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012d3a:	6a3b      	ldr	r3, [r7, #32]
 8012d3c:	3304      	adds	r3, #4
 8012d3e:	4618      	mov	r0, r3
 8012d40:	f7fd fe08 	bl	8010954 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8012d44:	6a3b      	ldr	r3, [r7, #32]
 8012d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d48:	4b1d      	ldr	r3, [pc, #116]	; (8012dc0 <xTaskGenericNotify+0x160>)
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	429a      	cmp	r2, r3
 8012d4e:	d903      	bls.n	8012d58 <xTaskGenericNotify+0xf8>
 8012d50:	6a3b      	ldr	r3, [r7, #32]
 8012d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d54:	4a1a      	ldr	r2, [pc, #104]	; (8012dc0 <xTaskGenericNotify+0x160>)
 8012d56:	6013      	str	r3, [r2, #0]
 8012d58:	6a3b      	ldr	r3, [r7, #32]
 8012d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d5c:	4613      	mov	r3, r2
 8012d5e:	009b      	lsls	r3, r3, #2
 8012d60:	4413      	add	r3, r2
 8012d62:	009b      	lsls	r3, r3, #2
 8012d64:	4a17      	ldr	r2, [pc, #92]	; (8012dc4 <xTaskGenericNotify+0x164>)
 8012d66:	441a      	add	r2, r3
 8012d68:	6a3b      	ldr	r3, [r7, #32]
 8012d6a:	3304      	adds	r3, #4
 8012d6c:	4619      	mov	r1, r3
 8012d6e:	4610      	mov	r0, r2
 8012d70:	f7fd fd93 	bl	801089a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8012d74:	6a3b      	ldr	r3, [r7, #32]
 8012d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d00a      	beq.n	8012d92 <xTaskGenericNotify+0x132>
	__asm volatile
 8012d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d80:	f383 8811 	msr	BASEPRI, r3
 8012d84:	f3bf 8f6f 	isb	sy
 8012d88:	f3bf 8f4f 	dsb	sy
 8012d8c:	613b      	str	r3, [r7, #16]
}
 8012d8e:	bf00      	nop
 8012d90:	e7fe      	b.n	8012d90 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012d92:	6a3b      	ldr	r3, [r7, #32]
 8012d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d96:	4b0c      	ldr	r3, [pc, #48]	; (8012dc8 <xTaskGenericNotify+0x168>)
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d9c:	429a      	cmp	r2, r3
 8012d9e:	d907      	bls.n	8012db0 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8012da0:	4b0a      	ldr	r3, [pc, #40]	; (8012dcc <xTaskGenericNotify+0x16c>)
 8012da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012da6:	601a      	str	r2, [r3, #0]
 8012da8:	f3bf 8f4f 	dsb	sy
 8012dac:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012db0:	f000 fea0 	bl	8013af4 <vPortExitCritical>

		return xReturn;
 8012db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8012db6:	4618      	mov	r0, r3
 8012db8:	3728      	adds	r7, #40	; 0x28
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bd80      	pop	{r7, pc}
 8012dbe:	bf00      	nop
 8012dc0:	2000245c 	.word	0x2000245c
 8012dc4:	20001f84 	.word	0x20001f84
 8012dc8:	20001f80 	.word	0x20001f80
 8012dcc:	e000ed04 	.word	0xe000ed04

08012dd0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b08e      	sub	sp, #56	; 0x38
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	60f8      	str	r0, [r7, #12]
 8012dd8:	60b9      	str	r1, [r7, #8]
 8012dda:	603b      	str	r3, [r7, #0]
 8012ddc:	4613      	mov	r3, r2
 8012dde:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8012de0:	2301      	movs	r3, #1
 8012de2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d10a      	bne.n	8012e00 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8012dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dee:	f383 8811 	msr	BASEPRI, r3
 8012df2:	f3bf 8f6f 	isb	sy
 8012df6:	f3bf 8f4f 	dsb	sy
 8012dfa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012dfc:	bf00      	nop
 8012dfe:	e7fe      	b.n	8012dfe <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012e00:	f000 ff2a 	bl	8013c58 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8012e08:	f3ef 8211 	mrs	r2, BASEPRI
 8012e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e10:	f383 8811 	msr	BASEPRI, r3
 8012e14:	f3bf 8f6f 	isb	sy
 8012e18:	f3bf 8f4f 	dsb	sy
 8012e1c:	623a      	str	r2, [r7, #32]
 8012e1e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8012e20:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012e22:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8012e24:	683b      	ldr	r3, [r7, #0]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d003      	beq.n	8012e32 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8012e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012e2e:	683b      	ldr	r3, [r7, #0]
 8012e30:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e34:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012e38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8012e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e3e:	2202      	movs	r2, #2
 8012e40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8012e44:	79fb      	ldrb	r3, [r7, #7]
 8012e46:	2b04      	cmp	r3, #4
 8012e48:	d828      	bhi.n	8012e9c <xTaskGenericNotifyFromISR+0xcc>
 8012e4a:	a201      	add	r2, pc, #4	; (adr r2, 8012e50 <xTaskGenericNotifyFromISR+0x80>)
 8012e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e50:	08012ebd 	.word	0x08012ebd
 8012e54:	08012e65 	.word	0x08012e65
 8012e58:	08012e73 	.word	0x08012e73
 8012e5c:	08012e7f 	.word	0x08012e7f
 8012e60:	08012e87 	.word	0x08012e87
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8012e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012e68:	68bb      	ldr	r3, [r7, #8]
 8012e6a:	431a      	orrs	r2, r3
 8012e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e6e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012e70:	e027      	b.n	8012ec2 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8012e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e76:	1c5a      	adds	r2, r3, #1
 8012e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e7a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012e7c:	e021      	b.n	8012ec2 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8012e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e80:	68ba      	ldr	r2, [r7, #8]
 8012e82:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012e84:	e01d      	b.n	8012ec2 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8012e86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012e8a:	2b02      	cmp	r3, #2
 8012e8c:	d003      	beq.n	8012e96 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8012e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e90:	68ba      	ldr	r2, [r7, #8]
 8012e92:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8012e94:	e015      	b.n	8012ec2 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8012e96:	2300      	movs	r3, #0
 8012e98:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8012e9a:	e012      	b.n	8012ec2 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8012e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ea4:	d00c      	beq.n	8012ec0 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8012ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eaa:	f383 8811 	msr	BASEPRI, r3
 8012eae:	f3bf 8f6f 	isb	sy
 8012eb2:	f3bf 8f4f 	dsb	sy
 8012eb6:	61bb      	str	r3, [r7, #24]
}
 8012eb8:	bf00      	nop
 8012eba:	e7fe      	b.n	8012eba <xTaskGenericNotifyFromISR+0xea>
					break;
 8012ebc:	bf00      	nop
 8012ebe:	e000      	b.n	8012ec2 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8012ec0:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8012ec2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012ec6:	2b01      	cmp	r3, #1
 8012ec8:	d146      	bne.n	8012f58 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8012eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d00a      	beq.n	8012ee8 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8012ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ed6:	f383 8811 	msr	BASEPRI, r3
 8012eda:	f3bf 8f6f 	isb	sy
 8012ede:	f3bf 8f4f 	dsb	sy
 8012ee2:	617b      	str	r3, [r7, #20]
}
 8012ee4:	bf00      	nop
 8012ee6:	e7fe      	b.n	8012ee6 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012ee8:	4b21      	ldr	r3, [pc, #132]	; (8012f70 <xTaskGenericNotifyFromISR+0x1a0>)
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d11d      	bne.n	8012f2c <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ef2:	3304      	adds	r3, #4
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f7fd fd2d 	bl	8010954 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012efe:	4b1d      	ldr	r3, [pc, #116]	; (8012f74 <xTaskGenericNotifyFromISR+0x1a4>)
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	429a      	cmp	r2, r3
 8012f04:	d903      	bls.n	8012f0e <xTaskGenericNotifyFromISR+0x13e>
 8012f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f0a:	4a1a      	ldr	r2, [pc, #104]	; (8012f74 <xTaskGenericNotifyFromISR+0x1a4>)
 8012f0c:	6013      	str	r3, [r2, #0]
 8012f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f12:	4613      	mov	r3, r2
 8012f14:	009b      	lsls	r3, r3, #2
 8012f16:	4413      	add	r3, r2
 8012f18:	009b      	lsls	r3, r3, #2
 8012f1a:	4a17      	ldr	r2, [pc, #92]	; (8012f78 <xTaskGenericNotifyFromISR+0x1a8>)
 8012f1c:	441a      	add	r2, r3
 8012f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f20:	3304      	adds	r3, #4
 8012f22:	4619      	mov	r1, r3
 8012f24:	4610      	mov	r0, r2
 8012f26:	f7fd fcb8 	bl	801089a <vListInsertEnd>
 8012f2a:	e005      	b.n	8012f38 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8012f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f2e:	3318      	adds	r3, #24
 8012f30:	4619      	mov	r1, r3
 8012f32:	4812      	ldr	r0, [pc, #72]	; (8012f7c <xTaskGenericNotifyFromISR+0x1ac>)
 8012f34:	f7fd fcb1 	bl	801089a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f3c:	4b10      	ldr	r3, [pc, #64]	; (8012f80 <xTaskGenericNotifyFromISR+0x1b0>)
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f42:	429a      	cmp	r2, r3
 8012f44:	d908      	bls.n	8012f58 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8012f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d002      	beq.n	8012f52 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8012f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f4e:	2201      	movs	r2, #1
 8012f50:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8012f52:	4b0c      	ldr	r3, [pc, #48]	; (8012f84 <xTaskGenericNotifyFromISR+0x1b4>)
 8012f54:	2201      	movs	r2, #1
 8012f56:	601a      	str	r2, [r3, #0]
 8012f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f5a:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012f5c:	693b      	ldr	r3, [r7, #16]
 8012f5e:	f383 8811 	msr	BASEPRI, r3
}
 8012f62:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8012f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8012f66:	4618      	mov	r0, r3
 8012f68:	3738      	adds	r7, #56	; 0x38
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	bd80      	pop	{r7, pc}
 8012f6e:	bf00      	nop
 8012f70:	2000247c 	.word	0x2000247c
 8012f74:	2000245c 	.word	0x2000245c
 8012f78:	20001f84 	.word	0x20001f84
 8012f7c:	20002414 	.word	0x20002414
 8012f80:	20001f80 	.word	0x20001f80
 8012f84:	20002468 	.word	0x20002468

08012f88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b084      	sub	sp, #16
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
 8012f90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012f92:	4b21      	ldr	r3, [pc, #132]	; (8013018 <prvAddCurrentTaskToDelayedList+0x90>)
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012f98:	4b20      	ldr	r3, [pc, #128]	; (801301c <prvAddCurrentTaskToDelayedList+0x94>)
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	3304      	adds	r3, #4
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	f7fd fcd8 	bl	8010954 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012faa:	d10a      	bne.n	8012fc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8012fac:	683b      	ldr	r3, [r7, #0]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d007      	beq.n	8012fc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012fb2:	4b1a      	ldr	r3, [pc, #104]	; (801301c <prvAddCurrentTaskToDelayedList+0x94>)
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	3304      	adds	r3, #4
 8012fb8:	4619      	mov	r1, r3
 8012fba:	4819      	ldr	r0, [pc, #100]	; (8013020 <prvAddCurrentTaskToDelayedList+0x98>)
 8012fbc:	f7fd fc6d 	bl	801089a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012fc0:	e026      	b.n	8013010 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012fc2:	68fa      	ldr	r2, [r7, #12]
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	4413      	add	r3, r2
 8012fc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012fca:	4b14      	ldr	r3, [pc, #80]	; (801301c <prvAddCurrentTaskToDelayedList+0x94>)
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	68ba      	ldr	r2, [r7, #8]
 8012fd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012fd2:	68ba      	ldr	r2, [r7, #8]
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	429a      	cmp	r2, r3
 8012fd8:	d209      	bcs.n	8012fee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012fda:	4b12      	ldr	r3, [pc, #72]	; (8013024 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012fdc:	681a      	ldr	r2, [r3, #0]
 8012fde:	4b0f      	ldr	r3, [pc, #60]	; (801301c <prvAddCurrentTaskToDelayedList+0x94>)
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	3304      	adds	r3, #4
 8012fe4:	4619      	mov	r1, r3
 8012fe6:	4610      	mov	r0, r2
 8012fe8:	f7fd fc7b 	bl	80108e2 <vListInsert>
}
 8012fec:	e010      	b.n	8013010 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012fee:	4b0e      	ldr	r3, [pc, #56]	; (8013028 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012ff0:	681a      	ldr	r2, [r3, #0]
 8012ff2:	4b0a      	ldr	r3, [pc, #40]	; (801301c <prvAddCurrentTaskToDelayedList+0x94>)
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	3304      	adds	r3, #4
 8012ff8:	4619      	mov	r1, r3
 8012ffa:	4610      	mov	r0, r2
 8012ffc:	f7fd fc71 	bl	80108e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013000:	4b0a      	ldr	r3, [pc, #40]	; (801302c <prvAddCurrentTaskToDelayedList+0xa4>)
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	68ba      	ldr	r2, [r7, #8]
 8013006:	429a      	cmp	r2, r3
 8013008:	d202      	bcs.n	8013010 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801300a:	4a08      	ldr	r2, [pc, #32]	; (801302c <prvAddCurrentTaskToDelayedList+0xa4>)
 801300c:	68bb      	ldr	r3, [r7, #8]
 801300e:	6013      	str	r3, [r2, #0]
}
 8013010:	bf00      	nop
 8013012:	3710      	adds	r7, #16
 8013014:	46bd      	mov	sp, r7
 8013016:	bd80      	pop	{r7, pc}
 8013018:	20002458 	.word	0x20002458
 801301c:	20001f80 	.word	0x20001f80
 8013020:	20002440 	.word	0x20002440
 8013024:	20002410 	.word	0x20002410
 8013028:	2000240c 	.word	0x2000240c
 801302c:	20002474 	.word	0x20002474

08013030 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b08a      	sub	sp, #40	; 0x28
 8013034:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013036:	2300      	movs	r3, #0
 8013038:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801303a:	f000 fba1 	bl	8013780 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801303e:	4b1c      	ldr	r3, [pc, #112]	; (80130b0 <xTimerCreateTimerTask+0x80>)
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d021      	beq.n	801308a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013046:	2300      	movs	r3, #0
 8013048:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801304a:	2300      	movs	r3, #0
 801304c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801304e:	1d3a      	adds	r2, r7, #4
 8013050:	f107 0108 	add.w	r1, r7, #8
 8013054:	f107 030c 	add.w	r3, r7, #12
 8013058:	4618      	mov	r0, r3
 801305a:	f7fd fbd7 	bl	801080c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801305e:	6879      	ldr	r1, [r7, #4]
 8013060:	68bb      	ldr	r3, [r7, #8]
 8013062:	68fa      	ldr	r2, [r7, #12]
 8013064:	9202      	str	r2, [sp, #8]
 8013066:	9301      	str	r3, [sp, #4]
 8013068:	2302      	movs	r3, #2
 801306a:	9300      	str	r3, [sp, #0]
 801306c:	2300      	movs	r3, #0
 801306e:	460a      	mov	r2, r1
 8013070:	4910      	ldr	r1, [pc, #64]	; (80130b4 <xTimerCreateTimerTask+0x84>)
 8013072:	4811      	ldr	r0, [pc, #68]	; (80130b8 <xTimerCreateTimerTask+0x88>)
 8013074:	f7fe fde2 	bl	8011c3c <xTaskCreateStatic>
 8013078:	4603      	mov	r3, r0
 801307a:	4a10      	ldr	r2, [pc, #64]	; (80130bc <xTimerCreateTimerTask+0x8c>)
 801307c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801307e:	4b0f      	ldr	r3, [pc, #60]	; (80130bc <xTimerCreateTimerTask+0x8c>)
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d001      	beq.n	801308a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013086:	2301      	movs	r3, #1
 8013088:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801308a:	697b      	ldr	r3, [r7, #20]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d10a      	bne.n	80130a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8013090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013094:	f383 8811 	msr	BASEPRI, r3
 8013098:	f3bf 8f6f 	isb	sy
 801309c:	f3bf 8f4f 	dsb	sy
 80130a0:	613b      	str	r3, [r7, #16]
}
 80130a2:	bf00      	nop
 80130a4:	e7fe      	b.n	80130a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80130a6:	697b      	ldr	r3, [r7, #20]
}
 80130a8:	4618      	mov	r0, r3
 80130aa:	3718      	adds	r7, #24
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bd80      	pop	{r7, pc}
 80130b0:	200024b0 	.word	0x200024b0
 80130b4:	080158e0 	.word	0x080158e0
 80130b8:	08013329 	.word	0x08013329
 80130bc:	200024b4 	.word	0x200024b4

080130c0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b088      	sub	sp, #32
 80130c4:	af02      	add	r7, sp, #8
 80130c6:	60f8      	str	r0, [r7, #12]
 80130c8:	60b9      	str	r1, [r7, #8]
 80130ca:	607a      	str	r2, [r7, #4]
 80130cc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80130ce:	202c      	movs	r0, #44	; 0x2c
 80130d0:	f000 fe02 	bl	8013cd8 <pvPortMalloc>
 80130d4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80130d6:	697b      	ldr	r3, [r7, #20]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d00d      	beq.n	80130f8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80130dc:	697b      	ldr	r3, [r7, #20]
 80130de:	2200      	movs	r2, #0
 80130e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80130e4:	697b      	ldr	r3, [r7, #20]
 80130e6:	9301      	str	r3, [sp, #4]
 80130e8:	6a3b      	ldr	r3, [r7, #32]
 80130ea:	9300      	str	r3, [sp, #0]
 80130ec:	683b      	ldr	r3, [r7, #0]
 80130ee:	687a      	ldr	r2, [r7, #4]
 80130f0:	68b9      	ldr	r1, [r7, #8]
 80130f2:	68f8      	ldr	r0, [r7, #12]
 80130f4:	f000 f843 	bl	801317e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80130f8:	697b      	ldr	r3, [r7, #20]
	}
 80130fa:	4618      	mov	r0, r3
 80130fc:	3718      	adds	r7, #24
 80130fe:	46bd      	mov	sp, r7
 8013100:	bd80      	pop	{r7, pc}

08013102 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8013102:	b580      	push	{r7, lr}
 8013104:	b08a      	sub	sp, #40	; 0x28
 8013106:	af02      	add	r7, sp, #8
 8013108:	60f8      	str	r0, [r7, #12]
 801310a:	60b9      	str	r1, [r7, #8]
 801310c:	607a      	str	r2, [r7, #4]
 801310e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8013110:	232c      	movs	r3, #44	; 0x2c
 8013112:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8013114:	693b      	ldr	r3, [r7, #16]
 8013116:	2b2c      	cmp	r3, #44	; 0x2c
 8013118:	d00a      	beq.n	8013130 <xTimerCreateStatic+0x2e>
	__asm volatile
 801311a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801311e:	f383 8811 	msr	BASEPRI, r3
 8013122:	f3bf 8f6f 	isb	sy
 8013126:	f3bf 8f4f 	dsb	sy
 801312a:	61bb      	str	r3, [r7, #24]
}
 801312c:	bf00      	nop
 801312e:	e7fe      	b.n	801312e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013130:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8013132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013134:	2b00      	cmp	r3, #0
 8013136:	d10a      	bne.n	801314e <xTimerCreateStatic+0x4c>
	__asm volatile
 8013138:	f04f 0350 	mov.w	r3, #80	; 0x50
 801313c:	f383 8811 	msr	BASEPRI, r3
 8013140:	f3bf 8f6f 	isb	sy
 8013144:	f3bf 8f4f 	dsb	sy
 8013148:	617b      	str	r3, [r7, #20]
}
 801314a:	bf00      	nop
 801314c:	e7fe      	b.n	801314c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 801314e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013150:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8013152:	69fb      	ldr	r3, [r7, #28]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d00d      	beq.n	8013174 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8013158:	69fb      	ldr	r3, [r7, #28]
 801315a:	2202      	movs	r2, #2
 801315c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8013160:	69fb      	ldr	r3, [r7, #28]
 8013162:	9301      	str	r3, [sp, #4]
 8013164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013166:	9300      	str	r3, [sp, #0]
 8013168:	683b      	ldr	r3, [r7, #0]
 801316a:	687a      	ldr	r2, [r7, #4]
 801316c:	68b9      	ldr	r1, [r7, #8]
 801316e:	68f8      	ldr	r0, [r7, #12]
 8013170:	f000 f805 	bl	801317e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8013174:	69fb      	ldr	r3, [r7, #28]
	}
 8013176:	4618      	mov	r0, r3
 8013178:	3720      	adds	r7, #32
 801317a:	46bd      	mov	sp, r7
 801317c:	bd80      	pop	{r7, pc}

0801317e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 801317e:	b580      	push	{r7, lr}
 8013180:	b086      	sub	sp, #24
 8013182:	af00      	add	r7, sp, #0
 8013184:	60f8      	str	r0, [r7, #12]
 8013186:	60b9      	str	r1, [r7, #8]
 8013188:	607a      	str	r2, [r7, #4]
 801318a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801318c:	68bb      	ldr	r3, [r7, #8]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d10a      	bne.n	80131a8 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8013192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013196:	f383 8811 	msr	BASEPRI, r3
 801319a:	f3bf 8f6f 	isb	sy
 801319e:	f3bf 8f4f 	dsb	sy
 80131a2:	617b      	str	r3, [r7, #20]
}
 80131a4:	bf00      	nop
 80131a6:	e7fe      	b.n	80131a6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80131a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d01e      	beq.n	80131ec <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80131ae:	f000 fae7 	bl	8013780 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80131b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131b4:	68fa      	ldr	r2, [r7, #12]
 80131b6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80131b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ba:	68ba      	ldr	r2, [r7, #8]
 80131bc:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80131be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131c0:	683a      	ldr	r2, [r7, #0]
 80131c2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80131c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131c6:	6a3a      	ldr	r2, [r7, #32]
 80131c8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80131ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131cc:	3304      	adds	r3, #4
 80131ce:	4618      	mov	r0, r3
 80131d0:	f7fd fb56 	bl	8010880 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d008      	beq.n	80131ec <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80131da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131e0:	f043 0304 	orr.w	r3, r3, #4
 80131e4:	b2da      	uxtb	r2, r3
 80131e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80131ec:	bf00      	nop
 80131ee:	3718      	adds	r7, #24
 80131f0:	46bd      	mov	sp, r7
 80131f2:	bd80      	pop	{r7, pc}

080131f4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b08a      	sub	sp, #40	; 0x28
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	60f8      	str	r0, [r7, #12]
 80131fc:	60b9      	str	r1, [r7, #8]
 80131fe:	607a      	str	r2, [r7, #4]
 8013200:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013202:	2300      	movs	r3, #0
 8013204:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d10a      	bne.n	8013222 <xTimerGenericCommand+0x2e>
	__asm volatile
 801320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013210:	f383 8811 	msr	BASEPRI, r3
 8013214:	f3bf 8f6f 	isb	sy
 8013218:	f3bf 8f4f 	dsb	sy
 801321c:	623b      	str	r3, [r7, #32]
}
 801321e:	bf00      	nop
 8013220:	e7fe      	b.n	8013220 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013222:	4b1a      	ldr	r3, [pc, #104]	; (801328c <xTimerGenericCommand+0x98>)
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d02a      	beq.n	8013280 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	2b05      	cmp	r3, #5
 801323a:	dc18      	bgt.n	801326e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801323c:	f7ff fb2c 	bl	8012898 <xTaskGetSchedulerState>
 8013240:	4603      	mov	r3, r0
 8013242:	2b02      	cmp	r3, #2
 8013244:	d109      	bne.n	801325a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013246:	4b11      	ldr	r3, [pc, #68]	; (801328c <xTimerGenericCommand+0x98>)
 8013248:	6818      	ldr	r0, [r3, #0]
 801324a:	f107 0110 	add.w	r1, r7, #16
 801324e:	2300      	movs	r3, #0
 8013250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013252:	f7fd fe07 	bl	8010e64 <xQueueGenericSend>
 8013256:	6278      	str	r0, [r7, #36]	; 0x24
 8013258:	e012      	b.n	8013280 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801325a:	4b0c      	ldr	r3, [pc, #48]	; (801328c <xTimerGenericCommand+0x98>)
 801325c:	6818      	ldr	r0, [r3, #0]
 801325e:	f107 0110 	add.w	r1, r7, #16
 8013262:	2300      	movs	r3, #0
 8013264:	2200      	movs	r2, #0
 8013266:	f7fd fdfd 	bl	8010e64 <xQueueGenericSend>
 801326a:	6278      	str	r0, [r7, #36]	; 0x24
 801326c:	e008      	b.n	8013280 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801326e:	4b07      	ldr	r3, [pc, #28]	; (801328c <xTimerGenericCommand+0x98>)
 8013270:	6818      	ldr	r0, [r3, #0]
 8013272:	f107 0110 	add.w	r1, r7, #16
 8013276:	2300      	movs	r3, #0
 8013278:	683a      	ldr	r2, [r7, #0]
 801327a:	f7fd fef1 	bl	8011060 <xQueueGenericSendFromISR>
 801327e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013282:	4618      	mov	r0, r3
 8013284:	3728      	adds	r7, #40	; 0x28
 8013286:	46bd      	mov	sp, r7
 8013288:	bd80      	pop	{r7, pc}
 801328a:	bf00      	nop
 801328c:	200024b0 	.word	0x200024b0

08013290 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b088      	sub	sp, #32
 8013294:	af02      	add	r7, sp, #8
 8013296:	6078      	str	r0, [r7, #4]
 8013298:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801329a:	4b22      	ldr	r3, [pc, #136]	; (8013324 <prvProcessExpiredTimer+0x94>)
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	68db      	ldr	r3, [r3, #12]
 80132a0:	68db      	ldr	r3, [r3, #12]
 80132a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80132a4:	697b      	ldr	r3, [r7, #20]
 80132a6:	3304      	adds	r3, #4
 80132a8:	4618      	mov	r0, r3
 80132aa:	f7fd fb53 	bl	8010954 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80132ae:	697b      	ldr	r3, [r7, #20]
 80132b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80132b4:	f003 0304 	and.w	r3, r3, #4
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d022      	beq.n	8013302 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80132bc:	697b      	ldr	r3, [r7, #20]
 80132be:	699a      	ldr	r2, [r3, #24]
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	18d1      	adds	r1, r2, r3
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	683a      	ldr	r2, [r7, #0]
 80132c8:	6978      	ldr	r0, [r7, #20]
 80132ca:	f000 f8d1 	bl	8013470 <prvInsertTimerInActiveList>
 80132ce:	4603      	mov	r3, r0
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d01f      	beq.n	8013314 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80132d4:	2300      	movs	r3, #0
 80132d6:	9300      	str	r3, [sp, #0]
 80132d8:	2300      	movs	r3, #0
 80132da:	687a      	ldr	r2, [r7, #4]
 80132dc:	2100      	movs	r1, #0
 80132de:	6978      	ldr	r0, [r7, #20]
 80132e0:	f7ff ff88 	bl	80131f4 <xTimerGenericCommand>
 80132e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80132e6:	693b      	ldr	r3, [r7, #16]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d113      	bne.n	8013314 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80132ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132f0:	f383 8811 	msr	BASEPRI, r3
 80132f4:	f3bf 8f6f 	isb	sy
 80132f8:	f3bf 8f4f 	dsb	sy
 80132fc:	60fb      	str	r3, [r7, #12]
}
 80132fe:	bf00      	nop
 8013300:	e7fe      	b.n	8013300 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013302:	697b      	ldr	r3, [r7, #20]
 8013304:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013308:	f023 0301 	bic.w	r3, r3, #1
 801330c:	b2da      	uxtb	r2, r3
 801330e:	697b      	ldr	r3, [r7, #20]
 8013310:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013314:	697b      	ldr	r3, [r7, #20]
 8013316:	6a1b      	ldr	r3, [r3, #32]
 8013318:	6978      	ldr	r0, [r7, #20]
 801331a:	4798      	blx	r3
}
 801331c:	bf00      	nop
 801331e:	3718      	adds	r7, #24
 8013320:	46bd      	mov	sp, r7
 8013322:	bd80      	pop	{r7, pc}
 8013324:	200024a8 	.word	0x200024a8

08013328 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013328:	b580      	push	{r7, lr}
 801332a:	b084      	sub	sp, #16
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013330:	f107 0308 	add.w	r3, r7, #8
 8013334:	4618      	mov	r0, r3
 8013336:	f000 f857 	bl	80133e8 <prvGetNextExpireTime>
 801333a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801333c:	68bb      	ldr	r3, [r7, #8]
 801333e:	4619      	mov	r1, r3
 8013340:	68f8      	ldr	r0, [r7, #12]
 8013342:	f000 f803 	bl	801334c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013346:	f000 f8d5 	bl	80134f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801334a:	e7f1      	b.n	8013330 <prvTimerTask+0x8>

0801334c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801334c:	b580      	push	{r7, lr}
 801334e:	b084      	sub	sp, #16
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
 8013354:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013356:	f7fe fead 	bl	80120b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801335a:	f107 0308 	add.w	r3, r7, #8
 801335e:	4618      	mov	r0, r3
 8013360:	f000 f866 	bl	8013430 <prvSampleTimeNow>
 8013364:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013366:	68bb      	ldr	r3, [r7, #8]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d130      	bne.n	80133ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801336c:	683b      	ldr	r3, [r7, #0]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d10a      	bne.n	8013388 <prvProcessTimerOrBlockTask+0x3c>
 8013372:	687a      	ldr	r2, [r7, #4]
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	429a      	cmp	r2, r3
 8013378:	d806      	bhi.n	8013388 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801337a:	f7fe fea9 	bl	80120d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801337e:	68f9      	ldr	r1, [r7, #12]
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	f7ff ff85 	bl	8013290 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013386:	e024      	b.n	80133d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013388:	683b      	ldr	r3, [r7, #0]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d008      	beq.n	80133a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801338e:	4b13      	ldr	r3, [pc, #76]	; (80133dc <prvProcessTimerOrBlockTask+0x90>)
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d101      	bne.n	801339c <prvProcessTimerOrBlockTask+0x50>
 8013398:	2301      	movs	r3, #1
 801339a:	e000      	b.n	801339e <prvProcessTimerOrBlockTask+0x52>
 801339c:	2300      	movs	r3, #0
 801339e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80133a0:	4b0f      	ldr	r3, [pc, #60]	; (80133e0 <prvProcessTimerOrBlockTask+0x94>)
 80133a2:	6818      	ldr	r0, [r3, #0]
 80133a4:	687a      	ldr	r2, [r7, #4]
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	1ad3      	subs	r3, r2, r3
 80133aa:	683a      	ldr	r2, [r7, #0]
 80133ac:	4619      	mov	r1, r3
 80133ae:	f7fe fc11 	bl	8011bd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80133b2:	f7fe fe8d 	bl	80120d0 <xTaskResumeAll>
 80133b6:	4603      	mov	r3, r0
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d10a      	bne.n	80133d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80133bc:	4b09      	ldr	r3, [pc, #36]	; (80133e4 <prvProcessTimerOrBlockTask+0x98>)
 80133be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133c2:	601a      	str	r2, [r3, #0]
 80133c4:	f3bf 8f4f 	dsb	sy
 80133c8:	f3bf 8f6f 	isb	sy
}
 80133cc:	e001      	b.n	80133d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80133ce:	f7fe fe7f 	bl	80120d0 <xTaskResumeAll>
}
 80133d2:	bf00      	nop
 80133d4:	3710      	adds	r7, #16
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bd80      	pop	{r7, pc}
 80133da:	bf00      	nop
 80133dc:	200024ac 	.word	0x200024ac
 80133e0:	200024b0 	.word	0x200024b0
 80133e4:	e000ed04 	.word	0xe000ed04

080133e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80133e8:	b480      	push	{r7}
 80133ea:	b085      	sub	sp, #20
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80133f0:	4b0e      	ldr	r3, [pc, #56]	; (801342c <prvGetNextExpireTime+0x44>)
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d101      	bne.n	80133fe <prvGetNextExpireTime+0x16>
 80133fa:	2201      	movs	r2, #1
 80133fc:	e000      	b.n	8013400 <prvGetNextExpireTime+0x18>
 80133fe:	2200      	movs	r2, #0
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d105      	bne.n	8013418 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801340c:	4b07      	ldr	r3, [pc, #28]	; (801342c <prvGetNextExpireTime+0x44>)
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	68db      	ldr	r3, [r3, #12]
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	60fb      	str	r3, [r7, #12]
 8013416:	e001      	b.n	801341c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013418:	2300      	movs	r3, #0
 801341a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801341c:	68fb      	ldr	r3, [r7, #12]
}
 801341e:	4618      	mov	r0, r3
 8013420:	3714      	adds	r7, #20
 8013422:	46bd      	mov	sp, r7
 8013424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013428:	4770      	bx	lr
 801342a:	bf00      	nop
 801342c:	200024a8 	.word	0x200024a8

08013430 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b084      	sub	sp, #16
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013438:	f7fe fee8 	bl	801220c <xTaskGetTickCount>
 801343c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801343e:	4b0b      	ldr	r3, [pc, #44]	; (801346c <prvSampleTimeNow+0x3c>)
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	68fa      	ldr	r2, [r7, #12]
 8013444:	429a      	cmp	r2, r3
 8013446:	d205      	bcs.n	8013454 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013448:	f000 f936 	bl	80136b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	2201      	movs	r2, #1
 8013450:	601a      	str	r2, [r3, #0]
 8013452:	e002      	b.n	801345a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	2200      	movs	r2, #0
 8013458:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801345a:	4a04      	ldr	r2, [pc, #16]	; (801346c <prvSampleTimeNow+0x3c>)
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013460:	68fb      	ldr	r3, [r7, #12]
}
 8013462:	4618      	mov	r0, r3
 8013464:	3710      	adds	r7, #16
 8013466:	46bd      	mov	sp, r7
 8013468:	bd80      	pop	{r7, pc}
 801346a:	bf00      	nop
 801346c:	200024b8 	.word	0x200024b8

08013470 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b086      	sub	sp, #24
 8013474:	af00      	add	r7, sp, #0
 8013476:	60f8      	str	r0, [r7, #12]
 8013478:	60b9      	str	r1, [r7, #8]
 801347a:	607a      	str	r2, [r7, #4]
 801347c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801347e:	2300      	movs	r3, #0
 8013480:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	68ba      	ldr	r2, [r7, #8]
 8013486:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	68fa      	ldr	r2, [r7, #12]
 801348c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801348e:	68ba      	ldr	r2, [r7, #8]
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	429a      	cmp	r2, r3
 8013494:	d812      	bhi.n	80134bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013496:	687a      	ldr	r2, [r7, #4]
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	1ad2      	subs	r2, r2, r3
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	699b      	ldr	r3, [r3, #24]
 80134a0:	429a      	cmp	r2, r3
 80134a2:	d302      	bcc.n	80134aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80134a4:	2301      	movs	r3, #1
 80134a6:	617b      	str	r3, [r7, #20]
 80134a8:	e01b      	b.n	80134e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80134aa:	4b10      	ldr	r3, [pc, #64]	; (80134ec <prvInsertTimerInActiveList+0x7c>)
 80134ac:	681a      	ldr	r2, [r3, #0]
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	3304      	adds	r3, #4
 80134b2:	4619      	mov	r1, r3
 80134b4:	4610      	mov	r0, r2
 80134b6:	f7fd fa14 	bl	80108e2 <vListInsert>
 80134ba:	e012      	b.n	80134e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80134bc:	687a      	ldr	r2, [r7, #4]
 80134be:	683b      	ldr	r3, [r7, #0]
 80134c0:	429a      	cmp	r2, r3
 80134c2:	d206      	bcs.n	80134d2 <prvInsertTimerInActiveList+0x62>
 80134c4:	68ba      	ldr	r2, [r7, #8]
 80134c6:	683b      	ldr	r3, [r7, #0]
 80134c8:	429a      	cmp	r2, r3
 80134ca:	d302      	bcc.n	80134d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80134cc:	2301      	movs	r3, #1
 80134ce:	617b      	str	r3, [r7, #20]
 80134d0:	e007      	b.n	80134e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80134d2:	4b07      	ldr	r3, [pc, #28]	; (80134f0 <prvInsertTimerInActiveList+0x80>)
 80134d4:	681a      	ldr	r2, [r3, #0]
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	3304      	adds	r3, #4
 80134da:	4619      	mov	r1, r3
 80134dc:	4610      	mov	r0, r2
 80134de:	f7fd fa00 	bl	80108e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80134e2:	697b      	ldr	r3, [r7, #20]
}
 80134e4:	4618      	mov	r0, r3
 80134e6:	3718      	adds	r7, #24
 80134e8:	46bd      	mov	sp, r7
 80134ea:	bd80      	pop	{r7, pc}
 80134ec:	200024ac 	.word	0x200024ac
 80134f0:	200024a8 	.word	0x200024a8

080134f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b08e      	sub	sp, #56	; 0x38
 80134f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80134fa:	e0ca      	b.n	8013692 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	da18      	bge.n	8013534 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013502:	1d3b      	adds	r3, r7, #4
 8013504:	3304      	adds	r3, #4
 8013506:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801350a:	2b00      	cmp	r3, #0
 801350c:	d10a      	bne.n	8013524 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801350e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013512:	f383 8811 	msr	BASEPRI, r3
 8013516:	f3bf 8f6f 	isb	sy
 801351a:	f3bf 8f4f 	dsb	sy
 801351e:	61fb      	str	r3, [r7, #28]
}
 8013520:	bf00      	nop
 8013522:	e7fe      	b.n	8013522 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801352a:	6850      	ldr	r0, [r2, #4]
 801352c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801352e:	6892      	ldr	r2, [r2, #8]
 8013530:	4611      	mov	r1, r2
 8013532:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	2b00      	cmp	r3, #0
 8013538:	f2c0 80ab 	blt.w	8013692 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013542:	695b      	ldr	r3, [r3, #20]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d004      	beq.n	8013552 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801354a:	3304      	adds	r3, #4
 801354c:	4618      	mov	r0, r3
 801354e:	f7fd fa01 	bl	8010954 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013552:	463b      	mov	r3, r7
 8013554:	4618      	mov	r0, r3
 8013556:	f7ff ff6b 	bl	8013430 <prvSampleTimeNow>
 801355a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	2b09      	cmp	r3, #9
 8013560:	f200 8096 	bhi.w	8013690 <prvProcessReceivedCommands+0x19c>
 8013564:	a201      	add	r2, pc, #4	; (adr r2, 801356c <prvProcessReceivedCommands+0x78>)
 8013566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801356a:	bf00      	nop
 801356c:	08013595 	.word	0x08013595
 8013570:	08013595 	.word	0x08013595
 8013574:	08013595 	.word	0x08013595
 8013578:	08013609 	.word	0x08013609
 801357c:	0801361d 	.word	0x0801361d
 8013580:	08013667 	.word	0x08013667
 8013584:	08013595 	.word	0x08013595
 8013588:	08013595 	.word	0x08013595
 801358c:	08013609 	.word	0x08013609
 8013590:	0801361d 	.word	0x0801361d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013596:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801359a:	f043 0301 	orr.w	r3, r3, #1
 801359e:	b2da      	uxtb	r2, r3
 80135a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80135a6:	68ba      	ldr	r2, [r7, #8]
 80135a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135aa:	699b      	ldr	r3, [r3, #24]
 80135ac:	18d1      	adds	r1, r2, r3
 80135ae:	68bb      	ldr	r3, [r7, #8]
 80135b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135b4:	f7ff ff5c 	bl	8013470 <prvInsertTimerInActiveList>
 80135b8:	4603      	mov	r3, r0
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d069      	beq.n	8013692 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80135be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135c0:	6a1b      	ldr	r3, [r3, #32]
 80135c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80135c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80135cc:	f003 0304 	and.w	r3, r3, #4
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d05e      	beq.n	8013692 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80135d4:	68ba      	ldr	r2, [r7, #8]
 80135d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135d8:	699b      	ldr	r3, [r3, #24]
 80135da:	441a      	add	r2, r3
 80135dc:	2300      	movs	r3, #0
 80135de:	9300      	str	r3, [sp, #0]
 80135e0:	2300      	movs	r3, #0
 80135e2:	2100      	movs	r1, #0
 80135e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135e6:	f7ff fe05 	bl	80131f4 <xTimerGenericCommand>
 80135ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80135ec:	6a3b      	ldr	r3, [r7, #32]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d14f      	bne.n	8013692 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80135f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135f6:	f383 8811 	msr	BASEPRI, r3
 80135fa:	f3bf 8f6f 	isb	sy
 80135fe:	f3bf 8f4f 	dsb	sy
 8013602:	61bb      	str	r3, [r7, #24]
}
 8013604:	bf00      	nop
 8013606:	e7fe      	b.n	8013606 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801360a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801360e:	f023 0301 	bic.w	r3, r3, #1
 8013612:	b2da      	uxtb	r2, r3
 8013614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013616:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801361a:	e03a      	b.n	8013692 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801361c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801361e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013622:	f043 0301 	orr.w	r3, r3, #1
 8013626:	b2da      	uxtb	r2, r3
 8013628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801362a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801362e:	68ba      	ldr	r2, [r7, #8]
 8013630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013632:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013636:	699b      	ldr	r3, [r3, #24]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d10a      	bne.n	8013652 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801363c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013640:	f383 8811 	msr	BASEPRI, r3
 8013644:	f3bf 8f6f 	isb	sy
 8013648:	f3bf 8f4f 	dsb	sy
 801364c:	617b      	str	r3, [r7, #20]
}
 801364e:	bf00      	nop
 8013650:	e7fe      	b.n	8013650 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013654:	699a      	ldr	r2, [r3, #24]
 8013656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013658:	18d1      	adds	r1, r2, r3
 801365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801365c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801365e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013660:	f7ff ff06 	bl	8013470 <prvInsertTimerInActiveList>
					break;
 8013664:	e015      	b.n	8013692 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801366c:	f003 0302 	and.w	r3, r3, #2
 8013670:	2b00      	cmp	r3, #0
 8013672:	d103      	bne.n	801367c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8013674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013676:	f000 fbfb 	bl	8013e70 <vPortFree>
 801367a:	e00a      	b.n	8013692 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801367e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013682:	f023 0301 	bic.w	r3, r3, #1
 8013686:	b2da      	uxtb	r2, r3
 8013688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801368a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801368e:	e000      	b.n	8013692 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8013690:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013692:	4b08      	ldr	r3, [pc, #32]	; (80136b4 <prvProcessReceivedCommands+0x1c0>)
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	1d39      	adds	r1, r7, #4
 8013698:	2200      	movs	r2, #0
 801369a:	4618      	mov	r0, r3
 801369c:	f7fd fe08 	bl	80112b0 <xQueueReceive>
 80136a0:	4603      	mov	r3, r0
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	f47f af2a 	bne.w	80134fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80136a8:	bf00      	nop
 80136aa:	bf00      	nop
 80136ac:	3730      	adds	r7, #48	; 0x30
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd80      	pop	{r7, pc}
 80136b2:	bf00      	nop
 80136b4:	200024b0 	.word	0x200024b0

080136b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b088      	sub	sp, #32
 80136bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80136be:	e048      	b.n	8013752 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80136c0:	4b2d      	ldr	r3, [pc, #180]	; (8013778 <prvSwitchTimerLists+0xc0>)
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	68db      	ldr	r3, [r3, #12]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80136ca:	4b2b      	ldr	r3, [pc, #172]	; (8013778 <prvSwitchTimerLists+0xc0>)
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	68db      	ldr	r3, [r3, #12]
 80136d0:	68db      	ldr	r3, [r3, #12]
 80136d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	3304      	adds	r3, #4
 80136d8:	4618      	mov	r0, r3
 80136da:	f7fd f93b 	bl	8010954 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	6a1b      	ldr	r3, [r3, #32]
 80136e2:	68f8      	ldr	r0, [r7, #12]
 80136e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80136ec:	f003 0304 	and.w	r3, r3, #4
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d02e      	beq.n	8013752 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	699b      	ldr	r3, [r3, #24]
 80136f8:	693a      	ldr	r2, [r7, #16]
 80136fa:	4413      	add	r3, r2
 80136fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80136fe:	68ba      	ldr	r2, [r7, #8]
 8013700:	693b      	ldr	r3, [r7, #16]
 8013702:	429a      	cmp	r2, r3
 8013704:	d90e      	bls.n	8013724 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	68ba      	ldr	r2, [r7, #8]
 801370a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	68fa      	ldr	r2, [r7, #12]
 8013710:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013712:	4b19      	ldr	r3, [pc, #100]	; (8013778 <prvSwitchTimerLists+0xc0>)
 8013714:	681a      	ldr	r2, [r3, #0]
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	3304      	adds	r3, #4
 801371a:	4619      	mov	r1, r3
 801371c:	4610      	mov	r0, r2
 801371e:	f7fd f8e0 	bl	80108e2 <vListInsert>
 8013722:	e016      	b.n	8013752 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013724:	2300      	movs	r3, #0
 8013726:	9300      	str	r3, [sp, #0]
 8013728:	2300      	movs	r3, #0
 801372a:	693a      	ldr	r2, [r7, #16]
 801372c:	2100      	movs	r1, #0
 801372e:	68f8      	ldr	r0, [r7, #12]
 8013730:	f7ff fd60 	bl	80131f4 <xTimerGenericCommand>
 8013734:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d10a      	bne.n	8013752 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801373c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013740:	f383 8811 	msr	BASEPRI, r3
 8013744:	f3bf 8f6f 	isb	sy
 8013748:	f3bf 8f4f 	dsb	sy
 801374c:	603b      	str	r3, [r7, #0]
}
 801374e:	bf00      	nop
 8013750:	e7fe      	b.n	8013750 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013752:	4b09      	ldr	r3, [pc, #36]	; (8013778 <prvSwitchTimerLists+0xc0>)
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d1b1      	bne.n	80136c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801375c:	4b06      	ldr	r3, [pc, #24]	; (8013778 <prvSwitchTimerLists+0xc0>)
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013762:	4b06      	ldr	r3, [pc, #24]	; (801377c <prvSwitchTimerLists+0xc4>)
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	4a04      	ldr	r2, [pc, #16]	; (8013778 <prvSwitchTimerLists+0xc0>)
 8013768:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801376a:	4a04      	ldr	r2, [pc, #16]	; (801377c <prvSwitchTimerLists+0xc4>)
 801376c:	697b      	ldr	r3, [r7, #20]
 801376e:	6013      	str	r3, [r2, #0]
}
 8013770:	bf00      	nop
 8013772:	3718      	adds	r7, #24
 8013774:	46bd      	mov	sp, r7
 8013776:	bd80      	pop	{r7, pc}
 8013778:	200024a8 	.word	0x200024a8
 801377c:	200024ac 	.word	0x200024ac

08013780 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b082      	sub	sp, #8
 8013784:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013786:	f000 f985 	bl	8013a94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801378a:	4b15      	ldr	r3, [pc, #84]	; (80137e0 <prvCheckForValidListAndQueue+0x60>)
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d120      	bne.n	80137d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013792:	4814      	ldr	r0, [pc, #80]	; (80137e4 <prvCheckForValidListAndQueue+0x64>)
 8013794:	f7fd f854 	bl	8010840 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013798:	4813      	ldr	r0, [pc, #76]	; (80137e8 <prvCheckForValidListAndQueue+0x68>)
 801379a:	f7fd f851 	bl	8010840 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801379e:	4b13      	ldr	r3, [pc, #76]	; (80137ec <prvCheckForValidListAndQueue+0x6c>)
 80137a0:	4a10      	ldr	r2, [pc, #64]	; (80137e4 <prvCheckForValidListAndQueue+0x64>)
 80137a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80137a4:	4b12      	ldr	r3, [pc, #72]	; (80137f0 <prvCheckForValidListAndQueue+0x70>)
 80137a6:	4a10      	ldr	r2, [pc, #64]	; (80137e8 <prvCheckForValidListAndQueue+0x68>)
 80137a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80137aa:	2300      	movs	r3, #0
 80137ac:	9300      	str	r3, [sp, #0]
 80137ae:	4b11      	ldr	r3, [pc, #68]	; (80137f4 <prvCheckForValidListAndQueue+0x74>)
 80137b0:	4a11      	ldr	r2, [pc, #68]	; (80137f8 <prvCheckForValidListAndQueue+0x78>)
 80137b2:	2110      	movs	r1, #16
 80137b4:	200a      	movs	r0, #10
 80137b6:	f7fd f95f 	bl	8010a78 <xQueueGenericCreateStatic>
 80137ba:	4603      	mov	r3, r0
 80137bc:	4a08      	ldr	r2, [pc, #32]	; (80137e0 <prvCheckForValidListAndQueue+0x60>)
 80137be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80137c0:	4b07      	ldr	r3, [pc, #28]	; (80137e0 <prvCheckForValidListAndQueue+0x60>)
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d005      	beq.n	80137d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80137c8:	4b05      	ldr	r3, [pc, #20]	; (80137e0 <prvCheckForValidListAndQueue+0x60>)
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	490b      	ldr	r1, [pc, #44]	; (80137fc <prvCheckForValidListAndQueue+0x7c>)
 80137ce:	4618      	mov	r0, r3
 80137d0:	f7fe f9ac 	bl	8011b2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80137d4:	f000 f98e 	bl	8013af4 <vPortExitCritical>
}
 80137d8:	bf00      	nop
 80137da:	46bd      	mov	sp, r7
 80137dc:	bd80      	pop	{r7, pc}
 80137de:	bf00      	nop
 80137e0:	200024b0 	.word	0x200024b0
 80137e4:	20002480 	.word	0x20002480
 80137e8:	20002494 	.word	0x20002494
 80137ec:	200024a8 	.word	0x200024a8
 80137f0:	200024ac 	.word	0x200024ac
 80137f4:	2000255c 	.word	0x2000255c
 80137f8:	200024bc 	.word	0x200024bc
 80137fc:	080158e8 	.word	0x080158e8

08013800 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8013800:	b580      	push	{r7, lr}
 8013802:	b086      	sub	sp, #24
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d10a      	bne.n	8013828 <pvTimerGetTimerID+0x28>
	__asm volatile
 8013812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013816:	f383 8811 	msr	BASEPRI, r3
 801381a:	f3bf 8f6f 	isb	sy
 801381e:	f3bf 8f4f 	dsb	sy
 8013822:	60fb      	str	r3, [r7, #12]
}
 8013824:	bf00      	nop
 8013826:	e7fe      	b.n	8013826 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8013828:	f000 f934 	bl	8013a94 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 801382c:	697b      	ldr	r3, [r7, #20]
 801382e:	69db      	ldr	r3, [r3, #28]
 8013830:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8013832:	f000 f95f 	bl	8013af4 <vPortExitCritical>

	return pvReturn;
 8013836:	693b      	ldr	r3, [r7, #16]
}
 8013838:	4618      	mov	r0, r3
 801383a:	3718      	adds	r7, #24
 801383c:	46bd      	mov	sp, r7
 801383e:	bd80      	pop	{r7, pc}

08013840 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013840:	b480      	push	{r7}
 8013842:	b085      	sub	sp, #20
 8013844:	af00      	add	r7, sp, #0
 8013846:	60f8      	str	r0, [r7, #12]
 8013848:	60b9      	str	r1, [r7, #8]
 801384a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	3b04      	subs	r3, #4
 8013850:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013858:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	3b04      	subs	r3, #4
 801385e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013860:	68bb      	ldr	r3, [r7, #8]
 8013862:	f023 0201 	bic.w	r2, r3, #1
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	3b04      	subs	r3, #4
 801386e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013870:	4a0c      	ldr	r2, [pc, #48]	; (80138a4 <pxPortInitialiseStack+0x64>)
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	3b14      	subs	r3, #20
 801387a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801387c:	687a      	ldr	r2, [r7, #4]
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	3b04      	subs	r3, #4
 8013886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	f06f 0202 	mvn.w	r2, #2
 801388e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	3b20      	subs	r3, #32
 8013894:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013896:	68fb      	ldr	r3, [r7, #12]
}
 8013898:	4618      	mov	r0, r3
 801389a:	3714      	adds	r7, #20
 801389c:	46bd      	mov	sp, r7
 801389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a2:	4770      	bx	lr
 80138a4:	080138a9 	.word	0x080138a9

080138a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80138a8:	b480      	push	{r7}
 80138aa:	b085      	sub	sp, #20
 80138ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80138ae:	2300      	movs	r3, #0
 80138b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80138b2:	4b12      	ldr	r3, [pc, #72]	; (80138fc <prvTaskExitError+0x54>)
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138ba:	d00a      	beq.n	80138d2 <prvTaskExitError+0x2a>
	__asm volatile
 80138bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138c0:	f383 8811 	msr	BASEPRI, r3
 80138c4:	f3bf 8f6f 	isb	sy
 80138c8:	f3bf 8f4f 	dsb	sy
 80138cc:	60fb      	str	r3, [r7, #12]
}
 80138ce:	bf00      	nop
 80138d0:	e7fe      	b.n	80138d0 <prvTaskExitError+0x28>
	__asm volatile
 80138d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138d6:	f383 8811 	msr	BASEPRI, r3
 80138da:	f3bf 8f6f 	isb	sy
 80138de:	f3bf 8f4f 	dsb	sy
 80138e2:	60bb      	str	r3, [r7, #8]
}
 80138e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80138e6:	bf00      	nop
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d0fc      	beq.n	80138e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80138ee:	bf00      	nop
 80138f0:	bf00      	nop
 80138f2:	3714      	adds	r7, #20
 80138f4:	46bd      	mov	sp, r7
 80138f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fa:	4770      	bx	lr
 80138fc:	2000007c 	.word	0x2000007c

08013900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013900:	4b07      	ldr	r3, [pc, #28]	; (8013920 <pxCurrentTCBConst2>)
 8013902:	6819      	ldr	r1, [r3, #0]
 8013904:	6808      	ldr	r0, [r1, #0]
 8013906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801390a:	f380 8809 	msr	PSP, r0
 801390e:	f3bf 8f6f 	isb	sy
 8013912:	f04f 0000 	mov.w	r0, #0
 8013916:	f380 8811 	msr	BASEPRI, r0
 801391a:	4770      	bx	lr
 801391c:	f3af 8000 	nop.w

08013920 <pxCurrentTCBConst2>:
 8013920:	20001f80 	.word	0x20001f80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013924:	bf00      	nop
 8013926:	bf00      	nop

08013928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013928:	4808      	ldr	r0, [pc, #32]	; (801394c <prvPortStartFirstTask+0x24>)
 801392a:	6800      	ldr	r0, [r0, #0]
 801392c:	6800      	ldr	r0, [r0, #0]
 801392e:	f380 8808 	msr	MSP, r0
 8013932:	f04f 0000 	mov.w	r0, #0
 8013936:	f380 8814 	msr	CONTROL, r0
 801393a:	b662      	cpsie	i
 801393c:	b661      	cpsie	f
 801393e:	f3bf 8f4f 	dsb	sy
 8013942:	f3bf 8f6f 	isb	sy
 8013946:	df00      	svc	0
 8013948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801394a:	bf00      	nop
 801394c:	e000ed08 	.word	0xe000ed08

08013950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013950:	b580      	push	{r7, lr}
 8013952:	b086      	sub	sp, #24
 8013954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013956:	4b46      	ldr	r3, [pc, #280]	; (8013a70 <xPortStartScheduler+0x120>)
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	4a46      	ldr	r2, [pc, #280]	; (8013a74 <xPortStartScheduler+0x124>)
 801395c:	4293      	cmp	r3, r2
 801395e:	d10a      	bne.n	8013976 <xPortStartScheduler+0x26>
	__asm volatile
 8013960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013964:	f383 8811 	msr	BASEPRI, r3
 8013968:	f3bf 8f6f 	isb	sy
 801396c:	f3bf 8f4f 	dsb	sy
 8013970:	613b      	str	r3, [r7, #16]
}
 8013972:	bf00      	nop
 8013974:	e7fe      	b.n	8013974 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013976:	4b3e      	ldr	r3, [pc, #248]	; (8013a70 <xPortStartScheduler+0x120>)
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	4a3f      	ldr	r2, [pc, #252]	; (8013a78 <xPortStartScheduler+0x128>)
 801397c:	4293      	cmp	r3, r2
 801397e:	d10a      	bne.n	8013996 <xPortStartScheduler+0x46>
	__asm volatile
 8013980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013984:	f383 8811 	msr	BASEPRI, r3
 8013988:	f3bf 8f6f 	isb	sy
 801398c:	f3bf 8f4f 	dsb	sy
 8013990:	60fb      	str	r3, [r7, #12]
}
 8013992:	bf00      	nop
 8013994:	e7fe      	b.n	8013994 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013996:	4b39      	ldr	r3, [pc, #228]	; (8013a7c <xPortStartScheduler+0x12c>)
 8013998:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801399a:	697b      	ldr	r3, [r7, #20]
 801399c:	781b      	ldrb	r3, [r3, #0]
 801399e:	b2db      	uxtb	r3, r3
 80139a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80139a2:	697b      	ldr	r3, [r7, #20]
 80139a4:	22ff      	movs	r2, #255	; 0xff
 80139a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80139a8:	697b      	ldr	r3, [r7, #20]
 80139aa:	781b      	ldrb	r3, [r3, #0]
 80139ac:	b2db      	uxtb	r3, r3
 80139ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80139b0:	78fb      	ldrb	r3, [r7, #3]
 80139b2:	b2db      	uxtb	r3, r3
 80139b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80139b8:	b2da      	uxtb	r2, r3
 80139ba:	4b31      	ldr	r3, [pc, #196]	; (8013a80 <xPortStartScheduler+0x130>)
 80139bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80139be:	4b31      	ldr	r3, [pc, #196]	; (8013a84 <xPortStartScheduler+0x134>)
 80139c0:	2207      	movs	r2, #7
 80139c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80139c4:	e009      	b.n	80139da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80139c6:	4b2f      	ldr	r3, [pc, #188]	; (8013a84 <xPortStartScheduler+0x134>)
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	3b01      	subs	r3, #1
 80139cc:	4a2d      	ldr	r2, [pc, #180]	; (8013a84 <xPortStartScheduler+0x134>)
 80139ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80139d0:	78fb      	ldrb	r3, [r7, #3]
 80139d2:	b2db      	uxtb	r3, r3
 80139d4:	005b      	lsls	r3, r3, #1
 80139d6:	b2db      	uxtb	r3, r3
 80139d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80139da:	78fb      	ldrb	r3, [r7, #3]
 80139dc:	b2db      	uxtb	r3, r3
 80139de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80139e2:	2b80      	cmp	r3, #128	; 0x80
 80139e4:	d0ef      	beq.n	80139c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80139e6:	4b27      	ldr	r3, [pc, #156]	; (8013a84 <xPortStartScheduler+0x134>)
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	f1c3 0307 	rsb	r3, r3, #7
 80139ee:	2b04      	cmp	r3, #4
 80139f0:	d00a      	beq.n	8013a08 <xPortStartScheduler+0xb8>
	__asm volatile
 80139f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139f6:	f383 8811 	msr	BASEPRI, r3
 80139fa:	f3bf 8f6f 	isb	sy
 80139fe:	f3bf 8f4f 	dsb	sy
 8013a02:	60bb      	str	r3, [r7, #8]
}
 8013a04:	bf00      	nop
 8013a06:	e7fe      	b.n	8013a06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013a08:	4b1e      	ldr	r3, [pc, #120]	; (8013a84 <xPortStartScheduler+0x134>)
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	021b      	lsls	r3, r3, #8
 8013a0e:	4a1d      	ldr	r2, [pc, #116]	; (8013a84 <xPortStartScheduler+0x134>)
 8013a10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013a12:	4b1c      	ldr	r3, [pc, #112]	; (8013a84 <xPortStartScheduler+0x134>)
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013a1a:	4a1a      	ldr	r2, [pc, #104]	; (8013a84 <xPortStartScheduler+0x134>)
 8013a1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	b2da      	uxtb	r2, r3
 8013a22:	697b      	ldr	r3, [r7, #20]
 8013a24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013a26:	4b18      	ldr	r3, [pc, #96]	; (8013a88 <xPortStartScheduler+0x138>)
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	4a17      	ldr	r2, [pc, #92]	; (8013a88 <xPortStartScheduler+0x138>)
 8013a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013a30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013a32:	4b15      	ldr	r3, [pc, #84]	; (8013a88 <xPortStartScheduler+0x138>)
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	4a14      	ldr	r2, [pc, #80]	; (8013a88 <xPortStartScheduler+0x138>)
 8013a38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013a3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013a3e:	f000 f8dd 	bl	8013bfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013a42:	4b12      	ldr	r3, [pc, #72]	; (8013a8c <xPortStartScheduler+0x13c>)
 8013a44:	2200      	movs	r2, #0
 8013a46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013a48:	f000 f8fc 	bl	8013c44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013a4c:	4b10      	ldr	r3, [pc, #64]	; (8013a90 <xPortStartScheduler+0x140>)
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	4a0f      	ldr	r2, [pc, #60]	; (8013a90 <xPortStartScheduler+0x140>)
 8013a52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013a56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013a58:	f7ff ff66 	bl	8013928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013a5c:	f7fe fca0 	bl	80123a0 <vTaskSwitchContext>
	prvTaskExitError();
 8013a60:	f7ff ff22 	bl	80138a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013a64:	2300      	movs	r3, #0
}
 8013a66:	4618      	mov	r0, r3
 8013a68:	3718      	adds	r7, #24
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	bd80      	pop	{r7, pc}
 8013a6e:	bf00      	nop
 8013a70:	e000ed00 	.word	0xe000ed00
 8013a74:	410fc271 	.word	0x410fc271
 8013a78:	410fc270 	.word	0x410fc270
 8013a7c:	e000e400 	.word	0xe000e400
 8013a80:	200025ac 	.word	0x200025ac
 8013a84:	200025b0 	.word	0x200025b0
 8013a88:	e000ed20 	.word	0xe000ed20
 8013a8c:	2000007c 	.word	0x2000007c
 8013a90:	e000ef34 	.word	0xe000ef34

08013a94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013a94:	b480      	push	{r7}
 8013a96:	b083      	sub	sp, #12
 8013a98:	af00      	add	r7, sp, #0
	__asm volatile
 8013a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a9e:	f383 8811 	msr	BASEPRI, r3
 8013aa2:	f3bf 8f6f 	isb	sy
 8013aa6:	f3bf 8f4f 	dsb	sy
 8013aaa:	607b      	str	r3, [r7, #4]
}
 8013aac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013aae:	4b0f      	ldr	r3, [pc, #60]	; (8013aec <vPortEnterCritical+0x58>)
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	3301      	adds	r3, #1
 8013ab4:	4a0d      	ldr	r2, [pc, #52]	; (8013aec <vPortEnterCritical+0x58>)
 8013ab6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013ab8:	4b0c      	ldr	r3, [pc, #48]	; (8013aec <vPortEnterCritical+0x58>)
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	2b01      	cmp	r3, #1
 8013abe:	d10f      	bne.n	8013ae0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013ac0:	4b0b      	ldr	r3, [pc, #44]	; (8013af0 <vPortEnterCritical+0x5c>)
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	b2db      	uxtb	r3, r3
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d00a      	beq.n	8013ae0 <vPortEnterCritical+0x4c>
	__asm volatile
 8013aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ace:	f383 8811 	msr	BASEPRI, r3
 8013ad2:	f3bf 8f6f 	isb	sy
 8013ad6:	f3bf 8f4f 	dsb	sy
 8013ada:	603b      	str	r3, [r7, #0]
}
 8013adc:	bf00      	nop
 8013ade:	e7fe      	b.n	8013ade <vPortEnterCritical+0x4a>
	}
}
 8013ae0:	bf00      	nop
 8013ae2:	370c      	adds	r7, #12
 8013ae4:	46bd      	mov	sp, r7
 8013ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aea:	4770      	bx	lr
 8013aec:	2000007c 	.word	0x2000007c
 8013af0:	e000ed04 	.word	0xe000ed04

08013af4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013af4:	b480      	push	{r7}
 8013af6:	b083      	sub	sp, #12
 8013af8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013afa:	4b12      	ldr	r3, [pc, #72]	; (8013b44 <vPortExitCritical+0x50>)
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d10a      	bne.n	8013b18 <vPortExitCritical+0x24>
	__asm volatile
 8013b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b06:	f383 8811 	msr	BASEPRI, r3
 8013b0a:	f3bf 8f6f 	isb	sy
 8013b0e:	f3bf 8f4f 	dsb	sy
 8013b12:	607b      	str	r3, [r7, #4]
}
 8013b14:	bf00      	nop
 8013b16:	e7fe      	b.n	8013b16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013b18:	4b0a      	ldr	r3, [pc, #40]	; (8013b44 <vPortExitCritical+0x50>)
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	3b01      	subs	r3, #1
 8013b1e:	4a09      	ldr	r2, [pc, #36]	; (8013b44 <vPortExitCritical+0x50>)
 8013b20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013b22:	4b08      	ldr	r3, [pc, #32]	; (8013b44 <vPortExitCritical+0x50>)
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d105      	bne.n	8013b36 <vPortExitCritical+0x42>
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013b2e:	683b      	ldr	r3, [r7, #0]
 8013b30:	f383 8811 	msr	BASEPRI, r3
}
 8013b34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013b36:	bf00      	nop
 8013b38:	370c      	adds	r7, #12
 8013b3a:	46bd      	mov	sp, r7
 8013b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b40:	4770      	bx	lr
 8013b42:	bf00      	nop
 8013b44:	2000007c 	.word	0x2000007c
	...

08013b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013b50:	f3ef 8009 	mrs	r0, PSP
 8013b54:	f3bf 8f6f 	isb	sy
 8013b58:	4b15      	ldr	r3, [pc, #84]	; (8013bb0 <pxCurrentTCBConst>)
 8013b5a:	681a      	ldr	r2, [r3, #0]
 8013b5c:	f01e 0f10 	tst.w	lr, #16
 8013b60:	bf08      	it	eq
 8013b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b6a:	6010      	str	r0, [r2, #0]
 8013b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013b70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013b74:	f380 8811 	msr	BASEPRI, r0
 8013b78:	f3bf 8f4f 	dsb	sy
 8013b7c:	f3bf 8f6f 	isb	sy
 8013b80:	f7fe fc0e 	bl	80123a0 <vTaskSwitchContext>
 8013b84:	f04f 0000 	mov.w	r0, #0
 8013b88:	f380 8811 	msr	BASEPRI, r0
 8013b8c:	bc09      	pop	{r0, r3}
 8013b8e:	6819      	ldr	r1, [r3, #0]
 8013b90:	6808      	ldr	r0, [r1, #0]
 8013b92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b96:	f01e 0f10 	tst.w	lr, #16
 8013b9a:	bf08      	it	eq
 8013b9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013ba0:	f380 8809 	msr	PSP, r0
 8013ba4:	f3bf 8f6f 	isb	sy
 8013ba8:	4770      	bx	lr
 8013baa:	bf00      	nop
 8013bac:	f3af 8000 	nop.w

08013bb0 <pxCurrentTCBConst>:
 8013bb0:	20001f80 	.word	0x20001f80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013bb4:	bf00      	nop
 8013bb6:	bf00      	nop

08013bb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b082      	sub	sp, #8
 8013bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8013bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bc2:	f383 8811 	msr	BASEPRI, r3
 8013bc6:	f3bf 8f6f 	isb	sy
 8013bca:	f3bf 8f4f 	dsb	sy
 8013bce:	607b      	str	r3, [r7, #4]
}
 8013bd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013bd2:	f7fe fb2b 	bl	801222c <xTaskIncrementTick>
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d003      	beq.n	8013be4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013bdc:	4b06      	ldr	r3, [pc, #24]	; (8013bf8 <xPortSysTickHandler+0x40>)
 8013bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013be2:	601a      	str	r2, [r3, #0]
 8013be4:	2300      	movs	r3, #0
 8013be6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013be8:	683b      	ldr	r3, [r7, #0]
 8013bea:	f383 8811 	msr	BASEPRI, r3
}
 8013bee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013bf0:	bf00      	nop
 8013bf2:	3708      	adds	r7, #8
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bd80      	pop	{r7, pc}
 8013bf8:	e000ed04 	.word	0xe000ed04

08013bfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013bfc:	b480      	push	{r7}
 8013bfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013c00:	4b0b      	ldr	r3, [pc, #44]	; (8013c30 <vPortSetupTimerInterrupt+0x34>)
 8013c02:	2200      	movs	r2, #0
 8013c04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013c06:	4b0b      	ldr	r3, [pc, #44]	; (8013c34 <vPortSetupTimerInterrupt+0x38>)
 8013c08:	2200      	movs	r2, #0
 8013c0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013c0c:	4b0a      	ldr	r3, [pc, #40]	; (8013c38 <vPortSetupTimerInterrupt+0x3c>)
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	4a0a      	ldr	r2, [pc, #40]	; (8013c3c <vPortSetupTimerInterrupt+0x40>)
 8013c12:	fba2 2303 	umull	r2, r3, r2, r3
 8013c16:	099b      	lsrs	r3, r3, #6
 8013c18:	4a09      	ldr	r2, [pc, #36]	; (8013c40 <vPortSetupTimerInterrupt+0x44>)
 8013c1a:	3b01      	subs	r3, #1
 8013c1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013c1e:	4b04      	ldr	r3, [pc, #16]	; (8013c30 <vPortSetupTimerInterrupt+0x34>)
 8013c20:	2207      	movs	r2, #7
 8013c22:	601a      	str	r2, [r3, #0]
}
 8013c24:	bf00      	nop
 8013c26:	46bd      	mov	sp, r7
 8013c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2c:	4770      	bx	lr
 8013c2e:	bf00      	nop
 8013c30:	e000e010 	.word	0xe000e010
 8013c34:	e000e018 	.word	0xe000e018
 8013c38:	20000070 	.word	0x20000070
 8013c3c:	10624dd3 	.word	0x10624dd3
 8013c40:	e000e014 	.word	0xe000e014

08013c44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013c44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013c54 <vPortEnableVFP+0x10>
 8013c48:	6801      	ldr	r1, [r0, #0]
 8013c4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013c4e:	6001      	str	r1, [r0, #0]
 8013c50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013c52:	bf00      	nop
 8013c54:	e000ed88 	.word	0xe000ed88

08013c58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013c58:	b480      	push	{r7}
 8013c5a:	b085      	sub	sp, #20
 8013c5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013c5e:	f3ef 8305 	mrs	r3, IPSR
 8013c62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	2b0f      	cmp	r3, #15
 8013c68:	d914      	bls.n	8013c94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013c6a:	4a17      	ldr	r2, [pc, #92]	; (8013cc8 <vPortValidateInterruptPriority+0x70>)
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	4413      	add	r3, r2
 8013c70:	781b      	ldrb	r3, [r3, #0]
 8013c72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013c74:	4b15      	ldr	r3, [pc, #84]	; (8013ccc <vPortValidateInterruptPriority+0x74>)
 8013c76:	781b      	ldrb	r3, [r3, #0]
 8013c78:	7afa      	ldrb	r2, [r7, #11]
 8013c7a:	429a      	cmp	r2, r3
 8013c7c:	d20a      	bcs.n	8013c94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8013c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c82:	f383 8811 	msr	BASEPRI, r3
 8013c86:	f3bf 8f6f 	isb	sy
 8013c8a:	f3bf 8f4f 	dsb	sy
 8013c8e:	607b      	str	r3, [r7, #4]
}
 8013c90:	bf00      	nop
 8013c92:	e7fe      	b.n	8013c92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013c94:	4b0e      	ldr	r3, [pc, #56]	; (8013cd0 <vPortValidateInterruptPriority+0x78>)
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013c9c:	4b0d      	ldr	r3, [pc, #52]	; (8013cd4 <vPortValidateInterruptPriority+0x7c>)
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	429a      	cmp	r2, r3
 8013ca2:	d90a      	bls.n	8013cba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ca8:	f383 8811 	msr	BASEPRI, r3
 8013cac:	f3bf 8f6f 	isb	sy
 8013cb0:	f3bf 8f4f 	dsb	sy
 8013cb4:	603b      	str	r3, [r7, #0]
}
 8013cb6:	bf00      	nop
 8013cb8:	e7fe      	b.n	8013cb8 <vPortValidateInterruptPriority+0x60>
	}
 8013cba:	bf00      	nop
 8013cbc:	3714      	adds	r7, #20
 8013cbe:	46bd      	mov	sp, r7
 8013cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc4:	4770      	bx	lr
 8013cc6:	bf00      	nop
 8013cc8:	e000e3f0 	.word	0xe000e3f0
 8013ccc:	200025ac 	.word	0x200025ac
 8013cd0:	e000ed0c 	.word	0xe000ed0c
 8013cd4:	200025b0 	.word	0x200025b0

08013cd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b08a      	sub	sp, #40	; 0x28
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013ce4:	f7fe f9e6 	bl	80120b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013ce8:	4b5b      	ldr	r3, [pc, #364]	; (8013e58 <pvPortMalloc+0x180>)
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d101      	bne.n	8013cf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013cf0:	f000 f920 	bl	8013f34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013cf4:	4b59      	ldr	r3, [pc, #356]	; (8013e5c <pvPortMalloc+0x184>)
 8013cf6:	681a      	ldr	r2, [r3, #0]
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	4013      	ands	r3, r2
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	f040 8093 	bne.w	8013e28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d01d      	beq.n	8013d44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013d08:	2208      	movs	r2, #8
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	4413      	add	r3, r2
 8013d0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	f003 0307 	and.w	r3, r3, #7
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d014      	beq.n	8013d44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	f023 0307 	bic.w	r3, r3, #7
 8013d20:	3308      	adds	r3, #8
 8013d22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	f003 0307 	and.w	r3, r3, #7
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d00a      	beq.n	8013d44 <pvPortMalloc+0x6c>
	__asm volatile
 8013d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d32:	f383 8811 	msr	BASEPRI, r3
 8013d36:	f3bf 8f6f 	isb	sy
 8013d3a:	f3bf 8f4f 	dsb	sy
 8013d3e:	617b      	str	r3, [r7, #20]
}
 8013d40:	bf00      	nop
 8013d42:	e7fe      	b.n	8013d42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d06e      	beq.n	8013e28 <pvPortMalloc+0x150>
 8013d4a:	4b45      	ldr	r3, [pc, #276]	; (8013e60 <pvPortMalloc+0x188>)
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	687a      	ldr	r2, [r7, #4]
 8013d50:	429a      	cmp	r2, r3
 8013d52:	d869      	bhi.n	8013e28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013d54:	4b43      	ldr	r3, [pc, #268]	; (8013e64 <pvPortMalloc+0x18c>)
 8013d56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013d58:	4b42      	ldr	r3, [pc, #264]	; (8013e64 <pvPortMalloc+0x18c>)
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013d5e:	e004      	b.n	8013d6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d6c:	685b      	ldr	r3, [r3, #4]
 8013d6e:	687a      	ldr	r2, [r7, #4]
 8013d70:	429a      	cmp	r2, r3
 8013d72:	d903      	bls.n	8013d7c <pvPortMalloc+0xa4>
 8013d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d1f1      	bne.n	8013d60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013d7c:	4b36      	ldr	r3, [pc, #216]	; (8013e58 <pvPortMalloc+0x180>)
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d82:	429a      	cmp	r2, r3
 8013d84:	d050      	beq.n	8013e28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013d86:	6a3b      	ldr	r3, [r7, #32]
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	2208      	movs	r2, #8
 8013d8c:	4413      	add	r3, r2
 8013d8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d92:	681a      	ldr	r2, [r3, #0]
 8013d94:	6a3b      	ldr	r3, [r7, #32]
 8013d96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d9a:	685a      	ldr	r2, [r3, #4]
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	1ad2      	subs	r2, r2, r3
 8013da0:	2308      	movs	r3, #8
 8013da2:	005b      	lsls	r3, r3, #1
 8013da4:	429a      	cmp	r2, r3
 8013da6:	d91f      	bls.n	8013de8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	4413      	add	r3, r2
 8013dae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013db0:	69bb      	ldr	r3, [r7, #24]
 8013db2:	f003 0307 	and.w	r3, r3, #7
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d00a      	beq.n	8013dd0 <pvPortMalloc+0xf8>
	__asm volatile
 8013dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dbe:	f383 8811 	msr	BASEPRI, r3
 8013dc2:	f3bf 8f6f 	isb	sy
 8013dc6:	f3bf 8f4f 	dsb	sy
 8013dca:	613b      	str	r3, [r7, #16]
}
 8013dcc:	bf00      	nop
 8013dce:	e7fe      	b.n	8013dce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dd2:	685a      	ldr	r2, [r3, #4]
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	1ad2      	subs	r2, r2, r3
 8013dd8:	69bb      	ldr	r3, [r7, #24]
 8013dda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dde:	687a      	ldr	r2, [r7, #4]
 8013de0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013de2:	69b8      	ldr	r0, [r7, #24]
 8013de4:	f000 f908 	bl	8013ff8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013de8:	4b1d      	ldr	r3, [pc, #116]	; (8013e60 <pvPortMalloc+0x188>)
 8013dea:	681a      	ldr	r2, [r3, #0]
 8013dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dee:	685b      	ldr	r3, [r3, #4]
 8013df0:	1ad3      	subs	r3, r2, r3
 8013df2:	4a1b      	ldr	r2, [pc, #108]	; (8013e60 <pvPortMalloc+0x188>)
 8013df4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013df6:	4b1a      	ldr	r3, [pc, #104]	; (8013e60 <pvPortMalloc+0x188>)
 8013df8:	681a      	ldr	r2, [r3, #0]
 8013dfa:	4b1b      	ldr	r3, [pc, #108]	; (8013e68 <pvPortMalloc+0x190>)
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	429a      	cmp	r2, r3
 8013e00:	d203      	bcs.n	8013e0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013e02:	4b17      	ldr	r3, [pc, #92]	; (8013e60 <pvPortMalloc+0x188>)
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	4a18      	ldr	r2, [pc, #96]	; (8013e68 <pvPortMalloc+0x190>)
 8013e08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e0c:	685a      	ldr	r2, [r3, #4]
 8013e0e:	4b13      	ldr	r3, [pc, #76]	; (8013e5c <pvPortMalloc+0x184>)
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	431a      	orrs	r2, r3
 8013e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8013e1e:	4b13      	ldr	r3, [pc, #76]	; (8013e6c <pvPortMalloc+0x194>)
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	3301      	adds	r3, #1
 8013e24:	4a11      	ldr	r2, [pc, #68]	; (8013e6c <pvPortMalloc+0x194>)
 8013e26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013e28:	f7fe f952 	bl	80120d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013e2c:	69fb      	ldr	r3, [r7, #28]
 8013e2e:	f003 0307 	and.w	r3, r3, #7
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d00a      	beq.n	8013e4c <pvPortMalloc+0x174>
	__asm volatile
 8013e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e3a:	f383 8811 	msr	BASEPRI, r3
 8013e3e:	f3bf 8f6f 	isb	sy
 8013e42:	f3bf 8f4f 	dsb	sy
 8013e46:	60fb      	str	r3, [r7, #12]
}
 8013e48:	bf00      	nop
 8013e4a:	e7fe      	b.n	8013e4a <pvPortMalloc+0x172>
	return pvReturn;
 8013e4c:	69fb      	ldr	r3, [r7, #28]
}
 8013e4e:	4618      	mov	r0, r3
 8013e50:	3728      	adds	r7, #40	; 0x28
 8013e52:	46bd      	mov	sp, r7
 8013e54:	bd80      	pop	{r7, pc}
 8013e56:	bf00      	nop
 8013e58:	200031bc 	.word	0x200031bc
 8013e5c:	200031d0 	.word	0x200031d0
 8013e60:	200031c0 	.word	0x200031c0
 8013e64:	200031b4 	.word	0x200031b4
 8013e68:	200031c4 	.word	0x200031c4
 8013e6c:	200031c8 	.word	0x200031c8

08013e70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b086      	sub	sp, #24
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d04d      	beq.n	8013f1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013e82:	2308      	movs	r3, #8
 8013e84:	425b      	negs	r3, r3
 8013e86:	697a      	ldr	r2, [r7, #20]
 8013e88:	4413      	add	r3, r2
 8013e8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013e8c:	697b      	ldr	r3, [r7, #20]
 8013e8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013e90:	693b      	ldr	r3, [r7, #16]
 8013e92:	685a      	ldr	r2, [r3, #4]
 8013e94:	4b24      	ldr	r3, [pc, #144]	; (8013f28 <vPortFree+0xb8>)
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	4013      	ands	r3, r2
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d10a      	bne.n	8013eb4 <vPortFree+0x44>
	__asm volatile
 8013e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ea2:	f383 8811 	msr	BASEPRI, r3
 8013ea6:	f3bf 8f6f 	isb	sy
 8013eaa:	f3bf 8f4f 	dsb	sy
 8013eae:	60fb      	str	r3, [r7, #12]
}
 8013eb0:	bf00      	nop
 8013eb2:	e7fe      	b.n	8013eb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013eb4:	693b      	ldr	r3, [r7, #16]
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d00a      	beq.n	8013ed2 <vPortFree+0x62>
	__asm volatile
 8013ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ec0:	f383 8811 	msr	BASEPRI, r3
 8013ec4:	f3bf 8f6f 	isb	sy
 8013ec8:	f3bf 8f4f 	dsb	sy
 8013ecc:	60bb      	str	r3, [r7, #8]
}
 8013ece:	bf00      	nop
 8013ed0:	e7fe      	b.n	8013ed0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013ed2:	693b      	ldr	r3, [r7, #16]
 8013ed4:	685a      	ldr	r2, [r3, #4]
 8013ed6:	4b14      	ldr	r3, [pc, #80]	; (8013f28 <vPortFree+0xb8>)
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	4013      	ands	r3, r2
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d01e      	beq.n	8013f1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013ee0:	693b      	ldr	r3, [r7, #16]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d11a      	bne.n	8013f1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013ee8:	693b      	ldr	r3, [r7, #16]
 8013eea:	685a      	ldr	r2, [r3, #4]
 8013eec:	4b0e      	ldr	r3, [pc, #56]	; (8013f28 <vPortFree+0xb8>)
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	43db      	mvns	r3, r3
 8013ef2:	401a      	ands	r2, r3
 8013ef4:	693b      	ldr	r3, [r7, #16]
 8013ef6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013ef8:	f7fe f8dc 	bl	80120b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013efc:	693b      	ldr	r3, [r7, #16]
 8013efe:	685a      	ldr	r2, [r3, #4]
 8013f00:	4b0a      	ldr	r3, [pc, #40]	; (8013f2c <vPortFree+0xbc>)
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	4413      	add	r3, r2
 8013f06:	4a09      	ldr	r2, [pc, #36]	; (8013f2c <vPortFree+0xbc>)
 8013f08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013f0a:	6938      	ldr	r0, [r7, #16]
 8013f0c:	f000 f874 	bl	8013ff8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013f10:	4b07      	ldr	r3, [pc, #28]	; (8013f30 <vPortFree+0xc0>)
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	3301      	adds	r3, #1
 8013f16:	4a06      	ldr	r2, [pc, #24]	; (8013f30 <vPortFree+0xc0>)
 8013f18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8013f1a:	f7fe f8d9 	bl	80120d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013f1e:	bf00      	nop
 8013f20:	3718      	adds	r7, #24
 8013f22:	46bd      	mov	sp, r7
 8013f24:	bd80      	pop	{r7, pc}
 8013f26:	bf00      	nop
 8013f28:	200031d0 	.word	0x200031d0
 8013f2c:	200031c0 	.word	0x200031c0
 8013f30:	200031cc 	.word	0x200031cc

08013f34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013f34:	b480      	push	{r7}
 8013f36:	b085      	sub	sp, #20
 8013f38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013f3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8013f3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013f40:	4b27      	ldr	r3, [pc, #156]	; (8013fe0 <prvHeapInit+0xac>)
 8013f42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	f003 0307 	and.w	r3, r3, #7
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d00c      	beq.n	8013f68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	3307      	adds	r3, #7
 8013f52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	f023 0307 	bic.w	r3, r3, #7
 8013f5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013f5c:	68ba      	ldr	r2, [r7, #8]
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	1ad3      	subs	r3, r2, r3
 8013f62:	4a1f      	ldr	r2, [pc, #124]	; (8013fe0 <prvHeapInit+0xac>)
 8013f64:	4413      	add	r3, r2
 8013f66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013f6c:	4a1d      	ldr	r2, [pc, #116]	; (8013fe4 <prvHeapInit+0xb0>)
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013f72:	4b1c      	ldr	r3, [pc, #112]	; (8013fe4 <prvHeapInit+0xb0>)
 8013f74:	2200      	movs	r2, #0
 8013f76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	68ba      	ldr	r2, [r7, #8]
 8013f7c:	4413      	add	r3, r2
 8013f7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013f80:	2208      	movs	r2, #8
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	1a9b      	subs	r3, r3, r2
 8013f86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	f023 0307 	bic.w	r3, r3, #7
 8013f8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	4a15      	ldr	r2, [pc, #84]	; (8013fe8 <prvHeapInit+0xb4>)
 8013f94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013f96:	4b14      	ldr	r3, [pc, #80]	; (8013fe8 <prvHeapInit+0xb4>)
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013f9e:	4b12      	ldr	r3, [pc, #72]	; (8013fe8 <prvHeapInit+0xb4>)
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013faa:	683b      	ldr	r3, [r7, #0]
 8013fac:	68fa      	ldr	r2, [r7, #12]
 8013fae:	1ad2      	subs	r2, r2, r3
 8013fb0:	683b      	ldr	r3, [r7, #0]
 8013fb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013fb4:	4b0c      	ldr	r3, [pc, #48]	; (8013fe8 <prvHeapInit+0xb4>)
 8013fb6:	681a      	ldr	r2, [r3, #0]
 8013fb8:	683b      	ldr	r3, [r7, #0]
 8013fba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013fbc:	683b      	ldr	r3, [r7, #0]
 8013fbe:	685b      	ldr	r3, [r3, #4]
 8013fc0:	4a0a      	ldr	r2, [pc, #40]	; (8013fec <prvHeapInit+0xb8>)
 8013fc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013fc4:	683b      	ldr	r3, [r7, #0]
 8013fc6:	685b      	ldr	r3, [r3, #4]
 8013fc8:	4a09      	ldr	r2, [pc, #36]	; (8013ff0 <prvHeapInit+0xbc>)
 8013fca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013fcc:	4b09      	ldr	r3, [pc, #36]	; (8013ff4 <prvHeapInit+0xc0>)
 8013fce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013fd2:	601a      	str	r2, [r3, #0]
}
 8013fd4:	bf00      	nop
 8013fd6:	3714      	adds	r7, #20
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fde:	4770      	bx	lr
 8013fe0:	200025b4 	.word	0x200025b4
 8013fe4:	200031b4 	.word	0x200031b4
 8013fe8:	200031bc 	.word	0x200031bc
 8013fec:	200031c4 	.word	0x200031c4
 8013ff0:	200031c0 	.word	0x200031c0
 8013ff4:	200031d0 	.word	0x200031d0

08013ff8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013ff8:	b480      	push	{r7}
 8013ffa:	b085      	sub	sp, #20
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014000:	4b28      	ldr	r3, [pc, #160]	; (80140a4 <prvInsertBlockIntoFreeList+0xac>)
 8014002:	60fb      	str	r3, [r7, #12]
 8014004:	e002      	b.n	801400c <prvInsertBlockIntoFreeList+0x14>
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	60fb      	str	r3, [r7, #12]
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	687a      	ldr	r2, [r7, #4]
 8014012:	429a      	cmp	r2, r3
 8014014:	d8f7      	bhi.n	8014006 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	685b      	ldr	r3, [r3, #4]
 801401e:	68ba      	ldr	r2, [r7, #8]
 8014020:	4413      	add	r3, r2
 8014022:	687a      	ldr	r2, [r7, #4]
 8014024:	429a      	cmp	r2, r3
 8014026:	d108      	bne.n	801403a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	685a      	ldr	r2, [r3, #4]
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	685b      	ldr	r3, [r3, #4]
 8014030:	441a      	add	r2, r3
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	685b      	ldr	r3, [r3, #4]
 8014042:	68ba      	ldr	r2, [r7, #8]
 8014044:	441a      	add	r2, r3
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	429a      	cmp	r2, r3
 801404c:	d118      	bne.n	8014080 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	681a      	ldr	r2, [r3, #0]
 8014052:	4b15      	ldr	r3, [pc, #84]	; (80140a8 <prvInsertBlockIntoFreeList+0xb0>)
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	429a      	cmp	r2, r3
 8014058:	d00d      	beq.n	8014076 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	685a      	ldr	r2, [r3, #4]
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	685b      	ldr	r3, [r3, #4]
 8014064:	441a      	add	r2, r3
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	681a      	ldr	r2, [r3, #0]
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	601a      	str	r2, [r3, #0]
 8014074:	e008      	b.n	8014088 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014076:	4b0c      	ldr	r3, [pc, #48]	; (80140a8 <prvInsertBlockIntoFreeList+0xb0>)
 8014078:	681a      	ldr	r2, [r3, #0]
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	601a      	str	r2, [r3, #0]
 801407e:	e003      	b.n	8014088 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	681a      	ldr	r2, [r3, #0]
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014088:	68fa      	ldr	r2, [r7, #12]
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	429a      	cmp	r2, r3
 801408e:	d002      	beq.n	8014096 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	687a      	ldr	r2, [r7, #4]
 8014094:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014096:	bf00      	nop
 8014098:	3714      	adds	r7, #20
 801409a:	46bd      	mov	sp, r7
 801409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a0:	4770      	bx	lr
 80140a2:	bf00      	nop
 80140a4:	200031b4 	.word	0x200031b4
 80140a8:	200031bc 	.word	0x200031bc

080140ac <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80140ac:	b480      	push	{r7}
 80140ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80140b0:	4b03      	ldr	r3, [pc, #12]	; (80140c0 <LL_FLASH_GetUDN+0x14>)
 80140b2:	681b      	ldr	r3, [r3, #0]
}
 80140b4:	4618      	mov	r0, r3
 80140b6:	46bd      	mov	sp, r7
 80140b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140bc:	4770      	bx	lr
 80140be:	bf00      	nop
 80140c0:	1fff7580 	.word	0x1fff7580

080140c4 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80140c4:	b480      	push	{r7}
 80140c6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80140c8:	4b03      	ldr	r3, [pc, #12]	; (80140d8 <LL_FLASH_GetDeviceID+0x14>)
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	b2db      	uxtb	r3, r3
}
 80140ce:	4618      	mov	r0, r3
 80140d0:	46bd      	mov	sp, r7
 80140d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d6:	4770      	bx	lr
 80140d8:	1fff7584 	.word	0x1fff7584

080140dc <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80140dc:	b480      	push	{r7}
 80140de:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80140e0:	4b03      	ldr	r3, [pc, #12]	; (80140f0 <LL_FLASH_GetSTCompanyID+0x14>)
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	0a1b      	lsrs	r3, r3, #8
}
 80140e6:	4618      	mov	r0, r3
 80140e8:	46bd      	mov	sp, r7
 80140ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ee:	4770      	bx	lr
 80140f0:	1fff7584 	.word	0x1fff7584

080140f4 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80140f4:	b5b0      	push	{r4, r5, r7, lr}
 80140f6:	b090      	sub	sp, #64	; 0x40
 80140f8:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80140fa:	4b2e      	ldr	r3, [pc, #184]	; (80141b4 <APP_BLE_Init+0xc0>)
 80140fc:	1d3c      	adds	r4, r7, #4
 80140fe:	461d      	mov	r5, r3
 8014100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801410a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801410c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8014110:	c403      	stmia	r4!, {r0, r1}
 8014112:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8014114:	f000 f8ee 	bl	80142f4 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8014118:	2101      	movs	r1, #1
 801411a:	2002      	movs	r0, #2
 801411c:	f000 fe06 	bl	8014d2c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  HciUserEvtProcessId = osThreadNew(HciUserEvtProcess, NULL, &HciUserEvtProcess_attr);
 8014120:	4a25      	ldr	r2, [pc, #148]	; (80141b8 <APP_BLE_Init+0xc4>)
 8014122:	2100      	movs	r1, #0
 8014124:	4825      	ldr	r0, [pc, #148]	; (80141bc <APP_BLE_Init+0xc8>)
 8014126:	f7fb ff37 	bl	800ff98 <osThreadNew>
 801412a:	4603      	mov	r3, r0
 801412c:	4a24      	ldr	r2, [pc, #144]	; (80141c0 <APP_BLE_Init+0xcc>)
 801412e:	6013      	str	r3, [r2, #0]

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8014130:	1d3b      	adds	r3, r7, #4
 8014132:	4618      	mov	r0, r3
 8014134:	f7fa ffae 	bl	800f094 <SHCI_C2_BLE_Init>
 8014138:	4603      	mov	r3, r0
 801413a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (status != SHCI_Success)
 801413e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014142:	2b00      	cmp	r3, #0
 8014144:	d001      	beq.n	801414a <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8014146:	f7ef f859 	bl	80031fc <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 801414a:	f000 f8fb 	bl	8014344 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 801414e:	f7fa fefb 	bl	800ef48 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8014152:	4b1c      	ldr	r3, [pc, #112]	; (80141c4 <APP_BLE_Init+0xd0>)
 8014154:	2200      	movs	r2, #0
 8014156:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 801415a:	4b1a      	ldr	r3, [pc, #104]	; (80141c4 <APP_BLE_Init+0xd0>)
 801415c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014160:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  AdvUpdateProcessId = osThreadNew(AdvUpdateProcess, NULL, &AdvUpdateProcess_attr);
 8014162:	4a19      	ldr	r2, [pc, #100]	; (80141c8 <APP_BLE_Init+0xd4>)
 8014164:	2100      	movs	r1, #0
 8014166:	4819      	ldr	r0, [pc, #100]	; (80141cc <APP_BLE_Init+0xd8>)
 8014168:	f7fb ff16 	bl	800ff98 <osThreadNew>
 801416c:	4603      	mov	r3, r0
 801416e:	4a18      	ldr	r2, [pc, #96]	; (80141d0 <APP_BLE_Init+0xdc>)
 8014170:	6013      	str	r3, [r2, #0]
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

  /**
   * Initialize DIS Application
   */
  DISAPP_Init();
 8014172:	f000 fb37 	bl	80147e4 <DISAPP_Init>

  /**
   * Initialize HRS Application
   */
  HRSAPP_Init();
 8014176:	f000 fb59 	bl	801482c <HRSAPP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the connection state machine
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Mgr);
 801417a:	4b16      	ldr	r3, [pc, #88]	; (80141d4 <APP_BLE_Init+0xe0>)
 801417c:	2200      	movs	r2, #0
 801417e:	4916      	ldr	r1, [pc, #88]	; (80141d8 <APP_BLE_Init+0xe4>)
 8014180:	2000      	movs	r0, #0
 8014182:	f7ee fc21 	bl	80029c8 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = AD_TYPE_16_BIT_SERV_UUID;
 8014186:	4b0f      	ldr	r3, [pc, #60]	; (80141c4 <APP_BLE_Init+0xd0>)
 8014188:	2202      	movs	r2, #2
 801418a:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 1;
 801418c:	4b0d      	ldr	r3, [pc, #52]	; (80141c4 <APP_BLE_Init+0xd0>)
 801418e:	2201      	movs	r2, #1
 8014190:	761a      	strb	r2, [r3, #24]
  Add_Advertisment_Service_UUID(HEART_RATE_SERVICE_UUID);
 8014192:	f641 000d 	movw	r0, #6157	; 0x180d
 8014196:	f000 fa5d 	bl	8014654 <Add_Advertisment_Service_UUID>

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 801419a:	4b10      	ldr	r3, [pc, #64]	; (80141dc <APP_BLE_Init+0xe8>)
 801419c:	2280      	movs	r2, #128	; 0x80
 801419e:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 80141a0:	4b0f      	ldr	r3, [pc, #60]	; (80141e0 <APP_BLE_Init+0xec>)
 80141a2:	22a0      	movs	r2, #160	; 0xa0
 80141a4:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by Collector
   */
  Adv_Request(APP_BLE_FAST_ADV);
 80141a6:	2001      	movs	r0, #1
 80141a8:	f000 f9a0 	bl	80144ec <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80141ac:	bf00      	nop
}
 80141ae:	3740      	adds	r7, #64	; 0x40
 80141b0:	46bd      	mov	sp, r7
 80141b2:	bdb0      	pop	{r4, r5, r7, pc}
 80141b4:	0801591c 	.word	0x0801591c
 80141b8:	08015c10 	.word	0x08015c10
 80141bc:	080146ed 	.word	0x080146ed
 80141c0:	20003270 	.word	0x20003270
 80141c4:	200031dc 	.word	0x200031dc
 80141c8:	08015bec 	.word	0x08015bec
 80141cc:	080146c5 	.word	0x080146c5
 80141d0:	2000326c 	.word	0x2000326c
 80141d4:	080146ad 	.word	0x080146ad
 80141d8:	2000325d 	.word	0x2000325d
 80141dc:	20003260 	.word	0x20003260
 80141e0:	20003262 	.word	0x20003262

080141e4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b08a      	sub	sp, #40	; 0x28
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 80141ec:	2392      	movs	r3, #146	; 0x92
 80141ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	3301      	adds	r3, #1
 80141f6:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 80141f8:	6a3b      	ldr	r3, [r7, #32]
 80141fa:	781b      	ldrb	r3, [r3, #0]
 80141fc:	2bff      	cmp	r3, #255	; 0xff
 80141fe:	d061      	beq.n	80142c4 <SVCCTL_App_Notification+0xe0>
 8014200:	2bff      	cmp	r3, #255	; 0xff
 8014202:	dc6c      	bgt.n	80142de <SVCCTL_App_Notification+0xfa>
 8014204:	2b05      	cmp	r3, #5
 8014206:	d002      	beq.n	801420e <SVCCTL_App_Notification+0x2a>
 8014208:	2b3e      	cmp	r3, #62	; 0x3e
 801420a:	d016      	beq.n	801423a <SVCCTL_App_Notification+0x56>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 801420c:	e067      	b.n	80142de <SVCCTL_App_Notification+0xfa>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 801420e:	6a3b      	ldr	r3, [r7, #32]
 8014210:	3302      	adds	r3, #2
 8014212:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801421a:	b29a      	uxth	r2, r3
 801421c:	4b34      	ldr	r3, [pc, #208]	; (80142f0 <SVCCTL_App_Notification+0x10c>)
 801421e:	8adb      	ldrh	r3, [r3, #22]
 8014220:	429a      	cmp	r2, r3
 8014222:	d106      	bne.n	8014232 <SVCCTL_App_Notification+0x4e>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8014224:	4b32      	ldr	r3, [pc, #200]	; (80142f0 <SVCCTL_App_Notification+0x10c>)
 8014226:	2200      	movs	r2, #0
 8014228:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 801422a:	4b31      	ldr	r3, [pc, #196]	; (80142f0 <SVCCTL_App_Notification+0x10c>)
 801422c:	2200      	movs	r2, #0
 801422e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8014232:	2001      	movs	r0, #1
 8014234:	f000 f95a 	bl	80144ec <Adv_Request>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8014238:	e054      	b.n	80142e4 <SVCCTL_App_Notification+0x100>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 801423a:	6a3b      	ldr	r3, [r7, #32]
 801423c:	3302      	adds	r3, #2
 801423e:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8014240:	69bb      	ldr	r3, [r7, #24]
 8014242:	781b      	ldrb	r3, [r3, #0]
 8014244:	2b0c      	cmp	r3, #12
 8014246:	d005      	beq.n	8014254 <SVCCTL_App_Notification+0x70>
 8014248:	2b0c      	cmp	r3, #12
 801424a:	dc37      	bgt.n	80142bc <SVCCTL_App_Notification+0xd8>
 801424c:	2b01      	cmp	r3, #1
 801424e:	d017      	beq.n	8014280 <SVCCTL_App_Notification+0x9c>
 8014250:	2b03      	cmp	r3, #3
          break;
 8014252:	e033      	b.n	80142bc <SVCCTL_App_Notification+0xd8>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 8014254:	69bb      	ldr	r3, [r7, #24]
 8014256:	3301      	adds	r3, #1
 8014258:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 801425a:	4b25      	ldr	r3, [pc, #148]	; (80142f0 <SVCCTL_App_Notification+0x10c>)
 801425c:	8adb      	ldrh	r3, [r3, #22]
 801425e:	f107 020a 	add.w	r2, r7, #10
 8014262:	f107 010b 	add.w	r1, r7, #11
 8014266:	4618      	mov	r0, r3
 8014268:	f7fa fbb5 	bl	800e9d6 <hci_le_read_phy>
 801426c:	4603      	mov	r3, r0
 801426e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 8014272:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014276:	2b00      	cmp	r3, #0
 8014278:	d122      	bne.n	80142c0 <SVCCTL_App_Notification+0xdc>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 801427a:	7afb      	ldrb	r3, [r7, #11]
 801427c:	2b02      	cmp	r3, #2
          break;
 801427e:	e01f      	b.n	80142c0 <SVCCTL_App_Notification+0xdc>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8014280:	69bb      	ldr	r3, [r7, #24]
 8014282:	3301      	adds	r3, #1
 8014284:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8014286:	4b1a      	ldr	r3, [pc, #104]	; (80142f0 <SVCCTL_App_Notification+0x10c>)
 8014288:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801428c:	4618      	mov	r0, r3
 801428e:	f7ee fc15 	bl	8002abc <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8014292:	4b17      	ldr	r3, [pc, #92]	; (80142f0 <SVCCTL_App_Notification+0x10c>)
 8014294:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014298:	2b04      	cmp	r3, #4
 801429a:	d104      	bne.n	80142a6 <SVCCTL_App_Notification+0xc2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 801429c:	4b14      	ldr	r3, [pc, #80]	; (80142f0 <SVCCTL_App_Notification+0x10c>)
 801429e:	2206      	movs	r2, #6
 80142a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80142a4:	e003      	b.n	80142ae <SVCCTL_App_Notification+0xca>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80142a6:	4b12      	ldr	r3, [pc, #72]	; (80142f0 <SVCCTL_App_Notification+0x10c>)
 80142a8:	2205      	movs	r2, #5
 80142aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80142ae:	693b      	ldr	r3, [r7, #16]
 80142b0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80142b4:	b29a      	uxth	r2, r3
 80142b6:	4b0e      	ldr	r3, [pc, #56]	; (80142f0 <SVCCTL_App_Notification+0x10c>)
 80142b8:	82da      	strh	r2, [r3, #22]
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80142ba:	e002      	b.n	80142c2 <SVCCTL_App_Notification+0xde>
          break;
 80142bc:	bf00      	nop
 80142be:	e011      	b.n	80142e4 <SVCCTL_App_Notification+0x100>
          break;
 80142c0:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80142c2:	e00f      	b.n	80142e4 <SVCCTL_App_Notification+0x100>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80142c4:	6a3b      	ldr	r3, [r7, #32]
 80142c6:	3302      	adds	r3, #2
 80142c8:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 80142ca:	69fb      	ldr	r3, [r7, #28]
 80142cc:	881b      	ldrh	r3, [r3, #0]
 80142ce:	b29b      	uxth	r3, r3
 80142d0:	461a      	mov	r2, r3
 80142d2:	f240 4307 	movw	r3, #1031	; 0x407
 80142d6:	429a      	cmp	r2, r3
 80142d8:	d103      	bne.n	80142e2 <SVCCTL_App_Notification+0xfe>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80142da:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80142dc:	e001      	b.n	80142e2 <SVCCTL_App_Notification+0xfe>
      break;
 80142de:	bf00      	nop
 80142e0:	e000      	b.n	80142e4 <SVCCTL_App_Notification+0x100>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80142e2:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80142e4:	2301      	movs	r3, #1
}
 80142e6:	4618      	mov	r0, r3
 80142e8:	3728      	adds	r7, #40	; 0x28
 80142ea:	46bd      	mov	sp, r7
 80142ec:	bd80      	pop	{r7, pc}
 80142ee:	bf00      	nop
 80142f0:	200031dc 	.word	0x200031dc

080142f4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b082      	sub	sp, #8
 80142f8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  MtxHciId = osMutexNew(NULL);
 80142fa:	2000      	movs	r0, #0
 80142fc:	f7fc f83e 	bl	801037c <osMutexNew>
 8014300:	4603      	mov	r3, r0
 8014302:	4a0b      	ldr	r2, [pc, #44]	; (8014330 <Ble_Tl_Init+0x3c>)
 8014304:	6013      	str	r3, [r2, #0]
  SemHciId = osSemaphoreNew(1, 0, NULL); /*< Create the semaphore and make it busy at initialization */
 8014306:	2200      	movs	r2, #0
 8014308:	2100      	movs	r1, #0
 801430a:	2001      	movs	r0, #1
 801430c:	f7fc f944 	bl	8010598 <osSemaphoreNew>
 8014310:	4603      	mov	r3, r0
 8014312:	4a08      	ldr	r2, [pc, #32]	; (8014334 <Ble_Tl_Init+0x40>)
 8014314:	6013      	str	r3, [r2, #0]

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8014316:	4b08      	ldr	r3, [pc, #32]	; (8014338 <Ble_Tl_Init+0x44>)
 8014318:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 801431a:	4b08      	ldr	r3, [pc, #32]	; (801433c <Ble_Tl_Init+0x48>)
 801431c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 801431e:	463b      	mov	r3, r7
 8014320:	4619      	mov	r1, r3
 8014322:	4807      	ldr	r0, [pc, #28]	; (8014340 <Ble_Tl_Init+0x4c>)
 8014324:	f7fa ffa8 	bl	800f278 <hci_init>

  return;
 8014328:	bf00      	nop
}
 801432a:	3708      	adds	r7, #8
 801432c:	46bd      	mov	sp, r7
 801432e:	bd80      	pop	{r7, pc}
 8014330:	20003264 	.word	0x20003264
 8014334:	20003268 	.word	0x20003268
 8014338:	200300d8 	.word	0x200300d8
 801433c:	080147a5 	.word	0x080147a5
 8014340:	0801476d 	.word	0x0801476d

08014344 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8014344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014346:	b08d      	sub	sp, #52	; 0x34
 8014348:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 801434a:	f44f 7350 	mov.w	r3, #832	; 0x340
 801434e:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8014350:	2392      	movs	r3, #146	; 0x92
 8014352:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8014354:	f7fa fb1b 	bl	800e98e <hci_reset>
 8014358:	4603      	mov	r3, r0
 801435a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 801435c:	f000 f936 	bl	80145cc <BleGetBdAddress>
 8014360:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8014362:	693a      	ldr	r2, [r7, #16]
 8014364:	2106      	movs	r1, #6
 8014366:	2000      	movs	r0, #0
 8014368:	f7fa fa25 	bl	800e7b6 <aci_hal_write_config_data>
 801436c:	4603      	mov	r3, r0
 801436e:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 8014370:	693b      	ldr	r3, [r7, #16]
 8014372:	3305      	adds	r3, #5
 8014374:	781a      	ldrb	r2, [r3, #0]
 8014376:	4b57      	ldr	r3, [pc, #348]	; (80144d4 <Ble_Hci_Gap_Gatt_Init+0x190>)
 8014378:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 801437a:	693b      	ldr	r3, [r7, #16]
 801437c:	3304      	adds	r3, #4
 801437e:	781a      	ldrb	r2, [r3, #0]
 8014380:	4b54      	ldr	r3, [pc, #336]	; (80144d4 <Ble_Hci_Gap_Gatt_Init+0x190>)
 8014382:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 8014384:	693b      	ldr	r3, [r7, #16]
 8014386:	3303      	adds	r3, #3
 8014388:	781a      	ldrb	r2, [r3, #0]
 801438a:	4b52      	ldr	r3, [pc, #328]	; (80144d4 <Ble_Hci_Gap_Gatt_Init+0x190>)
 801438c:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 801438e:	693b      	ldr	r3, [r7, #16]
 8014390:	3302      	adds	r3, #2
 8014392:	781a      	ldrb	r2, [r3, #0]
 8014394:	4b4f      	ldr	r3, [pc, #316]	; (80144d4 <Ble_Hci_Gap_Gatt_Init+0x190>)
 8014396:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 8014398:	693b      	ldr	r3, [r7, #16]
 801439a:	3301      	adds	r3, #1
 801439c:	781a      	ldrb	r2, [r3, #0]
 801439e:	4b4d      	ldr	r3, [pc, #308]	; (80144d4 <Ble_Hci_Gap_Gatt_Init+0x190>)
 80143a0:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 80143a2:	693b      	ldr	r3, [r7, #16]
 80143a4:	781a      	ldrb	r2, [r3, #0]
 80143a6:	4b4b      	ldr	r3, [pc, #300]	; (80144d4 <Ble_Hci_Gap_Gatt_Init+0x190>)
 80143a8:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80143aa:	4a4b      	ldr	r2, [pc, #300]	; (80144d8 <Ble_Hci_Gap_Gatt_Init+0x194>)
 80143ac:	2110      	movs	r1, #16
 80143ae:	2018      	movs	r0, #24
 80143b0:	f7fa fa01 	bl	800e7b6 <aci_hal_write_config_data>
 80143b4:	4603      	mov	r3, r0
 80143b6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 80143b8:	4a48      	ldr	r2, [pc, #288]	; (80144dc <Ble_Hci_Gap_Gatt_Init+0x198>)
 80143ba:	2110      	movs	r1, #16
 80143bc:	2008      	movs	r0, #8
 80143be:	f7fa f9fa 	bl	800e7b6 <aci_hal_write_config_data>
 80143c2:	4603      	mov	r3, r0
 80143c4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80143c6:	2118      	movs	r1, #24
 80143c8:	2001      	movs	r0, #1
 80143ca:	f7fa fa79 	bl	800e8c0 <aci_hal_set_tx_power_level>
 80143ce:	4603      	mov	r3, r0
 80143d0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80143d2:	f7f9 fe97 	bl	800e104 <aci_gatt_init>
 80143d6:	4603      	mov	r3, r0
 80143d8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 80143da:	2300      	movs	r3, #0
 80143dc:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80143de:	7bfb      	ldrb	r3, [r7, #15]
 80143e0:	f043 0301 	orr.w	r3, r3, #1
 80143e4:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 80143e6:	7bfb      	ldrb	r3, [r7, #15]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d01f      	beq.n	801442c <Ble_Hci_Gap_Gatt_Init+0xe8>
  {
    const char *name = "STM32WB";
 80143ec:	4b3c      	ldr	r3, [pc, #240]	; (80144e0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80143ee:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80143f0:	1dba      	adds	r2, r7, #6
 80143f2:	7bf8      	ldrb	r0, [r7, #15]
 80143f4:	1cbb      	adds	r3, r7, #2
 80143f6:	9301      	str	r3, [sp, #4]
 80143f8:	1d3b      	adds	r3, r7, #4
 80143fa:	9300      	str	r3, [sp, #0]
 80143fc:	4613      	mov	r3, r2
 80143fe:	2207      	movs	r2, #7
 8014400:	2100      	movs	r1, #0
 8014402:	f7f9 fd3c 	bl	800de7e <aci_gap_init>
 8014406:	4603      	mov	r3, r0
 8014408:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 801440a:	88fc      	ldrh	r4, [r7, #6]
 801440c:	88bd      	ldrh	r5, [r7, #4]
 801440e:	68b8      	ldr	r0, [r7, #8]
 8014410:	f7eb feb6 	bl	8000180 <strlen>
 8014414:	4603      	mov	r3, r0
 8014416:	b2da      	uxtb	r2, r3
 8014418:	68bb      	ldr	r3, [r7, #8]
 801441a:	9300      	str	r3, [sp, #0]
 801441c:	4613      	mov	r3, r2
 801441e:	2200      	movs	r2, #0
 8014420:	4629      	mov	r1, r5
 8014422:	4620      	mov	r0, r4
 8014424:	f7fa f871 	bl	800e50a <aci_gatt_update_char_value>
 8014428:	4603      	mov	r3, r0
 801442a:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 801442c:	88f8      	ldrh	r0, [r7, #6]
 801442e:	8879      	ldrh	r1, [r7, #2]
 8014430:	463b      	mov	r3, r7
 8014432:	9300      	str	r3, [sp, #0]
 8014434:	2302      	movs	r3, #2
 8014436:	2200      	movs	r2, #0
 8014438:	f7fa f867 	bl	800e50a <aci_gatt_update_char_value>
 801443c:	4603      	mov	r3, r0
 801443e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8014440:	2202      	movs	r2, #2
 8014442:	2102      	movs	r1, #2
 8014444:	2000      	movs	r0, #0
 8014446:	f7fa fb44 	bl	800ead2 <hci_le_set_default_phy>
 801444a:	4603      	mov	r3, r0
 801444c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 801444e:	4b25      	ldr	r3, [pc, #148]	; (80144e4 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8014450:	2201      	movs	r2, #1
 8014452:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8014454:	4b23      	ldr	r3, [pc, #140]	; (80144e4 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8014456:	781b      	ldrb	r3, [r3, #0]
 8014458:	4618      	mov	r0, r3
 801445a:	f7f9 fbf8 	bl	800dc4e <aci_gap_set_io_capability>
 801445e:	4603      	mov	r3, r0
 8014460:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8014462:	4b20      	ldr	r3, [pc, #128]	; (80144e4 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8014464:	2201      	movs	r2, #1
 8014466:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8014468:	4b1e      	ldr	r3, [pc, #120]	; (80144e4 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 801446a:	2208      	movs	r2, #8
 801446c:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 801446e:	4b1d      	ldr	r3, [pc, #116]	; (80144e4 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8014470:	2210      	movs	r2, #16
 8014472:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8014474:	4b1b      	ldr	r3, [pc, #108]	; (80144e4 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8014476:	2200      	movs	r2, #0
 8014478:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 801447a:	4b1a      	ldr	r3, [pc, #104]	; (80144e4 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 801447c:	4a1a      	ldr	r2, [pc, #104]	; (80144e8 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 801447e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8014480:	4b18      	ldr	r3, [pc, #96]	; (80144e4 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8014482:	2201      	movs	r2, #1
 8014484:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8014486:	4b17      	ldr	r3, [pc, #92]	; (80144e4 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8014488:	789c      	ldrb	r4, [r3, #2]
 801448a:	4b16      	ldr	r3, [pc, #88]	; (80144e4 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 801448c:	785d      	ldrb	r5, [r3, #1]
 801448e:	4b15      	ldr	r3, [pc, #84]	; (80144e4 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8014490:	791b      	ldrb	r3, [r3, #4]
 8014492:	4a14      	ldr	r2, [pc, #80]	; (80144e4 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8014494:	7952      	ldrb	r2, [r2, #5]
 8014496:	4913      	ldr	r1, [pc, #76]	; (80144e4 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8014498:	78c9      	ldrb	r1, [r1, #3]
 801449a:	4812      	ldr	r0, [pc, #72]	; (80144e4 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 801449c:	6880      	ldr	r0, [r0, #8]
 801449e:	2600      	movs	r6, #0
 80144a0:	9604      	str	r6, [sp, #16]
 80144a2:	9003      	str	r0, [sp, #12]
 80144a4:	9102      	str	r1, [sp, #8]
 80144a6:	9201      	str	r2, [sp, #4]
 80144a8:	9300      	str	r3, [sp, #0]
 80144aa:	2300      	movs	r3, #0
 80144ac:	2201      	movs	r2, #1
 80144ae:	4629      	mov	r1, r5
 80144b0:	4620      	mov	r0, r4
 80144b2:	f7f9 fc20 	bl	800dcf6 <aci_gap_set_authentication_requirement>
 80144b6:	4603      	mov	r3, r0
 80144b8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80144ba:	4b0a      	ldr	r3, [pc, #40]	; (80144e4 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 80144bc:	789b      	ldrb	r3, [r3, #2]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d003      	beq.n	80144ca <Ble_Hci_Gap_Gatt_Init+0x186>
  {
    ret = aci_gap_configure_whitelist();
 80144c2:	f7f9 fdfb 	bl	800e0bc <aci_gap_configure_filter_accept_list>
 80144c6:	4603      	mov	r3, r0
 80144c8:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 80144ca:	bf00      	nop
 80144cc:	371c      	adds	r7, #28
 80144ce:	46bd      	mov	sp, r7
 80144d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144d2:	bf00      	nop
 80144d4:	20000080 	.word	0x20000080
 80144d8:	08015bc4 	.word	0x08015bc4
 80144dc:	08015bd4 	.word	0x08015bd4
 80144e0:	08015958 	.word	0x08015958
 80144e4:	200031dc 	.word	0x200031dc
 80144e8:	0001b207 	.word	0x0001b207

080144ec <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b08c      	sub	sp, #48	; 0x30
 80144f0:	af08      	add	r7, sp, #32
 80144f2:	4603      	mov	r3, r0
 80144f4:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80144f6:	2392      	movs	r3, #146	; 0x92
 80144f8:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 80144fa:	79fb      	ldrb	r3, [r7, #7]
 80144fc:	2b01      	cmp	r3, #1
 80144fe:	d106      	bne.n	801450e <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8014500:	4b2b      	ldr	r3, [pc, #172]	; (80145b0 <Adv_Request+0xc4>)
 8014502:	881b      	ldrh	r3, [r3, #0]
 8014504:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8014506:	4b2b      	ldr	r3, [pc, #172]	; (80145b4 <Adv_Request+0xc8>)
 8014508:	881b      	ldrh	r3, [r3, #0]
 801450a:	81bb      	strh	r3, [r7, #12]
 801450c:	e005      	b.n	801451a <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 801450e:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8014512:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8014514:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8014518:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 801451a:	4b27      	ldr	r3, [pc, #156]	; (80145b8 <Adv_Request+0xcc>)
 801451c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014520:	4618      	mov	r0, r3
 8014522:	f7ee facb 	bl	8002abc <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 8014526:	79fb      	ldrb	r3, [r7, #7]
 8014528:	2b02      	cmp	r3, #2
 801452a:	d10d      	bne.n	8014548 <Adv_Request+0x5c>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 801452c:	4b22      	ldr	r3, [pc, #136]	; (80145b8 <Adv_Request+0xcc>)
 801452e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014532:	2b01      	cmp	r3, #1
 8014534:	d004      	beq.n	8014540 <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8014536:	4b20      	ldr	r3, [pc, #128]	; (80145b8 <Adv_Request+0xcc>)
 8014538:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801453c:	2b02      	cmp	r3, #2
 801453e:	d103      	bne.n	8014548 <Adv_Request+0x5c>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 8014540:	f7f9 fa67 	bl	800da12 <aci_gap_set_non_discoverable>
 8014544:	4603      	mov	r3, r0
 8014546:	72fb      	strb	r3, [r7, #11]
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8014548:	4a1b      	ldr	r2, [pc, #108]	; (80145b8 <Adv_Request+0xcc>)
 801454a:	79fb      	ldrb	r3, [r7, #7]
 801454c:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 8014550:	4b19      	ldr	r3, [pc, #100]	; (80145b8 <Adv_Request+0xcc>)
 8014552:	7e1b      	ldrb	r3, [r3, #24]
 8014554:	89ba      	ldrh	r2, [r7, #12]
 8014556:	89f9      	ldrh	r1, [r7, #14]
 8014558:	2000      	movs	r0, #0
 801455a:	9006      	str	r0, [sp, #24]
 801455c:	2000      	movs	r0, #0
 801455e:	9005      	str	r0, [sp, #20]
 8014560:	4816      	ldr	r0, [pc, #88]	; (80145bc <Adv_Request+0xd0>)
 8014562:	9004      	str	r0, [sp, #16]
 8014564:	9303      	str	r3, [sp, #12]
 8014566:	4b16      	ldr	r3, [pc, #88]	; (80145c0 <Adv_Request+0xd4>)
 8014568:	9302      	str	r3, [sp, #8]
 801456a:	2308      	movs	r3, #8
 801456c:	9301      	str	r3, [sp, #4]
 801456e:	2300      	movs	r3, #0
 8014570:	9300      	str	r3, [sp, #0]
 8014572:	2300      	movs	r3, #0
 8014574:	2000      	movs	r0, #0
 8014576:	f7f9 fa70 	bl	800da5a <aci_gap_set_discoverable>
 801457a:	4603      	mov	r3, r0
 801457c:	72fb      	strb	r3, [r7, #11]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 801457e:	4911      	ldr	r1, [pc, #68]	; (80145c4 <Adv_Request+0xd8>)
 8014580:	200e      	movs	r0, #14
 8014582:	f7f9 fd29 	bl	800dfd8 <aci_gap_update_adv_data>
 8014586:	4603      	mov	r3, r0
 8014588:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 801458a:	7afb      	ldrb	r3, [r7, #11]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d10a      	bne.n	80145a6 <Adv_Request+0xba>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
    }
  }
  else
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 8014590:	79fb      	ldrb	r3, [r7, #7]
 8014592:	2b01      	cmp	r3, #1
 8014594:	d107      	bne.n	80145a6 <Adv_Request+0xba>
    {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
      /* Start Timer to STOP ADV - TIMEOUT - and next Restart Low Power Advertising */
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8014596:	4b08      	ldr	r3, [pc, #32]	; (80145b8 <Adv_Request+0xcc>)
 8014598:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801459c:	490a      	ldr	r1, [pc, #40]	; (80145c8 <Adv_Request+0xdc>)
 801459e:	4618      	mov	r0, r3
 80145a0:	f7ee fb10 	bl	8002bc4 <HW_TS_Start>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 80145a4:	bf00      	nop
 80145a6:	bf00      	nop
}
 80145a8:	3710      	adds	r7, #16
 80145aa:	46bd      	mov	sp, r7
 80145ac:	bd80      	pop	{r7, pc}
 80145ae:	bf00      	nop
 80145b0:	20003260 	.word	0x20003260
 80145b4:	20003262 	.word	0x20003262
 80145b8:	200031dc 	.word	0x200031dc
 80145bc:	200031f5 	.word	0x200031f5
 80145c0:	08015be4 	.word	0x08015be4
 80145c4:	20000080 	.word	0x20000080
 80145c8:	0001e046 	.word	0x0001e046

080145cc <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b086      	sub	sp, #24
 80145d0:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80145d2:	f7ff fd6b 	bl	80140ac <LL_FLASH_GetUDN>
 80145d6:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80145d8:	693b      	ldr	r3, [r7, #16]
 80145da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145de:	d023      	beq.n	8014628 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80145e0:	f7ff fd7c 	bl	80140dc <LL_FLASH_GetSTCompanyID>
 80145e4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80145e6:	f7ff fd6d 	bl	80140c4 <LL_FLASH_GetDeviceID>
 80145ea:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80145ec:	693b      	ldr	r3, [r7, #16]
 80145ee:	b2da      	uxtb	r2, r3
 80145f0:	4b16      	ldr	r3, [pc, #88]	; (801464c <BleGetBdAddress+0x80>)
 80145f2:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80145f4:	693b      	ldr	r3, [r7, #16]
 80145f6:	0a1b      	lsrs	r3, r3, #8
 80145f8:	b2da      	uxtb	r2, r3
 80145fa:	4b14      	ldr	r3, [pc, #80]	; (801464c <BleGetBdAddress+0x80>)
 80145fc:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	b2da      	uxtb	r2, r3
 8014602:	4b12      	ldr	r3, [pc, #72]	; (801464c <BleGetBdAddress+0x80>)
 8014604:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8014606:	68bb      	ldr	r3, [r7, #8]
 8014608:	b2da      	uxtb	r2, r3
 801460a:	4b10      	ldr	r3, [pc, #64]	; (801464c <BleGetBdAddress+0x80>)
 801460c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 801460e:	68bb      	ldr	r3, [r7, #8]
 8014610:	0a1b      	lsrs	r3, r3, #8
 8014612:	b2da      	uxtb	r2, r3
 8014614:	4b0d      	ldr	r3, [pc, #52]	; (801464c <BleGetBdAddress+0x80>)
 8014616:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8014618:	68bb      	ldr	r3, [r7, #8]
 801461a:	0c1b      	lsrs	r3, r3, #16
 801461c:	b2da      	uxtb	r2, r3
 801461e:	4b0b      	ldr	r3, [pc, #44]	; (801464c <BleGetBdAddress+0x80>)
 8014620:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8014622:	4b0a      	ldr	r3, [pc, #40]	; (801464c <BleGetBdAddress+0x80>)
 8014624:	617b      	str	r3, [r7, #20]
 8014626:	e00b      	b.n	8014640 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8014628:	2000      	movs	r0, #0
 801462a:	f7fb fb41 	bl	800fcb0 <OTP_Read>
 801462e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d002      	beq.n	801463c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	617b      	str	r3, [r7, #20]
 801463a:	e001      	b.n	8014640 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 801463c:	4b04      	ldr	r3, [pc, #16]	; (8014650 <BleGetBdAddress+0x84>)
 801463e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8014640:	697b      	ldr	r3, [r7, #20]
}
 8014642:	4618      	mov	r0, r3
 8014644:	3718      	adds	r7, #24
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}
 801464a:	bf00      	nop
 801464c:	200031d4 	.word	0x200031d4
 8014650:	08015bbc 	.word	0x08015bbc

08014654 <Add_Advertisment_Service_UUID>:
 *
 *SPECIFIC FUNCTIONS
 *
 *************************************************************/
static void Add_Advertisment_Service_UUID(uint16_t servUUID)
{
 8014654:	b480      	push	{r7}
 8014656:	b083      	sub	sp, #12
 8014658:	af00      	add	r7, sp, #0
 801465a:	4603      	mov	r3, r0
 801465c:	80fb      	strh	r3, [r7, #6]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 801465e:	4b12      	ldr	r3, [pc, #72]	; (80146a8 <Add_Advertisment_Service_UUID+0x54>)
 8014660:	7e1b      	ldrb	r3, [r3, #24]
 8014662:	4619      	mov	r1, r3
      (uint8_t) (servUUID & 0xFF);
 8014664:	88fb      	ldrh	r3, [r7, #6]
 8014666:	b2da      	uxtb	r2, r3
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 8014668:	4b0f      	ldr	r3, [pc, #60]	; (80146a8 <Add_Advertisment_Service_UUID+0x54>)
 801466a:	440b      	add	r3, r1
 801466c:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen++;
 801466e:	4b0e      	ldr	r3, [pc, #56]	; (80146a8 <Add_Advertisment_Service_UUID+0x54>)
 8014670:	7e1b      	ldrb	r3, [r3, #24]
 8014672:	3301      	adds	r3, #1
 8014674:	b2da      	uxtb	r2, r3
 8014676:	4b0c      	ldr	r3, [pc, #48]	; (80146a8 <Add_Advertisment_Service_UUID+0x54>)
 8014678:	761a      	strb	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
      (uint8_t) (servUUID >> 8) & 0xFF;
 801467a:	88fb      	ldrh	r3, [r7, #6]
 801467c:	0a1b      	lsrs	r3, r3, #8
 801467e:	b29a      	uxth	r2, r3
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 8014680:	4b09      	ldr	r3, [pc, #36]	; (80146a8 <Add_Advertisment_Service_UUID+0x54>)
 8014682:	7e1b      	ldrb	r3, [r3, #24]
 8014684:	4619      	mov	r1, r3
      (uint8_t) (servUUID >> 8) & 0xFF;
 8014686:	b2d2      	uxtb	r2, r2
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 8014688:	4b07      	ldr	r3, [pc, #28]	; (80146a8 <Add_Advertisment_Service_UUID+0x54>)
 801468a:	440b      	add	r3, r1
 801468c:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen++;
 801468e:	4b06      	ldr	r3, [pc, #24]	; (80146a8 <Add_Advertisment_Service_UUID+0x54>)
 8014690:	7e1b      	ldrb	r3, [r3, #24]
 8014692:	3301      	adds	r3, #1
 8014694:	b2da      	uxtb	r2, r3
 8014696:	4b04      	ldr	r3, [pc, #16]	; (80146a8 <Add_Advertisment_Service_UUID+0x54>)
 8014698:	761a      	strb	r2, [r3, #24]

  return;
 801469a:	bf00      	nop
}
 801469c:	370c      	adds	r7, #12
 801469e:	46bd      	mov	sp, r7
 80146a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a4:	4770      	bx	lr
 80146a6:	bf00      	nop
 80146a8:	200031dc 	.word	0x200031dc

080146ac <Adv_Mgr>:

static void Adv_Mgr(void)
{
 80146ac:	b580      	push	{r7, lr}
 80146ae:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as an aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  osThreadFlagsSet(AdvUpdateProcessId, 1);
 80146b0:	4b03      	ldr	r3, [pc, #12]	; (80146c0 <Adv_Mgr+0x14>)
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	2101      	movs	r1, #1
 80146b6:	4618      	mov	r0, r3
 80146b8:	f7fb fd00 	bl	80100bc <osThreadFlagsSet>

  return;
 80146bc:	bf00      	nop
}
 80146be:	bd80      	pop	{r7, pc}
 80146c0:	2000326c 	.word	0x2000326c

080146c4 <AdvUpdateProcess>:

static void AdvUpdateProcess(void *argument)
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b082      	sub	sp, #8
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80146cc:	f04f 32ff 	mov.w	r2, #4294967295
 80146d0:	2100      	movs	r1, #0
 80146d2:	2001      	movs	r0, #1
 80146d4:	f7fb fd40 	bl	8010158 <osThreadFlagsWait>
    Adv_Update();
 80146d8:	f000 f801 	bl	80146de <Adv_Update>
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80146dc:	e7f6      	b.n	80146cc <AdvUpdateProcess+0x8>

080146de <Adv_Update>:
  }
}

static void Adv_Update(void)
{
 80146de:	b580      	push	{r7, lr}
 80146e0:	af00      	add	r7, sp, #0
  Adv_Request(APP_BLE_LP_ADV);
 80146e2:	2002      	movs	r0, #2
 80146e4:	f7ff ff02 	bl	80144ec <Adv_Request>

  return;
 80146e8:	bf00      	nop
}
 80146ea:	bd80      	pop	{r7, pc}

080146ec <HciUserEvtProcess>:

static void HciUserEvtProcess(void *argument)
{
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b082      	sub	sp, #8
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80146f4:	f04f 32ff 	mov.w	r2, #4294967295
 80146f8:	2100      	movs	r1, #0
 80146fa:	2001      	movs	r0, #1
 80146fc:	f7fb fd2c 	bl	8010158 <osThreadFlagsWait>
    hci_user_evt_proc();
 8014700:	f7fa fdd6 	bl	800f2b0 <hci_user_evt_proc>
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8014704:	e7f6      	b.n	80146f4 <HciUserEvtProcess+0x8>
	...

08014708 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8014708:	b580      	push	{r7, lr}
 801470a:	b082      	sub	sp, #8
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
  UNUSED(p_Data);
  osThreadFlagsSet(HciUserEvtProcessId, 1);
 8014710:	4b04      	ldr	r3, [pc, #16]	; (8014724 <hci_notify_asynch_evt+0x1c>)
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	2101      	movs	r1, #1
 8014716:	4618      	mov	r0, r3
 8014718:	f7fb fcd0 	bl	80100bc <osThreadFlagsSet>

  return;
 801471c:	bf00      	nop
}
 801471e:	3708      	adds	r7, #8
 8014720:	46bd      	mov	sp, r7
 8014722:	bd80      	pop	{r7, pc}
 8014724:	20003270 	.word	0x20003270

08014728 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8014728:	b580      	push	{r7, lr}
 801472a:	b082      	sub	sp, #8
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
  UNUSED(Flag);
  osSemaphoreRelease(SemHciId);
 8014730:	4b04      	ldr	r3, [pc, #16]	; (8014744 <hci_cmd_resp_release+0x1c>)
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	4618      	mov	r0, r3
 8014736:	f7fc f80b 	bl	8010750 <osSemaphoreRelease>

  return;
 801473a:	bf00      	nop
}
 801473c:	3708      	adds	r7, #8
 801473e:	46bd      	mov	sp, r7
 8014740:	bd80      	pop	{r7, pc}
 8014742:	bf00      	nop
 8014744:	20003268 	.word	0x20003268

08014748 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8014748:	b580      	push	{r7, lr}
 801474a:	b082      	sub	sp, #8
 801474c:	af00      	add	r7, sp, #0
 801474e:	6078      	str	r0, [r7, #4]
  UNUSED(Timeout);
  osSemaphoreAcquire(SemHciId, osWaitForever);
 8014750:	4b05      	ldr	r3, [pc, #20]	; (8014768 <hci_cmd_resp_wait+0x20>)
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	f04f 31ff 	mov.w	r1, #4294967295
 8014758:	4618      	mov	r0, r3
 801475a:	f7fb ffa7 	bl	80106ac <osSemaphoreAcquire>

  return;
 801475e:	bf00      	nop
}
 8014760:	3708      	adds	r7, #8
 8014762:	46bd      	mov	sp, r7
 8014764:	bd80      	pop	{r7, pc}
 8014766:	bf00      	nop
 8014768:	20003268 	.word	0x20003268

0801476c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 801476c:	b580      	push	{r7, lr}
 801476e:	b084      	sub	sp, #16
 8014770:	af00      	add	r7, sp, #0
 8014772:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	685b      	ldr	r3, [r3, #4]
 801477c:	3308      	adds	r3, #8
 801477e:	4618      	mov	r0, r3
 8014780:	f7fa fc34 	bl	800efec <SVCCTL_UserEvtRx>
 8014784:	4603      	mov	r3, r0
 8014786:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8014788:	7afb      	ldrb	r3, [r7, #11]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d003      	beq.n	8014796 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	2201      	movs	r2, #1
 8014792:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8014794:	e003      	b.n	801479e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	2200      	movs	r2, #0
 801479a:	701a      	strb	r2, [r3, #0]
  return;
 801479c:	bf00      	nop
}
 801479e:	3710      	adds	r7, #16
 80147a0:	46bd      	mov	sp, r7
 80147a2:	bd80      	pop	{r7, pc}

080147a4 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80147a4:	b580      	push	{r7, lr}
 80147a6:	b082      	sub	sp, #8
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	4603      	mov	r3, r0
 80147ac:	71fb      	strb	r3, [r7, #7]
  switch (Status)
 80147ae:	79fb      	ldrb	r3, [r7, #7]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d002      	beq.n	80147ba <BLE_StatusNot+0x16>
 80147b4:	2b01      	cmp	r3, #1
 80147b6:	d008      	beq.n	80147ca <BLE_StatusNot+0x26>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80147b8:	e00d      	b.n	80147d6 <BLE_StatusNot+0x32>
      osMutexAcquire(MtxHciId, osWaitForever);
 80147ba:	4b09      	ldr	r3, [pc, #36]	; (80147e0 <BLE_StatusNot+0x3c>)
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	f04f 31ff 	mov.w	r1, #4294967295
 80147c2:	4618      	mov	r0, r3
 80147c4:	f7fb fe60 	bl	8010488 <osMutexAcquire>
      break;
 80147c8:	e005      	b.n	80147d6 <BLE_StatusNot+0x32>
      osMutexRelease(MtxHciId);
 80147ca:	4b05      	ldr	r3, [pc, #20]	; (80147e0 <BLE_StatusNot+0x3c>)
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	4618      	mov	r0, r3
 80147d0:	f7fb fea5 	bl	801051e <osMutexRelease>
      break;
 80147d4:	bf00      	nop
  }

  return;
 80147d6:	bf00      	nop
}
 80147d8:	3708      	adds	r7, #8
 80147da:	46bd      	mov	sp, r7
 80147dc:	bd80      	pop	{r7, pc}
 80147de:	bf00      	nop
 80147e0:	20003264 	.word	0x20003264

080147e4 <DISAPP_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void DISAPP_Init(void)
{
 80147e4:	b480      	push	{r7}
 80147e6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN DISAPP_Init */

/* USER CODE END DISAPP_Init */
}
 80147e8:	bf00      	nop
 80147ea:	46bd      	mov	sp, r7
 80147ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f0:	4770      	bx	lr

080147f2 <HRS_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void HRS_Notification(HRS_App_Notification_evt_t *pNotification)
{
 80147f2:	b480      	push	{r7}
 80147f4:	b083      	sub	sp, #12
 80147f6:	af00      	add	r7, sp, #0
 80147f8:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HRS_Notification_1 */

/* USER CODE END HRS_Notification_1 */
  switch(pNotification->HRS_Evt_Opcode)
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	781b      	ldrb	r3, [r3, #0]
 80147fe:	2b02      	cmp	r3, #2
 8014800:	d006      	beq.n	8014810 <HRS_Notification+0x1e>
 8014802:	2b02      	cmp	r3, #2
 8014804:	dc06      	bgt.n	8014814 <HRS_Notification+0x22>
 8014806:	2b00      	cmp	r3, #0
 8014808:	d006      	beq.n	8014818 <HRS_Notification+0x26>
 801480a:	2b01      	cmp	r3, #1
 801480c:	d006      	beq.n	801481c <HRS_Notification+0x2a>

   default:
/* USER CODE BEGIN HRS_Notification_Default */

/* USER CODE END HRS_Notification_Default */
      break;
 801480e:	e001      	b.n	8014814 <HRS_Notification+0x22>
      break;
 8014810:	bf00      	nop
 8014812:	e004      	b.n	801481e <HRS_Notification+0x2c>
      break;
 8014814:	bf00      	nop
 8014816:	e002      	b.n	801481e <HRS_Notification+0x2c>
      break;
 8014818:	bf00      	nop
 801481a:	e000      	b.n	801481e <HRS_Notification+0x2c>
      break;
 801481c:	bf00      	nop
  }
/* USER CODE BEGIN HRS_Notification_2 */

/* USER CODE END HRS_Notification_2 */
  return;
 801481e:	bf00      	nop
}
 8014820:	370c      	adds	r7, #12
 8014822:	46bd      	mov	sp, r7
 8014824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014828:	4770      	bx	lr
	...

0801482c <HRSAPP_Init>:

void HRSAPP_Init(void)
{
 801482c:	b580      	push	{r7, lr}
 801482e:	af00      	add	r7, sp, #0
  HrsProcessId = osThreadNew(HrsProcess, NULL, &HrsProcess_attr);
 8014830:	4a04      	ldr	r2, [pc, #16]	; (8014844 <HRSAPP_Init+0x18>)
 8014832:	2100      	movs	r1, #0
 8014834:	4804      	ldr	r0, [pc, #16]	; (8014848 <HRSAPP_Init+0x1c>)
 8014836:	f7fb fbaf 	bl	800ff98 <osThreadNew>
 801483a:	4603      	mov	r3, r0
 801483c:	4a03      	ldr	r2, [pc, #12]	; (801484c <HRSAPP_Init+0x20>)
 801483e:	6013      	str	r3, [r2, #0]
/* USER CODE BEGIN HRSAPP_Init */

/* USER CODE END HRSAPP_Init */
  return;
 8014840:	bf00      	nop
}
 8014842:	bd80      	pop	{r7, pc}
 8014844:	08015c34 	.word	0x08015c34
 8014848:	08014851 	.word	0x08014851
 801484c:	20003274 	.word	0x20003274

08014850 <HrsProcess>:

static void HrsProcess(void *argument)
{
 8014850:	b580      	push	{r7, lr}
 8014852:	b082      	sub	sp, #8
 8014854:	af00      	add	r7, sp, #0
 8014856:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8014858:	f04f 32ff 	mov.w	r2, #4294967295
 801485c:	2100      	movs	r1, #0
 801485e:	2001      	movs	r0, #1
 8014860:	f7fb fc7a 	bl	8010158 <osThreadFlagsWait>
    HRSAPP_Measurement( );
 8014864:	f000 f801 	bl	801486a <HRSAPP_Measurement>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8014868:	e7f6      	b.n	8014858 <HrsProcess+0x8>

0801486a <HRSAPP_Measurement>:
  }
}

static void HRSAPP_Measurement(void)
{
 801486a:	b480      	push	{r7}
 801486c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN HRSAPP_Measurement */

/* USER CODE END HRSAPP_Measurement */
  return;
 801486e:	bf00      	nop
}
 8014870:	46bd      	mov	sp, r7
 8014872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014876:	4770      	bx	lr

08014878 <LL_PWR_EnableBootC2>:
{
 8014878:	b480      	push	{r7}
 801487a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 801487c:	4b05      	ldr	r3, [pc, #20]	; (8014894 <LL_PWR_EnableBootC2+0x1c>)
 801487e:	68db      	ldr	r3, [r3, #12]
 8014880:	4a04      	ldr	r2, [pc, #16]	; (8014894 <LL_PWR_EnableBootC2+0x1c>)
 8014882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014886:	60d3      	str	r3, [r2, #12]
}
 8014888:	bf00      	nop
 801488a:	46bd      	mov	sp, r7
 801488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014890:	4770      	bx	lr
 8014892:	bf00      	nop
 8014894:	58000400 	.word	0x58000400

08014898 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8014898:	b480      	push	{r7}
 801489a:	b083      	sub	sp, #12
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80148a0:	4b06      	ldr	r3, [pc, #24]	; (80148bc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80148a2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80148a6:	4905      	ldr	r1, [pc, #20]	; (80148bc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	4313      	orrs	r3, r2
 80148ac:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80148b0:	bf00      	nop
 80148b2:	370c      	adds	r7, #12
 80148b4:	46bd      	mov	sp, r7
 80148b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ba:	4770      	bx	lr
 80148bc:	58000800 	.word	0x58000800

080148c0 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80148c0:	b480      	push	{r7}
 80148c2:	b083      	sub	sp, #12
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80148c8:	4b05      	ldr	r3, [pc, #20]	; (80148e0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80148ca:	6a1a      	ldr	r2, [r3, #32]
 80148cc:	4904      	ldr	r1, [pc, #16]	; (80148e0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	4313      	orrs	r3, r2
 80148d2:	620b      	str	r3, [r1, #32]
}
 80148d4:	bf00      	nop
 80148d6:	370c      	adds	r7, #12
 80148d8:	46bd      	mov	sp, r7
 80148da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148de:	4770      	bx	lr
 80148e0:	58000800 	.word	0x58000800

080148e4 <LL_AHB3_GRP1_EnableClock>:
{
 80148e4:	b480      	push	{r7}
 80148e6:	b085      	sub	sp, #20
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80148ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80148f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80148f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	4313      	orrs	r3, r2
 80148fa:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80148fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014900:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	4013      	ands	r3, r2
 8014906:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014908:	68fb      	ldr	r3, [r7, #12]
}
 801490a:	bf00      	nop
 801490c:	3714      	adds	r7, #20
 801490e:	46bd      	mov	sp, r7
 8014910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014914:	4770      	bx	lr

08014916 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8014916:	b480      	push	{r7}
 8014918:	b085      	sub	sp, #20
 801491a:	af00      	add	r7, sp, #0
 801491c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 801491e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014922:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8014926:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	4313      	orrs	r3, r2
 801492e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8014932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014936:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	4013      	ands	r3, r2
 801493e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014940:	68fb      	ldr	r3, [r7, #12]
}
 8014942:	bf00      	nop
 8014944:	3714      	adds	r7, #20
 8014946:	46bd      	mov	sp, r7
 8014948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801494c:	4770      	bx	lr

0801494e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 801494e:	b480      	push	{r7}
 8014950:	b083      	sub	sp, #12
 8014952:	af00      	add	r7, sp, #0
 8014954:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	601a      	str	r2, [r3, #0]
}
 8014962:	bf00      	nop
 8014964:	370c      	adds	r7, #12
 8014966:	46bd      	mov	sp, r7
 8014968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801496c:	4770      	bx	lr

0801496e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 801496e:	b480      	push	{r7}
 8014970:	b083      	sub	sp, #12
 8014972:	af00      	add	r7, sp, #0
 8014974:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	f043 0201 	orr.w	r2, r3, #1
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	601a      	str	r2, [r3, #0]
}
 8014982:	bf00      	nop
 8014984:	370c      	adds	r7, #12
 8014986:	46bd      	mov	sp, r7
 8014988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498c:	4770      	bx	lr

0801498e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801498e:	b480      	push	{r7}
 8014990:	b083      	sub	sp, #12
 8014992:	af00      	add	r7, sp, #0
 8014994:	6078      	str	r0, [r7, #4]
 8014996:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	685a      	ldr	r2, [r3, #4]
 801499c:	683b      	ldr	r3, [r7, #0]
 801499e:	041b      	lsls	r3, r3, #16
 80149a0:	43db      	mvns	r3, r3
 80149a2:	401a      	ands	r2, r3
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	605a      	str	r2, [r3, #4]
}
 80149a8:	bf00      	nop
 80149aa:	370c      	adds	r7, #12
 80149ac:	46bd      	mov	sp, r7
 80149ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b2:	4770      	bx	lr

080149b4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80149b4:	b480      	push	{r7}
 80149b6:	b083      	sub	sp, #12
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
 80149bc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	685a      	ldr	r2, [r3, #4]
 80149c2:	683b      	ldr	r3, [r7, #0]
 80149c4:	041b      	lsls	r3, r3, #16
 80149c6:	431a      	orrs	r2, r3
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	605a      	str	r2, [r3, #4]
}
 80149cc:	bf00      	nop
 80149ce:	370c      	adds	r7, #12
 80149d0:	46bd      	mov	sp, r7
 80149d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d6:	4770      	bx	lr

080149d8 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80149d8:	b480      	push	{r7}
 80149da:	b083      	sub	sp, #12
 80149dc:	af00      	add	r7, sp, #0
 80149de:	6078      	str	r0, [r7, #4]
 80149e0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	685a      	ldr	r2, [r3, #4]
 80149e6:	683b      	ldr	r3, [r7, #0]
 80149e8:	43db      	mvns	r3, r3
 80149ea:	401a      	ands	r2, r3
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	605a      	str	r2, [r3, #4]
}
 80149f0:	bf00      	nop
 80149f2:	370c      	adds	r7, #12
 80149f4:	46bd      	mov	sp, r7
 80149f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149fa:	4770      	bx	lr

080149fc <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80149fc:	b480      	push	{r7}
 80149fe:	b083      	sub	sp, #12
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	6078      	str	r0, [r7, #4]
 8014a04:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	683a      	ldr	r2, [r7, #0]
 8014a0a:	609a      	str	r2, [r3, #8]
}
 8014a0c:	bf00      	nop
 8014a0e:	370c      	adds	r7, #12
 8014a10:	46bd      	mov	sp, r7
 8014a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a16:	4770      	bx	lr

08014a18 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8014a18:	b480      	push	{r7}
 8014a1a:	b083      	sub	sp, #12
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	6078      	str	r0, [r7, #4]
 8014a20:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8014a22:	683b      	ldr	r3, [r7, #0]
 8014a24:	041a      	lsls	r2, r3, #16
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	609a      	str	r2, [r3, #8]
}
 8014a2a:	bf00      	nop
 8014a2c:	370c      	adds	r7, #12
 8014a2e:	46bd      	mov	sp, r7
 8014a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a34:	4770      	bx	lr

08014a36 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8014a36:	b480      	push	{r7}
 8014a38:	b083      	sub	sp, #12
 8014a3a:	af00      	add	r7, sp, #0
 8014a3c:	6078      	str	r0, [r7, #4]
 8014a3e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	68da      	ldr	r2, [r3, #12]
 8014a44:	683b      	ldr	r3, [r7, #0]
 8014a46:	4013      	ands	r3, r2
 8014a48:	683a      	ldr	r2, [r7, #0]
 8014a4a:	429a      	cmp	r2, r3
 8014a4c:	d101      	bne.n	8014a52 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8014a4e:	2301      	movs	r3, #1
 8014a50:	e000      	b.n	8014a54 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8014a52:	2300      	movs	r3, #0
}
 8014a54:	4618      	mov	r0, r3
 8014a56:	370c      	adds	r7, #12
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a5e:	4770      	bx	lr

08014a60 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8014a60:	b480      	push	{r7}
 8014a62:	b083      	sub	sp, #12
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	6078      	str	r0, [r7, #4]
 8014a68:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	69da      	ldr	r2, [r3, #28]
 8014a6e:	683b      	ldr	r3, [r7, #0]
 8014a70:	4013      	ands	r3, r2
 8014a72:	683a      	ldr	r2, [r7, #0]
 8014a74:	429a      	cmp	r2, r3
 8014a76:	d101      	bne.n	8014a7c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8014a78:	2301      	movs	r3, #1
 8014a7a:	e000      	b.n	8014a7e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8014a7c:	2300      	movs	r3, #0
}
 8014a7e:	4618      	mov	r0, r3
 8014a80:	370c      	adds	r7, #12
 8014a82:	46bd      	mov	sp, r7
 8014a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a88:	4770      	bx	lr
	...

08014a8c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8014a90:	2102      	movs	r1, #2
 8014a92:	4818      	ldr	r0, [pc, #96]	; (8014af4 <HW_IPCC_Rx_Handler+0x68>)
 8014a94:	f7ff ffe4 	bl	8014a60 <LL_C2_IPCC_IsActiveFlag_CHx>
 8014a98:	4603      	mov	r3, r0
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d008      	beq.n	8014ab0 <HW_IPCC_Rx_Handler+0x24>
 8014a9e:	4b15      	ldr	r3, [pc, #84]	; (8014af4 <HW_IPCC_Rx_Handler+0x68>)
 8014aa0:	685b      	ldr	r3, [r3, #4]
 8014aa2:	f003 0302 	and.w	r3, r3, #2
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d102      	bne.n	8014ab0 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8014aaa:	f000 f8d5 	bl	8014c58 <HW_IPCC_SYS_EvtHandler>
 8014aae:	e01e      	b.n	8014aee <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8014ab0:	2101      	movs	r1, #1
 8014ab2:	4810      	ldr	r0, [pc, #64]	; (8014af4 <HW_IPCC_Rx_Handler+0x68>)
 8014ab4:	f7ff ffd4 	bl	8014a60 <LL_C2_IPCC_IsActiveFlag_CHx>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d008      	beq.n	8014ad0 <HW_IPCC_Rx_Handler+0x44>
 8014abe:	4b0d      	ldr	r3, [pc, #52]	; (8014af4 <HW_IPCC_Rx_Handler+0x68>)
 8014ac0:	685b      	ldr	r3, [r3, #4]
 8014ac2:	f003 0301 	and.w	r3, r3, #1
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d102      	bne.n	8014ad0 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8014aca:	f000 f889 	bl	8014be0 <HW_IPCC_BLE_EvtHandler>
 8014ace:	e00e      	b.n	8014aee <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8014ad0:	2108      	movs	r1, #8
 8014ad2:	4808      	ldr	r0, [pc, #32]	; (8014af4 <HW_IPCC_Rx_Handler+0x68>)
 8014ad4:	f7ff ffc4 	bl	8014a60 <LL_C2_IPCC_IsActiveFlag_CHx>
 8014ad8:	4603      	mov	r3, r0
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d008      	beq.n	8014af0 <HW_IPCC_Rx_Handler+0x64>
 8014ade:	4b05      	ldr	r3, [pc, #20]	; (8014af4 <HW_IPCC_Rx_Handler+0x68>)
 8014ae0:	685b      	ldr	r3, [r3, #4]
 8014ae2:	f003 0308 	and.w	r3, r3, #8
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d102      	bne.n	8014af0 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8014aea:	f000 f901 	bl	8014cf0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8014aee:	bf00      	nop
 8014af0:	bf00      	nop
}
 8014af2:	bd80      	pop	{r7, pc}
 8014af4:	58000c00 	.word	0x58000c00

08014af8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8014afc:	2102      	movs	r1, #2
 8014afe:	4818      	ldr	r0, [pc, #96]	; (8014b60 <HW_IPCC_Tx_Handler+0x68>)
 8014b00:	f7ff ff99 	bl	8014a36 <LL_C1_IPCC_IsActiveFlag_CHx>
 8014b04:	4603      	mov	r3, r0
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d108      	bne.n	8014b1c <HW_IPCC_Tx_Handler+0x24>
 8014b0a:	4b15      	ldr	r3, [pc, #84]	; (8014b60 <HW_IPCC_Tx_Handler+0x68>)
 8014b0c:	685b      	ldr	r3, [r3, #4]
 8014b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d102      	bne.n	8014b1c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8014b16:	f000 f893 	bl	8014c40 <HW_IPCC_SYS_CmdEvtHandler>
 8014b1a:	e01e      	b.n	8014b5a <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8014b1c:	2108      	movs	r1, #8
 8014b1e:	4810      	ldr	r0, [pc, #64]	; (8014b60 <HW_IPCC_Tx_Handler+0x68>)
 8014b20:	f7ff ff89 	bl	8014a36 <LL_C1_IPCC_IsActiveFlag_CHx>
 8014b24:	4603      	mov	r3, r0
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d108      	bne.n	8014b3c <HW_IPCC_Tx_Handler+0x44>
 8014b2a:	4b0d      	ldr	r3, [pc, #52]	; (8014b60 <HW_IPCC_Tx_Handler+0x68>)
 8014b2c:	685b      	ldr	r3, [r3, #4]
 8014b2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d102      	bne.n	8014b3c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8014b36:	f000 f8bd 	bl	8014cb4 <HW_IPCC_MM_FreeBufHandler>
 8014b3a:	e00e      	b.n	8014b5a <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8014b3c:	2120      	movs	r1, #32
 8014b3e:	4808      	ldr	r0, [pc, #32]	; (8014b60 <HW_IPCC_Tx_Handler+0x68>)
 8014b40:	f7ff ff79 	bl	8014a36 <LL_C1_IPCC_IsActiveFlag_CHx>
 8014b44:	4603      	mov	r3, r0
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d108      	bne.n	8014b5c <HW_IPCC_Tx_Handler+0x64>
 8014b4a:	4b05      	ldr	r3, [pc, #20]	; (8014b60 <HW_IPCC_Tx_Handler+0x68>)
 8014b4c:	685b      	ldr	r3, [r3, #4]
 8014b4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d102      	bne.n	8014b5c <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8014b56:	f000 f84f 	bl	8014bf8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8014b5a:	bf00      	nop
 8014b5c:	bf00      	nop
}
 8014b5e:	bd80      	pop	{r7, pc}
 8014b60:	58000c00 	.word	0x58000c00

08014b64 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8014b68:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8014b6c:	f7ff fed3 	bl	8014916 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8014b70:	f44f 7000 	mov.w	r0, #512	; 0x200
 8014b74:	f7ff fea4 	bl	80148c0 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8014b78:	f44f 7000 	mov.w	r0, #512	; 0x200
 8014b7c:	f7ff fe8c 	bl	8014898 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8014b80:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8014b82:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8014b84:	f7ff fe78 	bl	8014878 <LL_PWR_EnableBootC2>

  return;
 8014b88:	bf00      	nop
}
 8014b8a:	bd80      	pop	{r7, pc}

08014b8c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8014b8c:	b580      	push	{r7, lr}
 8014b8e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8014b90:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8014b94:	f7ff fea6 	bl	80148e4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8014b98:	4806      	ldr	r0, [pc, #24]	; (8014bb4 <HW_IPCC_Init+0x28>)
 8014b9a:	f7ff fee8 	bl	801496e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8014b9e:	4805      	ldr	r0, [pc, #20]	; (8014bb4 <HW_IPCC_Init+0x28>)
 8014ba0:	f7ff fed5 	bl	801494e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8014ba4:	202c      	movs	r0, #44	; 0x2c
 8014ba6:	f7f1 f959 	bl	8005e5c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8014baa:	202d      	movs	r0, #45	; 0x2d
 8014bac:	f7f1 f956 	bl	8005e5c <HAL_NVIC_EnableIRQ>

  return;
 8014bb0:	bf00      	nop
}
 8014bb2:	bd80      	pop	{r7, pc}
 8014bb4:	58000c00 	.word	0x58000c00

08014bb8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8014bbc:	2101      	movs	r1, #1
 8014bbe:	4802      	ldr	r0, [pc, #8]	; (8014bc8 <HW_IPCC_BLE_Init+0x10>)
 8014bc0:	f7ff ff0a 	bl	80149d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014bc4:	bf00      	nop
}
 8014bc6:	bd80      	pop	{r7, pc}
 8014bc8:	58000c00 	.word	0x58000c00

08014bcc <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8014bcc:	b580      	push	{r7, lr}
 8014bce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8014bd0:	2101      	movs	r1, #1
 8014bd2:	4802      	ldr	r0, [pc, #8]	; (8014bdc <HW_IPCC_BLE_SendCmd+0x10>)
 8014bd4:	f7ff ff20 	bl	8014a18 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8014bd8:	bf00      	nop
}
 8014bda:	bd80      	pop	{r7, pc}
 8014bdc:	58000c00 	.word	0x58000c00

08014be0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8014be4:	f7fa feac 	bl	800f940 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8014be8:	2101      	movs	r1, #1
 8014bea:	4802      	ldr	r0, [pc, #8]	; (8014bf4 <HW_IPCC_BLE_EvtHandler+0x14>)
 8014bec:	f7ff ff06 	bl	80149fc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8014bf0:	bf00      	nop
}
 8014bf2:	bd80      	pop	{r7, pc}
 8014bf4:	58000c00 	.word	0x58000c00

08014bf8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8014bfc:	2120      	movs	r1, #32
 8014bfe:	4803      	ldr	r0, [pc, #12]	; (8014c0c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8014c00:	f7ff fed8 	bl	80149b4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8014c04:	f7fa fecc 	bl	800f9a0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8014c08:	bf00      	nop
}
 8014c0a:	bd80      	pop	{r7, pc}
 8014c0c:	58000c00 	.word	0x58000c00

08014c10 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8014c14:	2102      	movs	r1, #2
 8014c16:	4802      	ldr	r0, [pc, #8]	; (8014c20 <HW_IPCC_SYS_Init+0x10>)
 8014c18:	f7ff fede 	bl	80149d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014c1c:	bf00      	nop
}
 8014c1e:	bd80      	pop	{r7, pc}
 8014c20:	58000c00 	.word	0x58000c00

08014c24 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8014c24:	b580      	push	{r7, lr}
 8014c26:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8014c28:	2102      	movs	r1, #2
 8014c2a:	4804      	ldr	r0, [pc, #16]	; (8014c3c <HW_IPCC_SYS_SendCmd+0x18>)
 8014c2c:	f7ff fef4 	bl	8014a18 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8014c30:	2102      	movs	r1, #2
 8014c32:	4802      	ldr	r0, [pc, #8]	; (8014c3c <HW_IPCC_SYS_SendCmd+0x18>)
 8014c34:	f7ff feab 	bl	801498e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8014c38:	bf00      	nop
}
 8014c3a:	bd80      	pop	{r7, pc}
 8014c3c:	58000c00 	.word	0x58000c00

08014c40 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8014c40:	b580      	push	{r7, lr}
 8014c42:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8014c44:	2102      	movs	r1, #2
 8014c46:	4803      	ldr	r0, [pc, #12]	; (8014c54 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8014c48:	f7ff feb4 	bl	80149b4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8014c4c:	f7fa fef8 	bl	800fa40 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8014c50:	bf00      	nop
}
 8014c52:	bd80      	pop	{r7, pc}
 8014c54:	58000c00 	.word	0x58000c00

08014c58 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8014c5c:	f7fa ff06 	bl	800fa6c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8014c60:	2102      	movs	r1, #2
 8014c62:	4802      	ldr	r0, [pc, #8]	; (8014c6c <HW_IPCC_SYS_EvtHandler+0x14>)
 8014c64:	f7ff feca 	bl	80149fc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8014c68:	bf00      	nop
}
 8014c6a:	bd80      	pop	{r7, pc}
 8014c6c:	58000c00 	.word	0x58000c00

08014c70 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8014c70:	b580      	push	{r7, lr}
 8014c72:	b082      	sub	sp, #8
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8014c78:	2108      	movs	r1, #8
 8014c7a:	480c      	ldr	r0, [pc, #48]	; (8014cac <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8014c7c:	f7ff fedb 	bl	8014a36 <LL_C1_IPCC_IsActiveFlag_CHx>
 8014c80:	4603      	mov	r3, r0
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d007      	beq.n	8014c96 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8014c86:	4a0a      	ldr	r2, [pc, #40]	; (8014cb0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8014c8c:	2108      	movs	r1, #8
 8014c8e:	4807      	ldr	r0, [pc, #28]	; (8014cac <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8014c90:	f7ff fe7d 	bl	801498e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8014c94:	e006      	b.n	8014ca4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8014c9a:	2108      	movs	r1, #8
 8014c9c:	4803      	ldr	r0, [pc, #12]	; (8014cac <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8014c9e:	f7ff febb 	bl	8014a18 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8014ca2:	bf00      	nop
}
 8014ca4:	3708      	adds	r7, #8
 8014ca6:	46bd      	mov	sp, r7
 8014ca8:	bd80      	pop	{r7, pc}
 8014caa:	bf00      	nop
 8014cac:	58000c00 	.word	0x58000c00
 8014cb0:	20003278 	.word	0x20003278

08014cb4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8014cb8:	2108      	movs	r1, #8
 8014cba:	4806      	ldr	r0, [pc, #24]	; (8014cd4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8014cbc:	f7ff fe7a 	bl	80149b4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8014cc0:	4b05      	ldr	r3, [pc, #20]	; (8014cd8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8014cc6:	2108      	movs	r1, #8
 8014cc8:	4802      	ldr	r0, [pc, #8]	; (8014cd4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8014cca:	f7ff fea5 	bl	8014a18 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8014cce:	bf00      	nop
}
 8014cd0:	bd80      	pop	{r7, pc}
 8014cd2:	bf00      	nop
 8014cd4:	58000c00 	.word	0x58000c00
 8014cd8:	20003278 	.word	0x20003278

08014cdc <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8014cdc:	b580      	push	{r7, lr}
 8014cde:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8014ce0:	2108      	movs	r1, #8
 8014ce2:	4802      	ldr	r0, [pc, #8]	; (8014cec <HW_IPCC_TRACES_Init+0x10>)
 8014ce4:	f7ff fe78 	bl	80149d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014ce8:	bf00      	nop
}
 8014cea:	bd80      	pop	{r7, pc}
 8014cec:	58000c00 	.word	0x58000c00

08014cf0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8014cf4:	f7fa ff62 	bl	800fbbc <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8014cf8:	2108      	movs	r1, #8
 8014cfa:	4802      	ldr	r0, [pc, #8]	; (8014d04 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8014cfc:	f7ff fe7e 	bl	80149fc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8014d00:	bf00      	nop
}
 8014d02:	bd80      	pop	{r7, pc}
 8014d04:	58000c00 	.word	0x58000c00

08014d08 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8014d08:	b480      	push	{r7}
 8014d0a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8014d0c:	4b05      	ldr	r3, [pc, #20]	; (8014d24 <UTIL_LPM_Init+0x1c>)
 8014d0e:	2200      	movs	r2, #0
 8014d10:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8014d12:	4b05      	ldr	r3, [pc, #20]	; (8014d28 <UTIL_LPM_Init+0x20>)
 8014d14:	2200      	movs	r2, #0
 8014d16:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8014d18:	bf00      	nop
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d20:	4770      	bx	lr
 8014d22:	bf00      	nop
 8014d24:	2000327c 	.word	0x2000327c
 8014d28:	20003280 	.word	0x20003280

08014d2c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8014d2c:	b480      	push	{r7}
 8014d2e:	b087      	sub	sp, #28
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	6078      	str	r0, [r7, #4]
 8014d34:	460b      	mov	r3, r1
 8014d36:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014d38:	f3ef 8310 	mrs	r3, PRIMASK
 8014d3c:	613b      	str	r3, [r7, #16]
  return(result);
 8014d3e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8014d40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014d42:	b672      	cpsid	i
}
 8014d44:	bf00      	nop
  
  switch(state)
 8014d46:	78fb      	ldrb	r3, [r7, #3]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d008      	beq.n	8014d5e <UTIL_LPM_SetOffMode+0x32>
 8014d4c:	2b01      	cmp	r3, #1
 8014d4e:	d10e      	bne.n	8014d6e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8014d50:	4b0d      	ldr	r3, [pc, #52]	; (8014d88 <UTIL_LPM_SetOffMode+0x5c>)
 8014d52:	681a      	ldr	r2, [r3, #0]
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	4313      	orrs	r3, r2
 8014d58:	4a0b      	ldr	r2, [pc, #44]	; (8014d88 <UTIL_LPM_SetOffMode+0x5c>)
 8014d5a:	6013      	str	r3, [r2, #0]
      break;
 8014d5c:	e008      	b.n	8014d70 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	43da      	mvns	r2, r3
 8014d62:	4b09      	ldr	r3, [pc, #36]	; (8014d88 <UTIL_LPM_SetOffMode+0x5c>)
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	4013      	ands	r3, r2
 8014d68:	4a07      	ldr	r2, [pc, #28]	; (8014d88 <UTIL_LPM_SetOffMode+0x5c>)
 8014d6a:	6013      	str	r3, [r2, #0]
      break;
 8014d6c:	e000      	b.n	8014d70 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8014d6e:	bf00      	nop
 8014d70:	697b      	ldr	r3, [r7, #20]
 8014d72:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	f383 8810 	msr	PRIMASK, r3
}
 8014d7a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8014d7c:	bf00      	nop
 8014d7e:	371c      	adds	r7, #28
 8014d80:	46bd      	mov	sp, r7
 8014d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d86:	4770      	bx	lr
 8014d88:	20003280 	.word	0x20003280

08014d8c <arm_pid_init_f32>:
 8014d8c:	edd0 6a08 	vldr	s13, [r0, #32]
 8014d90:	edd0 7a06 	vldr	s15, [r0, #24]
 8014d94:	ed90 7a07 	vldr	s14, [r0, #28]
 8014d98:	edc0 6a02 	vstr	s13, [r0, #8]
 8014d9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014da0:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8014da4:	eef1 7a67 	vneg.f32	s15, s15
 8014da8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8014dac:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014db0:	ed80 7a00 	vstr	s14, [r0]
 8014db4:	edc0 7a01 	vstr	s15, [r0, #4]
 8014db8:	b901      	cbnz	r1, 8014dbc <arm_pid_init_f32+0x30>
 8014dba:	4770      	bx	lr
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	60c3      	str	r3, [r0, #12]
 8014dc0:	6103      	str	r3, [r0, #16]
 8014dc2:	6143      	str	r3, [r0, #20]
 8014dc4:	4770      	bx	lr
 8014dc6:	bf00      	nop

08014dc8 <atoi>:
 8014dc8:	220a      	movs	r2, #10
 8014dca:	2100      	movs	r1, #0
 8014dcc:	f000 b92e 	b.w	801502c <strtol>

08014dd0 <sbrk_aligned>:
 8014dd0:	b570      	push	{r4, r5, r6, lr}
 8014dd2:	4e0e      	ldr	r6, [pc, #56]	; (8014e0c <sbrk_aligned+0x3c>)
 8014dd4:	460c      	mov	r4, r1
 8014dd6:	6831      	ldr	r1, [r6, #0]
 8014dd8:	4605      	mov	r5, r0
 8014dda:	b911      	cbnz	r1, 8014de2 <sbrk_aligned+0x12>
 8014ddc:	f000 f958 	bl	8015090 <_sbrk_r>
 8014de0:	6030      	str	r0, [r6, #0]
 8014de2:	4621      	mov	r1, r4
 8014de4:	4628      	mov	r0, r5
 8014de6:	f000 f953 	bl	8015090 <_sbrk_r>
 8014dea:	1c43      	adds	r3, r0, #1
 8014dec:	d00a      	beq.n	8014e04 <sbrk_aligned+0x34>
 8014dee:	1cc4      	adds	r4, r0, #3
 8014df0:	f024 0403 	bic.w	r4, r4, #3
 8014df4:	42a0      	cmp	r0, r4
 8014df6:	d007      	beq.n	8014e08 <sbrk_aligned+0x38>
 8014df8:	1a21      	subs	r1, r4, r0
 8014dfa:	4628      	mov	r0, r5
 8014dfc:	f000 f948 	bl	8015090 <_sbrk_r>
 8014e00:	3001      	adds	r0, #1
 8014e02:	d101      	bne.n	8014e08 <sbrk_aligned+0x38>
 8014e04:	f04f 34ff 	mov.w	r4, #4294967295
 8014e08:	4620      	mov	r0, r4
 8014e0a:	bd70      	pop	{r4, r5, r6, pc}
 8014e0c:	20003288 	.word	0x20003288

08014e10 <_malloc_r>:
 8014e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e14:	1ccd      	adds	r5, r1, #3
 8014e16:	f025 0503 	bic.w	r5, r5, #3
 8014e1a:	3508      	adds	r5, #8
 8014e1c:	2d0c      	cmp	r5, #12
 8014e1e:	bf38      	it	cc
 8014e20:	250c      	movcc	r5, #12
 8014e22:	2d00      	cmp	r5, #0
 8014e24:	4607      	mov	r7, r0
 8014e26:	db01      	blt.n	8014e2c <_malloc_r+0x1c>
 8014e28:	42a9      	cmp	r1, r5
 8014e2a:	d905      	bls.n	8014e38 <_malloc_r+0x28>
 8014e2c:	230c      	movs	r3, #12
 8014e2e:	603b      	str	r3, [r7, #0]
 8014e30:	2600      	movs	r6, #0
 8014e32:	4630      	mov	r0, r6
 8014e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014f0c <_malloc_r+0xfc>
 8014e3c:	f000 f868 	bl	8014f10 <__malloc_lock>
 8014e40:	f8d8 3000 	ldr.w	r3, [r8]
 8014e44:	461c      	mov	r4, r3
 8014e46:	bb5c      	cbnz	r4, 8014ea0 <_malloc_r+0x90>
 8014e48:	4629      	mov	r1, r5
 8014e4a:	4638      	mov	r0, r7
 8014e4c:	f7ff ffc0 	bl	8014dd0 <sbrk_aligned>
 8014e50:	1c43      	adds	r3, r0, #1
 8014e52:	4604      	mov	r4, r0
 8014e54:	d155      	bne.n	8014f02 <_malloc_r+0xf2>
 8014e56:	f8d8 4000 	ldr.w	r4, [r8]
 8014e5a:	4626      	mov	r6, r4
 8014e5c:	2e00      	cmp	r6, #0
 8014e5e:	d145      	bne.n	8014eec <_malloc_r+0xdc>
 8014e60:	2c00      	cmp	r4, #0
 8014e62:	d048      	beq.n	8014ef6 <_malloc_r+0xe6>
 8014e64:	6823      	ldr	r3, [r4, #0]
 8014e66:	4631      	mov	r1, r6
 8014e68:	4638      	mov	r0, r7
 8014e6a:	eb04 0903 	add.w	r9, r4, r3
 8014e6e:	f000 f90f 	bl	8015090 <_sbrk_r>
 8014e72:	4581      	cmp	r9, r0
 8014e74:	d13f      	bne.n	8014ef6 <_malloc_r+0xe6>
 8014e76:	6821      	ldr	r1, [r4, #0]
 8014e78:	1a6d      	subs	r5, r5, r1
 8014e7a:	4629      	mov	r1, r5
 8014e7c:	4638      	mov	r0, r7
 8014e7e:	f7ff ffa7 	bl	8014dd0 <sbrk_aligned>
 8014e82:	3001      	adds	r0, #1
 8014e84:	d037      	beq.n	8014ef6 <_malloc_r+0xe6>
 8014e86:	6823      	ldr	r3, [r4, #0]
 8014e88:	442b      	add	r3, r5
 8014e8a:	6023      	str	r3, [r4, #0]
 8014e8c:	f8d8 3000 	ldr.w	r3, [r8]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d038      	beq.n	8014f06 <_malloc_r+0xf6>
 8014e94:	685a      	ldr	r2, [r3, #4]
 8014e96:	42a2      	cmp	r2, r4
 8014e98:	d12b      	bne.n	8014ef2 <_malloc_r+0xe2>
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	605a      	str	r2, [r3, #4]
 8014e9e:	e00f      	b.n	8014ec0 <_malloc_r+0xb0>
 8014ea0:	6822      	ldr	r2, [r4, #0]
 8014ea2:	1b52      	subs	r2, r2, r5
 8014ea4:	d41f      	bmi.n	8014ee6 <_malloc_r+0xd6>
 8014ea6:	2a0b      	cmp	r2, #11
 8014ea8:	d917      	bls.n	8014eda <_malloc_r+0xca>
 8014eaa:	1961      	adds	r1, r4, r5
 8014eac:	42a3      	cmp	r3, r4
 8014eae:	6025      	str	r5, [r4, #0]
 8014eb0:	bf18      	it	ne
 8014eb2:	6059      	strne	r1, [r3, #4]
 8014eb4:	6863      	ldr	r3, [r4, #4]
 8014eb6:	bf08      	it	eq
 8014eb8:	f8c8 1000 	streq.w	r1, [r8]
 8014ebc:	5162      	str	r2, [r4, r5]
 8014ebe:	604b      	str	r3, [r1, #4]
 8014ec0:	4638      	mov	r0, r7
 8014ec2:	f104 060b 	add.w	r6, r4, #11
 8014ec6:	f000 f829 	bl	8014f1c <__malloc_unlock>
 8014eca:	f026 0607 	bic.w	r6, r6, #7
 8014ece:	1d23      	adds	r3, r4, #4
 8014ed0:	1af2      	subs	r2, r6, r3
 8014ed2:	d0ae      	beq.n	8014e32 <_malloc_r+0x22>
 8014ed4:	1b9b      	subs	r3, r3, r6
 8014ed6:	50a3      	str	r3, [r4, r2]
 8014ed8:	e7ab      	b.n	8014e32 <_malloc_r+0x22>
 8014eda:	42a3      	cmp	r3, r4
 8014edc:	6862      	ldr	r2, [r4, #4]
 8014ede:	d1dd      	bne.n	8014e9c <_malloc_r+0x8c>
 8014ee0:	f8c8 2000 	str.w	r2, [r8]
 8014ee4:	e7ec      	b.n	8014ec0 <_malloc_r+0xb0>
 8014ee6:	4623      	mov	r3, r4
 8014ee8:	6864      	ldr	r4, [r4, #4]
 8014eea:	e7ac      	b.n	8014e46 <_malloc_r+0x36>
 8014eec:	4634      	mov	r4, r6
 8014eee:	6876      	ldr	r6, [r6, #4]
 8014ef0:	e7b4      	b.n	8014e5c <_malloc_r+0x4c>
 8014ef2:	4613      	mov	r3, r2
 8014ef4:	e7cc      	b.n	8014e90 <_malloc_r+0x80>
 8014ef6:	230c      	movs	r3, #12
 8014ef8:	603b      	str	r3, [r7, #0]
 8014efa:	4638      	mov	r0, r7
 8014efc:	f000 f80e 	bl	8014f1c <__malloc_unlock>
 8014f00:	e797      	b.n	8014e32 <_malloc_r+0x22>
 8014f02:	6025      	str	r5, [r4, #0]
 8014f04:	e7dc      	b.n	8014ec0 <_malloc_r+0xb0>
 8014f06:	605b      	str	r3, [r3, #4]
 8014f08:	deff      	udf	#255	; 0xff
 8014f0a:	bf00      	nop
 8014f0c:	20003284 	.word	0x20003284

08014f10 <__malloc_lock>:
 8014f10:	4801      	ldr	r0, [pc, #4]	; (8014f18 <__malloc_lock+0x8>)
 8014f12:	f7ef bf5e 	b.w	8004dd2 <__retarget_lock_acquire_recursive>
 8014f16:	bf00      	nop
 8014f18:	20001800 	.word	0x20001800

08014f1c <__malloc_unlock>:
 8014f1c:	4801      	ldr	r0, [pc, #4]	; (8014f24 <__malloc_unlock+0x8>)
 8014f1e:	f7ef bf6c 	b.w	8004dfa <__retarget_lock_release_recursive>
 8014f22:	bf00      	nop
 8014f24:	20001800 	.word	0x20001800

08014f28 <_strtol_l.constprop.0>:
 8014f28:	2b01      	cmp	r3, #1
 8014f2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f2e:	d001      	beq.n	8014f34 <_strtol_l.constprop.0+0xc>
 8014f30:	2b24      	cmp	r3, #36	; 0x24
 8014f32:	d906      	bls.n	8014f42 <_strtol_l.constprop.0+0x1a>
 8014f34:	f000 f8bc 	bl	80150b0 <__errno>
 8014f38:	2316      	movs	r3, #22
 8014f3a:	6003      	str	r3, [r0, #0]
 8014f3c:	2000      	movs	r0, #0
 8014f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f42:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8015028 <_strtol_l.constprop.0+0x100>
 8014f46:	460d      	mov	r5, r1
 8014f48:	462e      	mov	r6, r5
 8014f4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014f4e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8014f52:	f017 0708 	ands.w	r7, r7, #8
 8014f56:	d1f7      	bne.n	8014f48 <_strtol_l.constprop.0+0x20>
 8014f58:	2c2d      	cmp	r4, #45	; 0x2d
 8014f5a:	d132      	bne.n	8014fc2 <_strtol_l.constprop.0+0x9a>
 8014f5c:	782c      	ldrb	r4, [r5, #0]
 8014f5e:	2701      	movs	r7, #1
 8014f60:	1cb5      	adds	r5, r6, #2
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d05b      	beq.n	801501e <_strtol_l.constprop.0+0xf6>
 8014f66:	2b10      	cmp	r3, #16
 8014f68:	d109      	bne.n	8014f7e <_strtol_l.constprop.0+0x56>
 8014f6a:	2c30      	cmp	r4, #48	; 0x30
 8014f6c:	d107      	bne.n	8014f7e <_strtol_l.constprop.0+0x56>
 8014f6e:	782c      	ldrb	r4, [r5, #0]
 8014f70:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014f74:	2c58      	cmp	r4, #88	; 0x58
 8014f76:	d14d      	bne.n	8015014 <_strtol_l.constprop.0+0xec>
 8014f78:	786c      	ldrb	r4, [r5, #1]
 8014f7a:	2310      	movs	r3, #16
 8014f7c:	3502      	adds	r5, #2
 8014f7e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014f82:	f108 38ff 	add.w	r8, r8, #4294967295
 8014f86:	f04f 0e00 	mov.w	lr, #0
 8014f8a:	fbb8 f9f3 	udiv	r9, r8, r3
 8014f8e:	4676      	mov	r6, lr
 8014f90:	fb03 8a19 	mls	sl, r3, r9, r8
 8014f94:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014f98:	f1bc 0f09 	cmp.w	ip, #9
 8014f9c:	d816      	bhi.n	8014fcc <_strtol_l.constprop.0+0xa4>
 8014f9e:	4664      	mov	r4, ip
 8014fa0:	42a3      	cmp	r3, r4
 8014fa2:	dd24      	ble.n	8014fee <_strtol_l.constprop.0+0xc6>
 8014fa4:	f1be 3fff 	cmp.w	lr, #4294967295
 8014fa8:	d008      	beq.n	8014fbc <_strtol_l.constprop.0+0x94>
 8014faa:	45b1      	cmp	r9, r6
 8014fac:	d31c      	bcc.n	8014fe8 <_strtol_l.constprop.0+0xc0>
 8014fae:	d101      	bne.n	8014fb4 <_strtol_l.constprop.0+0x8c>
 8014fb0:	45a2      	cmp	sl, r4
 8014fb2:	db19      	blt.n	8014fe8 <_strtol_l.constprop.0+0xc0>
 8014fb4:	fb06 4603 	mla	r6, r6, r3, r4
 8014fb8:	f04f 0e01 	mov.w	lr, #1
 8014fbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014fc0:	e7e8      	b.n	8014f94 <_strtol_l.constprop.0+0x6c>
 8014fc2:	2c2b      	cmp	r4, #43	; 0x2b
 8014fc4:	bf04      	itt	eq
 8014fc6:	782c      	ldrbeq	r4, [r5, #0]
 8014fc8:	1cb5      	addeq	r5, r6, #2
 8014fca:	e7ca      	b.n	8014f62 <_strtol_l.constprop.0+0x3a>
 8014fcc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014fd0:	f1bc 0f19 	cmp.w	ip, #25
 8014fd4:	d801      	bhi.n	8014fda <_strtol_l.constprop.0+0xb2>
 8014fd6:	3c37      	subs	r4, #55	; 0x37
 8014fd8:	e7e2      	b.n	8014fa0 <_strtol_l.constprop.0+0x78>
 8014fda:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014fde:	f1bc 0f19 	cmp.w	ip, #25
 8014fe2:	d804      	bhi.n	8014fee <_strtol_l.constprop.0+0xc6>
 8014fe4:	3c57      	subs	r4, #87	; 0x57
 8014fe6:	e7db      	b.n	8014fa0 <_strtol_l.constprop.0+0x78>
 8014fe8:	f04f 3eff 	mov.w	lr, #4294967295
 8014fec:	e7e6      	b.n	8014fbc <_strtol_l.constprop.0+0x94>
 8014fee:	f1be 3fff 	cmp.w	lr, #4294967295
 8014ff2:	d105      	bne.n	8015000 <_strtol_l.constprop.0+0xd8>
 8014ff4:	2322      	movs	r3, #34	; 0x22
 8014ff6:	6003      	str	r3, [r0, #0]
 8014ff8:	4646      	mov	r6, r8
 8014ffa:	b942      	cbnz	r2, 801500e <_strtol_l.constprop.0+0xe6>
 8014ffc:	4630      	mov	r0, r6
 8014ffe:	e79e      	b.n	8014f3e <_strtol_l.constprop.0+0x16>
 8015000:	b107      	cbz	r7, 8015004 <_strtol_l.constprop.0+0xdc>
 8015002:	4276      	negs	r6, r6
 8015004:	2a00      	cmp	r2, #0
 8015006:	d0f9      	beq.n	8014ffc <_strtol_l.constprop.0+0xd4>
 8015008:	f1be 0f00 	cmp.w	lr, #0
 801500c:	d000      	beq.n	8015010 <_strtol_l.constprop.0+0xe8>
 801500e:	1e69      	subs	r1, r5, #1
 8015010:	6011      	str	r1, [r2, #0]
 8015012:	e7f3      	b.n	8014ffc <_strtol_l.constprop.0+0xd4>
 8015014:	2430      	movs	r4, #48	; 0x30
 8015016:	2b00      	cmp	r3, #0
 8015018:	d1b1      	bne.n	8014f7e <_strtol_l.constprop.0+0x56>
 801501a:	2308      	movs	r3, #8
 801501c:	e7af      	b.n	8014f7e <_strtol_l.constprop.0+0x56>
 801501e:	2c30      	cmp	r4, #48	; 0x30
 8015020:	d0a5      	beq.n	8014f6e <_strtol_l.constprop.0+0x46>
 8015022:	230a      	movs	r3, #10
 8015024:	e7ab      	b.n	8014f7e <_strtol_l.constprop.0+0x56>
 8015026:	bf00      	nop
 8015028:	08015c59 	.word	0x08015c59

0801502c <strtol>:
 801502c:	4613      	mov	r3, r2
 801502e:	460a      	mov	r2, r1
 8015030:	4601      	mov	r1, r0
 8015032:	4802      	ldr	r0, [pc, #8]	; (801503c <strtol+0x10>)
 8015034:	6800      	ldr	r0, [r0, #0]
 8015036:	f7ff bf77 	b.w	8014f28 <_strtol_l.constprop.0>
 801503a:	bf00      	nop
 801503c:	200000dc 	.word	0x200000dc

08015040 <siprintf>:
 8015040:	b40e      	push	{r1, r2, r3}
 8015042:	b500      	push	{lr}
 8015044:	b09c      	sub	sp, #112	; 0x70
 8015046:	ab1d      	add	r3, sp, #116	; 0x74
 8015048:	9002      	str	r0, [sp, #8]
 801504a:	9006      	str	r0, [sp, #24]
 801504c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015050:	4809      	ldr	r0, [pc, #36]	; (8015078 <siprintf+0x38>)
 8015052:	9107      	str	r1, [sp, #28]
 8015054:	9104      	str	r1, [sp, #16]
 8015056:	4909      	ldr	r1, [pc, #36]	; (801507c <siprintf+0x3c>)
 8015058:	f853 2b04 	ldr.w	r2, [r3], #4
 801505c:	9105      	str	r1, [sp, #20]
 801505e:	6800      	ldr	r0, [r0, #0]
 8015060:	9301      	str	r3, [sp, #4]
 8015062:	a902      	add	r1, sp, #8
 8015064:	f000 f902 	bl	801526c <_svfiprintf_r>
 8015068:	9b02      	ldr	r3, [sp, #8]
 801506a:	2200      	movs	r2, #0
 801506c:	701a      	strb	r2, [r3, #0]
 801506e:	b01c      	add	sp, #112	; 0x70
 8015070:	f85d eb04 	ldr.w	lr, [sp], #4
 8015074:	b003      	add	sp, #12
 8015076:	4770      	bx	lr
 8015078:	200000dc 	.word	0x200000dc
 801507c:	ffff0208 	.word	0xffff0208

08015080 <memset>:
 8015080:	4402      	add	r2, r0
 8015082:	4603      	mov	r3, r0
 8015084:	4293      	cmp	r3, r2
 8015086:	d100      	bne.n	801508a <memset+0xa>
 8015088:	4770      	bx	lr
 801508a:	f803 1b01 	strb.w	r1, [r3], #1
 801508e:	e7f9      	b.n	8015084 <memset+0x4>

08015090 <_sbrk_r>:
 8015090:	b538      	push	{r3, r4, r5, lr}
 8015092:	4d06      	ldr	r5, [pc, #24]	; (80150ac <_sbrk_r+0x1c>)
 8015094:	2300      	movs	r3, #0
 8015096:	4604      	mov	r4, r0
 8015098:	4608      	mov	r0, r1
 801509a:	602b      	str	r3, [r5, #0]
 801509c:	f7ef fa90 	bl	80045c0 <_sbrk>
 80150a0:	1c43      	adds	r3, r0, #1
 80150a2:	d102      	bne.n	80150aa <_sbrk_r+0x1a>
 80150a4:	682b      	ldr	r3, [r5, #0]
 80150a6:	b103      	cbz	r3, 80150aa <_sbrk_r+0x1a>
 80150a8:	6023      	str	r3, [r4, #0]
 80150aa:	bd38      	pop	{r3, r4, r5, pc}
 80150ac:	200033c4 	.word	0x200033c4

080150b0 <__errno>:
 80150b0:	4b01      	ldr	r3, [pc, #4]	; (80150b8 <__errno+0x8>)
 80150b2:	6818      	ldr	r0, [r3, #0]
 80150b4:	4770      	bx	lr
 80150b6:	bf00      	nop
 80150b8:	200000dc 	.word	0x200000dc

080150bc <__libc_init_array>:
 80150bc:	b570      	push	{r4, r5, r6, lr}
 80150be:	4d0d      	ldr	r5, [pc, #52]	; (80150f4 <__libc_init_array+0x38>)
 80150c0:	4c0d      	ldr	r4, [pc, #52]	; (80150f8 <__libc_init_array+0x3c>)
 80150c2:	1b64      	subs	r4, r4, r5
 80150c4:	10a4      	asrs	r4, r4, #2
 80150c6:	2600      	movs	r6, #0
 80150c8:	42a6      	cmp	r6, r4
 80150ca:	d109      	bne.n	80150e0 <__libc_init_array+0x24>
 80150cc:	4d0b      	ldr	r5, [pc, #44]	; (80150fc <__libc_init_array+0x40>)
 80150ce:	4c0c      	ldr	r4, [pc, #48]	; (8015100 <__libc_init_array+0x44>)
 80150d0:	f000 fbac 	bl	801582c <_init>
 80150d4:	1b64      	subs	r4, r4, r5
 80150d6:	10a4      	asrs	r4, r4, #2
 80150d8:	2600      	movs	r6, #0
 80150da:	42a6      	cmp	r6, r4
 80150dc:	d105      	bne.n	80150ea <__libc_init_array+0x2e>
 80150de:	bd70      	pop	{r4, r5, r6, pc}
 80150e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80150e4:	4798      	blx	r3
 80150e6:	3601      	adds	r6, #1
 80150e8:	e7ee      	b.n	80150c8 <__libc_init_array+0xc>
 80150ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80150ee:	4798      	blx	r3
 80150f0:	3601      	adds	r6, #1
 80150f2:	e7f2      	b.n	80150da <__libc_init_array+0x1e>
 80150f4:	08015d94 	.word	0x08015d94
 80150f8:	08015d94 	.word	0x08015d94
 80150fc:	08015d94 	.word	0x08015d94
 8015100:	08015da4 	.word	0x08015da4

08015104 <memcpy>:
 8015104:	440a      	add	r2, r1
 8015106:	4291      	cmp	r1, r2
 8015108:	f100 33ff 	add.w	r3, r0, #4294967295
 801510c:	d100      	bne.n	8015110 <memcpy+0xc>
 801510e:	4770      	bx	lr
 8015110:	b510      	push	{r4, lr}
 8015112:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015116:	f803 4f01 	strb.w	r4, [r3, #1]!
 801511a:	4291      	cmp	r1, r2
 801511c:	d1f9      	bne.n	8015112 <memcpy+0xe>
 801511e:	bd10      	pop	{r4, pc}

08015120 <_free_r>:
 8015120:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015122:	2900      	cmp	r1, #0
 8015124:	d044      	beq.n	80151b0 <_free_r+0x90>
 8015126:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801512a:	9001      	str	r0, [sp, #4]
 801512c:	2b00      	cmp	r3, #0
 801512e:	f1a1 0404 	sub.w	r4, r1, #4
 8015132:	bfb8      	it	lt
 8015134:	18e4      	addlt	r4, r4, r3
 8015136:	f7ff feeb 	bl	8014f10 <__malloc_lock>
 801513a:	4a1e      	ldr	r2, [pc, #120]	; (80151b4 <_free_r+0x94>)
 801513c:	9801      	ldr	r0, [sp, #4]
 801513e:	6813      	ldr	r3, [r2, #0]
 8015140:	b933      	cbnz	r3, 8015150 <_free_r+0x30>
 8015142:	6063      	str	r3, [r4, #4]
 8015144:	6014      	str	r4, [r2, #0]
 8015146:	b003      	add	sp, #12
 8015148:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801514c:	f7ff bee6 	b.w	8014f1c <__malloc_unlock>
 8015150:	42a3      	cmp	r3, r4
 8015152:	d908      	bls.n	8015166 <_free_r+0x46>
 8015154:	6825      	ldr	r5, [r4, #0]
 8015156:	1961      	adds	r1, r4, r5
 8015158:	428b      	cmp	r3, r1
 801515a:	bf01      	itttt	eq
 801515c:	6819      	ldreq	r1, [r3, #0]
 801515e:	685b      	ldreq	r3, [r3, #4]
 8015160:	1949      	addeq	r1, r1, r5
 8015162:	6021      	streq	r1, [r4, #0]
 8015164:	e7ed      	b.n	8015142 <_free_r+0x22>
 8015166:	461a      	mov	r2, r3
 8015168:	685b      	ldr	r3, [r3, #4]
 801516a:	b10b      	cbz	r3, 8015170 <_free_r+0x50>
 801516c:	42a3      	cmp	r3, r4
 801516e:	d9fa      	bls.n	8015166 <_free_r+0x46>
 8015170:	6811      	ldr	r1, [r2, #0]
 8015172:	1855      	adds	r5, r2, r1
 8015174:	42a5      	cmp	r5, r4
 8015176:	d10b      	bne.n	8015190 <_free_r+0x70>
 8015178:	6824      	ldr	r4, [r4, #0]
 801517a:	4421      	add	r1, r4
 801517c:	1854      	adds	r4, r2, r1
 801517e:	42a3      	cmp	r3, r4
 8015180:	6011      	str	r1, [r2, #0]
 8015182:	d1e0      	bne.n	8015146 <_free_r+0x26>
 8015184:	681c      	ldr	r4, [r3, #0]
 8015186:	685b      	ldr	r3, [r3, #4]
 8015188:	6053      	str	r3, [r2, #4]
 801518a:	440c      	add	r4, r1
 801518c:	6014      	str	r4, [r2, #0]
 801518e:	e7da      	b.n	8015146 <_free_r+0x26>
 8015190:	d902      	bls.n	8015198 <_free_r+0x78>
 8015192:	230c      	movs	r3, #12
 8015194:	6003      	str	r3, [r0, #0]
 8015196:	e7d6      	b.n	8015146 <_free_r+0x26>
 8015198:	6825      	ldr	r5, [r4, #0]
 801519a:	1961      	adds	r1, r4, r5
 801519c:	428b      	cmp	r3, r1
 801519e:	bf04      	itt	eq
 80151a0:	6819      	ldreq	r1, [r3, #0]
 80151a2:	685b      	ldreq	r3, [r3, #4]
 80151a4:	6063      	str	r3, [r4, #4]
 80151a6:	bf04      	itt	eq
 80151a8:	1949      	addeq	r1, r1, r5
 80151aa:	6021      	streq	r1, [r4, #0]
 80151ac:	6054      	str	r4, [r2, #4]
 80151ae:	e7ca      	b.n	8015146 <_free_r+0x26>
 80151b0:	b003      	add	sp, #12
 80151b2:	bd30      	pop	{r4, r5, pc}
 80151b4:	20003284 	.word	0x20003284

080151b8 <__ssputs_r>:
 80151b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151bc:	688e      	ldr	r6, [r1, #8]
 80151be:	461f      	mov	r7, r3
 80151c0:	42be      	cmp	r6, r7
 80151c2:	680b      	ldr	r3, [r1, #0]
 80151c4:	4682      	mov	sl, r0
 80151c6:	460c      	mov	r4, r1
 80151c8:	4690      	mov	r8, r2
 80151ca:	d82c      	bhi.n	8015226 <__ssputs_r+0x6e>
 80151cc:	898a      	ldrh	r2, [r1, #12]
 80151ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80151d2:	d026      	beq.n	8015222 <__ssputs_r+0x6a>
 80151d4:	6965      	ldr	r5, [r4, #20]
 80151d6:	6909      	ldr	r1, [r1, #16]
 80151d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80151dc:	eba3 0901 	sub.w	r9, r3, r1
 80151e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80151e4:	1c7b      	adds	r3, r7, #1
 80151e6:	444b      	add	r3, r9
 80151e8:	106d      	asrs	r5, r5, #1
 80151ea:	429d      	cmp	r5, r3
 80151ec:	bf38      	it	cc
 80151ee:	461d      	movcc	r5, r3
 80151f0:	0553      	lsls	r3, r2, #21
 80151f2:	d527      	bpl.n	8015244 <__ssputs_r+0x8c>
 80151f4:	4629      	mov	r1, r5
 80151f6:	f7ff fe0b 	bl	8014e10 <_malloc_r>
 80151fa:	4606      	mov	r6, r0
 80151fc:	b360      	cbz	r0, 8015258 <__ssputs_r+0xa0>
 80151fe:	6921      	ldr	r1, [r4, #16]
 8015200:	464a      	mov	r2, r9
 8015202:	f7ff ff7f 	bl	8015104 <memcpy>
 8015206:	89a3      	ldrh	r3, [r4, #12]
 8015208:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801520c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015210:	81a3      	strh	r3, [r4, #12]
 8015212:	6126      	str	r6, [r4, #16]
 8015214:	6165      	str	r5, [r4, #20]
 8015216:	444e      	add	r6, r9
 8015218:	eba5 0509 	sub.w	r5, r5, r9
 801521c:	6026      	str	r6, [r4, #0]
 801521e:	60a5      	str	r5, [r4, #8]
 8015220:	463e      	mov	r6, r7
 8015222:	42be      	cmp	r6, r7
 8015224:	d900      	bls.n	8015228 <__ssputs_r+0x70>
 8015226:	463e      	mov	r6, r7
 8015228:	6820      	ldr	r0, [r4, #0]
 801522a:	4632      	mov	r2, r6
 801522c:	4641      	mov	r1, r8
 801522e:	f000 faab 	bl	8015788 <memmove>
 8015232:	68a3      	ldr	r3, [r4, #8]
 8015234:	1b9b      	subs	r3, r3, r6
 8015236:	60a3      	str	r3, [r4, #8]
 8015238:	6823      	ldr	r3, [r4, #0]
 801523a:	4433      	add	r3, r6
 801523c:	6023      	str	r3, [r4, #0]
 801523e:	2000      	movs	r0, #0
 8015240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015244:	462a      	mov	r2, r5
 8015246:	f000 fab9 	bl	80157bc <_realloc_r>
 801524a:	4606      	mov	r6, r0
 801524c:	2800      	cmp	r0, #0
 801524e:	d1e0      	bne.n	8015212 <__ssputs_r+0x5a>
 8015250:	6921      	ldr	r1, [r4, #16]
 8015252:	4650      	mov	r0, sl
 8015254:	f7ff ff64 	bl	8015120 <_free_r>
 8015258:	230c      	movs	r3, #12
 801525a:	f8ca 3000 	str.w	r3, [sl]
 801525e:	89a3      	ldrh	r3, [r4, #12]
 8015260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015264:	81a3      	strh	r3, [r4, #12]
 8015266:	f04f 30ff 	mov.w	r0, #4294967295
 801526a:	e7e9      	b.n	8015240 <__ssputs_r+0x88>

0801526c <_svfiprintf_r>:
 801526c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015270:	4698      	mov	r8, r3
 8015272:	898b      	ldrh	r3, [r1, #12]
 8015274:	061b      	lsls	r3, r3, #24
 8015276:	b09d      	sub	sp, #116	; 0x74
 8015278:	4607      	mov	r7, r0
 801527a:	460d      	mov	r5, r1
 801527c:	4614      	mov	r4, r2
 801527e:	d50e      	bpl.n	801529e <_svfiprintf_r+0x32>
 8015280:	690b      	ldr	r3, [r1, #16]
 8015282:	b963      	cbnz	r3, 801529e <_svfiprintf_r+0x32>
 8015284:	2140      	movs	r1, #64	; 0x40
 8015286:	f7ff fdc3 	bl	8014e10 <_malloc_r>
 801528a:	6028      	str	r0, [r5, #0]
 801528c:	6128      	str	r0, [r5, #16]
 801528e:	b920      	cbnz	r0, 801529a <_svfiprintf_r+0x2e>
 8015290:	230c      	movs	r3, #12
 8015292:	603b      	str	r3, [r7, #0]
 8015294:	f04f 30ff 	mov.w	r0, #4294967295
 8015298:	e0d0      	b.n	801543c <_svfiprintf_r+0x1d0>
 801529a:	2340      	movs	r3, #64	; 0x40
 801529c:	616b      	str	r3, [r5, #20]
 801529e:	2300      	movs	r3, #0
 80152a0:	9309      	str	r3, [sp, #36]	; 0x24
 80152a2:	2320      	movs	r3, #32
 80152a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80152a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80152ac:	2330      	movs	r3, #48	; 0x30
 80152ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015454 <_svfiprintf_r+0x1e8>
 80152b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80152b6:	f04f 0901 	mov.w	r9, #1
 80152ba:	4623      	mov	r3, r4
 80152bc:	469a      	mov	sl, r3
 80152be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80152c2:	b10a      	cbz	r2, 80152c8 <_svfiprintf_r+0x5c>
 80152c4:	2a25      	cmp	r2, #37	; 0x25
 80152c6:	d1f9      	bne.n	80152bc <_svfiprintf_r+0x50>
 80152c8:	ebba 0b04 	subs.w	fp, sl, r4
 80152cc:	d00b      	beq.n	80152e6 <_svfiprintf_r+0x7a>
 80152ce:	465b      	mov	r3, fp
 80152d0:	4622      	mov	r2, r4
 80152d2:	4629      	mov	r1, r5
 80152d4:	4638      	mov	r0, r7
 80152d6:	f7ff ff6f 	bl	80151b8 <__ssputs_r>
 80152da:	3001      	adds	r0, #1
 80152dc:	f000 80a9 	beq.w	8015432 <_svfiprintf_r+0x1c6>
 80152e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80152e2:	445a      	add	r2, fp
 80152e4:	9209      	str	r2, [sp, #36]	; 0x24
 80152e6:	f89a 3000 	ldrb.w	r3, [sl]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	f000 80a1 	beq.w	8015432 <_svfiprintf_r+0x1c6>
 80152f0:	2300      	movs	r3, #0
 80152f2:	f04f 32ff 	mov.w	r2, #4294967295
 80152f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80152fa:	f10a 0a01 	add.w	sl, sl, #1
 80152fe:	9304      	str	r3, [sp, #16]
 8015300:	9307      	str	r3, [sp, #28]
 8015302:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015306:	931a      	str	r3, [sp, #104]	; 0x68
 8015308:	4654      	mov	r4, sl
 801530a:	2205      	movs	r2, #5
 801530c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015310:	4850      	ldr	r0, [pc, #320]	; (8015454 <_svfiprintf_r+0x1e8>)
 8015312:	f7ea ff3d 	bl	8000190 <memchr>
 8015316:	9a04      	ldr	r2, [sp, #16]
 8015318:	b9d8      	cbnz	r0, 8015352 <_svfiprintf_r+0xe6>
 801531a:	06d0      	lsls	r0, r2, #27
 801531c:	bf44      	itt	mi
 801531e:	2320      	movmi	r3, #32
 8015320:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015324:	0711      	lsls	r1, r2, #28
 8015326:	bf44      	itt	mi
 8015328:	232b      	movmi	r3, #43	; 0x2b
 801532a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801532e:	f89a 3000 	ldrb.w	r3, [sl]
 8015332:	2b2a      	cmp	r3, #42	; 0x2a
 8015334:	d015      	beq.n	8015362 <_svfiprintf_r+0xf6>
 8015336:	9a07      	ldr	r2, [sp, #28]
 8015338:	4654      	mov	r4, sl
 801533a:	2000      	movs	r0, #0
 801533c:	f04f 0c0a 	mov.w	ip, #10
 8015340:	4621      	mov	r1, r4
 8015342:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015346:	3b30      	subs	r3, #48	; 0x30
 8015348:	2b09      	cmp	r3, #9
 801534a:	d94d      	bls.n	80153e8 <_svfiprintf_r+0x17c>
 801534c:	b1b0      	cbz	r0, 801537c <_svfiprintf_r+0x110>
 801534e:	9207      	str	r2, [sp, #28]
 8015350:	e014      	b.n	801537c <_svfiprintf_r+0x110>
 8015352:	eba0 0308 	sub.w	r3, r0, r8
 8015356:	fa09 f303 	lsl.w	r3, r9, r3
 801535a:	4313      	orrs	r3, r2
 801535c:	9304      	str	r3, [sp, #16]
 801535e:	46a2      	mov	sl, r4
 8015360:	e7d2      	b.n	8015308 <_svfiprintf_r+0x9c>
 8015362:	9b03      	ldr	r3, [sp, #12]
 8015364:	1d19      	adds	r1, r3, #4
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	9103      	str	r1, [sp, #12]
 801536a:	2b00      	cmp	r3, #0
 801536c:	bfbb      	ittet	lt
 801536e:	425b      	neglt	r3, r3
 8015370:	f042 0202 	orrlt.w	r2, r2, #2
 8015374:	9307      	strge	r3, [sp, #28]
 8015376:	9307      	strlt	r3, [sp, #28]
 8015378:	bfb8      	it	lt
 801537a:	9204      	strlt	r2, [sp, #16]
 801537c:	7823      	ldrb	r3, [r4, #0]
 801537e:	2b2e      	cmp	r3, #46	; 0x2e
 8015380:	d10c      	bne.n	801539c <_svfiprintf_r+0x130>
 8015382:	7863      	ldrb	r3, [r4, #1]
 8015384:	2b2a      	cmp	r3, #42	; 0x2a
 8015386:	d134      	bne.n	80153f2 <_svfiprintf_r+0x186>
 8015388:	9b03      	ldr	r3, [sp, #12]
 801538a:	1d1a      	adds	r2, r3, #4
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	9203      	str	r2, [sp, #12]
 8015390:	2b00      	cmp	r3, #0
 8015392:	bfb8      	it	lt
 8015394:	f04f 33ff 	movlt.w	r3, #4294967295
 8015398:	3402      	adds	r4, #2
 801539a:	9305      	str	r3, [sp, #20]
 801539c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015464 <_svfiprintf_r+0x1f8>
 80153a0:	7821      	ldrb	r1, [r4, #0]
 80153a2:	2203      	movs	r2, #3
 80153a4:	4650      	mov	r0, sl
 80153a6:	f7ea fef3 	bl	8000190 <memchr>
 80153aa:	b138      	cbz	r0, 80153bc <_svfiprintf_r+0x150>
 80153ac:	9b04      	ldr	r3, [sp, #16]
 80153ae:	eba0 000a 	sub.w	r0, r0, sl
 80153b2:	2240      	movs	r2, #64	; 0x40
 80153b4:	4082      	lsls	r2, r0
 80153b6:	4313      	orrs	r3, r2
 80153b8:	3401      	adds	r4, #1
 80153ba:	9304      	str	r3, [sp, #16]
 80153bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153c0:	4825      	ldr	r0, [pc, #148]	; (8015458 <_svfiprintf_r+0x1ec>)
 80153c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80153c6:	2206      	movs	r2, #6
 80153c8:	f7ea fee2 	bl	8000190 <memchr>
 80153cc:	2800      	cmp	r0, #0
 80153ce:	d038      	beq.n	8015442 <_svfiprintf_r+0x1d6>
 80153d0:	4b22      	ldr	r3, [pc, #136]	; (801545c <_svfiprintf_r+0x1f0>)
 80153d2:	bb1b      	cbnz	r3, 801541c <_svfiprintf_r+0x1b0>
 80153d4:	9b03      	ldr	r3, [sp, #12]
 80153d6:	3307      	adds	r3, #7
 80153d8:	f023 0307 	bic.w	r3, r3, #7
 80153dc:	3308      	adds	r3, #8
 80153de:	9303      	str	r3, [sp, #12]
 80153e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153e2:	4433      	add	r3, r6
 80153e4:	9309      	str	r3, [sp, #36]	; 0x24
 80153e6:	e768      	b.n	80152ba <_svfiprintf_r+0x4e>
 80153e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80153ec:	460c      	mov	r4, r1
 80153ee:	2001      	movs	r0, #1
 80153f0:	e7a6      	b.n	8015340 <_svfiprintf_r+0xd4>
 80153f2:	2300      	movs	r3, #0
 80153f4:	3401      	adds	r4, #1
 80153f6:	9305      	str	r3, [sp, #20]
 80153f8:	4619      	mov	r1, r3
 80153fa:	f04f 0c0a 	mov.w	ip, #10
 80153fe:	4620      	mov	r0, r4
 8015400:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015404:	3a30      	subs	r2, #48	; 0x30
 8015406:	2a09      	cmp	r2, #9
 8015408:	d903      	bls.n	8015412 <_svfiprintf_r+0x1a6>
 801540a:	2b00      	cmp	r3, #0
 801540c:	d0c6      	beq.n	801539c <_svfiprintf_r+0x130>
 801540e:	9105      	str	r1, [sp, #20]
 8015410:	e7c4      	b.n	801539c <_svfiprintf_r+0x130>
 8015412:	fb0c 2101 	mla	r1, ip, r1, r2
 8015416:	4604      	mov	r4, r0
 8015418:	2301      	movs	r3, #1
 801541a:	e7f0      	b.n	80153fe <_svfiprintf_r+0x192>
 801541c:	ab03      	add	r3, sp, #12
 801541e:	9300      	str	r3, [sp, #0]
 8015420:	462a      	mov	r2, r5
 8015422:	4b0f      	ldr	r3, [pc, #60]	; (8015460 <_svfiprintf_r+0x1f4>)
 8015424:	a904      	add	r1, sp, #16
 8015426:	4638      	mov	r0, r7
 8015428:	f3af 8000 	nop.w
 801542c:	1c42      	adds	r2, r0, #1
 801542e:	4606      	mov	r6, r0
 8015430:	d1d6      	bne.n	80153e0 <_svfiprintf_r+0x174>
 8015432:	89ab      	ldrh	r3, [r5, #12]
 8015434:	065b      	lsls	r3, r3, #25
 8015436:	f53f af2d 	bmi.w	8015294 <_svfiprintf_r+0x28>
 801543a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801543c:	b01d      	add	sp, #116	; 0x74
 801543e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015442:	ab03      	add	r3, sp, #12
 8015444:	9300      	str	r3, [sp, #0]
 8015446:	462a      	mov	r2, r5
 8015448:	4b05      	ldr	r3, [pc, #20]	; (8015460 <_svfiprintf_r+0x1f4>)
 801544a:	a904      	add	r1, sp, #16
 801544c:	4638      	mov	r0, r7
 801544e:	f000 f879 	bl	8015544 <_printf_i>
 8015452:	e7eb      	b.n	801542c <_svfiprintf_r+0x1c0>
 8015454:	08015d59 	.word	0x08015d59
 8015458:	08015d63 	.word	0x08015d63
 801545c:	00000000 	.word	0x00000000
 8015460:	080151b9 	.word	0x080151b9
 8015464:	08015d5f 	.word	0x08015d5f

08015468 <_printf_common>:
 8015468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801546c:	4616      	mov	r6, r2
 801546e:	4699      	mov	r9, r3
 8015470:	688a      	ldr	r2, [r1, #8]
 8015472:	690b      	ldr	r3, [r1, #16]
 8015474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015478:	4293      	cmp	r3, r2
 801547a:	bfb8      	it	lt
 801547c:	4613      	movlt	r3, r2
 801547e:	6033      	str	r3, [r6, #0]
 8015480:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015484:	4607      	mov	r7, r0
 8015486:	460c      	mov	r4, r1
 8015488:	b10a      	cbz	r2, 801548e <_printf_common+0x26>
 801548a:	3301      	adds	r3, #1
 801548c:	6033      	str	r3, [r6, #0]
 801548e:	6823      	ldr	r3, [r4, #0]
 8015490:	0699      	lsls	r1, r3, #26
 8015492:	bf42      	ittt	mi
 8015494:	6833      	ldrmi	r3, [r6, #0]
 8015496:	3302      	addmi	r3, #2
 8015498:	6033      	strmi	r3, [r6, #0]
 801549a:	6825      	ldr	r5, [r4, #0]
 801549c:	f015 0506 	ands.w	r5, r5, #6
 80154a0:	d106      	bne.n	80154b0 <_printf_common+0x48>
 80154a2:	f104 0a19 	add.w	sl, r4, #25
 80154a6:	68e3      	ldr	r3, [r4, #12]
 80154a8:	6832      	ldr	r2, [r6, #0]
 80154aa:	1a9b      	subs	r3, r3, r2
 80154ac:	42ab      	cmp	r3, r5
 80154ae:	dc26      	bgt.n	80154fe <_printf_common+0x96>
 80154b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80154b4:	1e13      	subs	r3, r2, #0
 80154b6:	6822      	ldr	r2, [r4, #0]
 80154b8:	bf18      	it	ne
 80154ba:	2301      	movne	r3, #1
 80154bc:	0692      	lsls	r2, r2, #26
 80154be:	d42b      	bmi.n	8015518 <_printf_common+0xb0>
 80154c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80154c4:	4649      	mov	r1, r9
 80154c6:	4638      	mov	r0, r7
 80154c8:	47c0      	blx	r8
 80154ca:	3001      	adds	r0, #1
 80154cc:	d01e      	beq.n	801550c <_printf_common+0xa4>
 80154ce:	6823      	ldr	r3, [r4, #0]
 80154d0:	6922      	ldr	r2, [r4, #16]
 80154d2:	f003 0306 	and.w	r3, r3, #6
 80154d6:	2b04      	cmp	r3, #4
 80154d8:	bf02      	ittt	eq
 80154da:	68e5      	ldreq	r5, [r4, #12]
 80154dc:	6833      	ldreq	r3, [r6, #0]
 80154de:	1aed      	subeq	r5, r5, r3
 80154e0:	68a3      	ldr	r3, [r4, #8]
 80154e2:	bf0c      	ite	eq
 80154e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80154e8:	2500      	movne	r5, #0
 80154ea:	4293      	cmp	r3, r2
 80154ec:	bfc4      	itt	gt
 80154ee:	1a9b      	subgt	r3, r3, r2
 80154f0:	18ed      	addgt	r5, r5, r3
 80154f2:	2600      	movs	r6, #0
 80154f4:	341a      	adds	r4, #26
 80154f6:	42b5      	cmp	r5, r6
 80154f8:	d11a      	bne.n	8015530 <_printf_common+0xc8>
 80154fa:	2000      	movs	r0, #0
 80154fc:	e008      	b.n	8015510 <_printf_common+0xa8>
 80154fe:	2301      	movs	r3, #1
 8015500:	4652      	mov	r2, sl
 8015502:	4649      	mov	r1, r9
 8015504:	4638      	mov	r0, r7
 8015506:	47c0      	blx	r8
 8015508:	3001      	adds	r0, #1
 801550a:	d103      	bne.n	8015514 <_printf_common+0xac>
 801550c:	f04f 30ff 	mov.w	r0, #4294967295
 8015510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015514:	3501      	adds	r5, #1
 8015516:	e7c6      	b.n	80154a6 <_printf_common+0x3e>
 8015518:	18e1      	adds	r1, r4, r3
 801551a:	1c5a      	adds	r2, r3, #1
 801551c:	2030      	movs	r0, #48	; 0x30
 801551e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015522:	4422      	add	r2, r4
 8015524:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015528:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801552c:	3302      	adds	r3, #2
 801552e:	e7c7      	b.n	80154c0 <_printf_common+0x58>
 8015530:	2301      	movs	r3, #1
 8015532:	4622      	mov	r2, r4
 8015534:	4649      	mov	r1, r9
 8015536:	4638      	mov	r0, r7
 8015538:	47c0      	blx	r8
 801553a:	3001      	adds	r0, #1
 801553c:	d0e6      	beq.n	801550c <_printf_common+0xa4>
 801553e:	3601      	adds	r6, #1
 8015540:	e7d9      	b.n	80154f6 <_printf_common+0x8e>
	...

08015544 <_printf_i>:
 8015544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015548:	7e0f      	ldrb	r7, [r1, #24]
 801554a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801554c:	2f78      	cmp	r7, #120	; 0x78
 801554e:	4691      	mov	r9, r2
 8015550:	4680      	mov	r8, r0
 8015552:	460c      	mov	r4, r1
 8015554:	469a      	mov	sl, r3
 8015556:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801555a:	d807      	bhi.n	801556c <_printf_i+0x28>
 801555c:	2f62      	cmp	r7, #98	; 0x62
 801555e:	d80a      	bhi.n	8015576 <_printf_i+0x32>
 8015560:	2f00      	cmp	r7, #0
 8015562:	f000 80d4 	beq.w	801570e <_printf_i+0x1ca>
 8015566:	2f58      	cmp	r7, #88	; 0x58
 8015568:	f000 80c0 	beq.w	80156ec <_printf_i+0x1a8>
 801556c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015570:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015574:	e03a      	b.n	80155ec <_printf_i+0xa8>
 8015576:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801557a:	2b15      	cmp	r3, #21
 801557c:	d8f6      	bhi.n	801556c <_printf_i+0x28>
 801557e:	a101      	add	r1, pc, #4	; (adr r1, 8015584 <_printf_i+0x40>)
 8015580:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015584:	080155dd 	.word	0x080155dd
 8015588:	080155f1 	.word	0x080155f1
 801558c:	0801556d 	.word	0x0801556d
 8015590:	0801556d 	.word	0x0801556d
 8015594:	0801556d 	.word	0x0801556d
 8015598:	0801556d 	.word	0x0801556d
 801559c:	080155f1 	.word	0x080155f1
 80155a0:	0801556d 	.word	0x0801556d
 80155a4:	0801556d 	.word	0x0801556d
 80155a8:	0801556d 	.word	0x0801556d
 80155ac:	0801556d 	.word	0x0801556d
 80155b0:	080156f5 	.word	0x080156f5
 80155b4:	0801561d 	.word	0x0801561d
 80155b8:	080156af 	.word	0x080156af
 80155bc:	0801556d 	.word	0x0801556d
 80155c0:	0801556d 	.word	0x0801556d
 80155c4:	08015717 	.word	0x08015717
 80155c8:	0801556d 	.word	0x0801556d
 80155cc:	0801561d 	.word	0x0801561d
 80155d0:	0801556d 	.word	0x0801556d
 80155d4:	0801556d 	.word	0x0801556d
 80155d8:	080156b7 	.word	0x080156b7
 80155dc:	682b      	ldr	r3, [r5, #0]
 80155de:	1d1a      	adds	r2, r3, #4
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	602a      	str	r2, [r5, #0]
 80155e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80155e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80155ec:	2301      	movs	r3, #1
 80155ee:	e09f      	b.n	8015730 <_printf_i+0x1ec>
 80155f0:	6820      	ldr	r0, [r4, #0]
 80155f2:	682b      	ldr	r3, [r5, #0]
 80155f4:	0607      	lsls	r7, r0, #24
 80155f6:	f103 0104 	add.w	r1, r3, #4
 80155fa:	6029      	str	r1, [r5, #0]
 80155fc:	d501      	bpl.n	8015602 <_printf_i+0xbe>
 80155fe:	681e      	ldr	r6, [r3, #0]
 8015600:	e003      	b.n	801560a <_printf_i+0xc6>
 8015602:	0646      	lsls	r6, r0, #25
 8015604:	d5fb      	bpl.n	80155fe <_printf_i+0xba>
 8015606:	f9b3 6000 	ldrsh.w	r6, [r3]
 801560a:	2e00      	cmp	r6, #0
 801560c:	da03      	bge.n	8015616 <_printf_i+0xd2>
 801560e:	232d      	movs	r3, #45	; 0x2d
 8015610:	4276      	negs	r6, r6
 8015612:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015616:	485a      	ldr	r0, [pc, #360]	; (8015780 <_printf_i+0x23c>)
 8015618:	230a      	movs	r3, #10
 801561a:	e012      	b.n	8015642 <_printf_i+0xfe>
 801561c:	682b      	ldr	r3, [r5, #0]
 801561e:	6820      	ldr	r0, [r4, #0]
 8015620:	1d19      	adds	r1, r3, #4
 8015622:	6029      	str	r1, [r5, #0]
 8015624:	0605      	lsls	r5, r0, #24
 8015626:	d501      	bpl.n	801562c <_printf_i+0xe8>
 8015628:	681e      	ldr	r6, [r3, #0]
 801562a:	e002      	b.n	8015632 <_printf_i+0xee>
 801562c:	0641      	lsls	r1, r0, #25
 801562e:	d5fb      	bpl.n	8015628 <_printf_i+0xe4>
 8015630:	881e      	ldrh	r6, [r3, #0]
 8015632:	4853      	ldr	r0, [pc, #332]	; (8015780 <_printf_i+0x23c>)
 8015634:	2f6f      	cmp	r7, #111	; 0x6f
 8015636:	bf0c      	ite	eq
 8015638:	2308      	moveq	r3, #8
 801563a:	230a      	movne	r3, #10
 801563c:	2100      	movs	r1, #0
 801563e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015642:	6865      	ldr	r5, [r4, #4]
 8015644:	60a5      	str	r5, [r4, #8]
 8015646:	2d00      	cmp	r5, #0
 8015648:	bfa2      	ittt	ge
 801564a:	6821      	ldrge	r1, [r4, #0]
 801564c:	f021 0104 	bicge.w	r1, r1, #4
 8015650:	6021      	strge	r1, [r4, #0]
 8015652:	b90e      	cbnz	r6, 8015658 <_printf_i+0x114>
 8015654:	2d00      	cmp	r5, #0
 8015656:	d04b      	beq.n	80156f0 <_printf_i+0x1ac>
 8015658:	4615      	mov	r5, r2
 801565a:	fbb6 f1f3 	udiv	r1, r6, r3
 801565e:	fb03 6711 	mls	r7, r3, r1, r6
 8015662:	5dc7      	ldrb	r7, [r0, r7]
 8015664:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015668:	4637      	mov	r7, r6
 801566a:	42bb      	cmp	r3, r7
 801566c:	460e      	mov	r6, r1
 801566e:	d9f4      	bls.n	801565a <_printf_i+0x116>
 8015670:	2b08      	cmp	r3, #8
 8015672:	d10b      	bne.n	801568c <_printf_i+0x148>
 8015674:	6823      	ldr	r3, [r4, #0]
 8015676:	07de      	lsls	r6, r3, #31
 8015678:	d508      	bpl.n	801568c <_printf_i+0x148>
 801567a:	6923      	ldr	r3, [r4, #16]
 801567c:	6861      	ldr	r1, [r4, #4]
 801567e:	4299      	cmp	r1, r3
 8015680:	bfde      	ittt	le
 8015682:	2330      	movle	r3, #48	; 0x30
 8015684:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015688:	f105 35ff 	addle.w	r5, r5, #4294967295
 801568c:	1b52      	subs	r2, r2, r5
 801568e:	6122      	str	r2, [r4, #16]
 8015690:	f8cd a000 	str.w	sl, [sp]
 8015694:	464b      	mov	r3, r9
 8015696:	aa03      	add	r2, sp, #12
 8015698:	4621      	mov	r1, r4
 801569a:	4640      	mov	r0, r8
 801569c:	f7ff fee4 	bl	8015468 <_printf_common>
 80156a0:	3001      	adds	r0, #1
 80156a2:	d14a      	bne.n	801573a <_printf_i+0x1f6>
 80156a4:	f04f 30ff 	mov.w	r0, #4294967295
 80156a8:	b004      	add	sp, #16
 80156aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156ae:	6823      	ldr	r3, [r4, #0]
 80156b0:	f043 0320 	orr.w	r3, r3, #32
 80156b4:	6023      	str	r3, [r4, #0]
 80156b6:	4833      	ldr	r0, [pc, #204]	; (8015784 <_printf_i+0x240>)
 80156b8:	2778      	movs	r7, #120	; 0x78
 80156ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80156be:	6823      	ldr	r3, [r4, #0]
 80156c0:	6829      	ldr	r1, [r5, #0]
 80156c2:	061f      	lsls	r7, r3, #24
 80156c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80156c8:	d402      	bmi.n	80156d0 <_printf_i+0x18c>
 80156ca:	065f      	lsls	r7, r3, #25
 80156cc:	bf48      	it	mi
 80156ce:	b2b6      	uxthmi	r6, r6
 80156d0:	07df      	lsls	r7, r3, #31
 80156d2:	bf48      	it	mi
 80156d4:	f043 0320 	orrmi.w	r3, r3, #32
 80156d8:	6029      	str	r1, [r5, #0]
 80156da:	bf48      	it	mi
 80156dc:	6023      	strmi	r3, [r4, #0]
 80156de:	b91e      	cbnz	r6, 80156e8 <_printf_i+0x1a4>
 80156e0:	6823      	ldr	r3, [r4, #0]
 80156e2:	f023 0320 	bic.w	r3, r3, #32
 80156e6:	6023      	str	r3, [r4, #0]
 80156e8:	2310      	movs	r3, #16
 80156ea:	e7a7      	b.n	801563c <_printf_i+0xf8>
 80156ec:	4824      	ldr	r0, [pc, #144]	; (8015780 <_printf_i+0x23c>)
 80156ee:	e7e4      	b.n	80156ba <_printf_i+0x176>
 80156f0:	4615      	mov	r5, r2
 80156f2:	e7bd      	b.n	8015670 <_printf_i+0x12c>
 80156f4:	682b      	ldr	r3, [r5, #0]
 80156f6:	6826      	ldr	r6, [r4, #0]
 80156f8:	6961      	ldr	r1, [r4, #20]
 80156fa:	1d18      	adds	r0, r3, #4
 80156fc:	6028      	str	r0, [r5, #0]
 80156fe:	0635      	lsls	r5, r6, #24
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	d501      	bpl.n	8015708 <_printf_i+0x1c4>
 8015704:	6019      	str	r1, [r3, #0]
 8015706:	e002      	b.n	801570e <_printf_i+0x1ca>
 8015708:	0670      	lsls	r0, r6, #25
 801570a:	d5fb      	bpl.n	8015704 <_printf_i+0x1c0>
 801570c:	8019      	strh	r1, [r3, #0]
 801570e:	2300      	movs	r3, #0
 8015710:	6123      	str	r3, [r4, #16]
 8015712:	4615      	mov	r5, r2
 8015714:	e7bc      	b.n	8015690 <_printf_i+0x14c>
 8015716:	682b      	ldr	r3, [r5, #0]
 8015718:	1d1a      	adds	r2, r3, #4
 801571a:	602a      	str	r2, [r5, #0]
 801571c:	681d      	ldr	r5, [r3, #0]
 801571e:	6862      	ldr	r2, [r4, #4]
 8015720:	2100      	movs	r1, #0
 8015722:	4628      	mov	r0, r5
 8015724:	f7ea fd34 	bl	8000190 <memchr>
 8015728:	b108      	cbz	r0, 801572e <_printf_i+0x1ea>
 801572a:	1b40      	subs	r0, r0, r5
 801572c:	6060      	str	r0, [r4, #4]
 801572e:	6863      	ldr	r3, [r4, #4]
 8015730:	6123      	str	r3, [r4, #16]
 8015732:	2300      	movs	r3, #0
 8015734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015738:	e7aa      	b.n	8015690 <_printf_i+0x14c>
 801573a:	6923      	ldr	r3, [r4, #16]
 801573c:	462a      	mov	r2, r5
 801573e:	4649      	mov	r1, r9
 8015740:	4640      	mov	r0, r8
 8015742:	47d0      	blx	sl
 8015744:	3001      	adds	r0, #1
 8015746:	d0ad      	beq.n	80156a4 <_printf_i+0x160>
 8015748:	6823      	ldr	r3, [r4, #0]
 801574a:	079b      	lsls	r3, r3, #30
 801574c:	d413      	bmi.n	8015776 <_printf_i+0x232>
 801574e:	68e0      	ldr	r0, [r4, #12]
 8015750:	9b03      	ldr	r3, [sp, #12]
 8015752:	4298      	cmp	r0, r3
 8015754:	bfb8      	it	lt
 8015756:	4618      	movlt	r0, r3
 8015758:	e7a6      	b.n	80156a8 <_printf_i+0x164>
 801575a:	2301      	movs	r3, #1
 801575c:	4632      	mov	r2, r6
 801575e:	4649      	mov	r1, r9
 8015760:	4640      	mov	r0, r8
 8015762:	47d0      	blx	sl
 8015764:	3001      	adds	r0, #1
 8015766:	d09d      	beq.n	80156a4 <_printf_i+0x160>
 8015768:	3501      	adds	r5, #1
 801576a:	68e3      	ldr	r3, [r4, #12]
 801576c:	9903      	ldr	r1, [sp, #12]
 801576e:	1a5b      	subs	r3, r3, r1
 8015770:	42ab      	cmp	r3, r5
 8015772:	dcf2      	bgt.n	801575a <_printf_i+0x216>
 8015774:	e7eb      	b.n	801574e <_printf_i+0x20a>
 8015776:	2500      	movs	r5, #0
 8015778:	f104 0619 	add.w	r6, r4, #25
 801577c:	e7f5      	b.n	801576a <_printf_i+0x226>
 801577e:	bf00      	nop
 8015780:	08015d6a 	.word	0x08015d6a
 8015784:	08015d7b 	.word	0x08015d7b

08015788 <memmove>:
 8015788:	4288      	cmp	r0, r1
 801578a:	b510      	push	{r4, lr}
 801578c:	eb01 0402 	add.w	r4, r1, r2
 8015790:	d902      	bls.n	8015798 <memmove+0x10>
 8015792:	4284      	cmp	r4, r0
 8015794:	4623      	mov	r3, r4
 8015796:	d807      	bhi.n	80157a8 <memmove+0x20>
 8015798:	1e43      	subs	r3, r0, #1
 801579a:	42a1      	cmp	r1, r4
 801579c:	d008      	beq.n	80157b0 <memmove+0x28>
 801579e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80157a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80157a6:	e7f8      	b.n	801579a <memmove+0x12>
 80157a8:	4402      	add	r2, r0
 80157aa:	4601      	mov	r1, r0
 80157ac:	428a      	cmp	r2, r1
 80157ae:	d100      	bne.n	80157b2 <memmove+0x2a>
 80157b0:	bd10      	pop	{r4, pc}
 80157b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80157b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80157ba:	e7f7      	b.n	80157ac <memmove+0x24>

080157bc <_realloc_r>:
 80157bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157c0:	4680      	mov	r8, r0
 80157c2:	4614      	mov	r4, r2
 80157c4:	460e      	mov	r6, r1
 80157c6:	b921      	cbnz	r1, 80157d2 <_realloc_r+0x16>
 80157c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80157cc:	4611      	mov	r1, r2
 80157ce:	f7ff bb1f 	b.w	8014e10 <_malloc_r>
 80157d2:	b92a      	cbnz	r2, 80157e0 <_realloc_r+0x24>
 80157d4:	f7ff fca4 	bl	8015120 <_free_r>
 80157d8:	4625      	mov	r5, r4
 80157da:	4628      	mov	r0, r5
 80157dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157e0:	f000 f81b 	bl	801581a <_malloc_usable_size_r>
 80157e4:	4284      	cmp	r4, r0
 80157e6:	4607      	mov	r7, r0
 80157e8:	d802      	bhi.n	80157f0 <_realloc_r+0x34>
 80157ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80157ee:	d812      	bhi.n	8015816 <_realloc_r+0x5a>
 80157f0:	4621      	mov	r1, r4
 80157f2:	4640      	mov	r0, r8
 80157f4:	f7ff fb0c 	bl	8014e10 <_malloc_r>
 80157f8:	4605      	mov	r5, r0
 80157fa:	2800      	cmp	r0, #0
 80157fc:	d0ed      	beq.n	80157da <_realloc_r+0x1e>
 80157fe:	42bc      	cmp	r4, r7
 8015800:	4622      	mov	r2, r4
 8015802:	4631      	mov	r1, r6
 8015804:	bf28      	it	cs
 8015806:	463a      	movcs	r2, r7
 8015808:	f7ff fc7c 	bl	8015104 <memcpy>
 801580c:	4631      	mov	r1, r6
 801580e:	4640      	mov	r0, r8
 8015810:	f7ff fc86 	bl	8015120 <_free_r>
 8015814:	e7e1      	b.n	80157da <_realloc_r+0x1e>
 8015816:	4635      	mov	r5, r6
 8015818:	e7df      	b.n	80157da <_realloc_r+0x1e>

0801581a <_malloc_usable_size_r>:
 801581a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801581e:	1f18      	subs	r0, r3, #4
 8015820:	2b00      	cmp	r3, #0
 8015822:	bfbc      	itt	lt
 8015824:	580b      	ldrlt	r3, [r1, r0]
 8015826:	18c0      	addlt	r0, r0, r3
 8015828:	4770      	bx	lr
	...

0801582c <_init>:
 801582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801582e:	bf00      	nop
 8015830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015832:	bc08      	pop	{r3}
 8015834:	469e      	mov	lr, r3
 8015836:	4770      	bx	lr

08015838 <_fini>:
 8015838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801583a:	bf00      	nop
 801583c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801583e:	bc08      	pop	{r3}
 8015840:	469e      	mov	lr, r3
 8015842:	4770      	bx	lr
